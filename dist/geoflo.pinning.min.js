/*! For license information please see https://sdk.geoflo.pro/geoflo.pinning.min.js.LICENSE.txt */

/*! 
 * GeoFlo SDK
 * Version 1.1.12
 * Generated on: 2025-02-07T20:10:14.640Z
 * Copyright (c) 2022 - present | @solutegrate/geoflo
 */

"use strict";(self.webpackChunk_solutegrate_geoflo=self.webpackChunk_solutegrate_geoflo||[]).push([[38],{115:(e,t,i)=>{i.r(t),i.d(t,{default:()=>n});const n=function(e){var t=this.geoflo;function i(e,i){var n=this;if(!e||!e.length||!i)return!1;var s=new Set(this.coldFeatures.map((function(e){return e.id}))),r=new Set(this.pinnedFeatures.map((function(e){return e.id})));e.forEach((function(e){var a=e.id,u=e.feature,o=e.index;s.has(a)||(n.coldFeatures.push(t.Utilities.cloneDeep(u)),s.add(a));var f=r.has(a)?n.pinnedFeatures.find((function(e){return e.id===a})):u;"Point"===f.geometry.type?f.geometry.coordinates=i:"Polygon"===f.geometry.type?f.geometry.coordinates[0][o]=i:"LineString"===f.geometry.type&&(f.geometry.coordinates[o]=i),r.has(a)||(n.pinnedFeatures.push(t.Utilities.cloneDeep(f)),r.add(a))}))}this.type=e.type,this.coldFeatures=[],this.pinableFeatures=[],this.pinnedFeatures=[],this.activate=function(){this.coldFeatures=[],this.pinableFeatures=[],this.pinnedFeatures=[],this.enabled=!0,t.options.pinning.enable=!0,t.map.getSource(t.statics.constants.sources.PIN).setData(turf.featureCollection([]))},this.deactivate=function(){this.enabled=!1,t.options.pinning.enable=!1,this.resetFeatures(),delete this.buffer,this.coldFeatures=[],this.pinableFeatures=[],this.pinnedFeatures=[]},this.getFeatures=function(){return this.pinnedFeatures.map((function(e){return t.Utilities.cloneDeep(e)}))},this.saveFeatures=function(){var e=this.pinnedFeatures.map((function(e){return t.Utilities.cloneDeep(e)}));return t.addFeatures(e,!0),t.map.getSource(t.statics.constants.sources.PIN).setData(turf.featureCollection([])),this.coldFeatures=[],this.pinableFeatures=[],this.pinnedFeatures=[],e},this.setBuffer=function(e){if(delete this.buffer,!this.enabled)return!1;if(!e||!t.options.pinning.buffer)return!1;var i=turf.buffer(turf.point(e),t.options.pinning.buffer),n=turf.polygon(i.geometry.coordinates);return this.buffer={feature:i,radius:n,coords:e},this.buffer},this.setFeatures=function(e){return!(!this.enabled||!e)&&(this.pinableFeatures=this.getNearByFeatures(e),t.fire("pinning.add",{features:this.pinableFeatures,buffer:this.buffer}),this.pinableFeatures)},this.resetFeatures=function(){if(!this.coldFeatures.length)return!1;t.map.getSource(t.statics.constants.sources.PIN).setData(turf.featureCollection([])),t.addFeatures(this.coldFeatures,!0)},this.updateFeatures=function(e){return!!(this.enabled&&e&&this.pinableFeatures.length)&&(i.call(this,this.pinableFeatures,e.geometry.coordinates),t.hideFeatures(this.coldFeatures.map((function(e){return e.id}))),t.map.getSource(t.statics.constants.sources.PIN).setData(turf.featureCollection(this.pinnedFeatures)),t.pinnedFeatures=t.Utilities.cloneDeep(this.pinableFeatures),t.fire("pinning.update",{feature:t.hotFeature,point:e,pinned:this.pinnedFeatures}),this.pinnedFeatures)},this.getNearByFeatures=function(e){if(!this.enabled||!e)return!1;var i=t.hotFeature?t.hotFeature.id:null,n=t.options.snapping.distance*Math.pow(2,Math.max(1,19-t.map.getZoom()))/1e5,s=this.setBuffer(e);if(!s)return!1;var r=t.getRenderedDrawnFeatures({lng:e[0],lat:e[1]},n),a=[];turf.point(e);return r.forEach((function(e){if(i!==e.id)for(var n=e.geometry.coordinates.flat(1/0),r=0;r<n.length;r+=2){var u=[n[r],n[r+1]];if(s.radius&&turf.booleanWithin(turf.point(u),s.radius)||s.coords&&t.Utilities.isPointEqual(u,s.coords)){a.push({id:e.id||e.properties.id,type:e.properties.type,index:Math.floor(r/2),feature:e});break}}})),a},t.options.pinning.enable&&this.activate()}}}]);