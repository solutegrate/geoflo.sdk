/*!
 * /*!
 *  * GeoFlo SDK
 *  * Version 1.0.11
 *  * Generated on: 2025-02-04T16:07:35.605Z
 *  * /
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Control.js":
/*!************************!*\
  !*** ./src/Control.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Control
 * @description This module is responsible for creating and managing the control buttons in the Geoflo application.
 * @param {Array} controls - An array of control objects to be added to the map.
 * @param {Object} options - An object containing options for the control buttons.
 * @returns {Object} Returns the Control object.
 */

const Control = function (controls, options={}) {
    const geoflo = this.geoflo;

    this.controls = controls;
    this.options = options;

    var rgba = function (hex, alpha) {
        hex = hex.trim();


        if (hex.includes('rgba')) {
            hex = this.hex(hex);
        } else {
            if (!hex || [4, 7].indexOf(hex.length) === -1) { return false }

            hex = hex.substr(1);

            if (hex.length === 3) {
                hex = hex.split('').map(function (el) { return el + el + ''; }).join('');
            }
        }

        var r = parseInt(hex.slice(0, 2), 16),
            g = parseInt(hex.slice(2, 4), 16),
            b = parseInt(hex.slice(4, 6), 16);
        
        return alpha !== undefined ? "rgba(" + r + " " + g + " " + b + " / " + alpha + "%)" : "rgb(" + r + " " + g + " " + b + ")";
    }

    var hex = function (rgba) {
        var a,
            rgb = rgba.replace(/\s/g, '').match(/^rgba?\((\d+),(\d+),(\d+),?([^,\s)]+)?/i),
            alpha = (rgb && rgb[4] || "").trim(),
            hex = rgb ? (rgb[1] | 1 << 8).toString(16).slice(1) + (rgb[2] | 1 << 8).toString(16).slice(1) + (rgb[3] | 1 << 8).toString(16).slice(1) : rgba;

        if (alpha !== "") {
            a = alpha;
        } else {
            a = 1;
        }

        a = ((a * 255) | 1 << 8).toString(16).slice(1)
        hex = hex + a;
        return hex;
    }



    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name enable
     * @description Enables the control buttons.
     * @param {Object} control - The control object to enable.
     * @returns {Object} Returns the control object.
     */
    this.enable = function (position) {
        this.position = position || 'top-center';
        geoflo.map.addControl(this, this.position);
    }

    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name disable
     * @description Disables the control buttons.
     * @returns {Object} Returns the control object.
     */
    this.disable = function () {
        geoflo.map.removeControl(this);
    }



    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name onAdd
     * @description Adds the control buttons to the map.
     * @param {Object} map - The map object to add the control buttons to.
     * @returns {Object} Returns the control object.
     */
    this.onAdd = function(map) {
        if (!this.options) return false;
        if (this.options.attribution) return this.setAttribution(map);
        this.setTheme(options.colors || geoflo.options.colors);
        geoflo.fire('control.add', { control: this, element: this.element });
        return this.element;
    }

    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name onRemove
     * @description Removes the control buttons from the map.
     * @returns {Object} Returns the control object.
     */
    this.onRemove = function() {
        geoflo.fire('control.remove', { element: this.element, control: this });
    }



    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name setAttribution
     * @description Sets the attribution for the control buttons.
     * @returns {Object} Returns the control object.
     */
    this.setAttribution = function () {
        var attr = Attr(geoflo, this.control, options);
        Object.assign(this, attr)

        this.setTheme(options.colors || geoflo.options.colors);
        geoflo.fire('control.add', { control: this, element: this.element });
        return this.element;
    }

    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name setMode
     * @description Sets the mode for the control buttons.
     * @param {String} mode - The mode to set the control buttons to.
     * @returns {Object} Returns the control object.
     */
    this.setMode = function (mode) {
        geoflo.setActiveButton(!mode ? 'select' : mode === 'draw' ? mode : mode)
    }

    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name setTheme
     * @description Sets the theme for the control buttons.
     * @param {Object} colors - The colors to set the theme to.
     * @returns {Object} Returns the control object.
     */
    this.setTheme = function(colors) {
        if (!colors) { return console.error('Control colors not provided!') };

        colors.primaryColor ? document.documentElement.style.setProperty('--' + geoflo.id + '-primary-color', rgba(colors.primaryColor)) : false;
        colors.primaryBackground ? document.documentElement.style.setProperty('--' + geoflo.id + '-primary-background', rgba(colors.primaryBackground)) : false;
        colors.primaryText ? document.documentElement.style.setProperty('--' + geoflo.id + '-primary-text', rgba(colors.primaryText)) : false;
        colors.primaryBorder ? document.documentElement.style.setProperty('--' + geoflo.id + '-primary-border', rgba(colors.primaryBorder)) : false;

        colors.secondaryColor ? document.documentElement.style.setProperty('--' + geoflo.id + '-secondary-color', rgba(colors.secondaryColor)) : false;
        colors.secondaryBackground ? document.documentElement.style.setProperty('--' + geoflo.id + '-secondary-background', rgba(colors.secondaryBackground)) : false;
        colors.secondaryText ? document.documentElement.style.setProperty('--' + geoflo.id + '-secondary-text', rgba(colors.secondaryText)) : false;
        colors.secondaryBorder ? document.documentElement.style.setProperty('--' + geoflo.id + '-secondary-border', rgba(colors.secondaryBorder)) : false;

        geoflo.fire('theme.change', { colors: colors });
        return this.getTheme();
    }

    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name setControl
     * @description Sets the control buttons.
     * @param {Array} controls - The control buttons to set.
     * @returns {Object} Returns the control object.
     */
    this.setControl = function (controls) {
        if (!controls) return false;

        var buttons;

        this.element = document.createElement('div');
        this.element.className = geoflo.id + '-control-wrap';

        this.control = document.createElement('div');
        this.control.className = geoflo.statics.constants.classes.PREDEFINED_CONTROL_BASE + ' ' + geoflo.statics.constants.classes.PREDEFINED_CONTROL_GROUP;

        this.element.appendChild(this.control);

        if (Array.isArray(controls)) {
            buttons = Buttons(this.control, controls);
            Object.assign(this, buttons);
        }
        
        this.enable(buttons.position);
    }


    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name getTheme
     * @description Gets the theme for the control buttons.
     * @returns {Object} Returns the theme for the control buttons.
     */
    this.getTheme = function() {
        return geoflo.options.colors;
    }

    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name getButtons
     * @description Gets the control buttons.
     * @returns {Object} Returns the control buttons.
     */
    this.getButtons = function () {
        return this._buttons;
    }

    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name getControl
     * @description Gets the control buttons.
     * @param {String} id - The id of the control button to get.
     * @returns {Object} Returns the control button.
     */
    this.getControl = function (id) {
        var nodes = this.control.childNodes;
        if (!nodes.length) return;

        var control;

        if (id) nodes.forEach(function(n) { if (n.classList.contains(id)) control = n });
        return control;
    }


    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name showControl
     * @description Shows the control buttons.
     * @param {String} id - The id of the control button to show.
     * @returns {Object} Returns the control button.
     */
    this.showControl = function (id) {
        var control = this.getControl(id);
        if (!control) return false;
        
        control.style.display = this.position.includes('center') ?  'flex' : 'block';
        return control;
    }

    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name hideControl
     * @description Hides the control buttons.
     * @param {String} id - The id of the control button to hide.
     * @returns {Object} Returns the control button.
     */
    this.hideControl = function (id) {
        var control = this.getControl(id);
        if (!control) return false;

        control.style.display = 'none';
        return control;
    }


    this.setControl(controls);

    function Buttons (element, controls) {
        if (!controls || !element) return false;
    
        var classTypes = ['mode', 'feature', 'mouse'];
        var buttonElements = {};
        var buttonOptions = {};
        var activeButton = null;
        var currentControl;
        var position;
        
    
        var currentMapClasses = {
            mode: null,
            feature: null,
            mouse: null
        };
    
        var nextMapClasses = {
            mode: null,
            feature: null,
            mouse: null
        };
    
    
    
        const mouseleave = function (event) {
            if (!geoflo.currentMode) return false;
            geoflo.currentMode.handleOffMap ? geoflo.currentMode.handleOffMap(event) : false;
        }
    
        const mouseover = function (event) {
            if (!geoflo.currentMode) return false;
            geoflo.currentMode.handleOnMap ? geoflo.currentMode.handleOnMap(event) : false;
        }
    
        controls.forEach(function (control) {
            if (!getControlOptions(control)) control.show = false;
            setPosition(control);
            createButtons(element, control);
        })
    
        return {
            setActiveButton: setActiveButton,
            queueMapClasses: queueMapClasses,
            updateMapClasses: updateMapClasses,
            removeButtons: removeButtons,
            getButtonOptions: getButtonOptions,
            getButtonElements: getButtonElements,
            position: position
        };
        
    
        function queueMapClasses(options) {
            nextMapClasses = geoflo.Utilities.extend(nextMapClasses, options);
        }
    
        function updateMapClasses() {
            if (!geoflo.container)
                return;
    
            var classesToRemove = [];
            var classesToAdd = [];
    
            classTypes.forEach(function(type) {
                if (nextMapClasses[type] === currentMapClasses[type])
                    return;
    
                classesToRemove.push(type + '-' + currentMapClasses[type]);
                if (nextMapClasses[type] !== null) {
                    classesToAdd.push(type + '-' + nextMapClasses[type]);
                }
            });
    
            if (classesToRemove.length > 0) {
                var _geoflo$container$classL;
    
                (_geoflo$container$classL = geoflo.container.classList).remove.apply(_geoflo$container$classL, classesToRemove);
            }
    
            if (classesToAdd.length > 0) {
                var _geoflo$container$classL2;
    
                (_geoflo$container$classL2 = geoflo.container.classList).add.apply(_geoflo$container$classL2, classesToAdd);
            }
    
            currentMapClasses = geoflo.Utilities.extend(currentMapClasses, nextMapClasses);
        }
    
    
    
        function createTitle(options) {
            return '' + options.title + (options.key ? ' (' + options.key + ')' : "");
        }
    
        function createButtons (element, control) {
            var buttons = document.createElement('div');
            var group = (control.group ? control.group.toUpperCase() : control.attribution ? 'ATTR' : 'NONE') + '_GROUP';
            
            element.appendChild(buttons);
    
            buttons.className = '' + geoflo.statics.constants.classes[group] + ' ' + control.type;
            buttons.style.display = control.show ? position.includes('center') ?  'flex' : 'block' : 'none';
    
            control.show && control.divider ? element.appendChild(createDivider()) : false;
    
            buttons.addEventListener('mouseover', mouseover);
            buttons.addEventListener('mouseleave', mouseleave);
    
            addButtons(control, buttons);
    
            return buttons;
        }
    
        function createBaseButton(id, options) {
            if (!currentControl || !currentControl.buttons[id]) return false;
    
            var position = options.position;
            var button = options.button || document.createElement('button');
    
            options.key = geoflo.options.keys && geoflo.options.keys[id] ? geoflo.options.keys[id] : options.key;
    
            if (options.title) { button.setAttribute('title', createTitle(options)); }
            options.container.appendChild(button);
    
            options["id"] = id;
            options["button"] = button;
    
            options.add = function (opts={}) {
                this.button.style.display = 'flex';
                this.onAdd ? this.onAdd(opts) : this;
            }
    
            options.remove = function (opts={}) {
                this.button.style.display = 'none';
                this.onRemove ? this.onRemove(opts) : this;
            }
    
            options.activate = function () {
                this.button.classList.remove(options.inactiveClass);
                this.button.classList.add(options.activeClass);
                this.button.classList.add(geoflo.statics.constants.classes.ACTIVE_BUTTON);
                this.activated = true;
            }
    
            options.deactivate = function () {
                button.classList.remove(options.activeClass);
                button.classList.remove(geoflo.statics.constants.classes.ACTIVE_BUTTON);
                button.classList.add(options.inactiveClass);
                this.activated = false;
            }
    
            options.dontShow ? button.style.display = 'none' : false;
    
            buttonElements[id] = button;
            buttonOptions[id] = options;
    
            if (position) {
                position = position.includes('right') ? 'left' :
                position.includes('left') ? 'right' :
                position.includes('bottom') ? 'top' :
                position.includes('top') ? 'bottom' :
                'absolute';
            }
    
            options.container.tooltipPosition = position;
            geoflo.addTooltip(options.container, button, createTitle(options));
            return button;
        }
    
        function createControlButton(id) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    
            var button = createBaseButton(id, options);
            if (!button) return false;
    
            button.className = geoflo.statics.constants.classes.CONTROL_BUTTON + ' ' + options.className;
    
            button.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();

                if (options.onClick) return options.onClick(e.target, options);
    
                if (e.target === activeButton) {
                    deactivateButtons();
                    options.onDeactivate ? options.onDeactivate(options) : false;
                } else if (options.onActivate(options)) {
                    setActiveButton(id);
                }
            }, true);
    
            return button;
        }
    
        function createOptionButton(id) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    
            var button = createBaseButton(id, options);
            if (!button) return false;
    
            button.className = '' + geoflo.statics.constants.classes.CONTROL_BUTTON;
    
            if (geoflo.options[options.name] && geoflo.options[options.name].enable) {
                button.classList.add(options.activeClass);
                button.classList.add(geoflo.statics.constants.classes.ACTIVE_BUTTON);
            } else {
                button.classList.add(options.inactiveClass);
            }
    
            button.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                if (!geoflo.options[options.name]) { geoflo.options[options.name] = {}; }
    
                if (geoflo.options[options.name].enable) {
                    if (options.onDeactivate) options.onDeactivate(options);
                } else {
                    options.onActivate(options);
                }
            }, true);
    
            return button;
        }
    
        function createActionButton(id) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    
            var button = createBaseButton(id, options);
            if (!button) return false;
    
            button.className = geoflo.statics.constants.classes.ACTION_BUTTON + ' ' + options.className;
    
            if (id === 'locate' && geoflo.locate) if (geoflo.locate.control) geoflo.locate.control._container.remove();
    
            button.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                options.onActivate(options);
            }, true);
    
            return button;
        }
    
        function createDivider() {
            var divider = document.createElement('div');
            divider.className = '' + geoflo.statics.constants.classes.DIVIDER;
            return divider;
        }
    
    
        function setPosition (control) {
            if (!position) {
                if (!control.position) throw new Error('The first control needs to have a position')
                position = control.position;
            }
        }
    
    
        function deactivateButtons() {
            if (!activeButton) return;
            activeButton.classList.remove(geoflo.statics.constants.classes.ACTIVE_BUTTON);
            activeButton = null;
        }
    
        function setActiveButton(id) {
            deactivateButtons();
    
            var button = !id && geoflo.editMode ? buttonElements['edit'] : !id ? buttonElements['select'] : id === 'edit' ? buttonElements['select'] : buttonElements[id];
            if (!button) return;
    
            if (button && id !== 'trash') {
                if (button.title.includes('Draw ')) {
                    if (button.title.includes(geoflo.currentMode.type)) {
                        button.classList.add(geoflo.statics.constants.classes.ACTIVE_BUTTON);
                        activeButton = button;
                    }
                } else {
                    button.classList.add(geoflo.statics.constants.classes.ACTIVE_BUTTON);
                }
            }
        }
    
    
        function addButtons(control, buttons) {
            currentControl = control;
    
            if (control.type === 'modes') {
                createControlButton("select", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_SELECT,
                    key: "s",
                    title: 'Select Features',
                    onAdd: function () {
                        if ((geoflo.editMode || geoflo.drawMode)) {
                            geoflo.getButtons('edit').remove();
                            geoflo.getButtons('save').add();
                        } else if (geoflo.hasSelection()) {
                            geoflo.getButtons('save').remove();
                            geoflo.getButtons('edit').add();
                        } else {
                            geoflo.getButtons('save').remove();
                            geoflo.getButtons('edit').remove();
    
                            geoflo.getButtons('undo').remove();
                            geoflo.getButtons('cancel').remove();
                            geoflo.getButtons('redo').remove();
    
                            geoflo.getButtons('import').add();
                            geoflo.getButtons('export').add();
                            geoflo.getButtons('clear').add();
                        }
                    },
                    onActivate: function onActivate() {
                        geoflo.noSelect = false;
                        geoflo.setMode();
                        return true;
                    },
                    onDeactivate: function onDeactivate() {
                        geoflo.noSelect = true;
                    }
                });
    
                createControlButton("edit", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_EDIT,
                    key: "Enter",
                    title: 'Edit Feature',
                    dontShow: true,
                    onAdd: function () {
                        geoflo.getButtons('select').remove();
                        this.button.classList.remove(geoflo.statics.constants.classes.ACTIVE_BUTTON);
                        this.button.style.display = 'flex';
                        this.button.style['background-color'] = geoflo.options.colors.secondaryBackground;
                    },
                    onActivate: function onActivate() {
                        geoflo.editFeature();
                        geoflo.getButtons('save').add();
                    },
                    onDeactivate: function onDeactivate() {
                        geoflo.currentMode.deactivate();
                    },
                    onRemove: function (e) {
                        geoflo.getButtons('save') ? false : createSelect(e);
                    }
                });
    
                createControlButton("save", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_FINSIH,
                    key: "Enter",
                    title: 'Save Edit',
                    dontShow: true,
                    onAdd: function (e) {
                        geoflo.getButtons('select').remove();
                        geoflo.getButtons('edit').remove();
    
                        geoflo.getButtons('import').remove();
                        geoflo.getButtons('export').remove();
                        geoflo.getButtons('clear').remove();
    
                        geoflo.getButtons('undo').add();
                        geoflo.getButtons('cancel').add();
                        geoflo.getButtons('redo').add();
    
                        this.button.style['background-color'] = geoflo.options.colors.secondaryColor;
                    },
                    onActivate: function onActivate(e) {
                        geoflo.options.repeatDraw = false;
                        geoflo.getButtons('repeat').deactivate();
                        geoflo.currentMode.handleClick({ finish: true })
                    }
                });
            } else if (control.type === 'options') {
                createActionButton("import", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_IMPORT,
                    key: "u",
                    title: 'Import Features',
                    onActivate: function onActivate() {
                        return geoflo.loadFeatures();
                    }
                });
        
                createActionButton("export", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_EXPORT,
                    key: "d",
                    title: 'Export Features',
                    onActivate: function onActivate() {
                        return geoflo.saveFeatures();
                    }
                });
    
                createActionButton("clear", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_CLEAR,
                    key: "Delete",
                    title: 'Delete Selected or All Features',
                    onActivate: function onActivate() {
                        geoflo.deleteUserData();
                        geoflo.getButtons('select').add();
                        return true;
                    }
                });
    
                createActionButton("undo", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_UNDO,
                    key: "u",
                    title: 'Undo Edit',
                    dontShow: true,
                    onActivate: function onActivate() {
                        return geoflo.currentMode.handleUndo()
                    }
                });
        
                createActionButton("redo", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_REDO,
                    key: "r",
                    title: 'Redo Edit',
                    dontShow: true,
                    onActivate: function onActivate() {
                        return geoflo.currentMode.handleRedo()
                    }
                });
    
                createActionButton("cancel", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_CANCEL,
                    key: "Escape",
                    title: 'Cancel Edit',
                    dontShow: true,
                    onActivate: function onActivate() {
                        geoflo.options.repeatDraw = false;
                        geoflo.getButtons('repeat').deactivate();
                        return geoflo.cancelEdit();
                    }
                });
            } else if (control.type === 'actions') {
                createOptionButton("snapping", {
                    container: buttons,
                    name: "snapping",
                    title: 'Enable/Disable Snapping',
                    activeClass: geoflo.id + '-snapping-enabled',
                    inactiveClass: geoflo.id + '-snapping-disabled',
                    onActivate: function onActivate() {
                        return geoflo.activateSnapping();
                    },
                    onDeactivate: function onDeactivate() {
                        return geoflo.deactivateSnapping();
                    }
                });
        
                createOptionButton("pinning", {
                    container: buttons,
                    name: "pinning",
                    title: 'Enable/Disable Pinning',
                    activeClass: geoflo.id + '-pinning-enabled',
                    inactiveClass: geoflo.id + '-pinning-disabled',
                    onActivate: function onActivate() {
                        return geoflo.activatePinning();
                    },
                    onDeactivate: function onDeactivate() {
                        return geoflo.deactivatePinning();
                    }
                });
        
                createOptionButton("routing", {
                    container: buttons,
                    name: "routing",
                    title: 'Enable/Disable Routing',
                    activeClass: geoflo.id + '-routing-enabled',
                    inactiveClass: geoflo.id + '-routing-disabled',
                    onActivate: function onActivate() {
                        return geoflo.activateRouting();
                    },
                    onDeactivate: function onDeactivate() {
                        return geoflo.deactivateRouting();
                    }
                });
    
                createOptionButton("exploring", {
                    container: buttons,
                    name: "exploring",
                    title: `Enable/Disable Exploring`,
                    activeClass: geoflo.id + '-exploring-enabled',
                    inactiveClass: geoflo.id + '-exploring-disabled',
                    onActivate: function onActivate() {
                        return geoflo.activateExploring();
                    },
                    onDeactivate: function onDeactivate() {
                        return geoflo.deactivateExploring();
                    }
                });
        
                createOptionButton("painting", {
                    container: buttons,
                    name: "painting",
                    title: 'Enable/Disable Painting',
                    activeClass: geoflo.id + '-painting-enabled',
                    inactiveClass: geoflo.id + '-painting-disabled',
                    onActivate: function onActivate() {
                        return geoflo.activatePainting();
                    },
                    onDeactivate: function onDeactivate() {
                        return geoflo.deactivatePainting();
                    }
                });
            } else if (control.type === 'types') {
                createControlButton("polyline", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_LINE,
                    key: "l",
                    title: 'Draw Polyline',
                    onActivate: function onActivate() {
                        return geoflo.setMode({
                            mode: geoflo.statics.constants.modes.DRAW,
                            type: "Polyline"
                        });
                    },
                    onDeactivate: function onDeactivate() {
                        geoflo.currentMode.deactivate();
                        geoflo.setMode();
                    }
                });
        
                createControlButton("polygon", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_POLYGON,
                    key: "p",
                    title: 'Draw Polygon',
                    onActivate: function onActivate() {
                        return geoflo.setMode({
                            mode: geoflo.statics.constants.modes.DRAW,
                            type: "Polygon"
                        });
                    },
                    onDeactivate: function onDeactivate() {
                        geoflo.currentMode.deactivate();
                        geoflo.setMode();
                    }
                });
        
                createControlButton("rectangle", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_RECTANGLE,
                    key: "r",
                    title: 'Draw Rectangle',
                    onActivate: function onActivate() {
                        return geoflo.setMode({
                            mode: geoflo.statics.constants.modes.DRAW,
                            type: "Rectangle"
                        });
                    },
                    onDeactivate: function onDeactivate() {
                        geoflo.currentMode.deactivate();
                        geoflo.setMode();
                    }
                });
        
                createControlButton("circle", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_POINT,
                    key: "o",
                    title: 'Draw Circle',
                    onActivate: function onActivate() {
                        return geoflo.setMode({
                            mode: geoflo.statics.constants.modes.DRAW,
                            type: "Circle"
                        });
                    },
                    onDeactivate: function onDeactivate() {
                        geoflo.currentMode.deactivate();
                        geoflo.setMode();
                    }
                });
    
                createControlButton("text", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_TEXT,
                    key: "t",
                    title: 'Draw Text',
                    onActivate: function onActivate() {
                        return geoflo.setMode({
                            mode: geoflo.statics.constants.modes.DRAW,
                            type: "Text"
                        });
                    },
                    onDeactivate: function onDeactivate() {
                        geoflo.currentMode.deactivate();
                        geoflo.setMode();
                    }
                });
        
                createControlButton("icon", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_ICON,
                    key: "i",
                    title: 'Draw Icon',
                    onActivate: async function onActivate() {
                        return geoflo.setMode({
                            mode: geoflo.statics.constants.modes.DRAW,
                            type: "Icon"
                        });
                    },
                    onDeactivate: function onDeactivate() {
                        geoflo.currentMode.deactivate();
                        geoflo.setMode();
                    }
                });
            } else if (control.type === 'utils') {
                createControlButton("repeat", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_REPEAT,
                    key: "`",
                    title: 'Repeat Selected Mode',
                    onClick: function (target, options) {
                        geoflo.options.repeatDraw = !geoflo.options.repeatDraw;
                        geoflo.options.repeatDraw ? options.activate() : options.deactivate();
                    }
                });

                createActionButton("zoom", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_ZOOM_IN_FEATURES,
                    key: "x",
                    title: 'Zoom to Extent',
                    onActivate: function onActivate() {
                        return geoflo.zoomToFeatures();
                    }
                });
        
                createActionButton("refresh", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_REFRESH,
                    key: "q",
                    title: 'Refresh',
                    onActivate: function onActivate() {
                        return geoflo.refresh();
                    }
                });
            }
    
            /* createActionButton("delete-snap", {
                container: action2Group,
                className: geoflo.statics.constants.classes.CONTROL_BUTTON_DELETE_SNAP,
                title: 'Delete Snap Layer Features',
                onAction: function onAction() {
                    return geoflo.deleteMeshData();
                }
            }); */
    
            /* createControlButton("cut", {
                container: controlGroup,
                className: geoflo.statics.constants.classes.CONTROL_BUTTON_CUT,
                key: "a",
                title: 'Cut Features',
                onActivate: function onActivate() {
                    return geoflo.setMode(geoflo.statics.constants.modes.CUT);
                }
            }); */
    
            /* createActionButton("combine", {
                container: action2Group,
                className: geoflo.statics.constants.classes.CONTROL_BUTTON_COMBINE_FEATURES,
                title: 'Combine Features',
                key: '+',
                onAction: function onAction() {
                    return geoflo.combineFeatures();
                }
            }); */
    
            /* createActionButton("group-elements", {
                container: action2Group,
                className: geoflo.statics.constants.classes.CONTROL_BUTTON_GROUP_FEATURES,
                key: "g",
                title: 'Group Similar Features',
                onAction: function onAction() {
                    return geoflo.groupFeatures();
                }
            });
    
            createActionButton("ungroup-elements", {
                container: action2Group,
                className: geoflo.statics.constants.classes.CONTROL_BUTTON_UNGROUP_FEATURES,
                key: "G",
                title: 'Ungroup Similar Features',
                onAction: function onAction() {
                    return geoflo.ungroupFeatures();
                }
            }); */
    
            /* createActionButton("create-polygon", {
                container: action2Group,
                className: geoflo.statics.constants.classes.CONTROL_BUTTON_CREATE_POLYGON,
                key: 'p',
                title: 'Create Polygon from Selected Feature',
                onAction: function onAction() {
                    return geoflo.createPolygon();
                }
            }); */
    
            /* createActionButton("hide-selected", {
                container: action2Group,
                className: geoflo.statics.constants.classes.CONTROL_BUTTON_HIDE_SELECTED,
                title: 'Hide Selected Feature',
                onAction: function onAction() {
                    return geoflo.hideFeatures();
                }
            }); */
        }

        function removeButtons() {
            Object.keys(buttonElements).forEach(function(buttonId) {
                var button = buttonElements[buttonId];
    
                if (button.parentNode) {
                    button.parentNode.removeChild(button);
                } else if (button) {
                    button.remove();
                }
    
                delete buttonElements[buttonId];
                delete buttonOptions[buttonId];
            });
        }
    
    
        function getControlOptions (control) {
            if (!control) return false;
            var controls = geoflo.options.controls && typeof geoflo.options.controls === 'object';
            var dontShow = controls ? !geoflo.options.controls[control.type] : false
            return  dontShow || control.dontShow || !geoflo.options.controls ? false : true;
        }
    
        function getButtonOptions() {
            return buttonOptions;
        }
    
        function getButtonElements() {
            return buttonElements;
        }
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Control);

/***/ }),

/***/ "./src/Draw.js":
/*!*********************!*\
  !*** ./src/Draw.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Draw
 * @description This module provides the functionality for drawing features on the map.
 * @returns {Object} The current instance for method chaining.
 * 
 */
const Draw = function () {
    const geoflo = this.geoflo;

    this.id = 'draw';

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name canHandle
	 * @description Checks if the given modeName is equal to the constant mode DRAW.
	 * @param {string} modeName - The name of the mode to be checked.
	 * @returns {boolean} Returns true if the modeName is equal to DRAW, false otherwise.
	 */
    this.canHandle = function (modeName) {
        return geoflo.statics.constants.modes.DRAW === modeName;
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name activate
	 * @description This function activates the drawing mode with the provided options. It sets up the necessary properties and event listeners for drawing features on the map.
	 * @param {Object} options - The options for activating the drawing mode.
	 * @param {Object} [options.feature] - The feature to be edited or drawn.
	 * @param {String} [options.type] - The type of feature to be drawn.
	 * @param {Object} [options.lngLat] - The longitude and latitude coordinates for drawing.
	 * @param {String} [options.id] - The unique identifier for the feature.
	 * @returns {Object} Returns the current instance for method chaining.
	 */
    this.activate = function (options={}) {
        if (this.activated) return false;
        if (geoflo.currentMode.id !== this.id) return options.mode = this.id, geoflo.setMode(options);

        this.activated = true;
        this._handleHistory = this.handleHistory.bind(this);
        this.history = [];
        this.undo = [];

        if (options.feature) options.type = editMode(options.feature);
        geoflo.drawMode = !geoflo.editMode;
        
        var lngLat = options.lngLat;
        delete options.lngLat;

        var newType = this.type = options.type;
        var properties = options.feature ? options.feature.properties : options;
        
        this.properties = Object.assign({}, properties);
        delete this.properties.mode;
        delete this.properties.location;

        const id = options.id || properties.id || URL.createObjectURL(new Blob([])).slice(-36);

        this.properties.id = id;
        this.properties.type = newType;

        geoflo.setButtons();
        geoflo.setActiveButton(newType);
        
        if (geoflo.Utilities.isPoint(geoflo.hotFeature, newType)) this.isPoint = true;

        geoflo.fire('draw.activate', {
            id: id,
            type: newType,
            activated: this.activated,
            editing: geoflo.editMode,
            feature: geoflo.hotFeature || options.feature,
            properties: this.properties
        })

        geoflo.on('source.hot', this._handleHistory);
        if (lngLat) this.handleMove({ lngLat: lngLat });
        geoflo.options.painting.enable || (geoflo.mobile && newType === 'Rectangle') ? geoflo.activatePainting() : false;

        geoflo.refreshMeshData();
        this.updateHotSource();

        setTimeout(function() { geoflo.Features.removeFeatures(id); }, 100);
        return this;
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name deactivate
	 * @description Deactivates the draw feature by canceling the current edit, cleaning up the draw, setting buttons, and handling events.
	 * @param {boolean} cancel - Flag to determine if the edit should be canceled.
	 * @param {boolean} standby - Flag to indicate if the feature is in standby mode.
	 * @param {object} feature - The feature to be deactivated.
	 */
    this.deactivate = function (options={}) {
        if (!this.activated) return false;
        const type = options.type || this.type;
        if (options.cancel) this.cancelEdit(options.standby, options.feature);
        cleanupDraw(this);
        geoflo.setButtons();
        geoflo.off('source.hot', this._handleHistory);
        geoflo.fire('draw.deactivate', { activated: this.activated });
        setTimeout(function() { geoflo.map.getSource(geoflo.statics.constants.sources.SELECT).setData(turf.featureCollection([])); }, 300);
        !geoflo.options.repeatDraw ? geoflo.setMode() : geoflo.setMode({ mode: geoflo.statics.constants.modes.DRAW, type: type });
    }



	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name updateHotSource
	 * @description This function updates the hot source feature with new properties and assigns it to the geoflo.hotFeature. It then updates the data of the VERTEX and HOT sources on the map with the updated feature.
	 * @param {Object} feature - The feature object to be updated.
	 * @param {Object} properties - The new properties to be assigned to the feature.
	 * @returns {Object} The updated hot source feature.
	 */
    this.updateHotSource = function (feature, properties) {
        if (feature) geoflo.hotFeature = feature;
        if (!geoflo.hotFeature || geoflo.overpassDownloading) return;
        geoflo.hotFeature.properties = geoflo.Utilities.assignDeep(geoflo.hotFeature.properties, properties || {});
        geoflo.hotFeature.properties.style = geoflo.hotFeature.properties.style || {};
        geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([geoflo.hotFeature]));
        geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
        return geoflo.hotFeature;
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name deleteVertex
	 * @description Deletes a vertex from the current feature being edited on the map.
	 * @param {number} index - The index of the vertex to be deleted.
	 * @returns {void}
	 */
    this.deleteVertex = function (index) {
        if (geoflo.hotFeature) {
            const coords = geoflo.hotFeature.geometry.coordinates;
            index = index !== undefined ? index : coords.length - 1;

            if (coords.length > 1) {
                coords.splice(index, 1);
                geoflo.lastClick = { coords: coords[coords.length - 1] };

                if (coords.length > 0) {
                    geoflo.snapFeature = turf.point(coords[coords.length - 1]);
                } else {
                    geoflo.snapFeature = null;
                }

                if (coords.length > 1) {
                    geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
                } else {
                    geoflo.hotFeature = null;
                    geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([]));
                }

                geoflo.fire('vertex.delete', { coords: coords, index: index, feature: geoflo.hotFeature })
            }

            if (geoflo.lastMouseEvent) {
                geoflo.currentMode.handleMove ? geoflo.currentMode.handleMove(geoflo.lastMouseEvent) : false;
            }
        } else if (geoflo.snapFeature) {
            geoflo.snapFeature = null;
            geoflo.lastClick = null;
            geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
        }
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name getFeature
	 * @description Retrieves the hot feature from the context.
	 * @returns {any} The hot feature stored in the context.
	 */
    this.getFeature = function () {
        return geoflo.hotFeature;
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name selectFeature
	 * @description Selects a feature based on the provided ID.
	 * @param {string} id - The ID of the feature to be selected.
	 * @returns {boolean} Returns false if no ID is provided, otherwise returns the result of selecting the feature.
	 */
    this.selectFeature = function (id) {
        if (!id) return false;
        geoflo.setMode();
        return geoflo.currentMode.selectFeature(id);
    }

	/** 
	 * @function
     * @memberof module:geoflo.Draw
	 * @name saveEdit
	 * @description This function saves the edited feature in the map.
	 * @param {Object} feature - The feature to be saved.
	 * @returns {boolean} - Returns true if the feature is successfully saved, false otherwise.
	 */
    this.saveEdit = function (feature) {
        var hot = geoflo.hotFeature;
        if (!hot) return false;

        var type = hot.properties.type || feature.properties.type || this.type;
        feature = feature || hot;

        this.savingEdit = true;
        return finishDraw(type, feature);
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name cancelEdit
	 * @description This function cancels the current editing operation by setting the 'cancelled' flag to true. If the 'feature' parameter is not provided or does not have a 'type' property, it sets 'geoflo.hotFeature' to null and finishes the draw process. It then sets the 'standby' property, updates 'geoflo.hotFeature', fires a 'draw.cancel' event with the feature, and returns the result of 'finishDraw()'.
	 * @param {boolean} standby - The standby value to set.
	 * @param {object} feature - The feature being edited.
	 * @returns {any} The result of the 'finishDraw()' function.
	 */
    this.cancelEdit = function (standby, feature) {
        this.cancelled = true;
        if (!feature || !feature.properties.type) return geoflo.hotFeature = null, finishDraw();
        this.standby = standby;
        geoflo.hotFeature = feature;
        geoflo.fire('draw.cancel', { feature: feature });
        return finishDraw();
    }



	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleDown
	 * @description Handles the mouse or touch down event on the map. Updates the mouse/touch position, adds a vertex if allowed, and sets features for pinning.
	 * @param {Object} event - The event object containing information about the mouse or touch event.
	 * @returns {void}
	 */
    this.handleDown = function (event) {
        var point;

        geoflo.mouseIsDown = [event.lngLat.lng, event.lngLat.lat];

        if (event.touch) {
            geoflo.touchDown = true;
            point = turf.point(geoflo.mouseIsDown);
            onVertex(getVertex(point));
        }
        
        if (geoflo.canAddVertex) {
            point = addVertex(geoflo.canAddVertex, event);
            return onVertex(getVertex(point), true);
        }

        geoflo.Pinning.setFeatures(geoflo.snappedVertex);
        startIdleTime();
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleUp
	 * @description This function is responsible for handling the mouse up event during drawing and editing operations on the map. It checks various conditions and triggers corresponding actions based on the context and user interactions.
	 * @param {Event} event - The mouse up event object.
	 * @returns {void}
	 */
    this.handleUp = function (event) {
        geoflo.mouseIsDown = false;
        geoflo.touchDown = false;

        if (geoflo.Painting.enabled) return geoflo.Painting.handleUp(event);
        if (geoflo.addedVertexOnLine && !geoflo.dragMoving) return;
        if (event.touch && geoflo.touchMoving) return geoflo.dragMoving = false;

        if (geoflo.Utilities.isPoint(geoflo.hotFeature) && geoflo.snappedVertex) return geoflo.editMode ? this.saveEdit() : finishDraw(this.type);

        if (geoflo.snappedVertex && geoflo.dragMoving && !geoflo.mapMoving && this.type !== 'Rectangle') {
            geoflo.gamepadDrag = event.gamepad;

            var isLastIndex = geoflo.Utilities.isLastIndex(geoflo.dragIndex, geoflo.hotFeature);
            isLastIndex = isLastIndex ? isLastIndex : geoflo.Utilities.isPolygon(geoflo.hotFeature) && geoflo.dragIndex == 0 ? true : false;
           
            var coords = geoflo.Utilities.getLastIndexCoords(geoflo.hotFeature);

            onVertex(getVertex(turf.point(geoflo.snappedVertex)));
            this.updateHotSource();
            if (isLastIndex) setTimeout(function() { geoflo.lastClick = { coords: coords } }, 100)
        }
        
        geoflo.pinableFeatures = [];
        geoflo.mouseIsIdle = false;
        addText.call(this, this.type, geoflo.snapFeature);
        geoflo.refreshMeshData();
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleClick
	 * @description This function processes the click event for drawing features on the map. It determines the action based on the event type and context state, such as editing mode, touch input, vertex addition, and gamepad interaction.
	 * @param {Object} event - The event object containing information about the click event.
	 * @returns {Object} The updated event object or the result of the drawing action.
	 */
    this.handleClick = function (event) {
        if (event.finish) return geoflo.editMode ? this.saveEdit() : finishDraw(this.type);
        if (event.touch && geoflo.touchMoving) return geoflo.touchMoving = false, geoflo.Snapping.setFeature(), this.updateHotSource();
        if (event.touch) geoflo.touchClick = true;

        if (geoflo.addedVertexOnLine) {
            geoflo.Snapping.setFeature();
            this.updateHotSource();
            onVertex(getVertex(geoflo.addedVertexOnLine));
            this.handleDrag(event);
            geoflo.dragMoving = false;
            geoflo.gamepadDrag = false
            geoflo.mouseIsIdle = false;
            return event;
        }

        if (geoflo.gamepadDrag) return geoflo.gamepadDrag = false;

        if (geoflo.editMode && (this.type === 'Polygon' || this.type === 'Text')) return;

        if (!this.firstClick && !geoflo.drawStarted) {
            geoflo.drawStarted = true;
            geoflo.fire('draw.start', { type: this.type, editing: geoflo.editMode, coords: [event.lngLat.lng, event.lngLat.lat] });
        } else {
            geoflo.fire('vertex.add', { type: this.type, coords: [event.lngLat.lng, event.lngLat.lat] });
        }

        var lastPoint = geoflo.closestPoint || { coords: [event.lngLat.lng, event.lngLat.lat] };
        var point = turf.point(lastPoint.coords);

        point.properties = this.properties;
        point.source = this.source;

        geoflo.lastMove = lastPoint.coords.length > 1 ? { lat: lastPoint.coords[lastPoint.coords.length-1][1], lng: lastPoint.coords[lastPoint.coords.length-1][0] } : false;        

        if (!geoflo.startPoint) {
            if (this.type === 'Rectangle') {
                geoflo.startPoint = lastPoint.coords;

                geoflo.hotFeature = turf.polygon([[
                    geoflo.startPoint,
                    [event.lngLat.lng, event.lngLat.lat],
                    [geoflo.startPoint[0], event.lngLat.lat],
                    geoflo.startPoint
                ]]);
    
                return geoflo.Utilities.setProperty(geoflo.hotFeature, 'type', this.type);
            } else if (this.type === 'Polygon') {
                geoflo.startPoint = lastPoint.coords;
            }
        }
        
        if (!geoflo.snapFeature && lastPoint) geoflo.snapFeature = lastPoint;

        if (needsToFinish(this.type, lastPoint.coords)) return finishDraw(this.type, point);
        
        this.firstClick = geoflo.firstClick ? false : { coords: lastPoint.coords };

        geoflo.lastClick = lastPoint;
        geoflo.firstClick = geoflo.firstClick ? geoflo.firstClick : { coords: lastPoint.coords };
        geoflo.Snapping.setFeature();
        addText.call(this, this.type);
        geoflo.Exploring.setFeatures(lastPoint.coords, { set: true });
        delete geoflo.touchClick;
        return this.updateHotSource();
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleMove
	 * @description This function determines the behavior based on the event type and context state. It handles various actions such as dragging, painting, snapping, routing, and snapping to points.
	 * @param {Object} event - The event object containing information about the mouse or touch event.
	 * @returns {boolean} Returns false in certain conditions to prevent default behavior.
	 */
    this.handleMove = function (event) {
        if (event.touch && geoflo.mouseIsDown) geoflo.touchMoving = true;
        if (geoflo.overpassDownloading) return false;
        if (geoflo.mouseIsDown && geoflo.canAddVertex) return false;
        if (geoflo.canDragMove && geoflo.snappedVertex && geoflo.mouseIsDown) return this.handleDrag(event);
        if (geoflo.mouseIsDown && geoflo.Painting.enabled) return this.handlePainting(event);
        if (event.touch && geoflo.touchMoving) return geoflo.snapFeature = false;

        var button = !event.originalEvent ? false : event.originalEvent.buttons !== undefined ? event.originalEvent.buttons : event.originalEvent.which;
        if (button === 1) return false;

        var calculateRoute = geoflo.Routing.enabled;
        if (event.originalEvent && event.originalEvent.altKey) calculateRoute = false;

        var snapToPoint = geoflo.Snapping.enabled;
        if (event.originalEvent && event.originalEvent.shiftKey) snapToPoint = false;

        var evtCoords = [event.lngLat.lng, event.lngLat.lat];
        var isPoint = geoflo.Utilities.isPoint(geoflo.hotFeature);
        var editPolygon = geoflo.editMode && (this.type === 'Polygon' || this.type === 'Rectangle');
        var point = turf.point(evtCoords);
        var snapFeature = null;

        if (editPolygon) {
            snapFeature = point;
        } else if (snapToPoint) {
            snapFeature = geoflo.Snapping.setClosest(evtCoords, isPoint);
        } else if (!isPoint) {
            snapFeature = geoflo.Snapping.updateFeature(evtCoords);
        } else if (isPoint) {
            snapFeature = point;
        }

        if (calculateRoute) snapFeature = geoflo.Routing.getClosest() || snapFeature;
        if (!snapFeature) snapFeature = point;

        geoflo.Snapping.addFeature(snapFeature, this.properties, editPolygon);
        onVertex(getVertex(point));
        
        if (!snapFeature && this.isPoint) delete this.isPoint;
        if (editPolygon && calculateRoute) geoflo.map.getSource(geoflo.statics.constants.sources['ROUTE']).setData(turf.featureCollection([]));

        if (this.type === 'Rectangle') return this.handleRectangle(event);
        if (this.type === 'Icon') return this.handleIcon(event, geoflo.snapFeature);
        if (this.type === 'Text') return this.handleText(event, geoflo.snapFeature);
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleDrag
	 * @description This function is responsible for handling the drag event of a vertex on the map. It updates the position of the vertex based on the user's interaction and triggers various actions accordingly.
	 * @param {Object} event - The event object containing information about the drag event.
	 * @returns {boolean} Returns false if the drag index is not valid.
	 */
    this.handleDrag = function (event) {
        var validIndex = geoflo.dragIndex > -1;
        
        if (!validIndex) {
            offVertex();
            if (geoflo.mouseIsDown && geoflo.Painting.enabled) this.handlePainting(event);
            return false;
        }

        !event.gamepad ? event.originalEvent.stopPropagation() : false;

        geoflo.dragMoving = true;
        geoflo.lastDragMove = 0;
        geoflo.snappedVertex = [event.lngLat.lng, event.lngLat.lat];
        geoflo.bypassRouting = true; //!event.gamepad ? event.originalEvent.altKey : false;
        geoflo.bypassSnapping = !event.gamepad ? event.originalEvent.shiftKey : false;
        geoflo.lastIndex = geoflo.Utilities.isLastIndex(geoflo.dragIndex, geoflo.hotFeature);

        var vertex = turf.point(geoflo.snappedVertex);

        if (geoflo.lastIndex) geoflo.lastClick = { coords: geoflo.snappedVertex };

        if (this.type === 'Circle' || this.type === 'Icon' || this.type === 'Image') {
            if (!geoflo.Painting.enabled) geoflo.hotFeature.geometry.coordinates = geoflo.snappedVertex;
        } else {
            var isLastIndex = geoflo.Utilities.isLastIndex(geoflo.dragIndex, geoflo.hotFeature);
            geoflo.hotFeature.geometry.coordinates[geoflo.dragIndex] = geoflo.snappedVertex;

            if (this.type === 'Polygon') {
                if (isLastIndex) geoflo.hotFeature.geometry.coordinates[0] = geoflo.snappedVertex;
                if (geoflo.dragIndex == 0) geoflo.hotFeature.geometry.coordinates[geoflo.hotFeature.geometry.coordinates.length -1] = geoflo.snappedVertex;
            }
        }

        geoflo.Utilities.setProperty(geoflo.hotFeature, 'type', this.type);
        geoflo.Utilities.setProperty(vertex, 'type', this.type);
        geoflo.map.getSource(geoflo.statics.constants.sources.ROUTE).setData(turf.featureCollection([]));
        geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
        geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
        geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([vertex]));
        geoflo.fire('vertex.drag', { type: this.type, coords: [event.lngLat.lng, event.lngLat.lat], feature: geoflo.hotFeature, vertex: vertex });
        geoflo.Pinning.updateFeatures();
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleTouch
	 * @description This function is responsible for handling touch events and triggering corresponding actions.
	 * @param {Event} event - The touch event object.
	 * @returns {void}
	 */
    this.handleTouch = function (event) {
        event.touch = true;

        if (event.type === 'touchstart') {
            this.handleDown(event);
        } else if (event.type === 'touchend') {
            this.handleUp(event);
            this.handleClick(event);
        } else if (event.type === 'touchmove') {
            this.handleMove(event);
        }
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleOffMap
	 * @description This function is triggered when an off-map event occurs and clears the data of a specific source on the map.
	 * @param {Event} event - The event object triggering the function.
	 */
    this.handleOffMap = function (event) {
        if (geoflo.map.getSource(geoflo.statics.constants.sources.SNAP)) geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleOnMap
	 * @description This function updates the data of the SNAP source on the map with the snapFeature.
	 * @param {Event} event - The event triggering the function.
	 */
    this.handleOnMap = function (event) {
        if (geoflo.map.getSource(geoflo.statics.constants.sources.SNAP) && geoflo.snapFeature) geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([geoflo.snapFeature]));
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handlePainting
	 * @description This function is triggered when painting on the map. It disables drag pan, sets the map class to 'painting', and updates the feature coordinates.
	 * @param {Object} event - The event object triggering the function.
	 * @returns {boolean} Returns false if mouse is not down or no coordinates are available, otherwise updates the feature coordinates.
	 */
    this.handlePainting = function (event) {
        if (!geoflo.mouseIsDown) return false;
        geoflo.map.dragPan.disable();
        geoflo.setMapClass('painting');

        var snapCoords = geoflo.snapFeature && !geoflo.Painting.feature;
        var coords = event.lngLat && event.lngLat.lng ? [event.lngLat.lng, event.lngLat.lat] : false;
        if (snapCoords) coords = geoflo.snapFeature.geometry.coordinates;

        if (!coords) return false;
        return geoflo.Painting.updateFeature(coords);
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleRectangle
	 * @description Handles the creation and manipulation of a rectangle feature on a map.
	 * @param {Object} event - The event object triggering the function.
	 * @returns {void}
	 */
    this.handleRectangle = function (event) {
        if (geoflo.editMode && geoflo.hotFeature) geoflo.startPoint = geoflo.hotFeature.geometry.coordinates[0][0];
        if (!geoflo.startPoint) return;
        if (!geoflo.dragMoving) geoflo.Utilities.setProperty(geoflo.hotFeature, 'type', this.type);
        geoflo.dragMoving = true;

        var coords = geoflo.snapFeature ? geoflo.snapFeature.geometry.coordinates : [event.lngLat.lng, event.lngLat.lat];

        if (geoflo.dragIndex > -1) {
            var startPoint = geoflo.dragIndex == 0 || geoflo.dragIndex == 4 ? 4 : geoflo.dragIndex;
            var endPoint = startPoint == 1 ? 3 : startPoint == 2 ? 4 : startPoint == 3 ? 1 : 2;
            var leftPoint = endPoint == 1 ? 4 : endPoint == 2 ? 1 : endPoint == 3 ? 2 : 3
            var rightPoint = leftPoint == 1 ? 3 : leftPoint == 2 ? 4 : leftPoint == 3 ? 1 : 2;

            updateCoordinate(geoflo.hotFeature, "0." + startPoint, coords[0], coords[1]);
            updateCoordinate(geoflo.hotFeature, "0." + leftPoint, coords[0], geoflo.startPoint[1]);
            updateCoordinate(geoflo.hotFeature, "0." + rightPoint, geoflo.startPoint[0], coords[1]);
            updateCoordinate(geoflo.hotFeature, "0." + endPoint, geoflo.startPoint[0], geoflo.startPoint[1] );
        } else {
            updateCoordinate(geoflo.hotFeature, "0.1", coords[0], geoflo.startPoint[1]);
            updateCoordinate(geoflo.hotFeature, "0.2", coords[0], coords[1]);
            updateCoordinate(geoflo.hotFeature, "0.3", geoflo.startPoint[0], coords[1]);
            updateCoordinate(geoflo.hotFeature, "0.4", geoflo.startPoint[0], geoflo.startPoint[1] );
        }

        geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
        geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([geoflo.hotFeature]));
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleText
	 * @description Handles text input events and logs relevant properties.
	 * @param {Event} event - The event object triggering the function.
	 * @param {string} feature - The feature to be handled.
	 */
    this.handleText = function (event, feature) {
        console.log('handleText', this.properties, geoflo.snapFeature);
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleIcon
	 * @description Handles the icon based on the event and feature provided.
	 * @param {Event} event - The event triggering the function.
	 * @param {Object} feature - The feature object to be handled.
	 */
    this.handleIcon = function (event, feature) {
        console.log('handleIcon', this.properties, geoflo.snapFeature);
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleContext
	 * @description Handles the context of dragging and moving a feature vertex.
	 * @param {Event} event - The event triggering the context handling.
	 * @returns {void}
	 */
    this.handleContext = function (event) {
        if (!geoflo.canDragMove || !geoflo.snappedVertex) return;
        
        var validIndex = geoflo.dragIndex > -1;
        if (!validIndex) return;

        geoflo.hotFeature.geometry.coordinates.splice(geoflo.dragIndex, 1);

        geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
        geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([geoflo.hotFeature]));
        geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleHistory
	 * @description Handles the history of features in the current mode.
	 * @param {Object} event - The event triggering the history update.
	 * @returns {void}
	 */
    this.handleHistory = function handleHistory (event) {
        if (geoflo.dragMoving) return;

        var history = geoflo.currentMode.history;
        var date = new Date();
        
        var features = event.detail.data.features;
        if (!features || !features.length) return;

        var feature = geoflo.Utilities.cloneDeep(features[0]);
        feature.historyDate = date;
        history.push(feature);

        geoflo.fire('feature.history', { type: geoflo.currentMode.type, feature: feature, history: history });
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleUndo
	 * @description This function is responsible for undoing the last action performed in the application. It retrieves the history and undo arrays from the current mode, pops the last feature from the history, sets the undo flag to true for the feature, updates the hotFeature, pushes the feature to the undo array, and updates the map source data with the hotFeature.
	 * @returns {void}
	 */
    this.handleUndo = function () {
        return alert("UNDER DEVELOPMENT");
        var history = geoflo.currentMode.history;
        var undo = geoflo.currentMode.undo;

        var feature = history.pop();

        feature.undo = true;
        geoflo.hotFeature = feature;

        undo.push(geoflo.hotFeature);
        geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleRedo
	 * @description Handles the redo functionality (currently under development).
	 * @returns {void}
	 */
    this.handleRedo = function () {
        return alert("UNDER DEVELOPMENT");
        var redo = false
    }






    function editMode (feature) {
        var type = geoflo.Features.getType(feature);
        if (!type) return alert('No Feature Type Found');

        const id = feature.id;
    
        geoflo.currentMode.type = type;
        geoflo.currentMode.source = feature.source;
        geoflo.editMode = true;
        geoflo.hotFeature = feature;
    
        geoflo.Utilities.setProperty(geoflo.hotFeature, 'type', type);
        geoflo.Utilities.setProperty(geoflo.hotFeature, 'edit', true);

        geoflo.map.getSource(geoflo.statics.constants.sources.SELECT).setData(turf.featureCollection([]));
    
        if (type === 'Polygon') {
            geoflo.hotFeature = turf.polygonToLine(geoflo.hotFeature);
        }
        
        if (type === 'Circle' || type === 'Icon' || type === 'Image') {
            geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([]));
        } else if (type === 'Text') {
            geoflo.map.getSource(geoflo.statics.constants.sources.HOTTEXT).setData(turf.featureCollection([geoflo.hotFeature]));
            addText.call(geoflo.currentMode, type, geoflo.hotFeature);
        } else {
            geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
            geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([geoflo.hotFeature]));
        }

        var coords = geoflo.Utilities.isPoint(geoflo.hotFeature) ? geoflo.hotFeature.geometry.coordinates : geoflo.hotFeature.geometry.coordinates[geoflo.hotFeature.geometry.coordinates.length - 1];
        geoflo.lastClick = { coords: coords };
        geoflo.firstClick = { coords: coords };
        return geoflo.currentMode.type;
    }

    function finishDraw (type, point, text) {
        var feature;
        var cancelled = geoflo.currentMode.cancelled;

        if (geoflo.editMode && !geoflo.currentMode.savingEdit && !cancelled) return geoflo.currentMode.saveEdit(point);
    
        if (cancelled || !type) {
            finishText();

            if (geoflo.hotFeature) {
                geoflo.removeSelection();
                geoflo.removeFeature(geoflo.hotFeature.id, true);
                geoflo.addFeatures([geoflo.hotFeature], true);
            }

            geoflo.Pinning.resetFeatures();

            if (!geoflo.editMode) geoflo.fire('draw.cancel', { cancel: true, feature: geoflo.hotFeature });
            return false;
        } else if (type === 'Text' && !text) {
            return addText.call(geoflo.currentMode, type, point);
        } else if (geoflo.hotFeature) {
            if (geoflo.Utilities.isPoint(geoflo.hotFeature)) {
                var coords = Array.isArray(geoflo.hotFeature.geometry.coordinates[0]) ?
                geoflo.hotFeature.geometry.coordinates[0] :
                [geoflo.hotFeature.geometry.coordinates[0], geoflo.hotFeature.geometry.coordinates[1]]
    
                point = geoflo.Painting.enabled || geoflo.currentMode.savingEdit ? point : turf.point(coords);
                feature = point;
            } else if (geoflo.Utilities.isPolygon(geoflo.hotFeature, type)) {
                geoflo.hotFeature.geometry.type = "Polygon";

                if (type === 'Rectangle') {
                    geoflo.endPoint ? updateCoordinate(geoflo.hotFeature, "0.2", geoflo.endPoint[0], geoflo.endPoint[1]) : false;
                } else {
                    geoflo.hotFeature.geometry.coordinates.push(geoflo.hotFeature.geometry.coordinates[0]);
                    geoflo.hotFeature.geometry.coordinates = [geoflo.hotFeature.geometry.coordinates];
                }
            } else if (geoflo.Utilities.isLineString(geoflo.hotFeature, type)) {
                if (type === 'Polygon') {
                    geoflo.hotFeature.geometry.type = type;
                    geoflo.hotFeature.geometry.coordinates.push(geoflo.hotFeature.geometry.coordinates[0]);
                    geoflo.hotFeature.geometry.coordinates = [geoflo.hotFeature.geometry.coordinates];
                } else if (type === 'Rectangle') {
                    geoflo.endPoint ? updateCoordinate(geoflo.hotFeature, "0.2", geoflo.endPoint[0], geoflo.endPoint[1]) : false;
                }
            } else if (point) {
                feature = point;
            }
    
            if (geoflo.Painting.enabled) {
                var tolerance = geoflo.options.painting.tolerance;
    
                geoflo.hotFeature = type === 'Circle' ? geoflo.hotFeature : turf.simplify(geoflo.hotFeature, {
                    mutate: true,
                    tolerance: typeof tolerance === 'function' ? tolerance(geoflo.map) : tolerance,
                    highQuality: true
                });

                if (geoflo.startPoint) geoflo.hotFeature.geometry.coordinates[0] = geoflo.startPoint;
            }
        } else if (point) {
            feature = point;
        }
    
        feature = geoflo.Exploring.currentFeature || feature || geoflo.hotFeature;
        if (!feature || !geoflo.currentMode.activated) return geoflo.currentMode.deactivate();

        feature = geoflo.Features.addFeature(feature, geoflo.currentMode.source, geoflo.currentMode.properties);
        geoflo.fire('draw.finish', { feature: feature, pinned: geoflo.Pinning.getFeatures(), type: type, editing: geoflo.editMode });
        return geoflo.currentMode.deactivate();
    }

    function finishText (e, type, feature) {
        var marker = geoflo.textMarker;
        if (!marker) return false;

        var element = marker.getElement();
        var text = element.value;
    
        if (!text.length || geoflo.currentMode.cancelled) return marker.remove(), geoflo.textInput = false, addText.call(this, type, feature);
    
        var coords = [element.getAttribute('lng'), element.getAttribute('lat')];
        type = type || element.getAttribute('type');

        geoflo.currentMode.properties.text = text;
        
        var feature = {
            "type": "Feature",
            "properties": {
                type: type,
                text: text
            },
            "geometry": {
              "type": "Point",
              "coordinates": coords
            }
        }
        
        marker.remove();
        finishDraw(type, feature, text);
    }

    function cleanupDraw (mode) {
        geoflo.map.getSource(geoflo.statics.constants.sources.ROUTE).setData(turf.featureCollection([]));
        geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
        geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([]));
        geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([]));
        geoflo.map.getSource(geoflo.statics.constants.sources.HOTTEXT).setData(turf.featureCollection([]));
        geoflo.map.getSource(geoflo.statics.constants.sources.SELECT).setData(turf.featureCollection([]));
    
        geoflo.deleteMeshData();
    
        mode.history = [];
        mode.undo = [];
        mode.type = null;
        mode.cancelled = false;
        mode.activated = false;
        mode.savingEdit = false;

        geoflo.editMode = false;
        geoflo.drawMode = false;

        delete geoflo.startPoint;
        delete geoflo.lastClick;
        delete geoflo.firstClick;
        delete geoflo.endPoint;
        delete geoflo.snapFeature;
        delete geoflo.hotFeature;
        delete geoflo.drawStarted;
        delete geoflo.dragMoving;
        delete geoflo.editing;
        delete geoflo.textMarker;
        delete geoflo.textInput;
        delete geoflo.touchMoving;
        delete geoflo.touchDown;
        delete geoflo.pinningFeatures;
        delete geoflo.pinnedFeatures;
        delete geoflo.canDragMove;
        delete geoflo.canAddVertex;
        delete geoflo.dragIndex;
        delete geoflo.addedVertexOnLine;
        delete geoflo.snappedVertex;
    }

    function getVertex (point) {
        var hotFeature = geoflo.hotFeature;
        var vertex;
    
        if (geoflo.dragMoving) return false;
        if (!hotFeature) return false;
    
        var closest = geoflo.Snapping.getClosest(point.geometry.coordinates);
        var coords = closest.coords;
        var type = closest.point ? closest.point.type : false;
        
        if (!type) return false;
    
        if (!coords && type === 'linepoint' && closest.point.borders) {
            var segment = turf.lineString([closest.point.border1, closest.point.border2]);
            vertex = turf.along(segment, closest.point.distance1);
            coords = vertex.geometry.coordinates;
        }
    
        if (!coords) return false;

        point = turf.point(coords); 

        var isLineVertex = geoflo.Utilities.isLineString(hotFeature) && type === 'vertex';
        var nearestVertex = isLineVertex ? turf.nearestPointOnLine(hotFeature, point) : false;
           
        vertex = nearestVertex || point;
        vertex.properties.type = type;
    
        geoflo.fire('vertex.find', { vertex: vertex, feature: geoflo.hotFeature, closest: closest });
        return vertex;
    }
    
    function addVertex (point, event) {
        var feature;
    
        if (event && point) {
            var coords = geoflo.hotFeature.geometry.coordinates;
            var line = turf.lineString(coords);
            var start = turf.point(coords[0])
            var split = turf.lineSlice(start, point, line);
            var index = split.geometry.coordinates.length - 1;
            var vertex = split.geometry.coordinates[index];
    
            point = turf.point(vertex);
            
            line.geometry.coordinates.splice.apply(line.geometry.coordinates, [index, 0].concat([vertex]));
    
            line = turf.cleanCoords(line);
            feature = turf.truncate(line, { precision: 6, coordinates: 2, mutate: true });
            geoflo.hotFeature.geometry.coordinates = feature.geometry.coordinates;
            geoflo.hotFeature = geoflo.Utilities.cloneDeep(geoflo.hotFeature);
        } else if (point) {
            geoflo.canDragMove = true;
            geoflo.canAddVertex = point;
        }
    
        return point;
    }
    
    function onVertex (vertex, add) {
        var hotFeature = geoflo.hotFeature;
        var dragIndex = null;
    
        if (geoflo.dragMoving) return offVertex();
        if (!hotFeature || !vertex) return offVertex();
        
        geoflo.updateMeshData();
    
        var type = vertex.properties.type;
        var index = vertex.properties.index || vertex.properties.index == 0;
    
        dragIndex = index ? vertex.properties.index : geoflo.currentMode.type === 'Circle' || geoflo.currentMode.type === 'Icon' || geoflo.currentMode.type === 'Image' ? 0 : false;
    
        geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([vertex]));
        geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([geoflo.hotFeature]));
    
        if (type === 'linepoint') return addVertex(vertex);
    
        geoflo.map.dragPan.disable();
        geoflo.dragIndex = dragIndex;
        geoflo.addedVertexOnLine = add ? vertex : false;
        geoflo.canAddVertex = false;
        geoflo.canDragMove = true;
        geoflo.snappedVertex = vertex.geometry.coordinates;
        geoflo.Pinning.setFeatures(geoflo.snappedVertex);
        geoflo.fire('vertex.on', { vertex: vertex, index: dragIndex, feature: geoflo.hotFeature });
    }
    
    function offVertex () {
        if (geoflo.mouseIsDown && geoflo.Painting.enabled) return false;

        if (geoflo.hotFeature && geoflo.snappedVertex) {
            geoflo.lastIndex ? geoflo.lastClick = { coords: geoflo.snappedVertex } : false;
            geoflo.fire('vertex.off', { vertex: false, index: geoflo.dragIndex, feature: geoflo.hotFeature })
        }
    
        geoflo.map.dragPan.enable();
        geoflo.dragMoving = false;
        geoflo.canDragMove = false;
        geoflo.snappedVertex = null;
        geoflo.dragIndex = -1;
        geoflo.mouseIsDown = geoflo.touchDown || false;
        geoflo.pinableFeatures = [];
        geoflo.lastIndex = false;
        geoflo.canAddVertex = false;
        geoflo.addedVertexOnLine = false
    }

    function addText (type, feature) {
        feature = feature || geoflo.hotFeature;
        if (!feature) return false;

        type = type || feature.properties.type;
        feature.properties.type = type;

        if (type !== 'Text') return //geoflo.Features.setText(feature);
        if (geoflo.textInput) return finishText(false, type, feature);
        
        var lngLat = { lng: feature.geometry.coordinates[0], lat: feature.geometry.coordinates[1] }
        var el = geoflo.textInput = document.createElement('input');

        el.value = feature.properties.text || '';
        el.className = 'text-marker';

        el.setAttribute('contenteditable', 'true');
        el.setAttribute('autocorrect', 'off');
        el.setAttribute('spellcheck', 'false');
        el.setAttribute('placeholder', 'Press Enter or Select Button When Done...');
        el.setAttribute('type', type);
        el.setAttribute('lng', lngLat.lng);
        el.setAttribute('lat', lngLat.lat);
        
        geoflo.textMarker = new mapboxgl.Marker(el).setLngLat(lngLat).addTo(geoflo.map);
        geoflo.textMarker.setOffset([0, -25])

        el.addEventListener("submit", finishText);
        el.addEventListener("keydown", inputText);
        el.addEventListener("paste", handlePaste);
        el.focus();

        geoflo.fire('text.add', { feature: feature, marker: geoflo.textMarker, type: type });
    
        function inputText (e) {
            if ([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {
                e.stopPropagation();
            } else if(e.keyCode === 13) {
                e.preventDefault();
                finishText(e);
            }
        }

        function handlePaste (e) {
            var clipboardData, pastedData;
            e.stopImmediatePropagation();
            e.preventDefault();
            clipboardData = e.clipboardData || window.clipboardData;
            pastedData = clipboardData.getData('text/plain').slice(0, CHAR_LIMIT);
            e.target.innerText = pastedData;
        }
    }

    function updateCoordinate (f, t, e, n) {
        var o = t.split(".")
            , r = parseInt(o[0], 10)
            , i = parseInt(o[1], 10);
        void 0 === f.geometry.coordinates[r] && (f.geometry.coordinates[r] = []),
        f.geometry.coordinates[r][i] = [e, n]
    }

    function updateRectangle (event, type) {
        if (type !== 'Rectangle') return false;
        
        var geometry = geoflo.hotFeature.geometry;
        var coords = geometry.coordinates;
        const coordType = geometry.type;
        //coords = coordType === 'Linestring' ? coords : coords[0];
    
        if (geoflo.currentVertexPosition === 2) {
            const getpXY3 = calculatepXY3(geometry, event, type);
            if (getpXY3[2]) return updateCoordinate(`0.${geoflo.currentVertexPosition + 1}`, getpXY3[2][0], getpXY3[2][1]);
            return geoflo.hotFeature;
        }
    
        updateCoordinate(`0.${geoflo.currentVertexPosition}`, event.lngLat.lng, event.lngLat.lat);
        geoflo.currentVertexPosition++;
        updateCoordinate(`0.${geoflo.currentVertexPosition}`, event.lngLat.lng, event.lngLat.lat);
    
        function calculatepXY3 (geometry, event, type) {
            var coords = geometry.coordinates;
        
            const pXY0 = coords[0];
            const pXY0_3857 = geoflo.Utilities.degrees2meters(pXY0);
            const pXY1 = coords[1];
            const pXY1_3857 = geoflo.Utilities.degrees2meters(pXY1);
            let pXY2_3857 = geoflo.Utilities.degrees2meters([event.lngLat.lng, event.lngLat.lat]);
            const mouse_3857 = geoflo.Utilities.degrees2meters([event.lngLat.lng, event.lngLat.lat]);
        
            if (pXY0_3857[0] === pXY1_3857[0]) {
                pXY2_3857 = [mouse_3857[0], pXY1_3857[1]];
            } else if (pXY0_3857[1] === pXY1_3857[1]) {
                pXY2_3857 = [pXY1_3857[0], mouse_3857[1]];
            } else {
                const vector1_3857 = (pXY1_3857[1] - pXY0_3857[1]) / (pXY1_3857[0] - pXY0_3857[0]);
                const vector2_3857 = -1.0 / vector1_3857;
        
                if (Math.abs(vector2_3857) < 1) {
                    pXY2_3857[1] = vector2_3857 * (mouse_3857[0] - pXY1_3857[0]) + pXY1_3857[1];
                } else {
                    pXY2_3857[0] = pXY1_3857[0] + (pXY2_3857[1] - pXY1_3857[1]) / vector2_3857;
                }
            }
        
            const vector_3857 = [pXY1_3857[0] - pXY0_3857[0], pXY1_3857[1] - pXY0_3857[1]];
            const pXY3_3857 = [pXY2_3857[0] - vector_3857[0], pXY2_3857[1] - vector_3857[1]];
            const pXY2G = geoflo.Utilities.meters2degrees(pXY2_3857);
            const pXY3G = geoflo.Utilities.meters2degrees(pXY3_3857);
        
            return [coords, pXY2G, pXY3G];
        }
    
        return false;
    }

    function startIdleTime () {
        var ready = setInterval(function() {
            if (geoflo.mouseIsDown) {
                geoflo.lastDragMove += 1;
                checkIdleMove();
            } else {
                geoflo.lastDragMove = 0;
                geoflo.mouseIsIdle = false;
                clearInterval(ready);
            }
        }, 1);
    }
    
    function checkIdleMove () {
        if (geoflo.lastDragMove < geoflo.options.pinning.idle) return geoflo.mouseIsIdle = false, false;
        geoflo.mouseIsIdle = true;
        geoflo.Snapping.setVertex();
        geoflo.Pinning.updateFeatures();
        return true;
    }

    function needsToFinish (type, coords) {
        var types = ['Circle', 'Icon', 'Text', 'Image'];
        if (!type) return true;
        if (types.includes(type)) return true;
        if (type === 'Rectangle' && geoflo.startPoint) return geoflo.endPoint = coords, true;
        if (type === 'Polygon' && geoflo.snappedVertex && geoflo.startPoint && geoflo.Utilities.isPointEqual(geoflo.startPoint, geoflo.snappedVertex)) return true;
        if (geoflo.snappedVertex && geoflo.Utilities.isLastIndex(geoflo.dragIndex, geoflo.hotFeature)) return true
        if (geoflo.lastClick && geoflo.Utilities.isPointEqual(geoflo.lastClick.coords, coords)) return true;
        return false;
    }

    function constrainFeatureMovement (geojsonFeatures, delta) {
        // "inner edge" = a feature's latitude closest to the equator
        let northInnerEdge = geoflo.statics.constants.LAT_MIN;
        let southInnerEdge = geoflo.statics.constants.LAT_MAX;
        // "outer edge" = a feature's latitude furthest from the equator
        let northOuterEdge = geoflo.statics.constants.LAT_MIN;
        let southOuterEdge = geoflo.statics.constants.LAT_MAX;
    
        let westEdge = geoflo.statics.constants.LNG_MAX;
        let eastEdge = geoflo.statics.constants.LNG_MIN;
    
        geojsonFeatures.forEach((feature) => {
            //const bounds = extent(feature); Need to add Turf bounds here
            const featureSouthEdge = bounds[1];
            const featureNorthEdge = bounds[3];
            const featureWestEdge = bounds[0];
            const featureEastEdge = bounds[2];
            if (featureSouthEdge > northInnerEdge) northInnerEdge = featureSouthEdge;
            if (featureNorthEdge < southInnerEdge) southInnerEdge = featureNorthEdge;
            if (featureNorthEdge > northOuterEdge) northOuterEdge = featureNorthEdge;
            if (featureSouthEdge < southOuterEdge) southOuterEdge = featureSouthEdge;
            if (featureWestEdge < westEdge) westEdge = featureWestEdge;
            if (featureEastEdge > eastEdge) eastEdge = featureEastEdge;
        });
    
    
        // These changes are not mutually exclusive: we might hit the inner
        // edge but also have hit the outer edge and therefore need
        // another readjustment
        const constrainedDelta = delta;
    
        if (northInnerEdge + constrainedDelta.lat > geoflo.statics.constants.LAT_RENDERED_MAX) {
            constrainedDelta.lat = geoflo.statics.constants.LAT_RENDERED_MAX - northInnerEdge;
        }
        if (northOuterEdge + constrainedDelta.lat > geoflo.statics.constants.LAT_MAX) {
            constrainedDelta.lat = geoflo.statics.constants.LAT_MAX - northOuterEdge;
        }
        if (southInnerEdge + constrainedDelta.lat < geoflo.statics.constants.LAT_RENDERED_MIN) {
            constrainedDelta.lat = geoflo.statics.constants.LAT_RENDERED_MIN - southInnerEdge;
        }
        if (southOuterEdge + constrainedDelta.lat < geoflo.statics.constants.LAT_MIN) {
            constrainedDelta.lat = geoflo.statics.constants.LAT_MIN - southOuterEdge;
        }
        if (westEdge + constrainedDelta.lng <= geoflo.statics.constants.LNG_MIN) {
            constrainedDelta.lng += Math.ceil(Math.abs(constrainedDelta.lng) / 360) * 360;
        }
        if (eastEdge + constrainedDelta.lng >= geoflo.statics.constants.LNG_MAX) {
            constrainedDelta.lng -= Math.ceil(Math.abs(constrainedDelta.lng) / 360) * 360;
        }
    
        return constrainedDelta;
    }

    function calculateOrientedAnglePolygon (feature) {
        var geometry = feature.geometry;
        var coords = geometry.coordinates;
        const coordType = geometry.type;
        coords = coordType === 'Linestring' ? coords : coords[0];
    
        const pXY0 = coords[0];
        const pXY0_3857 = geoflo.Utilities.degrees2meters(pXY0);
        const pXY1 = coords[1];
        const pXY1_3857 = geoflo.Utilities.degrees2meters(pXY1);
        const angleStdGraus = Math.atan2(pXY1_3857[1] - pXY0_3857[1], pXY1_3857[0] - pXY0_3857[0]) * 180 / Math.PI;
    
        let angleSudGraus = -1.0 * (angleStdGraus + 90);
        const angle = angleSudGraus < 0 ? angleSudGraus + 360 : angleSudGraus;
        return parseFloat((angle).toFixed(2));
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Draw);

/***/ }),

/***/ "./src/Events.js":
/*!***********************!*\
  !*** ./src/Events.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const events = [
    'map.enable',
    'map.disable',
    'map.ready',
    'map.redraw',
    'map.refresh',
    'mode.change',
    'theme.change',
    'sources.add',
    'source.add',
    'source.hot',
    'layers.add',
    'layers.remove',
    'layer.add',
    'control.add',
    'control.remove',
    'features.zoom',
    'features.add',
    'features.delete',
    'features.update',
    'features.import',
    'features.export',
    'features.offset',
    'feature.add',
    'feature.delete',
    'feature.select',
    'feature.deselect',
    'feature.update',
    'feature.history',
    'select.load',
    'select.add',
    'select.remove',
    'select.activate',
    'select.deactivate',
    'draw.activate',
    'draw.deactivate',
    'draw.start',
    'draw.finish',
    'draw.cancel',
    'mesh.load',
    'text.add',
    'icon.add',
    'vertex.find',
    'vertex.on',
    'vertex.off',
    'vertex.add',
    'vertex.drag',
    'vertex.dragsnap',
    'vertex.delete',
    'overpass.add',
    'snapping.activate',
    'snapping.deactivate',
    'snapping.add',
    'snapping.refresh',
    'snapping.delete',
    'pinning.activate',
    'pinning.deactivate',
    'pinning.add',
    'pinning.update',
    'routing.activate',
    'routing.deactivate',
    'routing.add',
    'painting.activate',
    'painting.deactivate',
    'painting.start',
    'painting.update',
    'gamepad.init',
    'gamepad.add',
    'gamepad.remove',
    'gamepad.hold',
    'gamepad.press',
    'gamepad.release',
    'gamepad.connect',
    'gamepad.disconnect',
    'locate.on',
    'locate.off',
    'locate.update'
]

/**
 * @mixin
 * @memberof module:geoflo
 * @name Events
 * @description This module handles various map and user interaction events for the geoflo application.
 * @param {Object} geoflo - The geoflo instance to which the events are bound.
 * @returns {Object} An object containing methods to add and remove event listeners.
 * @function addEventListeners - Adds event listeners to the map and other elements.
 * @function removeEventListeners - Removes event listeners from the map and other elements.
 */

const Events = function (geoflo) {
    /**
     * @function
     * @memberof module:geoflo.Events
     * @name mapMoveStart
     * @description Handles the `movestart` event on the map.
     * @param {Object} event - The event object containing map movement details.
     */
    const mapMoveStart = function (event) {
        geoflo.mapMoving = event;
        if (geoflo.settingExtent) return;
        if (geoflo.locate) geoflo.locate.onMapMove(event);
        geoflo.setIcon(event);
    };

    /**
     * @function
     * @memberof module:geoflo.Events
     * @name mapMoving
     * @description Handles the `move` event on the map, updating icons and tracking movements.
     * @param {Object} event - The event object containing map movement details.
     */
    const mapMoving = function (event) {
        geoflo.mapMoving = event;
        if (geoflo.settingExtent) return;
        geoflo.setIcon(event);
        geoflo.setCenterMarker();
        geoflo.locate && geoflo.locate.following ? geoflo.setMapClass('disable') : false;
    };

    /**
     * @function
     * @memberof module:geoflo.Events
     * @name mapMoveEnd
     * @description Handles the `moveend` event on the map, updating icons and tracking movements.
     * @param {Object} event - The event object containing map movement details.
     */
    const mapMoveEnd = function (event) {
        geoflo.mapMoving = false;
        if (geoflo.settingExtent) return;
        geoflo.onMapMove(event);
        if (geoflo.locate) geoflo.locate.onMapMove(event);
        geoflo.setIcon(event);
    };

    /**
     * @function
     * @memberof module:geoflo.Events
     * @name mouseMove
     * @description Handles the `mousemove` event on the map, updating icons and tracking movements.
     * @param {Object} event - The event object containing mouse movement details.
     */
    const mouseMove = function (event) {
        var painting = geoflo.options.painting && geoflo.options.painting.enable;
        painting = painting && geoflo.currentMode && geoflo.currentMode.id === 'draw';
        
        geoflo.locate && geoflo.locate.following ? geoflo.setMapClass('disable') :
        geoflo.dragMoving ? geoflo.setMapClass('grabbing') :
        geoflo.addingVertexOnLine || geoflo.canAddVertex ? geoflo.setMapClass('pointer') :
        geoflo.canDragMove ? geoflo.setMapClass('grab') :
        painting? geoflo.setMapClass('painting') :
        geoflo.setMapClass('pointer');

        geoflo.lastMouseEvent = event;
        if (!geoflo.currentMode) return;
        geoflo.currentMode.handleMove ? geoflo.currentMode.handleMove(event) : false;
    };

    /**
     * @function
     * @memberof module:geoflo.Events
     * @name mouseDown
     * @description Handles the `mousedown` event on the map, updating icons and tracking movements.
     * @param {Object} event - The event object containing mouse movement details.
     */
    const mouseDown = function (event) {
        var painting = geoflo.options.painting && geoflo.options.painting.enable;
        painting = painting && geoflo.currentMode && geoflo.currentMode.id === 'draw';
        
        geoflo.locate && geoflo.locate.following ? geoflo.setMapClass('disable') :
        painting? geoflo.setMapClass('painting') :
        geoflo.dragMoving ? geoflo.setMapClass('grabbing') :
        geoflo.addingVertexOnLine ? geoflo.setMapClass('grabbing') :
        geoflo.canDragMove ? geoflo.setMapClass('grab') :
        geoflo.lastClick ? geoflo.setMapClass('grabbing') :
        geoflo.setMapClass('pointer');
        
        geoflo.mouseIsDown = [event.lngLat.lng, event.lngLat.lat];
        geoflo.currentMode.handleDown ? geoflo.currentMode.handleDown(event) : false;
    };    
    
    /**
     * @function
     * @memberof module:geoflo.Events
     * @name mouseUp
     * @description Handles the `mouseup` event on the map, updating icons and tracking movements.
     * @param {Object} event - The event object containing mouse movement details.
     */
    const mouseUp = function (event) {
        geoflo.mouseIsDown = false;
        geoflo.locate && geoflo.locate.following ? geoflo.setMapClass('disable') : geoflo.setMapClass('pointer');
        geoflo.currentMode.handleUp ? geoflo.currentMode.handleUp(event) : false;
    };

    
    /**
     * @function
     * @memberof module:geoflo.Events
     * @name mouseClick
     * @description Handles the `click` event on the map, updating icons and tracking movements.
     * @param {Object} event - The event object containing mouse movement details.
     */
    const mouseClick = async function (event) {
        if (event.type.includes('preclick')) return geoflo.currentMode.handlePreclick ? geoflo.currentMode.handlePreclick(event) : false;
        geoflo.currentMode.handleClick ? geoflo.currentMode.handleClick(event) : false;
    };

    
    /**
     * @function
     * @memberof module:geoflo.Events
     * @name mouseDrag
     * @description Handles the `drag` event on the map, updating icons and tracking movements.
     * @param {Object} event - The event object containing mouse movement details.
     */
    const mouseDrag = function (event) {
        geoflo.locate && geoflo.locate.following ? geoflo.setMapClass('disable') :
        geoflo.dragMoving ? geoflo.setMapClass('grabbing') :
        geoflo.canDragMove ? geoflo.setMapClass('grab') :
        geoflo.setMapClass('move');

        geoflo.currentMode.handleDrag ? geoflo.currentMode.handleDrag(event) : false;
    };

    /**
     * @function
     * @memberof module:geoflo.Events
     * @name mouseleave
     * @description Handles the `mouseleave` event on the map, updating icons and tracking movements.
     * @param {Object} event - The event object containing mouse movement details.
     */
    const mouseleave = function (event) {
        geoflo.currentMode.handleOffMap ? geoflo.currentMode.handleOffMap(event) : false;
    };

    /**
     * @function
     * @memberof module:geoflo.Events
     * @name mouseover
     * @description Handles the `mouseover` event on the map, updating icons and tracking movements.
     * @param {Object} event - The event object containing mouse movement details.
     */
    const mouseover = function (event) {
        geoflo.currentMode.handleOnMap ? geoflo.currentMode.handleOnMap(event) : false;
    };

    /**
     * @function
     * @memberof module:geoflo.Events
     * @name keypress
     * @description Handles the `keypress` event on the map, updating icons and tracking movements.
     * @param {Object} event - The event object containing keypress details.
     */
    const keypress = function (event) {
        if (geoflo.textMarker) return;
        
        console.log("keycode: ", event.keyCode, " =>", event.key, " | Code:", event.code, " Event:", event);
        const buttonOptions = geoflo.getButtons();

        let keyHandled = false;

        Object.keys(buttonOptions).forEach((buttonId) => {
            const option = buttonOptions[buttonId];
            const key = geoflo.options.keys[buttonId];

            if (key === event.key) {
                option.button.click();
                keyHandled = true;
            } else if (key === event.keyCode) {
                option.button.click();
                keyHandled = true;
            } else if (option.keycode && option.keycode === event.keyCode) {
                option.button.click();
                keyHandled = true;
            }
        });

        if (geoflo.options.commands) {
            geoflo.options.commands.forEach(function (c) {
                if (c.key === event.keyCode || c.key === event.key || c.key === event.code) {
                    if (!c.command || typeof c.command !== 'function') return;
                    c.command(event, geoflo, c);
                    keyHandled = true;
                }
            })
        }

        if (keyHandled) return keyHandled;

        if (event.key.includes('Arrow')) {}

        geoflo.currentKeyPress = event.key;

        switch (event.code) {
            case "Enter": {
                geoflo.setMode();
                break;
            }
            case "NumpadEnter": {
                geoflo.setMode();
                break;
            }
            case "Escape": {
                geoflo.hotFeature = null;
                geoflo.setMode();
                break;
            }
            case "Home": {
                geoflo.moveSelectedFeatures(1);
                break;
            }
            case "End": {
                geoflo.moveSelectedFeatures(-1);
                break;
            }
            case "Delete": {
                if (geoflo.mode === geoflo.statics.constants.modes.SELECT) {
                    if (geoflo.hasSelection()) { geoflo.removeSelection(); }
                } else if (geoflo.mode === geoflo.statics.constants.modes.DRAW) {
                    geoflo.currentMode.deleteVertex();
                }
                break;
            }
        }
    };

    /**
     * @function
     * @memberof module:geoflo.Events
     * @name keyrelease
     * @description Handles the `keyrelease` event on the map, updating icons and tracking movements.
     * @param {Object} event - The event object containing keypress details.
     */
    const keyrelease = function (event) {
        console.log("keyrelease: ", event);
        geoflo.currentKeyPress = false;
    };

    /**
     * @function
     * @memberof module:geoflo.Events
     * @name touchstart
     * @description Handles the touchstart event by delegating to the current mode's handleTouch method if it exists.
     * @param {Event} event - The touchstart event object.
     */
    const touchstart = function (event) {
        geoflo.currentMode.handleTouch ? geoflo.currentMode.handleTouch(event) : false;
    };

    /**
     * @function
     * @name touchend
     * @memberof module:geoflo.Events
     * @description Handles the touchend event by invoking the handleTouch method of the current mode if it exists.
     *
     * @param {Event} event - The touchend event object.
     * @returns {boolean} Returns false if the handleTouch method does not exist; otherwise, it returns undefined.
     */
    const touchend = function (event) {
        geoflo.currentMode.handleTouch ? geoflo.currentMode.handleTouch(event) : false;
    };
    
    /**
     * @function
     * @name touchmove
     * @memberof module:geoflo.Events
     * @description Handles the touchmove event by invoking the handleTouch method of the current mode if it exists.
     *
     * @param {Event} event - The touchmove event object.
     * @returns {boolean} Returns false if the handleTouch method does not exist.
     */
    const touchmove = function (event) {
        geoflo.currentMode.handleTouch ? geoflo.currentMode.handleTouch(event) : false;
    };

    /**
     * @function
     * @name touchcancel
     * @memberof module:geoflo.Events
     * @description Handles the touch cancel event by invoking the handleTouch method of the current mode if it exists.
     *
     * @param {Event} event - The touch cancel event object.
     * @returns {boolean} Returns false if the handleTouch method does not exist; otherwise, it returns the result of the handleTouch method.
     */
    const touchcancel = function (event) {
        geoflo.currentMode.handleTouch ? geoflo.currentMode.handleTouch(event) : false;
    };

    /**
     * @function
     * @name gamepadconnected
     * @memberof module:geoflo.Events
     * @description Handles the event when a gamepad is connected and adds it to the geoflo instance.
     *
     * @param {Event} event - The event object containing information about the connected gamepad.
     * @returns {void} This function does not return a value.
     */
    const gamepadconnected = function (event) {
        geoflo.addGamepad(event.gamepad || event.detail.gamepad);
    };

    /**
     * @function
     * @name gamepaddisconnected
     * @memberof module:geoflo.Events
     * @description Handles the event when a gamepad is disconnected and removes it from the geoflo system.
     *
     * @param {Event} event - The event object containing information about the disconnected gamepad.
     * @returns {void} This function does not return a value.
     */
    const gamepaddisconnected = function (event) {
        geoflo.removeGamepad(event.gamepad || event.detail.gamepad);
    };

    /**
     * @function
     * @name handleOrientation
     * @memberof module:geoflo.Events
     * @description Updates the orientation of the geoflo object based on the device's orientation event.
     *
     * @param {Event} event - The orientation event containing alpha, beta, and gamma values.
     * @returns {void} This function does not return a value.
     */
    const handleOrientation = function (event) {
        geoflo.updateOrientation({
            alpha: event.alpha,
            beta: event.beta,
            gamma: event.gamma
        })
    };

    /**
     * @function
     * @name dragStart
     * @memberof module:geoflo.Events
     * @description Handles the drag start event for an element.
     *
     * @param {Event} event - The event object representing the drag start event.
     * @returns {void} This function does not return a value.
     */
    const dragStart = function (event) {
        //if (geoflo.locate && geoflo.locate.following) return event.originalEvent.preventDefault();
    };

    /**
     * @function
     * @name rotatePitch
     * @memberof module:geoflo.Events
     * @description Adjusts the map's pitch based on the provided event, setting the map class to 'grabbing', updating the icon, and repositioning the center marker.
     *
     * @param {Object} event - The event object that contains information about the interaction.
     * @returns {void} This function does not return a value.
     */
    const rotatePitch = function (event) {
        geoflo.setMapClass('grabbing');
        geoflo.setIcon(event);
        geoflo.setCenterMarker({ transform: true });
    };



    /**
     * @function
     * @name fireEvent
     * @memberof module:geoflo.Events
     * @description Triggers a custom event on the geoflo map based on the provided event object.
     *
     * @param {Object} event - The event object containing details about the event.
     * @param {string} event.type - The type of the event, which includes the action and target information.
     * @param {Object} event.detail - Additional details associated with the event.
     * @returns {void} This function does not return a value.
     */
    const fireEvent = function fireEvent (event) {
        const name = event.type.split(':')[1];
        
        const detail = {
            data: event.detail,
            type: name.split('.')[0],
            action: name.split('.')[1],
            target: geoflo,
        }

        const details = { name: name, detail: detail };
        geoflo.map.fire(geoflo.id, details);
    }

    /**
     * @function
     * @name contextMenu
     * @memberof module:geoflo.Events
     * @description Handles the context menu event by invoking the current mode's context handling function if it exists.
     *
     * @param {Event} event - The event object representing the context menu event.
     * @returns {boolean} Returns false if the current mode does not have a context handler.
     */
    const contextMenu = function (event) {
        geoflo.currentMode.handleContext ? geoflo.currentMode.handleContext(event) : false;
    }

    /**
     * @function
     * @name sourceData
     * @memberof module:geoflo.Events
     * @description Processes the source data from an event and triggers an action based on the source ID.
     *
     * @param {Object} event - The event object containing source data.
     * @param {string} event.sourceDataType - The type of the source data.
     * @param {string} event.sourceId - The ID of the source.
     * @param {Object} event.source - The source object containing data.
     * @param {string} event.type - The type of the event.
     * @returns {boolean} Returns false if the source data type is invalid or if the source ID is not present; otherwise, it triggers an event based on the source ID.
     */
    const sourceData = function (event) {
        if (!event.sourceDataType || !event.sourceDataType === 'content' || !event.sourceId) return false;
        const id = event.sourceId;

        const detail = {
            id: id,
            data: event.source.data,
            type: event.type,
            target: geoflo,
        }

        id === geoflo.statics.constants.sources.HOT ? geoflo.fire('source.hot', detail) : false;
    }

    

    /**
     * @function
     * @name addEventListeners
     * @memberof module:geoflo.Events
     * @description Attaches various event listeners to the map and container for handling user interactions and map events.
     *
     * @returns {void} This function does not return a value.
     */
    function addEventListeners () {
        geoflo.map.on("movestart", mapMoveStart);
        geoflo.map.on("move", mapMoving);
        geoflo.map.on("moveend", mapMoveEnd);
        geoflo.map.on("mousemove", mouseMove);

        geoflo.map.on('preclick', mouseClick);
        geoflo.map.on('click', mouseClick);
        geoflo.map.on('tap', mouseClick);

        geoflo.map.on('dragstart', dragStart);
        geoflo.map.on('drag', mouseDrag);
        geoflo.map.on('mousedown', mouseDown);
        geoflo.map.on('mouseup', mouseUp);

        geoflo.map.on('rotatestart', rotatePitch);
        geoflo.map.on('pitchstart', rotatePitch);
        geoflo.map.on('rotate', rotatePitch);
        geoflo.map.on('pitch', rotatePitch);

        geoflo.map.on('touchstart', touchstart);
        geoflo.map.on('touchend', touchend);
        geoflo.map.on('touchmove', touchmove);
        geoflo.map.on('touchcancel', touchcancel);

        geoflo.map.on('contextmenu', contextMenu);
        geoflo.map.on('sourcedata', sourceData);

        events.forEach(function(event) { geoflo.map.on(geoflo.id + ':' + event, fireEvent); })

        geoflo.container.addEventListener('keydown', keypress);
        geoflo.container.addEventListener('keyup', keyrelease);
        geoflo.container.addEventListener('mouseover', mouseover);
        geoflo.container.addEventListener('mouseleave', mouseleave);

        window.addEventListener("gamepadconnected", gamepadconnected);
        window.addEventListener("gamepaddisconnected", gamepaddisconnected);
        window.addEventListener("deviceorientation", handleOrientation, true);
    }

    /**
     * @function
     * @name removeEventListeners
     * @memberof module:geoflo.Events
     * @description Removes various event listeners from the map and container to prevent further interactions.
     *
     * @returns {void} This function does not return a value.
     */
    function removeEventListeners () {
        geoflo.map.off("movestart", mapMoveStart);
        geoflo.map.off("move", mapMoving);
        geoflo.map.off("moveend", mapMoveEnd);
        geoflo.map.off("mousemove", mouseMove);

        geoflo.map.off('preclick', mouseClick);
        geoflo.map.off('click', mouseClick);
        geoflo.map.off('tap', mouseClick);

        geoflo.map.off('dragstart', dragStart);
        geoflo.map.off('drag', mouseDrag);
        geoflo.map.off('mousedown', mouseDown);
        geoflo.map.off('mouseup', mouseUp);

        geoflo.map.off('rotatestart', rotatePitch);
        geoflo.map.off('pitchstart', rotatePitch);

        geoflo.map.off('touchstart', touchstart);
        geoflo.map.off('touchend', touchend);
        geoflo.map.off('touchmove', touchmove);
        geoflo.map.off('touchcancel', touchcancel);
        
        geoflo.map.off('contextmenu', contextMenu);
        geoflo.map.off('sourcedata', sourceData);

        events.forEach(function(event) { geoflo.map.off(geoflo.id + ':' + event, fireEvent); })

        geoflo.container.removeEventListener('keydown', keypress);
        geoflo.container.removeEventListener('mouseover', mouseover);
        geoflo.container.removeEventListener('mouseleave', mouseleave);

        window.removeEventListener("gamepadconnected", gamepadconnected);
        window.removeEventListener("gamepaddisconnected", gamepaddisconnected);
        window.removeEventListener("deviceorientation", handleOrientation, true);
    }

    return {
        addEventListeners,
        removeEventListeners
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Events);

/***/ }),

/***/ "./src/Exploring.js":
/*!**************************!*\
  !*** ./src/Exploring.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Exploring
 * @description This mixin provides the exploring functionality for the GeoFlo application. It allows users to explore features on the map by creating a buffer around the feature and snapping to nearby features.
 * @param {Object} mode - The mode object containing the type of mode.
 * @returns {Object} The Exploring object.
 */
const Exploring = function (mode) {
    const geoflo = this.geoflo;
    this.type = mode.type;

	/**
     * Activates the exploring functionality by enabling the 'exploring' option.
     * @function
     * @name activate
     * @memberof module:geoflo.Exploring
     * @description Activates by setting the 'enabled' property to true and enabling the 'exploring' option.
     * @returns {void}
     */
    this.activate = function () {
        this.enabled = true;
        geoflo.options['exploring'].enable = true;
    }

	/**
	 * @function
     * @memberof module:geoflo.Exploring
	 * @name deactivate
	 * @description This function sets the 'enabled' and 'currentMatch' properties to false, and disables the 'exploring' option in the context.
	 */
    this.deactivate = function () {
        this.enabled = false;
        this.currentMatch = false;
        geoflo.options['exploring'].enable = false;
    }


	/**
	 * @function
     * @memberof module:geoflo.Exploring
	 * @name setFeatures
	 * @description This function sets features on the map based on the provided coordinates and options. It calculates the buffer based on the map zoom level and retrieves features within the buffer area. If routing is enabled, it calculates the route between two points.
	 * @param {Array<number>} coords - The coordinates to set features around.
	 * @param {Object} [options={}] - Additional options for setting features.
	 * @returns {boolean} Returns false if the function is not executed successfully.
	 */
    this.setFeatures = function (coords, options={}) {
        if (geoflo.mapMoving || !this.enabled || geoflo.currentMode.id !== 'draw') return false;
        
        if (!geoflo.Routing.enabled) {
            if (geoflo.hotFeature) geoflo.hotFeature.geometry.coordinates.pop();
            var fromPoint = geoflo.currentMode.firstClick || !geoflo.hotFeature ? geoflo.firstClick.coords : geoflo.hotFeature.geometry.coordinates[geoflo.hotFeature.geometry.coordinates.length - 1];
            var coords = [fromPoint, coords];
            if (geoflo.Utilities.isPointEqual(coords[0], coords[1])) return false;
            return this.getRoute(coords, options);
        }

        if (geoflo.map.getZoom() < geoflo.options.exploring.minZoom) return alert(`Zoom must be lower than ${geoflo.options.exploring.minZoom}`);

        var buffer = options.buffer || ((geoflo.options.exploring.buffer * Math.pow(2, Math.max(1, 19 - geoflo.map.getZoom()))) / 100);
        var polygon = turf.bboxPolygon([ geoflo.map.getBounds().getWest(), geoflo.map.getBounds().getSouth(), geoflo.map.getBounds().getEast(), geoflo.map.getBounds().getNorth() ]);

        if (coords) polygon = turf.polygon(turf.buffer(turf.point(coords), buffer).geometry.coordinates);

        geoflo.map.getSource(geoflo.statics.constants.sources['SNAP']).setData(turf.featureCollection([]));
        geoflo.map.getSource(geoflo.statics.constants.sources['ROUTE']).setData(turf.featureCollection([]));
        geoflo.map.getSource(geoflo.statics.constants.sources['VERTEX']).setData(turf.featureCollection([polygon]));

        this.getFeatures(turf.bbox(polygon)).then(features => { setFeatures(features, options); });
    }

	/**
	 * @function
     * @memberof module:geoflo.Exploring
	 * @name setFeature
	 * @description This function creates a line feature using the given coordinates and updates the current match based on the options. It also triggers an event and updates the source data on the map.
	 * @param {Array} coords - The coordinates to create the line feature. Default is an empty array.
	 * @param {Object} options - Additional options for setting the feature, such as the starting point. Default is an empty object.
	 * @returns {Object} The updated feature based on the provided coordinates and options.
	 */
    this.setFeature = function (coords=[], options={}) {
        if (!geoflo.hotFeature) return false;
        if (!coords.length) return geoflo.hotFeature;

        var feature = turf.lineString(coords);
        feature.geometry.coordinates[0] = options.start || feature.geometry.coordinates[0];

        if (this.currentMatch) feature = turf.lineString(geoflo.Utilities.combineSameTypeFeatures([this.currentMatch, feature]));
        this.currentMatch = feature;

        geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
        geoflo.fire('exploring.match', { route: this.currentMatch });
        return mode.updateHotSource(this.currentMatch);
    }


	/**
	 * @function
     * @memberof module:geoflo.Exploring
	 * @name getFeatures
	 * @description Retrieves features based on the provided bounds using Overpass API.
	 * @param {Array} bounds - An array containing the bounding box coordinates [minLon, minLat, maxLon, maxLat].
	 * @returns {Promise<Array>} An array of GeoJSON features within the specified bounds.
	 */
    this.getFeatures = async function (bounds) {
        if (!bounds || !bounds.length || bounds.length != 4) return false;

        var tag = `way["highway"](${bounds[1]} , ${bounds[0]} , ${bounds[3]} , ${bounds[2]});`;

        if (geoflo.map.getZoom() < 12) {
            tag = `way["highway"="motorway"](${bounds[1]} , ${bounds[0]} , ${bounds[3]} , ${bounds[2]});`
            /* way["highway"="primary"](${bounds[1]} , ${bounds[0]} , ${bounds[3]} , ${bounds[2]});
            way["highway"="secondary"](${bounds[1]} , ${bounds[0]} , ${bounds[3]} , ${bounds[2]});` */
        }

        geoflo.overpassDownloading = true;

        const query = '[out:json][timeout:25];(' + tag + ');out body;>;out skel qt;';
        const data = await fetch("//overpass-api.de/api/interpreter?data=" + query, { method: 'GET' } );
        const response = await data.json();
        const geojson = convertFromOverpassToGeojson(response);
        return geojson && geojson.features ? geojson.features : [];
    }

	/**
	 * @function
     * @memberof module:geoflo.Exploring
	 * @name getMatch
	 * @description This function takes an array of coordinates and optional options to fetch a matched route from the OSRM API.
	 * @param {Array} coords - An array of coordinates to match the route against.
	 * @param {Object} options - Optional parameters for customization.
	 * @param {Object} options.feature - Optional feature to match against.
	 * @param {Number|Function} options.radius - Optional radius for matching or a function to calculate it.
	 * @param {String} options.profile - Optional profile for routing (default: 'driving').
	 * @param {Boolean} options.set - Optional flag to set the feature if matching is successful.
	 * @returns {Promise<Array|Boolean>} The matched route response object or false if no coordinates are provided or matching fails.
	 */
    this.getMatch = async function (coords=[], options={}) {
        if (!coords.length) return false;

        var tolerance = geoflo.options.exploring.tolerance;
        var feature = options.feature || turf.cleanCoords(turf.lineString(coords));
        feature = turf.simplify(feature, { mutate: true, tolerance: typeof tolerance === 'function' ? tolerance(geoflo.map) : tolerance, highQuality: true });

        var coordinates = feature.geometry.coordinates;
        if (coordinates.length < 2) return false;

        geoflo.overpassDownloading = true;

        options.radius = options.radius || 50;
        options.profile = options.profile || 'driving';
        coords = coordinates.join(';');

        const radiuses = coordinates.map(() => options.radius).join(';');

        const query = 'https://router.project-osrm.org/match/v1/' + options.profile + '/' + coords +
            '?overview=simplified' +
            '&radiuses=' + radiuses +
            '&generate_hints=false' +
            '&skip_waypoints=true' +
            '&gaps=ignore' +
            '&annotations=nodes' +
            '&tidy=true' +
            '&geometries=geojson';

        const match = await fetch(query, { method: 'GET' } );
        const response = await match.json();

        geoflo.overpassDownloading = false;
        if (response.code !== 'Ok') alert(`${response.code} - ${response.message}.`);
        return !options.set ? response : !response.matchings || !response.matchings.length ? feature : this.setFeature(response.matchings[0].geometry.coordinates, options);
    }

	/**
	 * @function
     * @memberof module:geoflo.Exploring
	 * @name getRoute
	 * @description Retrieves a route based on the provided coordinates using the OSRM routing service.
	 * @param {Array} coords - Array of coordinates representing the route.
	 * @param {Object} options - Additional options for the route calculation.
	 * @param {Object} options.feature - Feature object to use for the route calculation.
	 * @param {String} options.profile - Profile type for the route calculation (default: 'driving').
	 * @param {Boolean} options.set - Flag to indicate whether to set the route as a feature.
	 * @returns {Promise<Array|Boolean>} The route response object or false if no coordinates are provided or the route calculation fails.
	 */
    this.getRoute = async function (coords=[], options={}) {
        var feature = options.feature ? options.feature : !coords.length ? false : turf.cleanCoords(turf.lineString(coords));
        if (!feature) return false;
        
        var coordinates = feature.geometry.coordinates;
        if (coordinates.length < 2) return false;

        geoflo.overpassDownloading = true;
        options.profile = options.profile || 'driving';
        coords = coordinates.join(';');

        const query = 'https://router.project-osrm.org/route/v1/' + options.profile + '/' + coords +
            '?overview=simplified' +
            '&continue_straight=true' +
            '&annotations=nodes' +
            '&geometries=geojson';

        const match = await fetch(query, { method: 'GET' } );
        const response = await match.json();

        geoflo.overpassDownloading = false;
        if (response.code !== 'Ok') alert(`${response.code} - ${response.message}.`);
        return !options.set ? response : !response.routes || !response.routes.length ? feature : this.setFeature(response.routes[0].geometry.coordinates, options);
    }
    


    if (geoflo.options['exploring'].enable) this.activate();



    function convertFromOverpassToGeojson(op) {
        const elementsById = {};

        op.elements.forEach((element) => {
            const key = `${element.type}-${element.id}`;
            elementsById[key] = element;
        });

        const wayToPoints = function (way) {
            const line = [];
            way.nodes.forEach((nodeId) => {
                const key = `node-${nodeId}`;
                const nodeElement = elementsById[key];
                if (nodeElement) {
                    line.push([nodeElement.lon, nodeElement.lat]);
                } else {
                    console.error("Node ", key, " missing");
                }
            });
            return line;
        };

        const lineStrings = [];

        op.elements.forEach((element) => {
            if (element.type === "way") {
                const line = wayToPoints(element);
                if (line.length > 1) {
                    lineStrings.push(turf.lineString(line, element.tags));
                }
            } else if (element.type === "relation") {
                element.members.forEach((member) => {
                    const memberType = member.type;
                    if (memberType === "way") {
                        const key = `way-${member.ref}`;
                        const way = elementsById[key];
                        const line = wayToPoints(way);
                        if (line.length > 1) {
                            lineStrings.push(turf.lineString(line, element.tags));
                        }
                    }
                });
            }
        });

        return geoflo.turf.featureCollection(lineStrings);
    }

    function setFeatures(features=[]) {
        geoflo.overpassDownloading = false;
        if (geoflo.mapMoving || !geoflo.Exploring.enabled || geoflo.currentMode.id !== 'draw') return geoflo.updateMeshData([], true);
        geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([]));
        geoflo.Snapping.addFeature(geoflo.snapFeature);
        geoflo.setMeshFeatures(features);
        geoflo.currentMode.updateHotSource();
        geoflo.fire('overpass.add', { features: features });
        if (!geoflo.currentMode.firstClick) return features;
        var points = turf.explode(turf.featureCollection(features))
        var closestPoint = turf.nearestPoint(turf.point(geoflo.currentMode.firstClick.coords), points);
        geoflo.lastClick = { coords: closestPoint.geometry.coordinates };
        return features;
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Exploring);

/***/ }),

/***/ "./src/Features.js":
/*!*************************!*\
  !*** ./src/Features.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Features
 * @description This module provides the features functionality for the Geoflo application. It allows users to add, remove, update, and retrieve features from the map.
 * @returns {Object} Returns the Features object.
 * @throws {Error} Throws an error if no map object is provided.
 */
const Features = function () {
    const geoflo = this.geoflo;
    if (!geoflo.map) { throw new Error('No map object provided!') }

    const coldFeatures = [];
    this.offsetLines = false;

    
	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name getColdFeatures
	 * @description This function returns an array of cold features.
	 * @return {Array} An array of cold features.
	 */
    this.getColdFeatures = function () {
        return coldFeatures;
    };

	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name getFeatureById
	 * @description Retrieves a feature by its ID from a given source. If the ID is an array with multiple IDs, it retrieves multiple features. If the ID is an object, it tries to extract the ID from the object's parent, properties, or id fields.
	 * @param {string|number|Array} id - The ID or array of IDs of the feature(s) to retrieve.
	 * @returns {Object|Array} The feature or array of features corresponding to the provided ID(s).
	 */
    this.getFeatureById = function (id) {
        if (Array.isArray(id) && id.length > 1) return this.getFeaturesById(id);
        if (typeof id === 'object') id = id.parent || id.properties.parent || id.id || id.properties.id;
        return getFeatureById(id);
    };

	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name getFeaturesById
	 * @description Retrieves features by their IDs.
	 * @param {Array} ids - An array of feature IDs to retrieve.
	 * @returns {Array} - An array of features corresponding to the provided IDs.
	 */
    this.getFeaturesById = function (ids) {
        const addedIds = [];
        const result = [];

        ids.forEach((id) => {
            const feature = this.getFeatureById(id);
            if (feature && !addedIds.includes(id)) addedIds.push(id), result.push(feature);
        }, this);

        return result;
    };

	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name getType
	 * @description This function returns the type of the input feature.
	 * @param {any} feature - The feature whose type needs to be determined.
	 * @returns {string} The type of the input feature.
	 */
    this.getType = function (feature) {
        return getType(feature);
    }

	/**
	 * @function
     * @memberof module:geoflo.Features getUnit
	 * @name getUnit
	 * @description Retrieves the unit associated with a given feature type from the context options.
	 * @param {Object} feature - The feature object for which the unit needs to be retrieved.
	 * @returns {string|boolean} The unit associated with the feature type if found, otherwise false.
	 */
    this.getUnit = function (feature) {
        if (!feature) return false;

        var type = feature.properties.type;
        if (!type) return false;

        if (!geoflo.options.units || !geoflo.options.units[type]) return false;

        return geoflo.options.units[type];
    };

	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name getUnits
	 * @param {Object} feature - The feature for which units need to be calculated.
	 * @returns {number} - The calculated units (length or area) of the feature.
	 */
    this.getUnits = function (feature) {
        var unit = this.getUnit(feature);
        if (!unit || !feature) return false;

        var units = 1;
        var type = feature.properties.type;

        if (type === "Polyline") {
            units = turf.length(feature, { units: 'meters' });
        } else if (type === 'Polygon') {
            units = turf.area(feature);
        } else if (type === 'Rectangle') {
            units = turf.area(feature);
        }

        return units;
    };



	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name setFeaturesState
	 * @description Sets the state of multiple features in a map.
	 * @param {Array} features - An array of features to set the state for.
	 * @param {boolean} state - The state to set for the features.
	 * @returns {Array} - The updated array of features with the new state.
	 */
    this.setFeaturesState = function (features=[], state) {
        if (!state || !features.length) return [];
        
        features.forEach(function(feature) {
            var id = feature.id || feature.properties.id;
            if (geoflo.hotFeature && geoflo.hotFeature.id === id) return;
            this.setFeatureState(id, state);
        }, this)

        return features;
    };

	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name setFeatureState
	 * @description This function sets the state of a feature and its children in the map by updating their feature state.
	 * @param {string} id - The ID of the parent feature.
	 * @param {object} state - The state object to set for the features.
	 * @returns {array} - An array of features whose state was updated.
	 */
    this.setFeatureState = function (id, state) {
        if (!state || !id) return false;

        var features = getFeaturesByParent(id);
        
        features.forEach(function(feature) {
            var id = feature.id || feature.properties.id;
            geoflo.map.setFeatureState({ source: feature.source, id: id }, state);
        })

        return features;
    };

	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name setText
	 * @description Sets text features on the map based on the provided features.
	 * @param {Object} features - The features to set text on.
	 * @returns {boolean} Returns false if no features are provided or if the features array is empty.
	 */
    this.setText = function (features=[]) {
        if (!geoflo.options.showFeatureText) return false;

        var source = geoflo.statics.constants.sources.HOTTEXT;

        this.textFeatures = [];

        if (features.features) features = features.features;
        if (!Array.isArray(features)) features = [features];

        features.forEach(function (feature) {
            var type = feature.properties.type;
            if (!type) return;

            this.currentType = type;

            if (type === 'Polyline' && geoflo.Utilities.isValidLineString(feature) && geoflo.options.showLineUnits) {
                turf.segmentEach(feature, setLineText.bind(this));
            } else {
                source = geoflo.statics.constants.sources.SELECT;
                var feat = geoflo.Utilities.cloneDeep(feature);
                
                feat.properties = {
                    type: 'Text',
                    text: feature.properties.text,
                    style: feature.properties.style
                }
                
                this.textFeatures.push(feat);
            }
        }, this)
        
        geoflo.map.getSource(source).setData(turf.featureCollection(this.textFeatures));

        delete this.textFeatures;
        delete this.currentType;
    }



	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name addFeature
	 * @description This function adds a feature to the map with the given properties. It cleans the coordinates, truncates them, assigns deep properties, sets the source, and removes unnecessary properties before adding the feature to the map.
	 * @param {Object} feature - The feature object to be added to the map.
	 * @param {Object} [properties={}] - Additional properties to be assigned to the feature.
	 * @returns {Object} The feature object that was added to the map.
	 */
    this.addFeature = function (feature, source, properties={}) {
        if (!feature || !feature.properties) return false;
        
        feature = turf.cleanCoords(feature);
        feature = turf.truncate(feature, { precision: 6, coordinates: 3, mutate: true });

        feature.properties = geoflo.Utilities.assignDeep(properties, feature.properties);
        feature.source = source || feature.source || feature.properties.source || geoflo.statics.constants.sources.COLD;
        
        delete feature.properties.source;
        delete feature.properties.painting;
        delete feature.properties.edit;
        delete feature.properties.new;
        delete feature.properties.selected;
        delete feature.properties.hidden;
        delete feature.properties.offset;
        
        feature.properties.style = feature.properties.style || {};

        this.addUnits(feature);
        this.addFeatures([feature]);
        return feature;
    };

	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name addFeatures
	 * @description This function takes an array of features and adds them to the map. It also updates the source if any changes are made.
	 * @param {Array} features - An array of features to be added to the map.
	 * @param {boolean} unselect - A flag indicating whether to unselect the features.
	 * @returns {Array} The array of features that were added to the map.
	 */
    this.addFeatures = function (features, unselect, id) {
        var update;
        var sources = [];

        features.forEach((feature) => {
            feature.id = feature.id || feature.properties.id || URL.createObjectURL(new Blob([])).slice(-36);
            if (id && feature.id !== id) return false;

            feature.source = feature.source || feature.properties.source || geoflo.statics.constants.sources.COLD;
            feature.properties.id = feature.id;
            feature.properties.type = this.getType(feature);

            var index = coldFeatures.findIndex(function(f) { if (f.id === feature.id || f.properties.id === feature.id) return f; });

            if (index > -1) {
                this.setFeatureState(feature.id, { hidden: !unselect });
                coldFeatures[index] = feature;
                update = !unselect;
            } else {
                update = !this.updatingFeatures;
                coldFeatures.push(feature);
            }

            if (unselect) delete feature.properties._selected;
            if (update && !sources.includes(feature.source)) sources.push(feature.source);
        }, this);

        if (update) this.updateSource(sources);
        return features;
    };

	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name addUnits
	 * @description Adds units to a feature's geometry based on the specified conversion or default unit.
	 * @param {Object} feature - The feature object to which units will be added.
	 * @param {String} convertTo - The unit to which the feature's units will be converted. If not provided, the default unit will be used.
	 * @returns {Object} The feature object with added units.
	 */
    this.addUnits = function (feature, convertTo) {
        var unit = convertTo || this.getUnit(feature);
        if (!unit) return false;

        var units = this.convertUnits(feature, null, convertTo);

        feature.geometry.units = units;
        feature.geometry.unit = unit;
        return feature;
    };

    /**
     * @function
     * @name selectFeatures
     * @memberof module:geoflo.Features
     * @description Selects features from a given array and marks them as selected if they are not already selected.
     *
     * @param {Array} features - An array of feature objects to be selected.
     * @returns {Array|boolean} Returns an array of selected features if any features were selected, otherwise returns false.
     */
    this.selectFeatures = function (features) {
        if (!features || !features.length) return false;

        var selected = geoflo.getSelectedFeatures();

        features.forEach(function (feature) {
            var id = feature.id || feature.properties.id;
            var index = selected.findIndex((f) => { return f.id === id || f.properties.id === id });

            if (index > -1) return false;

            feature.properties._selected = true;
            selected.push(feature);
        })

        return selected;
    }



	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name updateFeatures
	 * @description This function updates the coordinates of features in a map based on the provided coordinates. It iterates through the features array, retrieves the original feature by ID, and updates its geometry coordinates based on the feature type. It then adds units to the updated feature and updates the source of the map.
	 * @param {Array} features - An array of features to update.
	 * @param {Array} coords - The new coordinates to set for the features.
	 */
    this.updateFeatures = function(features, options={}) {
        features = features || geoflo.getFeatures();

        var sources = [];
        var selectedFeatures = geoflo.getSelectedFeatures();
        var coords = options.coords || null;

        this.updatingFeatures = true;

        features.forEach(function(feature) {
            var id = feature.id || feature.properties.id;
            if (!id) return false;

            var originalFeature = this.getFeatureById(id);
            if (!originalFeature || originalFeature === undefined) return this.addFeature(feature);

            var selected = selectedFeatures.find((feature) => { return feature.id === id || feature.properties.id === id });

            if (selected && !geoflo.noSelect) {
                selected.geometry.coordinates = feature.geometry.coordinates;
                selected.properties = feature.properties;
                selected.properties._selected = true;
                /* geoflo.Layers.getLayer(geoflo.statics.constants.sources.SELECT).forEachLayer(function (layer) { }) */
                return geoflo.map.getSource(geoflo.statics.constants.sources.SELECT).setData(turf.featureCollection(selectedFeatures));
            } else if (!sources.includes(originalFeature.source)) {
                sources.push(originalFeature.source);
            }
            
            if (options.type === 'pinning' && coords) {
                originalFeature.geometry.type === 'Point' ? originalFeature.geometry.coordinates = coords :
                originalFeature.geometry.type === 'Polygon' && coords ? originalFeature.geometry.coordinates[0][feature.index] = coords :
                originalFeature.geometry.type === 'LineString' && coords ? originalFeature.geometry.coordinates[feature.index] = coords :
                false;
            } else {
                originalFeature.geometry.coordinates = feature.geometry.coordinates;
                originalFeature.properties = feature.properties;
            }

            options.addUnits ? this.addUnits(originalFeature) : false;
        }, this);

        this.updatingFeatures = false;

        if (!sources.length) return false;
        return this.updateSource(sources);
    };

    

	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name updateSource
	 * @description Updates the source of the current object with the provided sources.
	 * @param {Array} sources - An array of sources to update the current object with.
	 * @returns {any} The result of calling the updateSource function with the provided sources.
	 */
    this.updateSource = function (sources) {
        return updateSource.call(this, sources);
    };



	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name removeFeatures
	 * @description This function removes features from the map based on the provided ID or array of IDs. It updates the map source after removing the features.
	 * @param {string|string[]} id - The ID or array of IDs of the features to be removed.
	 * @param {boolean} remove - A flag indicating whether to remove the features or not.
	 * @returns {Object[]} An array containing the removed features.
	 */
    this.removeFeatures = function (id, remove) {
        const removedFeatures = [];

        var feature;
        var sources;

        if (Array.isArray(id) && remove) {
            sources = id.map(function(layer) { return layer.details ? layer.details.id : layer.id ? layer.id : layer });

            coldFeatures.forEach((feature) => {
                if (!sources.includes(feature.source)) return;
                var index = coldFeatures.findIndex((f) => { return feature.id === f.id || feature.properties.id === f.id });
                if (index > -1) removedFeatures.push(...coldFeatures.splice(index, 1));
            })

            this.updateSource(sources);
        } else {
            feature = remove ? coldFeatures.findIndex((feature) => { return feature.id === id || feature.properties.id === id }) :
            coldFeatures.find((feature) => { return feature.id === id || feature.properties.id === id });

            if (remove) {
                if (feature > -1) {
                    removedFeatures.push(...coldFeatures.splice(feature, 1));
                    sources = removedFeatures.map((feature) => { return feature.source });
                }
                
                this.updateSource(sources);
            } else {
                removedFeatures.push(feature);
                this.setFeatureState(id, { hidden: true });
            }
        }

        return removedFeatures;
    };

	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name deleteFeatures
	 * @description Deletes all features from the coldFeatures array and updates the source.
	 * @params {Array} coldFeatures - The array of features to be deleted.
	 * @returns {void}
	 */
    this.deleteFeatures = function () {
        coldFeatures.splice(0, coldFeatures.length);
        this.updateSource();
    };
    


	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name convertUnits
	 * @description Converts the given units of a feature to the specified target units based on the feature type (Polyline, Polygon, or Rectangle).
	 * @param {Object} feature - The feature object containing properties like type.
	 * @param {number} units - The units to be converted.
	 * @param {string} convertTo - The target units to convert to (optional).
	 * @returns {number} The converted units in the target unit format.
	 */
    this.convertUnits = function (feature, units, convertTo) {
        if (!feature) return 0;
        
        var type = feature.properties.type;
        var unit = convertTo || this.getUnit(feature);

        units = units || this.getUnits(feature);
        
        if (type === "Polyline") {
            units = Math.round(turf.convertLength(units, 'meters', unit));
        } else if (type === 'Polygon') {
            units = Math.round(turf.convertArea(units, 'meters', unit));
        } else if (type === 'Rectangle') {
            units = Math.round(turf.convertArea(units, 'meters', unit));
        }

        units = units ? Number(units.toFixed(2)) : 0;
        return units;
    };

    


    function getFeatureById(id) {
        var feature = coldFeatures.find((feature) => { return feature.id === id || feature.properties.id === id });
        feature = feature || geoflo.getSelectedFeatures().find((feature) => { return feature.id === id || feature.properties.id === id });
        return feature;
    };

    function getFeaturesByParent (id) {
        var feature = typeof id === 'object' && id.id ? id : getFeatureById(id);
        if (!feature || !feature.source || !geoflo.map.getSource(feature.source) || !geoflo.map.getSource(feature.source)._data) return [];
        var field = geoflo.options.offsetOverlappingLines ? 'parent' : 'id';
        var features = geoflo.map.getSource(feature.source)._data.features.filter(function(f) { return f[field] === id || f.properties[field] === id });
        return features;
    };

    function createTextFeatures (feature) {
        var isLine = geoflo.Utilities.isValidLineString(feature);
        var segments = [];

        if (isLine) {
            turf.segmentEach(feature, function (currentSegment) {
                var segment = geoflo.Utilities.cloneDeep(currentSegment);
                var footage = Math.round(turf.length(segment, { units: 'miles' }) * 5280);
                var mileage = Number(turf.length(segment, { units: 'miles' }).toFixed(3));
                footage = Number(footage.toFixed(2));
                mileage = Number(mileage.toFixed(2));

                segment.properties.footage = footage;
                segment.properties.mileage = mileage;
                segment.properties.text = `${mileage} miles`;;
                segments.push(segment);
            });
        }

        return segments;
    };

    function updateSource (sources=[]) {
        var sourceFeatures = {};
        var unsourceFeatures = [];
        var textSource = geoflo.map.getSource(geoflo.statics.constants.sources.COLDTEXT);
        var coldSource = geoflo.map.getSource(geoflo.statics.constants.sources.COLD);

        geoflo.updatingSource = true;

        textSource ? textSource.setData(turf.featureCollection([])) : false;
        coldSource ? coldSource.setData(turf.featureCollection([])) : false;

        geoflo.map.getSource(geoflo.statics.constants.sources.SELECT).setData(turf.featureCollection([]));

        coldFeatures.forEach((feature) => {
            delete feature.properties.new;
            delete feature.properties.offset;

            var source = feature.source;
            if (sources.length && !sources.includes(source)) return;
            if (!source) return unsourceFeatures.push(feature);
            if (!sourceFeatures[source]) sourceFeatures[source] = [];
            sourceFeatures[source].push(feature);
        })

        if (!coldFeatures.length) {
            geoflo.Layers.getCustomLayers().forEach((layer) => {
                if (!layer.details || !layer.details.source) return;
                var source = layer.details.source;
                if (!geoflo.map.getSource(source)) return false;
                geoflo.map.getSource(source).setData(turf.featureCollection([]));
            })
        }

        Object.entries(sourceFeatures).forEach((entry) => {
            var source = entry[0];
            var features = entry[1];
            if (!geoflo.map.getSource(source)) return unsourceFeatures.push(features);
            setLineOffset(features, source);
        })

        setLineOffset(unsourceFeatures.flat(), geoflo.statics.constants.sources.COLD);
        setTimeout(() => {this.setFeaturesState(coldFeatures, { hidden: false }); }, 100);
        geoflo.fire('features.update', { features: coldFeatures });
        sourceFeatures = null;
        unsourceFeatures = null;
        geoflo.updatingSource = false;
        return coldFeatures;
    };

    function setLineText (segment) {
        segment = geoflo.Utilities.cloneDeep(segment);
        segment.properties.type = this.currentType;
        
        var text = turf.point(segment.geometry.coordinates[1]);
        var units = this.getUnits(segment);
        var unit = 'feet';

        units = this.convertUnits(segment, units, unit);

        text.properties.units = units;
        text.properties.unit = unit;
        text.properties.text = `${units} ${unit}`;
        text.properties.transform = 'uppercase';
        text.properties.anchor = 'bottom-left';

        this.textFeatures.push(text);
        return text;
    }

    function setLineOffset (features, source) {
        if (!features || !features.length || !source || !geoflo.map.getSource(source)) return false;
        if (!geoflo.options.offsetOverlappingLines) return geoflo.map.getSource(source).setData(turf.featureCollection(features));

        var mesh = new geoflo.Mesh(features, true);
        var offset = mesh.getFeatures();

        offset.forEach(function (feature) {
            var f = features.find(function (fe) { return fe.id === feature.parent });
            if (!f) return;
            feature.source = source;
            feature.properties.style = f.properties.style || feature.properties.style;
            setOverlapOffset(offset, feature)
        });

        geoflo.map.getSource(source).setData(turf.featureCollection(offset));
        geoflo.fire('features.offset', { features: features, offset: offset, source: source });

        mesh = null;
        offset = null;
    };

    function setOverlapOffset (features, feature) {
        if (!geoflo.options.offsetOverlappingLines) return false;
        if (!isPolyline(feature)) return false;
        if (feature.properties.offset) return false;

        var offset = 6;
        var overlaps = [];

        features.forEach(function (f) {
            if (!isPolyline(f)) return false;
            if (f.parent === feature.parent) return false;
            if (f.properties.offset) return false;

            var overlap = turf.booleanOverlap(f, feature) || turf.booleanWithin(f, feature);
            if (!overlap) return false;

            overlaps.push(f)
        }, this)

        overlaps.forEach(function (f) {
            f.properties.offset = offset;
            offset = offset * 2;
        }, this)
    };

    function setWithinOffset (features) {
        if (!geoflo.options.offsetOverlappingLines) return false;

        const adder = 4;
        const miles = 0.00189394; // 10 Feet
        const explode = turf.explode(turf.featureCollection(features))
        
        if (!explode || !explode.features.length) return;

        explode.features.forEach(function(feature) {
            if (feature.properties.offset) return false;

            var buffer = turf.buffer(feature, miles, {units: 'miles'});
            var within = turf.pointsWithinPolygon(explode, buffer);

            if (!within || !within.features.length) return;

            var offset = adder;

            within.features.forEach(function (f) {
                if (f.properties.id === feature.properties.id || f.properties.offset) return;
                f.properties.offset = offset;
                offset = offset + adder;
            })            
        })
    };

    function isPolyline (feature) {
        if (!feature) return false;
        let type = geoflo.Layers.getLayerType(feature.source);
        return turf.getType(feature) === 'LineString';
    };

    function isPolygon (feature) {
        if (!feature) return false;
        let type = geoflo.Layers.getLayerType(feature.source);
        return turf.getType(feature) === 'Polygon' || feature.properties.type === 'Polygon' || type === 'Polygon';
    };

    function isRectangle (feature) {
        if (!feature) return false;
        let type = geoflo.Layers.getLayerType(feature.source);
        return turf.getType(feature) === 'Polygon' && feature.properties.type === 'Rectangle' || type === 'Rectangle';
    };

    function isPoint (feature) {
        if (!feature) return false;
        let type = geoflo.Layers.getLayerType(feature.source);
        if (turf.getType(feature) === 'Point' && (!feature.properties.type || feature.properties.type === 'Circle')) return true;
        if (turf.getType(feature) === 'Point' && (type === 'Point' || type === 'Circle')) return true;
        return turf.getType(feature) === 'Point' && (feature.properties.type !== 'Text' && feature.properties.type !== 'Icon' && feature.properties.type !== 'Image');
    };

    function isText (feature) {
        if (!feature) return false;
        let type = geoflo.Layers.getLayerType(feature.source);
        if (type === 'Text') return true;
        return turf.getType(feature) === 'Point' && feature.properties.type === 'Text';
    };

    function isIcon (feature) {
        if (!feature) return false;
        let type = geoflo.Layers.getLayerType(feature.source);
        if (type === 'Icon') return true;
        return turf.getType(feature) === 'Point' && feature.properties.type === 'Icon';
    };

    function isImage (feature) {
        if (!feature) return false;
        let type = geoflo.Layers.getLayerType(feature.source);
        if (type === 'Image') return true;
        return turf.getType(feature) === 'Point' && feature.properties.type === 'Image';
    };

    function getType (feature) {
        if (!feature) return null;
        
        return isRectangle(feature) ? 'Rectangle' :
        isPolygon(feature) ? 'Polygon' :
        isPolyline(feature) ? 'Polyline' :
        isText(feature) ? 'Text' :
        isIcon(feature) ? 'Icon' :
        isImage(feature) ? 'Image' :
        isPoint(feature) ? 'Circle' :
        null;
    };
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Features);

/***/ }),

/***/ "./src/Gamepad.js":
/*!************************!*\
  !*** ./src/Gamepad.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Gamepad
 * @description This module provides the gamepad functionality for the Geoflo application. It allows users to interact with the map using a gamepad controller.
 * @param {Object} gamepad - The gamepad object to be initialized.
 * @param {Object} options - The options for gamepad initialization. Comes from geoFlo.options.gamepad.
 * @returns {Object} The current object instance.
 */
const Gamepad = function (gamepad) {
    const geoflo = this.geoflo;

    if (!supported()) throw new Error('Gamepads are not supported on your browser!');
    
    const control = this;

    this.options = geoflo.options.gamepad;

    const layout = {
        "select": 'Select',
        "start": 'Start',
        "power": 'Power',
        "button0": 'B',
        "button1": 'A',
        "button2": 'Y',
        "button3": 'X',
        "button4": 'BumpLeft',
        "button5": 'BumpRight',
        "button6": 'TrigLeft',
        "button7": 'TrigRight',
        "button8": 'Select',
        "button9": 'Start',
        "button10": 'JoyLeftClick',
        "button11": 'JoyRightClick',
        "button12": 'DpadUp',
        "button13": 'DpadDown',
        "button14": 'DpadLeft',
        "button15": 'DpadRight',
        "button16": 'Power',
        "button17": 'Misc',
        "up0": 'JoyLeftUp',
        "down0": 'JoyLeftDown',
        "right0": 'JoyLeftRight',
        "left0": 'JoyLeftLeft',
        "up1": 'JoyRightUp',
        "down1": 'JoyRightDown',
        "right1": 'JoyRightRight',
        "left1": 'JoyRightLeft',
        "l1": 'BumpLeft',
        "r1": 'BumpRight',
        "l2": 'TrigLeft',
        "r2": 'TrigRight'
    }


    function clamp(x, y) {
        let m = Math.sqrt(x*x + y*y); // Magnitude (length) of vector

        // If the length greater than 1, normalize it (set it to 1)
        if (m > 1) {
            x /= m;
            y /= m;
        }

        return [x, y];
    }

    function deadzone(x, y, deadzone=0.2) {
        let m = Math.sqrt(x*x + y*y);

        if (m < deadzone)
            return [0, 0];

        let over = m - deadzone;  // 0 -> 1 - DEADZONE
        let nover = over / (1 - deadzone);  // 0 -> 1

        let nx = x / m;
        let ny = y / m;

        return [nx * nover, ny * nover];
        
    }

    function request() {
        control.refresh();
        requestAnimationFrame(request);
    }

    function supported() {
        return (window.navigator.getGamepads && typeof window.navigator.getGamepads === 'function') ||
            (window.navigator.getGamepads && typeof window.navigator.webkitGetGamepads === 'function') ||
            false;
    }

    function qs(s, p) {
        if (p) {
            return p.querySelector(s);
        }
        return document.querySelector(s);
    }

    function on(eventName, callback) {
        return control.associateEvent(eventName, callback, 'action');
    }

    function after(eventName, callback) {
        return control.associateEvent(eventName, callback, 'after');
    }

    function before(eventName, callback) {
        return control.associateEvent(eventName, callback, 'before');
    }

    function addEventListeners(_this, gamepad) {
        if (!gamepad || !layout) return false;

        Object.entries(layout).forEach(function (entry) {
            var key = entry[0];
            var val = entry[1];

            before(key, function (value) { return _this.onEvent('press', key, val, value); });
            on(key, function (value) { return _this.onEvent('hold', key, val, value); });
            after(key, function (value) { return _this.onEvent('release', key, val, value); });
        })
    }

    function deepAssign(target, source, {isMutatingOk = false, isStrictlySafe = false} = {}) {
        target = isMutatingOk ? target : clone(target, isStrictlySafe);

        for (const [key, val] of Object.entries(source)) {
            if (val !== null && typeof val === `object`) {
                if (target[key] === undefined) {
                    target[key] = {};
                }
    
                target[key] = deepAssign(target[key], val, {isMutatingOk: true, isStrictlySafe});
            } else {
                target[key] = val;
            }
        }

        function clone(obj, isStrictlySafe = false) {
            try {
                return JSON.parse(JSON.stringify(obj));
            } catch(err) {
                if (isStrictlySafe) { throw new Error() }
                console.warn(`Unsafe clone of object`, obj);
                return {...obj};
            }
        }

        return target;
    }

    function calculateIntermediatePoint(point1, point2, perc) {
        var lat1 = degreesToRadians(point1[1]);
        var lng1 = degreesToRadians(point1[0]);
        var lat2 = degreesToRadians(point2[1]);
        var lng2 = degreesToRadians(point2[0]);

        var deltaLat = lat2 - lat1;
        var deltaLng = lng2 - lng1;
        
        var calcA = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(deltaLng / 2) * Math.sin(deltaLng / 2);
        var calcB = 2 * Math.atan2(Math.sqrt(calcA), Math.sqrt(1 - calcA));
        
        var A = Math.sin((1 - perc) * calcB) / Math.sin(calcB);
        var B = Math.sin(perc * calcB) / Math.sin(calcB);
        
        var x = A * Math.cos(lat1) * Math.cos(lng1) + B * Math.cos(lat2) * Math.cos(lng2);
        var y = A * Math.cos(lat1) * Math.sin(lng1) + B * Math.cos(lat2) * Math.sin(lng2);
        var z = A * Math.sin(lat1) + B * Math.sin(lat2);
        
        var lat3 = Math.atan2(z, Math.sqrt(x * x + y * y));
        var lng3 = Math.atan2(y, x);
        
        return [radiansToDegrees(lng3), radiansToDegrees(lat3)]
    }

    function pointAtPercent(p0, p1, percent) {
        var x;
        if (p0.x !== p1.x)
            x = p0.x + percent * (p1.x - p0.x);
        else
            x = p0.x;
    
        var y;
        if (p0.y !== p1.y)
            y = p0.y + percent * (p1.y - p0.y);
        else
            y = p0.y;
    
        var p = {
            x: x,
            y: y
        };
    
        return p;
    }

    function degreesToRadians(degrees) {
        return degrees * (Math.PI / 180);
    }
        
    function radiansToDegrees(radians) {
        return radians * (180 / Math.PI );
    }

    





	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name init
	 * @description This function initializes the gamepad with the specified options. It fires an event to notify the gamepad initialization, sets the gamepad, adds event listeners, and requests animation frame.
	 * @param {Object} gamepad - The gamepad object to be initialized.
	 * @param {Object} options - The options for gamepad initialization.
	 * @returns {Object} The current object instance.
	 */
    this.init = function (gamepad, options) {
        if (!gamepad) return false;
        if (!this.options.enable) return console.error('Gamepad option is not enabled!')
        geoflo.map.fire(geoflo.id + ':gamepad.init', { detail: { gamepad: gamepad } });
        this.setGamepad(gamepad);
        addEventListeners(this, this.gamepad);
        requestAnimationFrame(request);
        return this;
    }

	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name refresh
	 * @description Refreshes the gamepad state by checking button presses, axes values, and triggers.
	 * @params {void}
	 * @returns {void}
	 */
    this.refresh = function () {
        var gamepads = window.navigator.getGamepads();

        for (var i = 0; i < gamepads.length; i++) {
            var gamepad = gamepads[this.gamepad.id];
            var j;

            if (!gamepad || !gamepad.connected) { continue; }

            for (j = 0; j < gamepad.buttons.length; j++) {
                var button = gamepad.buttons[j];
                var value = button.value;
                var name = this.gamepad.layout[`button${j}`]

                if (button.pressed) {
                    if (!this.gamepad.pressed[name]) {
                        this.gamepad.pressed[name] = true;
                        this.gamepad.buttonActions[j].before ? this.gamepad.buttonActions[j].before(value) : false;
                    }

                    this.gamepad.buttonActions[j].action ? this.gamepad.buttonActions[j].action(value) : false;
                } else if (this.gamepad.pressed[name]) {
                    delete this.gamepad.pressed[name];
                    this.gamepad.buttonActions[j].after ? this.gamepad.buttonActions[j].after(value) : false;
                }
            }

            var axesBoxCount = ((gamepad.axes.length + 1) / 2)|0;
                
            for (j = 0; j < axesBoxCount; j++) {
                var valueX, valueY, value;
                var last_odd_axis = j == axesBoxCount - 1 && gamepad.axes.length % 2 == 1;

                valueX = gamepad.axes[j*2];
                valueY = last_odd_axis ? 0 : gamepad.axes[j*2 + 1];
                [valueX, valueY] = deadzone(valueX, valueY);    
                [valueX, valueY] = clamp(valueX, valueY);
                value = [Number(valueX.toFixed(2)), Number(valueY.toFixed(2))];

                const val = gamepad.axes[j + axesBoxCount].toFixed(4);
                const axe = Math.floor(j / 2);
                this.gamepad.axeValues[axe][j % 2] = val;

                var rightTrigger = value[0] >= this.options.joystick.min;
                var leftTrigger = value[0] <= -this.options.joystick.min;
                var upTrigger = value[1] <= -this.options.joystick.min;
                var downTrigger = value[1] >= this.options.joystick.min;

                this.trigger('right', rightTrigger, j, value);
                this.trigger('left', leftTrigger, j, value);
                this.trigger('down', downTrigger, j, value);
                this.trigger('up', upTrigger, j, value);
            }
        }
    }

	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name trigger
	 * @description This function handles triggering actions based on gamepad input. It checks if a specific button or axis is triggered and performs corresponding actions.
	 * @param {string} id - The identifier of the gamepad input.
	 * @param {boolean} triggered - Indicates if the input is triggered.
	 * @param {number} index - The index of the input.
	 * @param {number[]} value - The value of the input.
	 */
    this.trigger = function (id, triggered, index, value) {
        var actions = this.gamepad.axesActions;
        var name = this.gamepad.layout[`${id}${index}`];
        var pressed = this.gamepad.pressed

        if (triggered) {
            if (!pressed[name]) {
                pressed[name] = true;
                actions[index][id].before ? actions[index][id].before(value) : false
            }

            value = [this.options.joystick.max * value[0], this.options.joystick.max * value[1]]
            actions[index][id].action ? actions[index][id].action(value) : false;
        } else if (pressed[name]) {
            delete pressed[name];

            if (!pressed['JoyLeftUp'] && !pressed['JoyLeftDown'] && !pressed['JoyLeftLeft'] && !pressed['JoyLeftRight']) {
                actions[0][id].after ? actions[0][id].after(value) : false;
            }

            if (!pressed['JoyRightUp'] && !pressed['JoyRightDown'] && !pressed['JoyRightLeft'] && !pressed['JoyRightRight']) {
                actions[1][id].after ? actions[1][id].after(value) : false;
            }
        }
    }

    /**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name remove
	 * @description Disconnects and removes the gamepad object.
	 * @param {Object} gamepad - The gamepad object to be disconnected and removed.
	 * @returns {void}
	 */
    this.remove = function() {
        this.gamepad.disconnect ? this.gamepad.disconnect() : false;
        this.gamepad.remove ? this.gamepad.remove() : false;
        this.gamepad = null;
    }




	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name setMap
	 * @description This function updates the map properties using the handleMove function and sets the center, zoom, pitch, and bearing accordingly.
	 * @param {Function} handleMove - The function used to handle map movement.
	 * @returns {Object} The updated map object with new properties.
	 */
    this.setMap = function (handleMove) {
        const map = geoflo.map;
        const transform = map.transform;
        
        this.map = this.map || {
            center: map.getCenter(),
            zoom: map.getZoom(),
            pitch: map.getPitch(),
            bearing: map.getBearing()
        }
        
        var center = this.map.center.x ? this.map.center : this.map.center.lat ? this.map.center : new mapboxgl.LngLat(this.map.center[0], this.map.center[1])
        center = center.x ? transform.pointLocation(center) : center;

        transform.center = center;
        transform.bearing = this.map.bearing;
        transform.zoom = this.map.zoom;
        transform.pitch = this.map.pitch;

        map._update();

        if (this.options.crosshairs && geoflo.centerMarker) this.setMarker();
        if (handleMove) geoflo.currentMode.handleMove({ lngLat: !this.options.camera.free ? this.map.center : map.getCenter(), gamepad: this })
        return this.map;
    }

	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name setContainer
	 * @description Creates a new HTML element with the specified tag name and class name, appends it to a container if provided, and sets it as the container property of the current object.
	 * @param {string} tagName - The tag name of the HTML element to create.
	 * @param {string} className - The class name to assign to the created element (optional).
	 * @param {HTMLElement} container - The container element to append the created element to (optional).
	 * @returns {HTMLElement} The created HTML element.
	 */
	
    this.setContainer = function (tagName, className, container) {
        const el = window.document.createElement(tagName);
        if (className !== undefined) el.className = className;
        if (container) container.appendChild(el);
        this.container = el;
        return el;
    }

	/**
	 * @function
     * @memberof module:geoflo.Gamepad 
	 * @name setLocation
	 * @description This function updates the visibility, left, and top properties of the container element based on the provided value.
	 * @param {Array<number>} value - An array containing the x and y coordinates for the new location.
	 * @returns {DOMRect} The bounding rectangle of the container element after the location is set.
	 */
    this.setLocation = function (value) {
        this.container.style.visibility = this.options.debug ? 'visible' : 'hidden';
        this.container.style.left = (value[0] + 1) / 2 * 100 + '%';
        this.container.style.top = (value[1] + 1) / 2 * 100 + '%';
        return this.container.getBoundingClientRect();
    }

	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name setMarker
	 * @description Sets a marker on the map using the center coordinates provided by the context.
	 * @return {Object} Returns the marker object created on the map.
	 */
    this.setMarker = function () {
        return geoflo.setCenterMarker({ gamepad: true });
    }

	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name setGamepad
	 * @description Initializes a gamepad object with specific properties based on the provided gamepad input.
	 * @param {Object} gamepad - The gamepad object to be processed.
	 * @returns {Object} - The processed gamepad object with defined properties.
	 */
    this.setGamepad = function (gamepad) {
        var options = {
            type: gamepad.id,
            connected: gamepad.connected,
            id: gamepad.index,
            buttons: gamepad.buttons.length,
            layout: layout,
            axes: Math.floor(gamepad.axes.length / 2),
            axeValues: [],
            hapticActuator: null,
            vibrationMode: -1,
            vibration: false,
            mapping: gamepad.mapping,
            buttonActions: {},
            axesActions: {},
            pressed: {}
        }

        for (let x = 0; x < options.buttons; x++) {
            options.buttonActions[x] = () => ({ action: () => { }, after: () => { }, before: () => { } });
        }

        for (let x = 0; x < options.axes; x++) {
            options.axesActions[x] = {
                down: () => ({ action: () => { }, after: () => { }, before: () => { } }),
                left: () => ({ action: () => { }, after: () => { }, before: () => { } }),
                right: () => ({ action: () => { }, after: () => { }, before: () => { } }),
                up: () => ({ action: () => { }, after: () => { }, before: () => { } })
            };

            options.axeValues[x] = [0, 0];
        }

        if (gamepad.hapticActuators) {
            if (typeof gamepad.hapticActuators.pulse === 'function') {
                options.haptic = gamepad.hapticActuators;
                options.vibrationMode = 0;
                options.vibration = true;
            } else if (gamepad.hapticActuators[0] && typeof gamepad.hapticActuators[0].pulse === 'function') {
                options.haptic = gamepad.hapticActuators[0];
                options.vibrationMode = 0;
                options.vibration = true;
            }
        }
        
        if (gamepad.vibrationActuator) {
            if (typeof gamepad.vibrationActuator.playEffect === 'function') {
                options.haptic = gamepad.vibrationActuator;
                options.vibrationMode = 1;
                options.vibration = true;
            }
        }

        this.gamepad = options;
        this.hasJoysticks = options.axes > 0 && Object.values(this.gamepad.layout).map(function(m) { return m.includes('Joy') }).filter(function (b) { return b }).length > 0;
        return this.gamepad;
    }

	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name setCenter
	 * @description This function calculates the new center of the map based on the input values and gamepad controls. It handles both joystick and D-pad inputs to adjust the map center accordingly.
	 * @param {Object} value - The value used to calculate the new center of the map.
	 * @param {boolean} free - A boolean flag indicating if the map center should be set freely.
	 * @param {boolean} dpad - A boolean flag indicating if the D-pad controls are used for setting the map center.
	 * @returns {boolean} Returns true after setting the map center.
	 */
	
    this.setCenter = function (value, free, dpad) {
        var center = geoflo.map.getCenter();
        var pressed = this.gamepad.pressed;
        var type = this.hasJoysticks ? 'Joy' : 'Dpad';
        var diag = Object.keys(pressed).filter(function(p) { return p.includes(type) }).length > 1;
        
        var start = free || dpad ? center : false;
        start = geoflo.hotFeature && !start ? geoflo.lastMove || center : false;
        start = !start ? center : start;

        var end;
    
        if (dpad) {
            var bearing = this.map.bearing;
            bearing = pressed['Up'] ? bearing :
            pressed['Down'] ? bearing + 180 :
            pressed['Left'] ? bearing - 90 :
            pressed['Right'] ? bearing + 90 :
            bearing;

            var dest = turf.destination(turf.point(start), distance, bearing).geometry.coordinates;

            lngLats = free ? { lng: dest[1], lat: dest[0] } : dest;
        } else if (value) {
            var location = this.setLocation(value);
            var coords = location && location.x ? [location.x, location.y] : false;
            
            end = geoflo.map.unproject(coords);
            
            var percent = diag ? this.options.pan.speed / 2 : this.options.pan.speed;
            var mid = calculateIntermediatePoint([start.lng, start.lat], [end.lng, end.lat], percent)
            mid = geoflo.map.getPitch() > 60 ? calculateIntermediatePoint([start.lng, start.lat], [mid[0], mid[1]], 0.4) : mid;

            end = mid;
            geoflo.lastMove = end;
        } else {
            var coords = geoflo.hotFeature ? geoflo.hotFeature.geometry.coordinates : false;
            end = free ? geoflo.map.getCenter() :
            coords ? { lat: coords[coords.length-1][1], lng: coords[coords.length-1][0] } : geoflo.map.getCenter();
            geoflo.lastMove = false;
            this.setLocation([0, 0]);
        }

        this.map.center = end;
        return this.setMap(true);
    }
    
	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name setBearing
	 * @description This function updates the bearing of the map by adjusting it with the specified value and direction.
	 * @param {number | Array<number>} value - The value to adjust the bearing by. If dpad is false, it should be an array of numbers, otherwise a single number.
	 * @param {boolean} left - Indicates the direction of adjustment. If true, the bearing is decreased; otherwise, it is increased.
	 * @param {boolean} dpad - Specifies whether the value is coming from a dpad input.
	 * @returns {boolean} Returns the result of calling the setMap function after updating the bearing.
	 */
    this.setBearing = function (value, left, dpad) {
        var bearing = this.map.bearing;
        var bearingMulti = !dpad ? Math.abs(value[0]) : value;
    
        if (left) {
            bearing = bearing - (this.options.bearing.speed * bearingMulti)
        } else {
            bearing = bearing + (this.options.bearing.speed * bearingMulti)
        }

        this.map.bearing = bearing;
        return this.setMap();
    }
    
	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name setPitch
	 * @description This function adjusts the pitch of the map by a specified amount in the given direction.
	 * @param {number|Array<number>} value - The value or array of values to adjust the pitch by.
	 * @param {boolean} up - A boolean indicating whether the pitch should be increased (true) or decreased (false).
	 * @param {boolean} dpad - A boolean flag to determine if the value is coming from a D-pad input.
	 * @returns {boolean} Returns true if the map is successfully updated with the new pitch.
	 */
    this.setPitch = function (value, up, dpad) {
        var pitch = this.map.pitch;
        var pitchMulti = !dpad ? Math.abs(value[1]) : value;

        if (pitch < 0) pitch = 0;
        if (pitch > this.options.pitch.max) pitch = this.options.pitch.max;
    
        if (up) {
            pitch = pitch + (this.options.pitch.speed * pitchMulti);
        } else {
            pitch = pitch - (this.options.pitch.speed * pitchMulti);
        }
        
        this.map.pitch = pitch;
        return this.setMap();
    }
    
	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name setZoom
	 * @description This function adjusts the zoom level of a map based on the provided value and direction.
	 * @param {number} value - The amount by which to change the zoom level.
	 * @param {boolean} out - A flag indicating whether to zoom out (true) or zoom in (false).
	 * @param {boolean} dpad - A flag indicating the direction of the zoom change.
	 * @returns {boolean} - Returns the result of setting the map with the new zoom level.
	 */
    this.setZoom = function (value, out, dpad) {
        var zoom = this.map.zoom;
    
        if (out) {
            zoom = zoom - ( this.options.zoom.speed * Math.abs(value) )
        } else {
            zoom = zoom + ( this.options.zoom.speed * Math.abs(value) )
        }
        
        this.map.zoom = zoom;
        return this.setMap();
    }

	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name setSpeed
	 * @description This function calculates the speed of panning based on the provided value and direction. It ensures that the speed falls within the specified minimum and maximum values.
	 * @param {number} value - The value that influences the speed of panning.
	 * @param {boolean} down - A boolean flag indicating the direction of panning (true for down, false for up).
	 * @returns {number} The updated speed of panning after applying the calculations.
	 */
    this.setSpeed = function (value, down) {
        var speed = this.options.pan.speed > this.options.pan.min ?
            this.options.pan.speed :
            this.options.pan.max && this.options.pan.speed > this.options.pan.max ?
            this.options.pan.min :
            this.options.pan.min;

        speed = down ? speed - this.options.pan.min : speed + this.options.pan.min;

        speed = speed < this.options.pan.min ? this.options.pan.min :
        this.options.pan.max && speed > this.options.pan.max ? this.options.pan.max :
        speed;

        return this.options.pan.speed = speed * Math.abs(value);
    }


	/**
	 * @function
     * @memberof module:geoflo.Gamepad associateEvent
	 * @name associateEvent
	 * @description This function allows the user to associate an event with a callback function for a specific button or axis on the gamepad.
	 * @param {string} eventName - The name of the event to associate with the callback function.
	 * @param {function} callback - The callback function to be executed when the event occurs.
	 * @param {string} type - The type of event (e.g., 'press', 'release') to associate with the callback function.
	 * @returns {object} The updated gamepad object with the associated event and callback function.
	 */
    this.associateEvent = function(eventName, callback, type) {
        if (eventName.match(/^button\d+$/)) {
            const buttonId = parseInt(eventName.match(/^button(\d+)$/)[1]);

            if (buttonId >= 0 && buttonId < this.gamepad.buttons) {
                this.gamepad.buttonActions[buttonId][type] = callback;
            } else {
                console.log(buttonId, 'This button is not on gamepad')
            }

        } else if (eventName === 'start') {
            this.gamepad.buttonActions[9][type] = callback;
        } else if (eventName === 'select') {
            this.gamepad.buttonActions[8][type] = callback;
        } else if (eventName === 'r1') {
            this.gamepad.buttonActions[5][type] = callback;
        } else if (eventName === 'r2') {
            this.gamepad.buttonActions[7][type] = callback;
        } else if (eventName === 'l1') {
            this.gamepad.buttonActions[4][type] = callback;
        } else if (eventName === 'l2') {
            this.gamepad.buttonActions[6][type] = callback;
        } else if (eventName === 'power') {
            if (this.gamepad.buttons >= 17) {
                this.gamepad.buttonActions[16][type] = callback;
            } else {
                error(MESSAGES.INVALID_BUTTON);
            }
        } else if (eventName.match(/^(up|down|left|right)(\d+)$/)) {
            const matches = eventName.match(/^(up|down|left|right)(\d+)$/);
            const direction = matches[1];
            const axe = parseInt(matches[2]);

            if (axe >= 0 && axe < this.gamepad.axes) {
                this.gamepad.axesActions[axe][direction][type] = callback;
            } else {
                error(MESSAGES.INVALID_BUTTON);
            }
        } else if (eventName.match(/^(up|down|left|right)$/)) {
            const direction = eventName.match(/^(up|down|left|right)$/)[1];
            this.gamepad.axesActions[0][direction][type] = callback;
        }

        return this.gamepad;
    }

    this.onInit = function (options) {
        this.initiated = true;
        this.setContainer('div', 'gamepad', geoflo.map.getContainer());
        this.setMarker();
        this.setMap();
    }

    this.onEvent = function (type, key, action, value) {
        var pressed = {[action]: true};
        var lngLat = this.options.camera.free ? geoflo.map.getCenter() : geoflo.lastMove ? geoflo.lastMove : geoflo.map.getCenter();

        var options = {
            name: action,
            type: type,
            key: key,
            value: value,
            mode: geoflo.currentMode,
            gamepad: this,
            lngLat: lngLat,
            geoflo: geoflo,
            originalEvent: {}
        }

        if (!this.initiated) this.onInit(options);

        geoflo.map.fire(geoflo.id + ':gamepad.' + type, { detail: options });

        if (pressed['JoyLeftUp'] || pressed['JoyLeftDown'] || pressed['JoyLeftLeft'] || pressed['JoyLeftRight']) this.options.mapping['JoyLeftMove'](options);
        if (pressed['JoyRightUp'] || pressed['JoyRightDown'] || pressed['JoyRightLeft'] || pressed['JoyRightRight']) this.options.mapping['JoyRightMove'](options);

        if (pressed['JoyLeftClick']) this.options.mapping['JoyLeftClick'](options);
        if (pressed['JoyRightClick']) this.options.mapping['JoyRightClick'](options);

        if (pressed['BumpLeft']) this.options.mapping['BumpLeft'](options);
        if (pressed['BumpRight']) this.options.mapping['BumpRight'](options);

        if (pressed['TrigLeft']) this.options.mapping['TrigLeft'](options);
        if (pressed['TrigRight']) this.options.mapping['TrigRight'](options);

        if (pressed['A']) this.options.mapping['A'](options);
        if (pressed['B']) this.options.mapping['B'](options);
        if (pressed['X']) this.options.mapping['X'](options);
        if (pressed['Y']) this.options.mapping['Y'](options);

        if (pressed['Start']) this.options.mapping['Start'](options);
        if (pressed['Select']) this.options.mapping['Select'](options);
        if (pressed['Power']) this.options.mapping['Power'](options);
        if (pressed['Home']) this.options.mapping['Home'](options);
        if (pressed['Misc']) this.options.mapping['Misc'](options);

        if (pressed['DpadUp']) this.options.mapping['DpadUp'](options);
        if (pressed['DpadDown']) this.options.mapping['DpadDown'](options);
        if (pressed['DpadLeft']) this.options.mapping['DpadLeft'](options);
        if (pressed['DpadRight']) this.options.mapping['DpadRight'](options);
    }

    this.onDisconnect = function (gamepad) {
        if (!gamepad || !this.gamepad) return false;
        if (this.gamepad.id !== gamepad.id) throw new Error('Gamepad id does not match!');
        this.gamepad.remove();
        this.gamepad = null;
    }


    this.init(gamepad);
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Gamepad);

/***/ }),

/***/ "./src/Layers.js":
/*!***********************!*\
  !*** ./src/Layers.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Layers
 * @description This module provides the layer functionality for the Geoflo application. It allows users to add, remove, and manipulate layers on the map.
 * @param {Object} options - The options object to configure the object.
 * @returns {Object} Returns the Layers object.
 */

const Layers = function () {
    const geoflo = this.geoflo;
    if (!geoflo.map) throw new Error('No map object provided!');

    const Layers = this;
    const map = geoflo.map;
    const id = geoflo.id;

    const layerTypes = {
        Polygon: ['-fill', '-border'],
        Polyline: ['-line', '-dash', '-buffer'],
        Point: ['-circle', '-icon', '-cluster-circle', '-cluster-icon', '-count-icon', '-count-text'],
        Image: ['-image'],
        All: ['-fill', '-border', '-line', '-dash', '-buffer', '-circle', '-icon', '-cluster-circle', '-cluster-icon', '-count-icon', '-count-text', '-image']
    }

    this.options = {};
    this.sources = [];
    this.layers = [];
    this._layers = [];
    this._sources = [];

	/** 
	 * @function
     * @memberof module:geoflo.Layers
	 * @name init
	 * @description Initializes the object with the provided options and refreshes it.
	 * @param {Object} options - The options object to configure the object.
	 * @returns {Object} The refreshed object with the updated options.
	 */
    this.init = function (options={}) {
        this.options = Object.assign(this.options, options);

        this.defaultLayers = [
            {
                source: geoflo.statics.constants.sources.COLD,
                id: id + '-fill-cold',
                type: 'fill',
                layout: {},
                filter: ["==", "$type", "Polygon"],
                paint: {
                    'fill-color': geoflo.options.colors.secondaryCold,
                    'fill-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 0.3]
                }
            },
            {
                source: geoflo.statics.constants.sources.COLD,
                id: id + '-line-cold',
                type: 'line',
                layout: {
                    'line-cap': 'round',
                    'line-join': 'miter'
                },
                paint: {
                    'line-color': geoflo.options.colors.primaryCold,
                    'line-width': 4,
                    'line-gap-width': ["match", ["get", "type"], "Polygon", 0, 0],
                    'line-offset': ['case', ["boolean", ["has", "offset"], true], ["get", "offset"], 0],
                    'line-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 1]
                }
            },
            {
                source: geoflo.statics.constants.sources.COLD,
                id: id + '-circle-cold',
                filter: ['all', ['==', ['get', 'type'], 'Circle'], ["!=", ["geometry-type"], "Polygon"] ],
                type: 'circle',
                paint: {
                    'circle-radius': { 'base': 6, 'stops': [[10, 8], [14, 10]] },
                    'circle-stroke-width': 1,
                    'circle-color': geoflo.options.colors.primaryCold,
                    'circle-stroke-color': geoflo.options.colors.secondaryCold,
                    'circle-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 1],
                    'circle-stroke-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 1]
                }
            },
            {
                source: geoflo.statics.constants.sources.COLD,
                id: id + '-icon-cold',
                type: 'symbol',
                filter: ['==', ['get', 'type'], 'Icon'],
                layout: {
                    'visibility': 'visible',
                    'icon-optional': true,
                    'text-field': ['get', 'primaryIcon', ['get','style', ['properties']]],
                    'text-size': {
                        'base': 16,
                        'stops': [[10, 16], [14, 12]]
                    },
                    'text-line-height': 1,
                    'text-padding': 0,
                    'text-offset': [0, 0.2],
                    'text-justify': 'auto',
                    'text-anchor': 'center',
                    'text-allow-overlap': true,
                    'text-font': ['Font Awesome 6 Pro Solid'],
                    'text-ignore-placement': true
                },
                paint: {
                    'text-translate-anchor': 'viewport',
                    'text-halo-width': 0,
                    'text-halo-color': geoflo.options.colors.primaryCold,
                    'text-color': geoflo.options.colors.secondaryBackground,
                    'text-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 1]
                }
            },
            {
                source: geoflo.statics.constants.sources.COLD,
                id: id + '-text-cold',
                type: 'symbol',
                filter: ["==", "$type", "Point"],
                layout: {
                    "symbol-placement": "point",
                    'text-field': ['get', 'text'],
                    'text-font': ['DIN Pro Regular', 'DIN Pro Italic', 'Arial Unicode MS Regular', 'DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                    'text-keep-upright': true,
                    'text-size': 18,
                    'text-justify': ['get', 'justify'],
                    'text-letter-spacing': 0.05,
                    'text-line-height': 1.2,
                    'text-max-angle': 10,
                    'text-offset': [0,0],
                    'text-padding': 2,
                    'text-rotate': 0,
                    'text-transform': ['get', 'transform']
                },
                paint: {
                    'text-color': geoflo.options.colors.primaryCold,
                    'text-halo-color': geoflo.options.colors.primaryBackground,
                    'text-halo-width': 0.5,
                    'text-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 1]
                }
            },
            {
                source: geoflo.statics.constants.sources.COLD,
                id: id + '-text-icon-cold',
                type: 'symbol',
                filter: ['==', ['get', 'type'], 'Text'],
                layout: {
                    'visibility': 'visible',
                    'icon-optional': true,
                    'text-field': ['get', 'primaryIcon', ['get','style', ['properties']]],
                    'text-size': {
                        'base': 16,
                        'stops': [[10, 16], [14, 12]]
                    },
                    'text-line-height': 1,
                    'text-padding': 0,
                    'text-offset': [0, 0.2],
                    'text-justify': 'auto',
                    'text-anchor': 'center',
                    'text-allow-overlap': true,
                    'text-font': ['Font Awesome 6 Pro Solid'],
                    'text-ignore-placement': true
                },
                paint: {
                    'text-translate-anchor': 'viewport',
                    'text-halo-width': 0,
                    'text-halo-color': geoflo.options.colors.primaryCold,
                    'text-color': geoflo.options.colors.secondaryBackground,
                    'text-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 1]
                }
            },
            {
                id: geoflo.statics.constants.layers.MESH + '-line',
                source: geoflo.statics.constants.sources.MESH,
                type: "line",
                paint: {
                    "line-color": geoflo.options.colors.primaryBase,
                    "line-width": 2,
                    "line-opacity": 0.3
                }
            },
            {
                id: geoflo.statics.constants.layers.MESH + '-circle',
                source: geoflo.statics.constants.sources.MESH,
                type: 'circle',
                paint: {
                    'circle-radius': 2,
                    'circle-color': geoflo.options.colors.primaryBase,
                    'circle-opacity': 0.3
                }
            },
            {
                source: geoflo.statics.constants.sources.HOT,
                id: id + '-fill-hot',
                type: 'fill',
                layout: {},
                filter: ["==", "$type", "Polygon"],
                paint: {
                    'fill-color': geoflo.options.colors.secondaryHot,
                    'fill-opacity': ['case', ["boolean", ["has", "new"], true], 0.5, 0.1],
                }
            },
            {
                'source': geoflo.statics.constants.sources.HOT,
                'id': id + '-line-hot',
                'type': 'line',
                'layout': {
                    'line-cap': 'round',
                    'line-join': 'round'
                },
                'paint': {
                    'line-color': geoflo.options.colors.primaryHot,
                    'line-width': 4,
                    'line-dasharray': [1,2],
                }
            },
            {
                'source': geoflo.statics.constants.sources.HOT,
                'id': id + '-point-hot',
                'filter': ['==', '$type', 'Point'],
                'type': 'circle',
                //'filter': ["==", 0, ['number', ['get', 'painting']]],
                'paint': {
                    'circle-radius': ["match", ["get", "type"], "Circle", 8, 4],
                    'circle-stroke-width': 1,
                    'circle-color': geoflo.options.colors.primaryHot,
                    'circle-stroke-color': geoflo.options.colors.secondaryHot
                }
            },
            {
                source: geoflo.statics.constants.sources.HOT,
                id: id + '-icon-hot',
                filter: ['==', ['get', 'type'], 'Icon'],
                type: 'symbol',
                layout: {
                    'visibility': 'visible',
                    'icon-optional': true,
                    'text-field': ['get', 'primaryIcon', ['get','style', ['properties']]],
                    'text-size': {
                        'base': 16,
                        'stops': [[10, 16], [14, 12]]
                    },
                    'text-line-height': 1,
                    'text-padding': 0,
                    'text-offset': [0, 0.2],
                    'text-justify': 'auto',
                    'text-anchor': 'center',
                    'text-allow-overlap': true,
                    'text-font': ['Font Awesome 6 Pro Solid'],
                    'text-ignore-placement': true
                },
                paint: {
                    'text-translate-anchor': 'viewport',
                    'text-halo-color': geoflo.options.colors.primaryHot,
                    'text-halo-width': 0, //[ 'case', ['boolean', ['feature-state', 'hover'], false], 0.5, 0 ],
                    'text-color': geoflo.options.colors.secondaryHot
                }
            },
            {
                source: geoflo.statics.constants.sources.HOT,
                id: id + '-image-hot',
                filter: ['==', ['get', 'type'], 'Image'],
                type: 'symbol',
                layout: {
                    'visibility': 'visible',
                    'icon-image': ['get', 'primaryImage', ['get','style', ['properties']]],
                    'icon-size': ['interpolate', ['linear'], ['zoom'], 1, 0.4, 15, 1],
                    'icon-allow-overlap': true,
                    'icon-anchor': 'bottom'
                }
            },
            {
                'source': geoflo.statics.constants.sources.HOTTEXT,
                'id': id + '-text-hot',
                'type': 'symbol',
                'layout': {
                    'symbol-placement': 'point',
                    'text-field': ['get', 'text'],
                    'text-font': ['Arial Unicode MS Regular', 'DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                    'text-keep-upright': true,
                    'text-anchor': ['get','anchor'],
                    'text-size': 18,
                    'text-justify': ['get','justify'],
                    'text-letter-spacing': 0.1,
                    'text-line-height': 1.2,
                    'text-max-angle': 10,
                    'text-offset': [0, -1.5],
                    'text-padding': 2,
                    'text-rotate': 0,
                    'text-transform': ['get', 'transform']
                },
                'paint': {
                    'text-color': geoflo.options.colors.primaryText,
                    'text-halo-color': geoflo.options.colors.primaryBackground,
                    'text-halo-width': 1,
                    'text-opacity': 1,
                }
            },
            {
                'source': geoflo.statics.constants.sources.SNAP,
                'id': id + '-point-snap',
                'type': 'circle',
                'filter': ['==', '$type', 'Point'],
                'paint': {
                    'circle-radius': ["match", ["get", "type"], "Circle", 6, "Icon", 0, 6],
                    'circle-stroke-width': 2,
                    'circle-color': geoflo.options.colors.primarySnap,
                    'circle-stroke-color': geoflo.options.colors.secondarySnap
                }
            },
            {
                source: geoflo.statics.constants.sources.SNAP,
                id: id + '-icon-snap',
                type: 'symbol',
                filter: ['==', ['get', 'type'], 'Icon'],
                layout: {
                    'visibility': 'visible',
                    'icon-optional': true,
                    'text-field': ['get', 'primaryIcon', ['get','style', ['properties']]],
                    'text-size': {
                        'base': 18,
                        'stops': [[10, 18], [14, 16]]
                    },
                    'text-line-height': 1,
                    'text-padding': 0,
                    'text-offset': [0,0.2],
                    'text-justify': 'auto',
                    'text-anchor': 'center',
                    'text-allow-overlap': true,
                    'text-font': ['Font Awesome 6 Pro Solid'],
                    'text-ignore-placement': true
                },
                paint: {
                    'text-translate-anchor': 'viewport',
                    'text-halo-color': geoflo.options.colors.primarySnap,
                    'text-halo-width': 0, //[ 'case', ['boolean', ['feature-state', 'hover'], false], 0.5, 0 ],
                    'text-color': geoflo.options.colors.secondarySnap
                }
            },
            {
                source: geoflo.statics.constants.sources.SNAP,
                id: id + '-image-snap',
                filter: ['==', ['get', 'type'], 'Image'],
                type: 'symbol',
                layout: {
                    'visibility': 'visible',
                    'icon-image': ['get', 'primaryImage', ['get','style', ['properties']]],
                    'icon-size': ['interpolate', ['linear'], ['zoom'], 1, 0.4, 15, 1],
                    'icon-allow-overlap': true,
                    'icon-anchor': 'bottom'
                }
            },
            {
                'source': geoflo.statics.constants.sources.SNAP,
                'id': id + '-line-snap',
                'type': 'line',
                //'filter': ["==", "$type", "LineString"],
                'layout': {
                    'visibility': 'visible',
                    'line-cap': 'round',
                    'line-join': 'round'
                },
                'paint': {
                    'line-color': geoflo.options.colors.secondarySnap,
                    'line-width': 4,
                    'line-dasharray':[1,2]
                }
            },
            {
                'source': geoflo.statics.constants.sources.ROUTE,
                'id': id + '-line-route',
                'type': 'line',
                'filter': ["==", "$type", "LineString"],
                'layout': {
                    'visibility': 'visible',
                    'line-cap': 'round',
                    'line-join': 'round'
                },
                'paint': {
                    'line-color': geoflo.options.colors.error,
                    'line-width': 4,
                    'line-dasharray':[]
                }
            },
            {
                'source': geoflo.statics.constants.sources.VERTEX,
                'id': id + '-point-vertex',
                'type': 'circle',
                'filter': ['==', "$type", 'LineString'],
                'paint': {
                    'circle-radius': 4,
                    'circle-stroke-width': 3,
                    'circle-color': geoflo.options.colors.primaryVertex,
                    'circle-stroke-color': geoflo.options.colors.secondaryVertex
                }
            },
            {
                'source': geoflo.statics.constants.sources.GAMEPAD,
                'id': id + '-gamepad',
                'type': 'symbol',
                'layout': {
                    'visibility': 'visible',
                    'icon-image': 'gamepad',
                    'icon-size': 0.25
                }
            }
        ]
    
        this.selectLayers = [{
            'source': geoflo.statics.constants.sources.SELECT,
            'id': id + '-line-select',
            'type': 'line',
            'layout': {
                'visibility': 'visible',
                'line-cap': 'round',
                'line-join': 'round'
            },
            'paint': {
                'line-color': geoflo.options.colors.secondarySelect,
                'line-width': 4,
            },
            'metadata': { types: ['Polyline', 'Polygon', 'Rectangle'] }
        },
        {
            'source': geoflo.statics.constants.sources.SELECT,
            'id': id + '-fill-select',
            'type': 'fill',
            'layout': {},
            'filter': ["==", "$type", "Polygon"],
            'paint': {
                'fill-color': geoflo.options.colors.primarySelect,
                'fill-opacity': 0.4
            },
            'metadata': { types: ['Polygon', 'Rectangle'] }
        },
        {
            'source': geoflo.statics.constants.sources.SELECT,
            'id': id + '-point-select',
            'filter': ['all', ['!=', ['get', 'type'], 'Text'], ["==", ["geometry-type"], "Point"] ],
            'type': 'circle',
            'layout': {
                'visibility': 'visible',
            },
            'paint': {
                'circle-radius': 8,
                'circle-stroke-width': 2,
                'circle-color': geoflo.options.colors.primarySelect,
                'circle-stroke-color': geoflo.options.colors.secondarySelect,
            },
            'metadata': { types: ['Point', 'Circle', 'Marker', 'Icon'] }
        },
        {
            'source': geoflo.statics.constants.sources.SELECT,
            'id': id + '-symbol-select',
            'filter': ['==', ['get', 'type'], 'Icon'],
            'type': 'symbol',
            'layout': {
                'visibility': 'visible',
                'icon-optional': true,
                'symbol-placement': 'point',
                'text-rotation-alignment': 'viewport',
                'text-field': ['get', 'primaryIcon', ['get','style', ['properties']]],
                'text-rotate': ['get', 'rotate', ['get','style', ['properties']]],
                'text-size': 14,
                'text-line-height': 1,
                'text-padding': 0,
                'text-offset': [0, 0.2],
                'text-justify': 'auto',
                'text-anchor': 'center',
                'text-allow-overlap': true,
                'text-font': ['Font Awesome 6 Pro Solid'],
                'text-ignore-placement': true
            },
            'paint': {
                'text-translate-anchor': 'viewport',
                'text-halo-color': geoflo.options.colors.secondarySelect,
                'text-halo-width': 2,
                'text-color': geoflo.options.colors.primaryBackground,
            },
            'metadata': { types: ['Icon'] }
        },
        {
            'source': geoflo.statics.constants.sources.SELECT,
            'id': id + '-text-select',
            'filter': ['==', ['get', 'type'], 'Text'],
            'type': 'symbol',
            'layout': {
                'visibility': 'visible',
                "symbol-placement": "point",
                'text-rotation-alignment': 'viewport',
                'text-field': ['get', 'text'],
                'text-font': ['DIN Pro Regular', 'DIN Pro Italic', 'Arial Unicode MS Regular', 'DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                'text-keep-upright': true,
                'text-allow-overlap': true,
                'text-size': 18,
                'text-justify': ['get', 'justify'],
                'text-letter-spacing': 0.12,
                'text-line-height': 1.2,
                'text-max-angle': 10,
                'text-offset': [0,1.5],
                'text-padding': 2,
                'text-rotate': 0,
                'text-transform': ['get', 'transform']
            },
            'paint': {
                'text-color': geoflo.options.colors.primaryBackground,
                'text-halo-color': geoflo.options.colors.primaryColor,
                'text-halo-width': 2,
                'text-opacity': 1,
            },
            'metadata': { types: ['Text'] }
        },
        {
            'source': geoflo.statics.constants.sources.SELECT,
            'id': id + '-image-select',
            'filter': ['==', ['get', 'type'], 'Image'],
            'type': 'symbol',
            'layout': {
                'visibility': 'visible',
                'icon-image': ['get', 'primaryImage', ['get','style', ['properties']]],
                'icon-size': ['interpolate', ['linear'], ['zoom'], 1, 0.4, 15, 1],
                'icon-allow-overlap': true,
                'icon-anchor': 'bottom'
            },
            'metadata': { types: ['Image'] }
        }]

        return this.refresh({ init: true });
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name refresh
	 * @description This function refreshes the map by removing existing layers and sources, adding default layers and sources, and rebuilding the layers.
	 * @param {Object} options - Optional parameter for additional options.
	 * @returns {Array} - An array of layers after the refresh operation.
	 */
    this.refresh = async function (options={}) {
        if (options.select) return geoflo.Layers.moveLayers(this.selectLayers);
        if (!options.init) return this.init(options);
        
        var layers = geoflo.Utilities.cloneDeep(this._layers);

        this._layers = [];
        this._sources = [];

        this.removeEventListeners();
        this.removeLayers(this.defaultLayers);
        this.removeLayers(this.selectLayers);
        this.removeSources(Object.values(geoflo.statics.constants.sources));

        this.addEventListeners();
        this.addSources(Object.values(geoflo.statics.constants.sources));
        this.addLayers(this.defaultLayers, this.options);
        await buildLayers.call(this, layers);
        this.addLayers(this.selectLayers, this.options);

        setTimeout(function() { geoflo.Layers.moveLayers(this.selectLayers); }, 250);
        return this.getLayers();
    }




	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name setCustomLayers
	 * @description This function takes an array of custom layers and options, builds the layers using the buildLayers function, and returns the resulting layers.
	 * @param {Array} layers - An array of custom layers to be processed.
	 * @param {Object} options - Additional options for building the layers.
	 * @returns {Promise<Array>} The processed custom layers.
	 */
    this.setCustomLayers = async function (layers, options) {
        if (!layers) return [];
        return await buildLayers.call(this, layers, options);
    }


	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name getCustomLayers
	 * @description Retrieves the custom layers stored in the object.
	 * @returns {Array} An array containing the custom layers.
	 */
    this.getCustomLayers = function () {
        return this._layers;
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name hasCustomLayers
	 * @description This function determines if there are any custom layers present in the application.
	 * @returns {number} The number of custom layers available.
	 */
    this.hasCustomLayers = function () {
        return this.getCustomLayers().length;
    }

    


	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name getFeatures
	 * @description Retrieves the features from a source based on the provided ID.
	 * @param {string} id - The ID of the source to retrieve features from.
	 * @returns {Array} An array of features from the specified source, or an empty array if the source or features are not found.
	 */
    this.getFeatures = function (id) {
        var source = this.getSource(id);
        if (!source || !source._data) return [];
        return source._data.features;
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name getSelection
	 * @description This function determines the selected feature based on the provided features array and coordinates.
	 * @param {Array} features - An array of features to select from.
	 * @param {Object} coords - The coordinates of the selected feature.
	 * @returns {boolean} Returns true if a feature is selected, false otherwise.
	 */
    this.getSelection = function (features=[], coords) {
        var feature = features && features.length ? features[0] : false;
        if (!feature) return false;
        if (feature.properties.cluster) return Layers.onClusterClick(feature, coords), false;
        return true;
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name getType
	 * @description This function takes a geometry type as input and returns the corresponding general type (Polygon, Polyline, or Point).
	 * @param {string} type - The type of geometry to be evaluated.
	 * @returns {string|boolean} Returns the general type of the geometry (Polygon, Polyline, Point) or false if the type is not recognized.
	 */
    this.getType = function (type) {
        return type === 'Polygon' || type === 'Rectangle' ? 'Polygon' :
        type === 'Polyline' || type === 'LineString' || type === 'Line' ? 'Polyline' :
        type === 'Point' || type === 'Circle' || type === 'Marker' || type === 'Icon' || type === 'Text' ? 'Point' :
        type === 'Image' ? 'Image' :
        false;
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name getSources
	 * @description Retrieves the sources stored in the object.
	 * @returns {Array} An array containing the sources.
	 */
    this.getSources = function () {
        return this.sources;
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name getSource
	 * @description Retrieves a specific source object by its ID from the list of sources.
	 * @param {string} id - The ID of the source to retrieve.
	 * @returns {object|boolean} The source object with the specified ID if found, otherwise false.
	 */
    this.getSource = function (id) {
        if (!id) return false;
        var sources = this.getSources();
        return sources.find(function(source) { return source.id === id })
    }

	/** 
	 * @function
     * @memberof module:geoflo.Layers
	 * @name getSourceIds
	 * @description Retrieves the IDs of all sources.
	 * @returns {Array} An array of source IDs.
	 */
    this.getSourceIds = function () {
        return this.getSources().map(function (s) { return s.id });
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name getLayers
	 * @description Retrieves the layers array from the object.
	 * @returns {Array} The layers array.
	 */
    this.getLayers = function () {
        return this.layers;
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name getLayer
	 * @description Retrieves a layer based on the provided ID or source ID.
	 * @param {string} id - The ID of the layer to retrieve.
	 * @returns {object|boolean} The layer object if found, or false if not found.
	 */
    this.getLayer = function (id, custom) {
        if (!id) return false;
        var layers = custom ? this.getCustomLayers() : this.getLayers();
        var layer = layers.find(function(layer) { return layer.id === id });
        if (!layer) layer = layers.filter(function(layer) { return layer.source === id });
        return layer;
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name getLayerIds
	 * @description Retrieves the IDs of the layers provided or the default layers if none are provided.
	 * @param {Array} layers - An array of layer objects.
	 * @returns {Array} An array of layer IDs.
	 */
    this.getLayerIds = function (layers) {
        var _layers = layers || this.getCustomLayers();
        return _layers.map(function (l) { return l.id });
    }

    this.getLayerType = function (id) {
        let type = '';
        const layer = this.getLayer(id, true);
        if (layer && layer.details) type = layer.details.type;
        return type;
    }



    

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name addSources
	 * @description Adds multiple sources to the context with the given options.
	 * @param {Array} sources - An array of sources to be added.
	 * @param {Object} options - Additional options for adding the sources.
	 * @returns {Array} - An array of all the added sources.
	 */
    this.addSources = function (sources=[], options={}) {
        sources.forEach(function(source) { this.addSource(source, false, options) }, this);
        geoflo.fire('sources.add', { sources: this.getSources() });
        return this.getSources();
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name addSource
	 * @description This function adds a new source to the map using the provided ID and type. It also accepts optional configuration options for the source.
	 * @param {string} id - The unique identifier for the source.
	 * @param {string} type - The type of the source (e.g., 'geojson', 'vector', 'raster', etc.).
	 * @param {Object} [options={}] - Additional configuration options for the source (e.g., features, promoteId, clusterMaxZoom, clusterRadius).
	 * @returns {Object} The newly added source object.
	 */
    this.addSource = function (id, type, options={}) {
        if (!id) throw new Error('No source was provided!');
        
        var opts = { type: options.type || "geojson", data: turf.featureCollection(options.features || []), promoteId: options.promoteId || 'id' };
        if (type && type === 'Point' && !options.noCluster) { opts = Object.assign(opts, { cluster: true, clusterMaxZoom: options.clusterMaxZoom || 14, clusterRadius: options.clusterRadius || 50 }) }

        map.addSource(id, opts);
        this.sources.push(map.getSource(id));
        geoflo.fire('source.add', { id: id, source: this.getSource(id) })
        return this.getSource(id);
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name addLayers
	 * @description Adds multiple layers to the map.
	 * @param {Array} layers - An array of layers to be added to the map.
	 * @param {Object} options - Additional options for adding the layers.
	 * @returns {Array} - An array of layers that have been added to the map.
	 */
    this.addLayers = function (layers=[], options={}) {
        layers.forEach(function(layer, index) { this.addLayer(layer, options, index) }, this);
        geoflo.fire('layers.add', { layers: this.getLayers() });
        buildEvents.call(this);
        return this.getLayers();
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name addLayer
	 * @description This function adds a layer to the map with the provided options. It also updates the layer's metadata, adds the layer to the map, and pushes the layer to the layers array. It triggers a 'layer.add' event and returns the added layer.
	 * @param {Object} layer - The layer object to be added to the map.
	 * @param {Object} [options={}] - Additional options for the layer.
	 * @returns {Object} The added layer.
	 */
    this.addLayer = function (layer, options={}, index) {
        if (!layer || !layer.id) return false;        
        layer.metadata = layer.metadata || options;

        if (map.getLayer(layer.id)) {
            if (!this.layers.find(function(l) { return l.id === layer.id })) this.layers.push(layer);
            return this.getLayer(layer.id);
        }

        map.addLayer(layer);

        layer = map.getLayer(layer.id);
        if (!layer) return console.error(id, 'Layer Not Added!');

        this.layers.push(layer);
        geoflo.fire('layer.add', { id: layer.id, layer: this.getLayer(layer.id) });
        return this.getLayer(layer.id);
    }

    this.addTextLayer = function (options={}) {
        var layers = options.select ? geoflo.Layers.getLayer(geoflo.statics.constants.sources.SELECT) : this.getCustomLayers();
        var field = options.field || 'text';

        this.removeTextLayer(options);

        layers.forEach(function(layer) {
            var id = layer.id + '-Text';

            var filter = ['all', ['==', ["geometry-type"], 'Point'], ["has", field] ];
            if (options.filter) filter = options.filter;
            if (!options.select && options.ids) filter = ['in', 'id', ...options.ids];

            var layout = Object.assign({}, {
                'visibility': 'visible',
                'symbol-placement': 'point',
                'text-rotation-alignment': 'viewport',
                'text-field': ['get', field],
                'text-keep-upright': true,
                'text-allow-overlap': true,
                'text-anchor': 'top',
                'text-size': 12,
                'text-justify': 'center',
                'text-letter-spacing': 0.25,
                'text-line-height': 1.2,
                'text-max-angle': 10,
                'text-offset': [0, 0.5],
                'text-padding': 2,
                'text-rotate': 0,
                'text-transform': 'none',
                'text-font': ['Arial Unicode MS Regular', 'DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                'text-ignore-placement': false,
                'text-max-width': 15
            }, layer.text ? layer.text.layout || {} : {}, options.layout);

            var paint = Object.assign({}, {
                'text-translate-anchor': 'viewport',
                'text-halo-color': ['get', 'primaryColor', ['get','style', ['properties']]],
                'text-halo-width': 1.2,
                'text-color': ['get', 'secondaryColor', ['get','style', ['properties']]],
                'text-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['get', 'opacity', ['get','style', ['properties']]]]
            }, layer.text ? layer.text.paint || {} : {}, options.paint);

            var style = {
                id: id,
                type: 'symbol',
                source: layer.source || layer.details.source || id,
                slot: 'top',
                filter: filter,
                layout: layout,
                paint: paint,
                metadata: { text: true, name: id }
            }
            
            if (!map.getLayer(id)) map.addLayer(style);
        }, this);

        this.showTextLayers = true;
    }





	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name removeSources
	 * @description Removes sources from the map.
	 * @param {Array} sources - An array of source IDs to be removed. If not provided, it defaults to all source IDs.
	 * @returns {void}
	 */
    this.removeSources = function (sources) {
        sources = sources || this.getSourceIds();
        sources.forEach(function(id) { this.removeSource(id) }, this);
        geoflo.fire('sources.remove', { removed: true })
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name removeSource
	 * @description This function removes a source from the map and the internal sources array based on the provided id.
	 * @param {string} id - The id of the source to be removed.
	 * @returns {string} The id of the removed source.
	 */
    this.removeSource = function (id) {
        if (!id) return false;
        if (map.getSource(id)) map.removeSource(id);

        var index = -1;
        index = this.sources.findIndex(function(l) { return l.id === id });
        if (index > -1) this.sources.splice(index, 1);
        
        geoflo.fire('source.remove', { removed: id });
        return id;
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name removeLayers
	 * @description Removes multiple layers from the context.
	 * @param {Array} layers - An array of layer objects to be removed.
	 * @returns {Array} - An array of IDs of the removed layers.
	 */
    this.removeLayers = function (layers) {
        var ids = this.getLayerIds(layers);
        this.removeTextLayer();
        ids.forEach(function(id) { this.removeLayer(id) }, this);
        geoflo.fire('layers.remove', { removed: ids });
        return ids;
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name removeLayer
	 * @description This function removes a layer from the map and the layers array based on the provided id.
	 * @param {string} id - The id of the layer to be removed.
	 * @returns {string} The id of the removed layer.
	 */
    this.removeLayer = function (id) {
        if (!id) return false;
        if (map.getLayer(id)) map.removeLayer(id);

        var index = -1;
        index = this.layers.findIndex(function(l) { return l.id === id });
        if (index > -1) this.layers.splice(index, 1);

        geoflo.fire('layer.remove', { removed: id });
        return id;
    }

    this.removeTextLayer = function (options={}) {
        var layers = this.getLayers();
        layers.forEach(function(layer) { if (layer.metadata.text && map.getLayer(layer.id)) map.removeLayer(layer.id) }, this);
        this.showTextLayers = false;
    }



	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name moveLayers
	 * @description Moves the specified layers on the map.
	 * @param {Array} layers - An array of layer objects to be moved on the map.
	 * @returns {void}
	 */
    this.moveLayers = function (layers) {
        layers = !layers ? this.defaultLayers || [] : layers;
        layers.forEach(function (layer) { if (geoflo.map.getLayer(layer.id)) geoflo.map.moveLayer(layer.id) })
    }



	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name addEventListeners
	 * @description Attaches event listeners based on the provided options.
	 * @param {Object} options - An object containing configuration options for event listeners.
	 * @returns {Object} - The result of the buildEvents function with the provided options.
	 */
    this.addEventListeners = function (options={}) {
        return buildEvents.call(this, { on: true })
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name removeEventListeners
	 * @description Removes event listeners from the element.
	 * @param {Object} options - An object containing options for removing event listeners.
	 * @param {boolean} options.off - A boolean flag to indicate whether to turn off event listeners.
	 * @returns {void}
	 */
    this.removeEventListeners = function (options={}) {
        return buildEvents.call(this, { off: true })
    }

    /**
     * @function
     * @name onClusterClick
     * @memberof module:geoflo.Layers
     * @description Handles the click event on a cluster feature, expanding the cluster if applicable.
     *
     * @param {Object} feature - The cluster feature that was clicked.
     * @returns {boolean} Returns false if the feature does not have a source; otherwise, it performs an action without returning a value.
     */
    this.onClusterClick = function (feature) {
        if (!feature.source) return false;

        var source = map.getSource(feature.source);

        source.getClusterExpansionZoom(feature.properties.cluster_id, function(err,zoom) {
            if (!err) map.easeTo({ center: feature.geometry.coordinates, zoom: zoom + 2 });
        });
    }

    /**
     * @function
     * @name onLayerMouseover
     * @memberof module:geoflo.Layers
     * @description Handles the mouseover event on a layer, highlighting the features if certain conditions are met.
     *
     * @param {Object} event - The event object containing information about the mouseover event.
     * @returns {boolean} Returns false if editing, drawing, or viewing actions are active, if the layer is importing, or if there are no features; otherwise, it highlights the features.
     */
    this.onLayerMouseover = function(event) {
        return 

        var Map = app.Map;
        if (Map.getActions().editing || Map.getActions().drawing || Map.getActions().viewing) { return false };
        if (app[app.ns('layer')]._importing) { return false }
        if (!event.features.length) { return false }

        Map.setHighlight({ clear: true, features: event.features});
    }

    /**
     * @function
     * @name onLayerMouseout
     * @memberof module:geoflo.Layers
     * @description Handles the mouseout event for a layer, removing highlights if certain conditions are met.
     *
     * @param {Object} event - The event object associated with the mouseout event.
     * @returns {boolean} Returns false if the map is in editing, drawing, or viewing mode, or if the layer is being imported; otherwise, it returns undefined.
     */
    this.onLayerMouseout = function(event) {
        return 

        var Map = app.Map;
        if (Map.getActions().editing || Map.getActions().drawing || Map.getActions().viewing) { return false };
        if (app[app.ns('layer')]._importing) { return false }
        
        Map._removeHighlight();
    }


    this.init();


    async function buildLayers (layers=[], options={}) {
        await buildText.call(this);
        if (!layers.length) return false;
        await Promise.all(layers.map(layer => buildLayer.call(this, layer, options)));
        setTimeout(function() { geoflo.Layers.moveLayers(); }, 250);
        if (this.showTextLayers) this.addTextLayer();
        return this.getLayers();
    }

    async function buildLayer (layer, opts) {
        var details = !layer.details && layer.id ? layer : layer.details || {};
        var options = layer.options || {};
        var layers = layer.layers || [];
        var features = layer.features || [];
        var hasFeatures = features && features.length;
        var style = layer.style || false;
        var error;

        if (!details.id || !details.type) error = true;

        const type = details.type === 'ALL' ? 'ALL' : this.getType(details.type);
        if (!type) error = true;

        var metadata = { type: details.type} ;
        details.default ? metadata.default = true : metadata.custom = true;
        details.name ? metadata.name = details.name : false;

        var source = details.source || details.id;
        metadata.source = source;

        if (details.style) delete details.style;

        var settings = {
            type: type,
            source: source,
            id: details.id,
            types: layerTypes[type],
            style: style || {},
            filter: layer.filter,
            images: layer.images,
            details: details,
            options: options,
            layers: layers
        }

        if (type === 'ALL') {
            const promises = Object.keys(layerTypes).filter(key => key !== 'All').map(async key => {
                const layerConfig = { ...settings, type: key, types: layerTypes[key] };

                return key === 'Image' ? buildImage.call(this, layerConfig, options) :
                       key === 'Polygon' ? buildPolygon.call(this, layerConfig, options) :
                       key === 'Polyline' ? buildPolyline.call(this, layerConfig, options) :
                       key === 'Point' ? buildPoint.call(this, layerConfig, options) : [];
            });
    
            const results = await Promise.all(promises);
            layers = results.flat();
        } else {
            layers = type === 'Image' ? await buildImage.call(this, settings, options) :
            type === 'Polygon' ? await buildPolygon.call(this, settings, options) :
            type === 'Polyline' ? await buildPolyline.call(this, settings, options) :
            type === 'Point' ? await buildPoint.call(this, settings, options) : [];
        }
        
        this.removeLayers(layers);
        this.removeSource(source);
        this.addSource(source, type, options);
        this.addLayers(layers, metadata);

        removeLayer.call(this, { layer: details.id, source: source });

        settings.metadata = metadata;

        if (metadata.custom) {
            this._layers.push(settings);
            this._sources.push({ id: source, type: type, options: options });
        }

        if (hasFeatures) geoflo.Features.addFeatures(features);
        
        return new Promise((resolve, reject) => {
            if (error) return resolve(error);

            const ready = setInterval(() => {
                const feats = geoflo.Layers.getFeatures(metadata.source);
                if (hasFeatures && !feats.length) return;
                if (!map.getSource(metadata.source)) return;
                clearInterval(ready);
                resolve({ layer: settings, features: feats });
            }, 1);
        });
    }

    async function buildText () {
        const map = geoflo.map;

        return new Promise(async function (resolve, reject) {
            const url = 'https://docs.mapbox.com/mapbox-gl-js/assets/popup.png';

            if (map.hasImage('text-marker')) return resolve(true);

            map.loadImage(url, async function(error, image) {
                if (error) return reject(error);
                if (map.hasImage('text-marker')) return resolve(image);
                
                map.addImage('text-marker', image, {
                    content: [25, 25, 115, 100],
                    stretchX: [[25, 115]],
                    stretchY: [[25, 100]],
                    pixelRatio: 2,
                    sdf: false
                });
                
                return resolve(image);
            });
        });
    }

    async function buildImage (settings={}, options={}) {
        if (!settings.source) return [];

        var layers = [];
        var source = settings.source;

        for (var i = 0; i < settings.types.length; i++) {
            var type = settings.types[i];
            var style = settings.style;
            var id = settings.id + type;
            var layout, paint;

            if (!settings.images || !settings.images.length) continue;

            for (var j = 0; j < settings.images.length; j++) {
                var image = settings.images[j];
                if (!image) continue;

                var img = await loadImage(image);
                if (!img) continue;
                
                map.hasImage(image.id) ?
                map.updateImage(image.id, img, {pixelRatio: 2}) :
                map.addImage(image.id, img, {pixelRatio: 2});
            }

            layout = Object.assign({}, {
                'visibility': options.visibility || 'visible',
                'icon-image': ['get', 'primaryImage', ['get','style', ['properties']]],
                'icon-size': ['interpolate', ['linear'], ['zoom'], 1, 0.6, 10, 0.8, 15, 1],
                'icon-allow-overlap': true,
                'icon-anchor': 'bottom'
            }, style.image ? style.image.layout || {} : {});

            paint = Object.assign({}, {
                'icon-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0,
                    ['case', ["boolean", ["feature-state", "hidden"], true], 0,
                    ['get', 'opacity', ['get','style', ['properties']]]]]
            }, style.image ? style.image.paint || {} : {});

            style = {
                id: id,
                type: 'symbol',
                source: source,
                slot: style.slot || 'top',
                filter: settings.filter || ['==', "$type", "Point"],
                layout: layout,
                paint: paint
            }

            if (!style) continue;
            layers.push(style)
        }

        return layers;
    }

    async function buildPolygon (settings={}, options={}) {
        if (!settings.source) return [];

        var layers = [];
        var source = settings.source;

        for (var i = 0; i < settings.types.length; i++) {
            var type = settings.types[i];
            var style = settings.style;
            var id = settings.id + type;
            var layout, paint;

            if (type.includes('border')) {
                layout = Object.assign({}, {
                    'visibility': options.visibility || 'visible',
                }, style.border ? style.border.layout || {} : {});

                paint = Object.assign({}, {
                    'line-color': ['get', 'primaryColor', ['get','style', ['properties']]],
                    'line-width': ['case', ["boolean", ['has', 'width', ['get','style', ['properties']]], true], ['get', 'width', ['get','style', ['properties']]], 2],
                    'line-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 0.8]
                }, style.border ? style.border.paint || {} : {});

                style = {
                    id: id,
                    type: 'line',
                    source: source,
                    slot: style.slot || 'bottom',
                    filter: style.border ? style.border.filter || ['==', "$type", "Polygon"] : ['==', '$type', 'Polygon'],
                    layout: layout,
                    paint: paint
                }
            } else if (type.includes('fill')) {
                layout = Object.assign({}, {
                    'visibility': options.visibility || 'visible',
                }, style.fill ? style.fill.layout || {} : {});

                paint = Object.assign({}, {
                    'fill-color': ['get', 'secondaryColor', ['get','style', ['properties']]],
                    'fill-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 0.5]
                }, style.fill ? style.fill.paint || {} : {});

                style = {
                    id: id,
                    type: 'fill',
                    source: source,
                    slot: style.slot || 'bottom',
                    filter: style.fill ? style.fill.filter || ['==', "$type", "Polygon"] : ['==', '$type', 'Polygon'],
                    layout: layout,
                    paint: paint
                }
            }

            if (!style) continue;
            layers.push(style)
        }

        return layers;
    }

    async function buildPolyline (settings={}, options={}) {
        if (!settings.source) return [];

        var layers = [];
        var source = settings.source;

        for (var i = 0; i < settings.types.length; i++) {
            var type = settings.types[i];
            var style = settings.style;
            var id = settings.id + type;
            var layout, paint;

            if (type.includes('line')) {
                layout = Object.assign({}, {
                    'visibility': options.visibility || 'visible',
                    'line-miter-limit': 2,
                    'line-join': 'round',
                    'line-cap': 'round'
                }, style.line ? style.line.layout || {} : {});

                paint = Object.assign({}, {
                    'line-color': ['get', 'primaryColor', ['get','style', ['properties']]],
                    'line-width': ['case', ["boolean", ['has', 'width', ['get','style', ['properties']]], true], ['get', 'width', ['get','style', ['properties']]], 4],
                    'line-offset': ['case', ["boolean", ["has", "offset"], true], ["get", "offset"], 0],
                    'line-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 1]
                }, style.line ? style.line.paint || {} : {});

                style = {
                    id: id,
                    type: 'line',
                    source: source,
                    slot: style.slot || 'middle',
                    filter: style.line ? style.line.filter || ['==', "$type", "LineString"] : ['==', '$type', 'LineString'],
                    layout: layout,
                    paint: paint
                }
            }

            if (!style) continue;
            layers.push(style)
        }

        return layers;
    }

    async function buildPoint (settings={}, options={}) {
        if (!settings.source) return [];

        var layers = [];
        var source = settings.source;
        var dontRender = false; //map.getStyle().imports && map.getStyle().imports.length;

        for (var i = 0; i < settings.types.length; i++) {
            var type = settings.types[i];
            var style = settings.style;
            var id = settings.id + type;
            var layout, paint;

            if (type.includes('circle')) {
                if (options.noCircle) continue;

                layout = Object.assign({}, {
                    'visibility': options.visibility || 'visible',
                }, style.circle ? style.circle.layout || {} : {});

                paint = Object.assign({}, {
                    'circle-radius': 10,
                    'circle-stroke-width': 2,
                    'circle-color': ['get', 'secondaryColor', ['get','style', ['properties']]],
                    'circle-stroke-color': ['get', 'primaryColor', ['get','style', ['properties']]],
                    'circle-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['get', 'opacity', ['get','style', ['properties']]]]],
                    'circle-stroke-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['get', 'opacity', ['get','style', ['properties']]]]]
                }, style.circle ? style.circle.paint || {} : {});

                style = {
                    id: id,
                    type: 'circle',
                    source: source,
                    slot: style.slot || 'top',
                    filter: style.circle ? style.circle.filter || ['==', "$type", "Point"] : ['==', "$type", "Point"],
                    layout: layout,
                    paint: paint
                }

                if (type.includes('cluster')) {
                    if (options.noCluster) continue;
                    style.filter = ['has', 'point_count'];
                    style.paint['circle-color'] = options.secondaryColor || geoflo.options.colors.secondaryColor;
                    style.paint['circle-stroke-color'] = options.primaryColor || geoflo.options.colors.primaryColor;
                }
            } else if (type.includes('icon')) {
                if (dontRender) continue;

                layout = Object.assign({}, {
                    'visibility': options.visibility || 'visible',
                    'icon-optional': true,
                    'text-field': ['get', 'primaryIcon', ['get','style', ['properties']]],
                    'text-rotate': ['get', 'rotate', ['get','style', ['properties']]],
                    'text-rotation-alignment': 'viewport',
                    'text-size': 14,
                    'text-line-height': 1,
                    'text-padding': 0,
                    'text-offset': [0, 0.2],
                    'text-justify': 'auto',
                    'text-anchor': 'center',
                    'text-allow-overlap': true,
                    'text-font': ['Font Awesome 6 Pro Solid'],
                    'text-ignore-placement': true
                }, style.icon ? style.icon.layout || {} : {});

                paint = Object.assign({}, {
                    'text-translate-anchor': 'viewport',
                    'text-halo-color': ['get', 'primaryColor', ['get','style', ['properties']]],
                    'text-halo-width': 0,
                    'text-color': ['get', 'primaryColor', ['get','style', ['properties']]],
                    'text-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['get', 'opacity', ['get','style', ['properties']]]]]
                }, style.icon ? style.icon.paint || {} : {});

                style = {
                    id: id,
                    type: 'symbol',
                    source: source,
                    slot: style.slot || 'top',
                    filter: style.icon ? style.icon.filter || ['==', "$type", "Point"] : ['==', "$type", "Point"],
                    layout: layout,
                    paint: paint
                }

                if (type.includes('cluster')) {
                    if (options.noCluster) continue;
                    style.filter = ['has', 'point_count'];
                    style.layout['text-field'] = options.primaryIcon || '';
                    style.paint['text-halo-color'] = options.secondaryColor || geoflo.options.colors.secondaryCold;
                    style.paint['text-color'] = options.primaryColor || geoflo.options.colors.secondaryText;
                } else if (type.includes('count')) {
                    if (options.noCluster) continue;
                    style.filter = ['has', 'point_count'];

                    style.layout = {
                        'visibility': options.visibility || 'visible',
                        'icon-optional': true,
                        'text-field': options.countIcon || '',
                        'text-size': {
                            'base': 14,
                            'stops': [[10, 16], [14, 14]]
                        },
                        'text-line-height': 1,
                        'text-padding': 0,
                        'text-offset': [0.5, -0.6],
                        'text-justify': 'auto',
                        'text-anchor': 'center',
                        'text-allow-overlap': true,
                        'text-font': ['Font Awesome 6 Pro Solid'],
                        'text-ignore-placement': true
                    }

                    style.paint = {
                        'text-translate-anchor': 'viewport',
                        'text-color': options.countIconColor || geoflo.options.colors.primaryText,
                        'text-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['get', 'opacity', ['get','style', ['properties']]]]
                    }
                }
            } else if (type.includes('text')) {
                if (dontRender) continue;

                if (type.includes('count')) {
                    if (options.noCluster) continue;

                    layout = Object.assign({}, {
                        'text-field': ['get', 'point_count_abbreviated'],
                        'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                        'text-size': {
                            'base': 14,
                            'stops': [[10, 14], [14, 12]]
                        },
                        'text-offset': [0.55, -0.9],
                    }, style.text ? style.text.layout || {} : {});
    
                    paint = Object.assign({}, {
                        'text-color': options.countTextColor || geoflo.options.colors.secondaryText,
                        'text-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['get', 'opacity', ['get','style', ['properties']]]]
                    }, style.text ? style.text.paint || {} : {});
    
                    style = {
                        id: id,
                        type: 'symbol',
                        source: source,
                        slot: style.slot || 'top',
                        filter: ['has', 'point_count'],
                        layout: layout,
                        paint: paint
                    }
                }
            }

            if (!style) continue;
            layers.push(style)
        }

        return layers;
    }

    function buildEvents (options={}) {
        var ids = this.getLayerIds();
        if (!ids.length) return;

        if (options.off) {
            map.off('mousemove', ids, this.onLayerMouseover);
            map.off('mouseleave', ids, this.onLayerMouseout);
        } else if (options.on) {
            map.on('mousemove', ids, this.onLayerMouseover);
            map.on('mouseleave', ids, this.onLayerMouseout);
        } else if (!options) {
            buildEvents({ off: true });
            buildEvents({ on: true })
        }
    }

    function removeLayer (options) {
        if (!options) return false;
        var layer = this._layers.findIndex((e) => { return e.id === options.layer });
        var source = this._sources.findIndex((e) => { return e.id === options.source });
        if (layer !== -1) this._layers.splice(layer, 1);
        if (source !== -1) this._sources.splice(source, 1);
    }

    async function loadImage (options={}) {
        if (!options.url || !options.id) return false;
        return new Promise(async function (resolve, reject) {
            const url = options.url + '?' + new Date().getTime();
            map.loadImage(url, function(error, image) { return error ? reject(error) : resolve(image); });
        });
    }

    function loadImageAsDataURL(imageUrl, callback) {
        /* loadImageAsDataURL(options.url, (data) => {
            options.data = data;
            const svgMarker = createSVGMarker(options);
            svgToImage(svgMarker, (img) => resolve(img) );
        }); */
        
        const img = new Image();
        img.setAttribute('crossOrigin', 'anonymous');
        img.onload = () => {
            const canvas = document.createElement("canvas");
            canvas.width = img.width;
            canvas.height = img.height;
            const ctx = canvas.getContext("2d");
            ctx.drawImage(img, 0, 0);
            const dataURL = canvas.toDataURL("image/png");
            callback(dataURL);
        };
        img.src = imageUrl + '?' + new Date().getTime();
    }

    function createSVGMarker(options={}) {
        const svgNS = "http://www.w3.org/2000/svg";

        const data = options.data;
        const width = options.width;
        const height = options.height;
        const borderWidth = options["stroke-width"] || 5;

        const svg = document.createElementNS(svgNS, "svg");
        svg.setAttribute("width", width);
        svg.setAttribute("height", height);
        svg.setAttribute("viewBox", `0 0 ${width + 2 * borderWidth} ${height + 2 * borderWidth}`);
    
        const marker = document.createElementNS(svgNS, "ellipse");
        marker.setAttribute("cx", (width + 2 * borderWidth) / 2);
        marker.setAttribute("cy", (height + 2 * borderWidth) / 2);
        marker.setAttribute("rx", width / 2);
        marker.setAttribute("ry", height / 2);
        marker.setAttribute("fill", 'transparent');
        marker.setAttribute("stroke", options.stroke || geoflo.getColors().secondaryBackground);
        marker.setAttribute("stroke-width", borderWidth);
    
        const image = document.createElementNS(svgNS, "image");
        image.setAttributeNS("http://www.w3.org/1999/xlink", "href", data);
        image.setAttribute("x", borderWidth);
        image.setAttribute("y", borderWidth);
        image.setAttribute("width", width);
        image.setAttribute("height", height);
        image.setAttribute("preserveAspectRatio", "xMidYMid slice");
        image.setAttribute("clip-path", "ellipse()");
    
        svg.appendChild(marker);
        svg.appendChild(image);
    
        return svg;
    }
    
    function svgToImage(svgElement, callback) {
        const svgData = new XMLSerializer().serializeToString(svgElement);
        const svgBlob = new Blob([svgData], { type: "image/svg+xml;charset=utf-8" });
        const url = URL.createObjectURL(svgBlob);
        const img = new Image();

        img.onload = () => { URL.revokeObjectURL(url), callback(img); };
        img.src = url;
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Layers);

/***/ }),

/***/ "./src/Locate.js":
/*!***********************!*\
  !*** ./src/Locate.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Locate
 * @description This module provides the geolocation functionality for the Geoflo application. It allows users to locate their current position on the map and track their location.
 * @returns {Object} Returns the Locate object.
 */
const Locate = function () {
    const geoflo = this.geoflo;

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name init
	 * @description This function initializes the geolocation control on the map with the specified options.
	 * @param {Object} options - The options for configuring the geolocation control.
	 * @param {boolean} [options.enableHighAccuracy=true] - Whether to enable high accuracy for geolocation.
	 * @param {boolean} [options.trackUserLocation=true] - Whether to track the user's location.
	 * @param {boolean} [options.showUserHeading=true] - Whether to show the user's heading.
	 * @param {boolean} [options.showAccuracyCircle=false] - Whether to show the accuracy circle.
	 * @returns {Object} The current instance of the map with the geolocation control added.
	 */
    this.init = function (options={}) {
        this.options = geoflo.Utilities.extend({}, options);

        this.control = new mapboxgl.GeolocateControl({
            positionOptions: { enableHighAccuracy: true },
            trackUserLocation: true,
            showUserHeading: true,
            showAccuracyCircle: false
        });

        this.control.on('geolocate', this.onControlEvent.bind(this))
        geoflo.map.addControl(this.control, 'top-right');
        //this.ready();
        return this;
    }

    this.hide = function () {
        this.control._container.style.display = 'none';
    }

    this.show = function () {
        this.control._container.style.display = 'block';
    }

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name ready
	 * @description This function checks if the geolocate button is available in the control and then calls the build function.
	 * @params {Object} control - The control object containing the geolocate button.
	 * @returns {void}
	 */
    this.ready = function () {
        var _this = this;
        var control = this.control;

        var ready = setInterval(function() {
            if (!control._geolocateButton) return;
            _this.build();
            return clearInterval(ready);
        }, 1);
    }

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name build
	 * @description This function hides the user location dot marker and the associated button.
	 * @params {void} None
	 * @returns {void}
	 */
    this.build = function () {
        this.button = this.control._geolocateButton;
        this.marker = this.control._userLocationDotMarker;
        this.button.addEventListener('click', this.onControlEvent.bind(this));
        //this.getButton().style.display = 'none';
    }

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name update
	 * @description This function updates the map bearing and center based on the provided options.
	 * @param {Object} options - The options object.
	 * @param {number} options.alpha - The alpha value.
	 * @returns {void}
	 */
    this.update = function (options={}) {
        const alpha = options.alpha;
        const heading = this.heading();
        const bearing = this.bearing();
        const following = this.following;
        if (!heading || !following || geoflo.mapMoving) return;
        geoflo.map.setBearing(heading - 1);
        geoflo.map.setCenter(this.marker._lngLat);
    }

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name heading
	 * @description Retrieves the heading value from the control object.
	 * @returns {string} The heading value from the control object.
	 */
    this.heading = function () {
        return this.control._heading;
    }

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name bearing
	 * @description This function retrieves the current bearing of the map.
	 * @returns {number} The bearing of the map.
	 */
    this.bearing = function () {
        return geoflo.map.getBearing();
    }

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name locate
	 * @description Initiates the process of locating the user's current position on the map.
	 * @returns {void}
	 */
    this.locate = function () {
        this.locating = true;
        this.unlocated = false;
        this.control._follow = this.following = false;
        addClasses(this.button, ['mapboxgl-ctrl-geolocate-waiting']);
        geoflo.fire('locate.on', { state: this.state() });
        return this.control.trigger();
    }

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name relocate
	 * @description Relocates the geolocation control to the user's current location. If the control is set to follow the user's location, it changes the state to 'ACTIVE_LOCK'. Adds the 'mapboxgl-ctrl-geolocate-active' class to the button element. Triggers the control
	 * @params {void}
	 * @returns {void}
	 */
    this.relocate = function () {
        if (this.following) this.state('ACTIVE_LOCK');
        addClasses(this.button, ['mapboxgl-ctrl-geolocate-active']);
        return this.control.trigger();
    }

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name unlocate
	 * @description Sets the state to 'ACTIVE_LOCK', disables following, enables drag pan on the map, and triggers the control.
	 * @returns {Object} The result of triggering the control.
	 */
    this.unlocate = function () {
        this.state('ACTIVE_LOCK');
        this.control._follow = this.following = false;
        geoflo.map.dragPan.enable();
        this.unlocated = true;
        geoflo.fire('locate.off', { state: this.state() });
        return this.control.trigger();
    }

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name follow
	 * @description Enables the follow functionality for the geolocate control. When activated, adds a specific class to the button, disables drag panning on the map, and sets the follow state to true.
	 * @params {Object} geoflo - The context object containing the map and control references.
	 * @returns {boolean} - Returns true to indicate that the follow functionality has been enabled.
	 */
    this.follow = function () {
        addClasses(this.button, ['mapboxgl-ctrl-geolocate-follow']);
        geoflo.map.dragPan.disable();
        return this.control._follow = this.following = true;
    }

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name state
	 * @description This function is used to get or set the state of the control. If a state parameter is provided, it sets the control's watch state to that value. If no state parameter is provided, it returns the current watch state of the control.
	 * @param {boolean} state - The state to set for the control.
	 * @returns {boolean} - The current watch state of the control.
	 */
    this.state = function (state) {
        return state ? this.control._watchState = state : this.control._watchState;
    }



	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name getButton
	 * @description Returns the geolocate button element from the control.
	 * @returns {Element} The geolocate button element.
	 */
    this.getButton = function () {
        return this.control._geolocateButton;
    }


    

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name removeClasses
	 * @description This function removes classes related to geolocation control from a button element.
	 * @params {Element} button - The button element from which classes will be removed.
	 */
    this.removeClasses = function () {
        var button = this.button;
        if (!button) return;
        button.classList.remove('mapboxgl-ctrl-geolocate-waiting');
        button.classList.remove('mapboxgl-ctrl-geolocate-active');
        button.classList.remove('mapboxgl-ctrl-geolocate-active-error');
        button.classList.remove('mapboxgl-ctrl-geolocate-background');
        button.classList.remove('mapboxgl-ctrl-geolocate-background-error');
        button.classList.remove('mapboxgl-ctrl-geolocate-follow');
    }



    /**
     * @function
     * @name onAdd
     * @memberof module:geoflo.Locate
     * @description Logs the event object to the console.
     *
     * @param {Event} event - The event object that is triggered when an action occurs.
     * @returns {void} This function does not return a value.
     * 
     * @author Solutegrate
     * @copyright 2025
     */
    this.onAdd = function (event) {
        console.log(event)
    }

    /**
     * @function
     * @name onControlEvent
     * @memberof module:geoflo.Locate
     * @description Handles control events, updating the marker and managing the state based on the event details.
     *
     * @param {Object} event - The event object containing details about the control event.
     * @param {Object} event.coords - The coordinates associated with the event, if available.
     * @param {HTMLElement} event.target - The target element that triggered the event.
     * @returns {void} This function does not return a value.
     * 
     * @author Solutegrate
     * @copyright 2025
     */
    this.onControlEvent = function (event) {
        //this.button = this.button || event.button;
        this.marker = this.control._userLocationDotMarker;

        this.removeClasses();

        if (event.coords) {
            this.onLocate(event)
        } else if (event.target === this.button) {
            console.error('Locate: ', this.state(), event, this.button);
            geoflo.map.dragPan.enable();
            if (this.state() === 'OFF') return this.locate();
            if (this.state() === 'BACKGROUND' && !this.following) return this.relocate();
            if (this.state() === 'ACTIVE_LOCK' && !this.following) return this.follow();
            this.unlocate();
        } 
    }

    /**
     * @function
     * @name onLocate
     * @memberof module:geoflo.Locate
     * @description Handles the location update event, updating the current location and firing an event with the new state.
     *
     * @param {Object} event - The event object containing location data.
     * @param {Object} event.coords - The coordinates of the current location.
     * @returns {void} This function does not return a value.
     * 
     * @author Solutegrate
     * @copyright 2025
     */
    this.onLocate = function (event) {
        if (this.state() === 'ACTIVE_LOCK' && this.locating) {
            this.locating = false;
            this.currentLocation = event.coords;
            addClasses(this.button, ['mapboxgl-ctrl-geolocate-active']);
        }

        geoflo.fire('locate.update', { locating: this.locating, coords: event.coords, state: this.state() });
    }

    /**
     * @function
     * @name onMapMove
     * @memberof module:geoflo.Locate
     * @description Handles the map movement event, updating the button classes based on the current state and conditions.
     *
     * @param {Object} event - The event object representing the map movement.
     * @returns {void} This function does not return a value.
     * 
     * @author Solutegrate
     * @copyright 2025
     */
    this.onMapMove = function (event) {
        if (!this.button || this.following || this.unlocated) return;
        if (this.state() === 'ACTIVE_LOCK') return addClasses(this.button, ['mapboxgl-ctrl-geolocate-active']);
        addClasses(this.button, ['mapboxgl-ctrl-geolocate-background']);
    }

    this.init();

    function addClasses (button, classes=[]) {
        if (!button) return;
        classes.forEach(function(c) { c ? button.classList.add(c) : false })
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Locate);

/***/ }),

/***/ "./src/Mesh.js":
/*!*********************!*\
  !*** ./src/Mesh.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Mesh
 * @description This module provides the mesh functionality for the Geoflo application. It allows users to create a mesh of features by splitting them into segments and checking for intersections.
 * @param {Array} originalFeatures - An array of features to be added to the mesh.
 * @param {boolean} linesOnly - A flag indicating whether only lines should be added to the mesh.
 * @returns {Object} Returns the Mesh object.
 */
const Mesh = function (originalFeatures, linesOnly) {
    var segmentId = 1;
    var allSegments = [];
    var featureIndex = {};

    const geoflo = this.geoflo;

	/**
	 * @function
     * @memberof module:geoflo.Mesh
	 * @name addNewFeatures
	 * @description This function takes new features, splits them into segments, checks for intersections, and updates the existing segments accordingly.
	 * @param {Array} features - An array of new features to be added.
	 * @return {Array} Returns an array containing all mesh segments.
	 */
    this.addNewFeatures = function(features) {
        var allNewFeatures = splitAndCheckForIntersections(features);
        var newSegments = splitIntoTwoPointSegmentsAndAddIds(allNewFeatures);
        var segmentsWithCutPoints = checkForIntersections(newSegments, allSegments);
        allSegments = [].concat(geoflo.Utilities.consumableArray(cutSegments(allSegments, segmentsWithCutPoints)), geoflo.Utilities.consumableArray(cutSegments(newSegments, segmentsWithCutPoints)));
        return this.getFeatures();
    };

	/**
	 * @function
     * @memberof module:geoflo.Mesh
	 * @name getFeatures
	 * @description Returns all of the features in the mesh.
	 * @return {Array} Returns an array containing all feature segments.
	 */
    this.getFeatures = function() {
        return allSegments;
    };

	/**
	 * @function
     * @memberof module:geoflo.Mesh
	 * @name splitSegmentAtPoint
	 * @description This function takes a segment ID and coordinates of a point to split the segment. It creates two new segments by splitting the original segment at the specified point and updates the feature index.
	 * @param {string} segmentId - The ID of the segment to be split.
	 * @param {Array<number>} pointCoords - The coordinates of the point where the segment should be split.
	 */
    this.splitSegmentAtPoint = function(segmentId, pointCoords) {
        var feature = featureIndex[segmentId];
        if (feature !== undefined) {
            var pos = allSegments.indexOf(feature);
            allSegments.splice(pos, 1);
            var line1 = geoflo.Utilities.createLineWithLength([pointCoords, feature.geometry.coordinates[0]]);
            var line2 = geoflo.Utilities.createLineWithLength([pointCoords, feature.geometry.coordinates[1]]);
            addFeatureToIndex(line1);
            addFeatureToIndex(line2);
            allSegments.push(line1, line2);
        } else {
            console.error("splitSegmentAtPoint: no original feature for id ", segmentId);
        }
    };

	/**
	 * @function
     * @memberof module:geoflo.Mesh
	 * @name getFeaturesFromIndex
	 * @description This function takes an array of features and retrieves the corresponding features from an index based on their IDs.
	 * @param {Array} features - The array of features to retrieve from the index.
	 * @returns {Array} The array of features retrieved from the index.
	 */
    this.getFeaturesFromIndex = function(features) {
        var result = [];
        features.forEach(function(feature) {
            var id = feature.id || feature.properties.id;
            var originalFeature = featureIndex[id];
            if (originalFeature !== undefined) {
                result.push(originalFeature);
            }
        });
        return result;
    };

	/**
	 * @function
     * @memberof module:geoflo.Mesh
	 * @name getFeatureById
	 * @description Retrieves a feature by its ID.
	 * @param {number} id - The ID of the feature to retrieve.
	 * @returns {object} The feature object corresponding to the provided ID.
	 */
    this.getFeatureById = function(id) {
        return getFeatureById(id);
    };

	/**
	 * @function
     * @memberof module:geoflo.Mesh
	 * @name getFeaturesByParentId
	 * @description Retrieves features based on the parent ID. The parent ID is used to retrieve cold features associated with the segment.
	 * @param {number} id - The parent ID to retrieve features for.
	 * @returns {Array} - An array of features associated with the parent ID.
	 */
    this.getFeaturesByParentId = function(id) {
        return getFeaturesByParentId(id);
    };

	/**
	 * @function
     * @memberof module:geoflo.Mesh
	 * @name removeFeature
	 * @description Removes a feature with the specified ID.
	 * @param {number} id - The ID of the feature to be removed.
	 * @returns {boolean} - Returns true if the feature was successfully removed, false otherwise.
	 */
    this.removeFeature = function (id) {
        return removeFeature(id);
    };


    if (originalFeatures) allSegments = splitAndCheckForIntersections(originalFeatures);


    function addFeatureToIndex(feature, parent) {
        if (featureIndex[segmentId] || getFeatureById(segmentId)) return false;

        featureIndex[segmentId] = feature;
        feature.id = segmentId;
        feature.parent = parent;

        geoflo.Utilities.setProperty(feature, 'id', segmentId);
        geoflo.Utilities.setProperty(feature, 'parent', parent);

        segmentId++;
        return true;
    }

    function addClickSegementsToMesh() {
        if (!geoflo.options.snapping.enable) return false;
    
        var meshFeatures = [];
    
        if (geoflo.closestPoint && geoflo.closestPoint.borders && geoflo.closestPoint.id !== undefined) {
            geoflo.meshIndex.splitSegmentAtPoint(geoflo.closestPoint.id, geoflo.closestPoint.coords);
            geoflo.updateMeshData();
        }
    
        if (geoflo.snapFeature) {
            if (geoflo.snapFeature.geometry.type === "LineString") {
                if (!geoflo.Utilities.isEmptyLineString(geoflo.snapFeature)) {
                    meshFeatures.push(geoflo.snapFeature);
                }
            } else if (geoflo.snapFeature.geometry.type === "Point") {
                geoflo.Utilities.setProperty(geoflo.snapFeature, 'startPoint', true);
                geoflo.startPoint = geoflo.Utilities.cloneDeep(geoflo.snapFeature);
                meshFeatures.push(geoflo.snapFeature);
            }
        }
    
        if (meshFeatures.length > 0) geoflo.addFeaturesToMesh(meshFeatures);
    }

    function coordinatesToLineStrings(coords, result, parent) {
        var firstPoint = turf.truncate(turf.point(coords[0]), { precision: 7, coordinates: 2, mutate: true });
        var secondPoint = null;

        for (var index = 1; index < coords.length; index++) {
            secondPoint = turf.truncate(turf.point(coords[index]), { precision: 7, coordinates: 2, mutate: true });
            
            if (!geoflo.Utilities.isPointEqual(firstPoint.geometry.coordinates, secondPoint.geometry.coordinates)) {
                var line = turf.lineString([firstPoint.geometry.coordinates, secondPoint.geometry.coordinates]);
                var added = addFeatureToIndex(line, parent);
                added ? result.push(line) : false;
            }

            firstPoint = secondPoint;
        }
    }

    function splitIntoTwoPointSegmentsAndAddIds(features) {
        var result = [];
        if (!features || !features.length) return result;

        features.forEach(function(feature) {
            var type = feature.geometry.type;
            var id = feature.parent || feature.properties.parent || feature.id || feature.properties.id;
            var added;

            if (linesOnly && type !== "LineString" && !feature.properties.unfill) {
                feature = geoflo.Utilities.cloneDeep(feature);
                added = addFeatureToIndex(feature, id);
                return added ? result.push(feature) : false;
            }

            if (type === "MultiPolygon") {
                feature.geometry.coordinates.forEach(function(coords) {
                    coords.forEach(function(subCoords) {
                        coordinatesToLineStrings(subCoords, result, id);
                    });
                });
            } else if (type === "Polygon") {
                feature.geometry.coordinates.forEach(function(coords) {
                    coordinatesToLineStrings(coords, result, id);
                });
            } else if (type === "MultiLineString") {
                feature.geometry.coordinates.forEach(function(coords) {
                    coordinatesToLineStrings(coords, result, id);
                });
            } else if (type === "LineString") {
                coordinatesToLineStrings(feature.geometry.coordinates, result, id);
            } else if (type === "Point") {
                feature = geoflo.Utilities.cloneDeep(feature);
                added = addFeatureToIndex(feature, id);
                added ? result.push(feature) : false;
            }
        });

        return result;
    }

    function appendCutFeatures(segmentsWithCutPoints, feature, cutPointFeatures) {
        var id = feature.id || feature.properties.id;
        var segCutPoints = segmentsWithCutPoints[id];
    
        if (segCutPoints === undefined) {
            segCutPoints = [];
            segmentsWithCutPoints[id] = segCutPoints;
        }
    
        cutPointFeatures.forEach(function(feature) {
            var newCutPoint = geoflo.Utilities.reducePrecision(feature.geometry.coordinates);
            var cutPoint = segCutPoints.findIndex(function(element) { return element[0] === newCutPoint[0] && element[1] === newCutPoint[1]; });
            if (cutPoint === -1) { segCutPoints.push(newCutPoint); }
        });
    };

    function checkForIntersections(knownSegments, newSegments) {
        var segmentsWithCutPoints = {};

        var processIntersectionPoint = function processIntersectionPoint(point, feature1, feature2) {
            var pointCoords = point.geometry.coordinates;
            var seg1Coords = feature1.geometry.coordinates;
            var seg2Coords = feature2.geometry.coordinates;
            var addFeature1Point = false;
            var addFeature2Point = false;
            var closestPointAdded = false;

            if (!geoflo.Utilities.isPointEqual(pointCoords, seg1Coords[0]) && !geoflo.Utilities.isPointEqual(pointCoords, seg1Coords[1])) {
                var endpoint1 = turf.point(seg1Coords[0]);
                var endpoint2 = turf.point(seg1Coords[1]);
                var distanceEndpoint1 = turf.distance(point, endpoint1);
                var distanceEndpoint2 = turf.distance(point, endpoint2);

                var closestEndpoint = distanceEndpoint1 < distanceEndpoint2 ? endpoint1 : endpoint2;

                var pointOnLine = turf.pointOnLine(feature2, closestEndpoint);
                if (pointOnLine.properties.dist < geoflo.statics.constants.MIN_DISTANCE) {
                    appendCutFeatures(segmentsWithCutPoints, feature2, [closestEndpoint]);
                    closestPointAdded = true;
                } else {
                    addFeature1Point = true;
                }
            }
            if (!geoflo.Utilities.isPointEqual(pointCoords, seg2Coords[0]) && !geoflo.Utilities.isPointEqual(pointCoords, seg2Coords[1])) {
                var _endpoint = turf.point(seg2Coords[0]);
                var _endpoint2 = turf.point(seg2Coords[1]);
                var _distanceEndpoint = turf.distance(point, _endpoint);
                var _distanceEndpoint2 = turf.distance(point, _endpoint2);

                var _closestEndpoint = _distanceEndpoint < _distanceEndpoint2 ? _endpoint : _endpoint2;

                var _pointOnLine = turf.pointOnLine(feature1, _closestEndpoint);
                if (_pointOnLine.properties.dist < geoflo.statics.constants.MIN_DISTANCE) {
                    appendCutFeatures(segmentsWithCutPoints, feature1, [_closestEndpoint]);
                    closestPointAdded = true;
                } else {
                    addFeature2Point = true;
                }
            }

            if (!closestPointAdded) {
                if (addFeature1Point) {
                    appendCutFeatures(segmentsWithCutPoints, feature1, [point]);
                }
                if (addFeature2Point) {
                    appendCutFeatures(segmentsWithCutPoints, feature2, [point]);
                }
            }
        };

        var checkIfPointInCloseRange = function checkIfPointInCloseRange(feature, coords) {
            var pointOnline = turf.pointOnLine(feature, turf.point(coords));
            if (pointOnline.properties.dist < geoflo.statics.constants.MIN_DISTANCE) {
                if (!geoflo.Utilities.isPointAtVertex(feature.geometry.coordinates, coords)) {
                    appendCutFeatures(segmentsWithCutPoints, feature, [pointOnline]);
                    return true;
                }
            }
            return false;
        };

        var sameSegments = knownSegments === newSegments;

        for (var knownIndex = 0; knownIndex < knownSegments.length; knownIndex++) {
            var segmentFeature1 = knownSegments[knownIndex];
            var feature1Type = segmentFeature1.geometry.type;

            for (var newIndex = sameSegments ? knownIndex + 1 : 0; newIndex < newSegments.length; newIndex++) {
                var segmentFeature2 = newSegments[newIndex];
                var feature2Type = segmentFeature2.geometry.type;
                var id = segmentFeature2.id || segmentFeature2.properties.id;

                if (feature1Type === "LineString" && feature2Type === "LineString") {
                    if (geoflo.Utilities.isOverlapping(segmentFeature1, segmentFeature2)) {
                        var intersectionPoints = turf.lineIntersect(segmentFeature1, segmentFeature2).features;

                        if (intersectionPoints.length > 0) {
                            if (intersectionPoints.length > 1) console.error(intersectionPoints.length + " intersection points received");
                            var point = intersectionPoints[0];
                            processIntersectionPoint(point, segmentFeature1, segmentFeature2);
                        } else {
                            var seg1Coords = segmentFeature1.geometry.coordinates;
                            var seg2Coords = segmentFeature2.geometry.coordinates;
                            checkIfPointInCloseRange(segmentFeature1, seg2Coords[0]);
                            checkIfPointInCloseRange(segmentFeature1, seg2Coords[1]);
                            checkIfPointInCloseRange(segmentFeature2, seg1Coords[0]);
                            checkIfPointInCloseRange(segmentFeature2, seg1Coords[1]);
                        }

                        if (getFeatureById(id)) {
                            console.log('Existing Line: ', segmentFeature2)
                            var pos = allSegments.indexOf(getFeatureById(id));
                            allSegments.splice(pos, 1);
                        }
                    }
                } else if (feature1Type === "Point" || feature2Type === "Point") {
                    if (feature2Type === "Point" && feature2Type === "Point") {
                        console.log("Point & Point");
                    } else {
                        console.log("Point & LineString");
                        var _point = feature1Type === "Point" ? segmentFeature1 : segmentFeature2;
                        var line = feature1Type === "LineString" ? segmentFeature1 : segmentFeature2;

                        id = _point.id || _point.properties.id;

                        if (checkIfPointInCloseRange(line, _point.geometry.coordinates)) {
                            segmentsWithCutPoints[id] = [];
                        }
                    }

                    if (getFeatureById(id)) {
                        console.log('Existing Point: ', segmentFeature2)
                        var pos = allSegments.indexOf(getFeatureById(id));
                        allSegments.splice(pos, 1);
                    }
                }
            }
        }

        return segmentsWithCutPoints;
    }

    function cutSegments(newSegments, segmentsWithCutPoints) {
        var result = [];

        newSegments.forEach(function(segment) {
            var id = segment.id || segment.properties.id;

            if (segment.geometry.type === "LineString") {
                var cutPoints = segmentsWithCutPoints[id];

                if (cutPoints !== undefined) {
                    var fc = turf.lineSplit(segment, turf.multiPoint(cutPoints));
                    turf.featureEach(fc, function(feature) {
                        var length = turf.lineDistance(feature);
                        if (length > geoflo.statics.constants.MIN_SEGMENT_LENGTH) {
                            geoflo.Utilities.setProperties(feature, { length: length });
                            addFeatureToIndex(feature);
                            result.push(feature);
                        } else {
                            console.error("0 length feature (", length, ") after line split: ", JSON.stringify(feature));
                        }
                    });
                } else {
                    var length = turf.lineDistance(segment);
                    if (length > geoflo.statics.constants.MIN_SEGMENT_LENGTH) {
                        geoflo.Utilities.setProperties(segment, { length: length });
                        result.push(segment);
                    } else {
                        console.error("0 length feature (", length, ") existing segment: ", JSON.stringify(segment));
                    }
                }
            } else {
                var _cutPoints = segmentsWithCutPoints[id];

                if (_cutPoints === undefined) {
                    result.push(segment);
                }
            }
        });

        return result;
    }

    function splitAndCheckForIntersections(newFeatures) {
        var newFeaturesSegments = splitIntoTwoPointSegmentsAndAddIds(newFeatures);
        if (linesOnly) return newFeaturesSegments;
        var newFeaturesWithCutPoints = checkForIntersections(newFeaturesSegments, newFeaturesSegments);
        return cutSegments(newFeaturesSegments, newFeaturesWithCutPoints);
    }

    function getFeatureById(id) {
        return allSegments.find(function(f) { return f.id === id || f.properties.id === id }) 
    }

    function getFeaturesByParentId(id) {
        return allSegments.filter(function(f) { return f.parent === id || f.properties.parent === id })
    }

    function removeFeature(id) {
        var features = getFeaturesByParentId(id);
        
        if (features && features.length) {
            features.forEach(function(feature) {
                var pos = allSegments.indexOf(feature);
                allSegments.splice(pos, 1);
            })
            
            geoflo.updateMeshData();
        }

        return allSegments;
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Mesh);

/***/ }),

/***/ "./src/Options.js":
/*!************************!*\
  !*** ./src/Options.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Options
 * @description Options for the Geoflo map.
 * @property {string} theme - The theme of the map. Default is 'dark'.
 * @property {boolean} showLineUnits - Show line units. Default is false.
 * @property {boolean} showFeatureText - Show feature text. Default is true.
 * @property {object} controls - Controls for the map.
 * @property {boolean} controls.options - Show options control. Default is true.
 * @property {boolean} controls.modes - Show modes control. Default is true.
 * @property {boolean} controls.utils - Show utilities control. Default is true.
 * @property {boolean} controls.types - Show types control. Default is true.
 * @property {boolean} controls.actions - Show actions control. Default is true.
 * @property {object} map - Map options.
 * @property {string} map.container - Map container. Default is 'map'.
 * @property {array} map.center - Map center. Default is [-95.52816680236892, 39.56431143986035].
 * @property {number} map.zoom - Map zoom. Default is 3.5.
 * @property {number} map.maxPitch - Maximum pitch of the map. Default is 50.
 * @property {string} map.projection - Map projection. Default is 'mercator'.
 * @property {string} map.style - Map style. Default is 'mapbox://styles/mapbox/dark-v11'.
 * @property {boolean} map.hash - Enable map hash navigation. Default is true.
 * @property {array} map.extent - Map bounding extent.
 * @property {object} keys - Keyboard shortcuts.
 * @property {string} keys.import - Import key. Default is 'u'.
 * @property {string} keys.export - Export key. Default is 'd'.
 * @property {string} keys.delete - Delete key. Default is 'Delete'.
 * @property {string} keys.cancel - Cancel key. Default is 'Escape'.
 * @property {string} keys.select - Select key. Default is 'Escape'.
 * @property {string} keys.edit - Edit key. Default is 'Enter'.
 * @property {string} keys.refresh - Refresh key. Default is 'r'.
 * @property {string} keys.snapping - Snapping key. Default is '!'.
 * @property {string} keys.pinning - Pinning key. Default is '@'.
 * @property {string} keys.routing - Routing key. Default is '#'.
 * @property {string} keys.exploring - Exploring key. Default is '$'.
 * @property {string} keys.painting - Painting key. Default is '%'.
 * @property {string} keys.polyline - Polyline key. Default is '1'.
 * @property {string} keys.polygon - Polygon key. Default is '2'.
 * @property {string} keys.rectangle - Rectangle key. Default is '3'.
 * @property {string} keys.circle - Circle key. Default is '4'.
 * @property {string} keys.text - Text key. Default is '5'.
 * @property {object} units - Measurement units for different geometries.
 * @property {string} units.Polyline - Polyline unit. Default is 'feet'.
 * @property {string} units.Polygon - Polygon unit. Default is 'acres'.
 * @property {string} units.Rectangle - Rectangle unit. Default is 'acres'.
 * @property {string} units.Icon - Icon unit. Default is 'feature'.
 * @property {string} units.Circle - Circle unit. Default is 'feature'.
 * @property {string} units.Marker - Marker unit. Default is 'feature'.
 * @property {object} colors - Color scheme settings.
 * @property {string} colors.error - Error color. Default is '#ff7676'.
 * @property {string} colors.primaryColor - Primary color. Default is '#d7ef7e'.
 * @property {string} colors.primaryBackground - Primary background color. Default is '#5a5a5a'.
 * @property {string} colors.primaryText - Primary text color. Default is '#c5c5c5'.
 * @property {string} colors.primaryBorder - Primary border color. Default is '#6fafdb'.
 * @property {string} colors.secondaryColor - Secondary color. Default is '#6fafdb'.
 * @property {string} colors.secondaryBackground - Secondary background color. Default is '#333333'.
 * @property {string} colors.secondaryText - Secondary text color. Default is '#333333'.
 * @property {object} select - Selection options.
 * @property {boolean} select.popup - Enable selection popups. Default is false.
 * @property {boolean} select.multiple - Allow multiple selection. Default is false.
 * @property {object} snapping - Snapping settings.
 * @property {boolean} snapping.enable - Enable snapping to features. Default is false.
 * @property {boolean} snapping.pixels - Pixel-based snapping. Default is false.
 * @property {number} snapping.distance - Snapping distance in kilometers.
 * @property {number} snapping.tolerance - Snapping tolerance in kilometers.
 * @property {object} routing - Routing settings.
 * @property {boolean} routing.enable - Enable routing functionality. Default is false.
 * @property {number} routing.precision - Routing coordinate precision.
 * @property {object} pinning - Pinning settings.
 * @property {boolean} pinning.enable - Enable feature pinning. Default is false.
 * @property {number} pinning.buffer - Pinning buffer distance in kilometers.
 * @property {number} pinning.idle - Idle time before updating pinned features.
 * @property {object} exploring - Exploring settings.
 * @property {boolean} exploring.enable - Enable feature exploration. Default is false.
 * @property {number} exploring.minZoom - Minimum zoom level for exploration. Default is 9.
 * @property {number} exploring.buffer - Exploration buffer distance in kilometers.
 * @property {number} exploring.tolerance - Exploration coordinate simplification tolerance.
 * @property {object} painting - Painting settings.
 * @property {boolean} painting.enable - Enable painting mode. Default is false.
 * @property {number} painting.tolerance - Painting coordinate simplification tolerance.
 * @property {object} gamepad - Gamepad configuration settings.
 * @property {boolean} gamepad.enable - Enable gamepad support. Default is true.
 * @property {boolean} gamepad.debug - Enable gamepad debugging. Default is false.
 * @property {boolean} gamepad.crosshairs - Show crosshairs on the map. Default is true.
 * @property {object} gamepad.joystick - Joystick settings.
 * @property {number} gamepad.joystick.min - Minimum joystick threshold. Default is 0.2.
 * @property {number} gamepad.joystick.max - Maximum joystick threshold. Default is 0.7.
 * @property {object} gamepad.pan - Pan settings.
 * @property {number} gamepad.pan.speed - Pan speed. Default is 0.001.
 * @property {object} gamepad.zoom - Zoom settings.
 * @property {number} gamepad.zoom.speed - Zoom speed. Default is 0.008.
 */


const Options = {
    theme: 'dark',
    showLineUnits: false,
    showFeatureText: true,
    controls: {
        options: true,
        modes: true,
        utils: true,
        types: true,
        actions: true
    },
    map: {
        container: 'map',
        center: [-95.52816680236892, 39.56431143986035],
        zoom: 3.5,
        maxPitch: 50,
        projection: 'mercator',
        style: 'Standard',
        hash: true,
        extent: [[[-127.3638459,49.6212752],[-73.7295136,49.6212752],[-73.7295136,24.7473201],[-127.3638459,24.7473201],[-127.3638459,49.6212752]]],
        styles: [
            { title: "Standard", uri: "mapbox://styles/mapbox/standard" },
            { title: "Satellite", uri: "mapbox://styles/mapbox/standard-satellite" },
            { title: "Dark", uri: "mapbox://styles/mapbox/dark-v11" },
            { title: "Light", uri: "mapbox://styles/mapbox/light-v11" },
            { title: "Outdoors", uri: "mapbox://styles/mapbox/outdoors-v12" },
            { title: "Streets", uri: "mapbox://styles/mapbox/navigation-night-v1" }
        ]
    },
    keys: {
        import: 'u',
        export: 'd',
        delete: 'Delete',
        cancel: 'Escape',
        select: 'Escape',
        edit: 'Enter',
        refresh: 'r',
        snapping: '!',
        pinning: '@',
        routing: '#',
        exploring: '$',
        painting: '%',
        polyline: '1',
        polygon: '2',
        rectangle: '3',
        circle: '4',
        text: '5'
    },
    commands: [{
        key: '.',
        modifier: false,
        /**
         * @function
         * @name command
         * @memberof module:geoflo.Options.commands
         * @description Executes a command based on the current mode and geoflo context.
         *
         * @param {Object} event - The event object containing details about the command execution.
         * @param {Object} geoflo - The geoflo context containing map and mode information.
         * @param {string} command - The command identifier to be executed.
         * @returns {void} This function does not return a value.
         */
        command: function (event, geoflo, command) {
            var options = { lngLat: geoflo.map.getCenter() }
            
            if (geoflo.currentMode.id === 'draw') {
                geoflo.currentMode.handleUp(options); 
                geoflo.currentMode.handleClick(options);
            } else {
                geoflo.currentMode.handleClick(options);
            }
        }
    }],
    units: {
        Polyline: 'feet',
        Polygon: 'acres',
        Rectangle: 'acres',
        Icon: 'feature',
        Circle: 'feature',
        Marker: 'feature'
    },
    colors: {
        error: '#ff7676',

        primaryColor: "#d7ef7e",
        primaryBackground: "#5a5a5a",
        primaryText: "#c5c5c5",
        primaryBorder: "#6fafdb",
        
        secondaryColor: "#6fafdb",
        secondaryBackground: "#333333",
        secondaryText: "#333333",
        secondaryBorder: "#404040",

        primarySelect: "#d7ef7e",
        primaryEdit: "#d7ef7e",
        primaryHot: "#242424",
        primaryCold: "#333333",
        primarySnap: "#d7ef7e",
        primaryBase: "#c5c5c5",
        primaryDebug: "#ff7676",
        primaryVertex: "#d7ef7e",

        secondarySelect: "#c5c5c5",
        secondaryEdit: "#c5c5c5",
        secondaryHot: "#333333",
        secondaryCold: "#c5c5c5",
        secondarySnap: "#c5c5c5",
        secondaryBase: "#5a5a5a",
        secondaryDebug: "#d7ef7e",
        secondaryVertex: "#333333"
    },
    select: {
        popup: false,
        multiple: false
    },
    snapping: {
        enable: false, // Enables snapping to features
        pixels: false, // still working on this
        distance: 200 * 1.609344, // 200 miles to kilometers. Calculated by zoom level: (distance * Math.pow(2, Math.max(1, 19 - map.getZoom()))) / 100000
        tolerance: 0.002 // kilometers. Distance from the last click to hide/show mouse line
    },
    routing: {
        enable: false, // find shortest path
        precision: 0.0000015 // rounding coords to create topology. Higher the number will close gaps in lines and allow to find path
    },
    pinning: {
        enable: false, // Enables pinning (glueing) features together at vertices/points. When editing/dragging a point, all pinned points will move together.
        buffer: (50 / 5280) * 1.609344, // 50 feet to miles to kilometer. Pin features within a 50 foot radius. False for exact point location.
        idle: 20 // milliseconds of how long to idle after updating pinned features before checking for nearby features to snap to (helps with editing performance)
    },
    exploring: {
        enable: false,
        minZoom: 9,
        buffer: (5000 / 5280) * 1.609344, // 300 feet to miles to kilometer. Download roadways within a 300 foot radius.
        tolerance: 0.00001 // How much tolerance to simplify coordinates. Can be a function with map argument.
    },
    moving: {
        enable: false, // Enables moving feature
        distance: (3 / 5280) * 1.609344 // 3 feet to miles to kilometer. The distance in which to move the feature
    },
    painting: {
        enable: false, // Enables painting drawing for linestrings and polygons
        tolerance: 0.000005 // How much tolerance to simplify coordinates. Can be a function with map argument.
    },
    gamepad: {
        enable: true,
        debug: false,
        crosshairs: true,
        joystick: {
            min: 0.2,
            max: 0.7
        },
        camera: {
            free: true
        },
        pan: {
            speed: 0.001,
            min: 0.001,
            max: 0.05
        },
        bearing: {
            speed: 0.8
        },
        pitch: {
            speed: 1.5,
            max: 70
        },
        zoom: {
            speed: 0.008
        },
        rumble: {
            startDelay: 0,
            duration: 200,
            weakMagnitude: 1.0,
            strongMagnitude: 1.0
        },
        mapping: {
            /**
             * @function
             * @name Select
             * @memberof module:geoflo.Options.gamepad.mapping
             * @description Handles different types of events: press, hold, and release. 
             * On release, it triggers the click action for the 'clear' button.
             *
             * @param {Object} event - The event object containing details about the event.
             * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
             * @param {Object} event.geoflo - The context object that contains methods related to the event.
             * @returns {void} This function does not return a value.
             * 
             * @author Solutegrate
             * @copyright 2025
             */
            'Select': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    event.geoflo.getButtons('clear').button.click();
                }
            },
            /**
             * @function
             * @name Start
             * @memberof module:geoflo.Options.gamepad.mapping
             * @description Handles different types of events such as press, hold, and release for gamepad interactions.
             *
             * @param {Object} event - The event object containing details about the input event.
             * @param {string} event.type - The type of the event (press, hold, release).
             * @param {Object} event.gamepad - The gamepad object associated with the event.
             * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joysticks.
             * @param {Object} event.mode - The current mode of the application.
             * @param {string} event.mode.id - The identifier for the current mode.
             * @param {Object} event.geoflo - The context object used to interact with the application.
             * @returns {void} This function does not return a value.
             * 
             * @author Solutegrate
             * @copyright 2025
             */
            'Start': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    if (event.gamepad.hasJoysticks) {
                        var button = event.mode.id === 'select' ? 'edit' : 'select';
                        event.geoflo.getButtons(button).button.click();
                    }
                }
            },
            /**
             * @function
             * @name Power
             * @memberof module:geoflo.Options.gamepad.mapping
             * @description Handles different types of power events such as press, hold, and release.
             *
             * @param {Object} event - The event object that contains information about the power event.
             * @param {string} event.type - The type of the event, which can be 'press', 'hold', or 'release'.
             * @param {Object} event.geoflo - The context object that provides access to UI elements.
             * @returns {void} This function does not return a value.
             * 
             * @author Solutegrate
             * @copyright 2025
             */
            'Power': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    event.geoflo.getButtons('save').button.click();
                }
            },
            /**
             * @function
             * @name Menu
             * @memberof module:geoflo.Options.gamepad.mapping
             * @description Handles different types of menu events such as press, hold, and release.
             *
             * @param {Object} event - The event object that contains information about the event.
             * @param {string} event.type - The type of the event, which can be 'press', 'hold', or 'release'.
             * @returns {void} This function does not return a value.
             * 
             * @author Solutegrate
             * @copyright 2025
             */
            'Menu': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    
                }
            },
            /**
             * @function
             * @name Misc
             * @memberof module:geoflo.Options.gamepad.mapping
             * @description Handles different types of events related to gamepad interactions, including press, hold, and release actions.
             *
             * @param {Object} event - The event object containing details about the gamepad interaction.
             * @param {string} event.type - The type of the event, which can be 'press', 'hold', or 'release'.
             * @param {Object} event.gamepad - The gamepad object associated with the event.
             * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joystick controls.
             * @param {Object} event.geoflo - The context object providing access to the map and buttons.
             * @param {Object} event.geoflo.map - The map object that contains methods for getting the center and zoom level.
             * @returns {void} This function does not return a value.
             * 
             * @author Solutegrate
             * @copyright 2025
             */
            'Misc': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    if (event.gamepad.hasJoysticks) {
                        event.geoflo.getButtons('zoom').button.click();
    
                        var ready = setInterval(function() {
                            if (!ctx.mapMoving) {
                                clearInterval(ready);
                                event.gamepad.map.center = event.geoflo.map.getCenter();
                                event.gamepad.map.zoom = event.geoflo.map.getZoom();
                            }
                        }, 1);
                    }
                }
            },
            /**
             * @function
             * @name A
             * @memberof module:geoflo.Options.gamepad.mapping
             * @description Handles different types of events such as press, hold, and release for gamepad interactions.
             *
             * @param {Object} event - The event object containing details about the gamepad interaction.
             * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
             * @param {Object} event.gamepad - The gamepad object associated with the event.
             * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joysticks.
             * @param {Object} event.gamepad.pressed - An object representing the pressed buttons on the gamepad.
             * @param {Object} event.geoflo - The context object for the event.
             * @returns {Function|undefined} Returns the result of the JoyLeftClick function if certain conditions are met; otherwise, it performs a button click action or
             * returns undefined.
             * 
             * @author Solutegrate
             * @copyright 2025
             */
            'A': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    if (!event.gamepad.hasJoysticks) {
                        if (!event.gamepad.pressed['BumpLeft'] && !event.gamepad.pressed['BumpRight']) {
                            return this['JoyLeftClick'](event);
                        }
                    } else {
                        event.geoflo.getButtons('routing').button.click();
                    }
                }
            },
            /**
             * @function
             * @name B
             * @memberof module:geoflo.Options.gamepad.mapping
             * @description Handles different types of events related to a gamepad button press, hold, and release actions.
             *
             * @param {Object} event - The event object containing details about the button action.
             * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
             * @param {Object} event.gamepad - The gamepad object associated with the event.
             * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joysticks.
             * @param {Object} event.gamepad.pressed - An object representing the pressed buttons on the gamepad.
             * @param {Object} event.geoflo - The context object for the event.
             * @returns {Function|undefined} Returns the result of the JoyRightClick function if certain conditions are met, otherwise returns undefined.
             * 
             * @author Solutegrate
             * @copyright 2025
             */
            'B': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    if (!event.gamepad.hasJoysticks) {
                        if (!event.gamepad.pressed['BumpLeft'] && !event.gamepad.pressed['BumpRight']) {
                            return this['JoyRightClick'](event);
                        }
                    } else {
                        event.geoflo.getButtons('painting').button.click();
                    }
                }
            },
            /**
             * @function
             * @name Y
             * @memberof module:geoflo.Options.gamepad.mapping
             * @description Handles gamepad events for pressing, holding, and releasing buttons.
             *
             * @param {Object} event - The event object containing information about the gamepad action.
             * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
             * @param {Object} event.gamepad - The gamepad object that contains the state of the gamepad.
             * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joysticks.
             * @param {Object} event.gamepad.pressed - An object representing the pressed buttons on the gamepad.
             * @param {function} event.gamepad.setSpeed - A function to set the speed of the gamepad.
             * @param {Object} event.geoflo - The context object used to interact with the gamepad.
             * 
             * @author Solutegrate
             * @copyright 2025
             */
            'Y': function (event) {
                if (event.type === 'press') {
                    if (!event.gamepad.hasJoysticks) {
                        if ((event.gamepad.pressed['BumpLeft'] || event.gamepad.pressed['BumpRight'])) event.gamepad.setSpeed(event.value, false);
                    }
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    if (event.gamepad.hasJoysticks) {
                        event.geoflo.getButtons('snapping').button.click();
                    }
                }
            },
            /**
             * @function
             * @name X
             * @memberof module:geoflo.Options.gamepad.mapping
             * @description Handles gamepad events for press, hold, and release actions.
             *
             * @param {Object} event - The event object containing details about the gamepad action.
             * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
             * @param {Object} event.gamepad - The gamepad object that contains the state of the gamepad.
             * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joysticks.
             * @param {Object} event.gamepad.pressed - An object representing the buttons that are currently pressed.
             * @param {function} event.gamepad.setSpeed - A method to set the speed of the gamepad.
             * @param {Object} event.geoflo - The context object that provides access to the gamepad's buttons.
             * @returns {void} This function does not return a value.
             * 
             * @author Solutegrate
             * @copyright 2025
             */
            'X': function (event) {
                if (event.type === 'press') {
                    if (!event.gamepad.hasJoysticks) {
                        if ((event.gamepad.pressed['BumpLeft'] || event.gamepad.pressed['BumpRight'])) event.gamepad.setSpeed(event.value, true);
                    }
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    if (event.gamepad.hasJoysticks) {
                        event.geoflo.getButtons('pinning').button.click();
                    }
                }
            },
            /**
             * @function
             * @name JoyLeftMove
             * @memberof module:geoflo.Options.gamepad.mapping
             * @description Handles the joystick left movement events, including press, hold, and release actions.
             *
             * @param {Object} event - The event object containing details about the joystick action.
             * @param {string} event.type - The type of the event (press, hold, or release).
             * @param {Object} event.gamepad - The gamepad object associated with the event.
             * @param {boolean} event.value - The value indicating the direction or state of the joystick.
             * @returns {void} This function does not return a value.
             * 
             * @author Solutegrate
             * @copyright 2025
             */
            'JoyLeftMove': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    event.gamepad.setCenter(event.value, event.gamepad.options.camera.free) // Pan map
                } else if (event.type === 'release') {
                    event.gamepad.setCenter(false, event.gamepad.options.camera.free) // Reset map center
                }
            },
            /**
             * @function
             * @name JoyRightMove
             * @memberof module:geoflo.Options.gamepad.mapping
             * @description Handles the movement of the gamepad based on the event type and name.
             *
             * @param {Object} event - The event object containing details about the input.
             * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
             * @param {string} event.name - The name of the input event (e.g., 'Up', 'Down', 'Left', 'Right').
             * @param {number} event.value - The value associated with the input event.
             * @param {Object} event.gamepad - The gamepad object that handles movement.
             * @param {function} event.gamepad.setPitch - Function to set the pitch of the map.
             * @param {function} event.gamepad.setBearing - Function to set the bearing of the map.
             * @returns {void} This function does not return a value.
             * 
             * @author Solutegrate
             * @copyright 2025
             */
            'JoyRightMove': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    if (event.name.includes('Up') || event.name.includes('Down')) {
                        event.gamepad.setPitch(event.value, event.name.includes('Up')); // Pitch map
                    } else if (event.name.includes('Left') || event.name.includes('Right')) {
                        event.gamepad.setBearing(event.value, event.name.includes('Left')); // Rotate map
                    }
                } else if (event.type === 'release') {
                    
                }
            },
            /**
             * @function
             * @name JoyLeftClick
             * @memberof module:geoflo.Options.gamepad.mapping
             * @description Handles the left click events for drawing actions, including press, hold, and release actions.
             *
             * @param {Object} event - The event object containing details about the click action.
             * @param {string} event.type - The type of the event, which can be 'press', 'hold', or 'release'.
             * @param {Object} event.mode - The mode object associated with the event.
             * @param {string} event.mode.id - The identifier for the mode, which determines the action taken on release.
             * @returns {void} This function does not return a value.
             * 
             * @author Solutegrate
             * @copyright 2025
             */
            'JoyLeftClick': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    if (event.mode.id === 'draw') {
                        event.mode.deleteVertex();
                    }
                }
            },
            /**
             * @function
             * @name JoyRightClick
             * @memberof module:geoflo.Options.gamepad.mapping
             * @description Handles right-click events for drawing modes, processing different event types such as press, hold, and release.
             *
             * @param {Object} event - The event object containing details about the right-click action.
             * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
             * @param {Object} event.mode - The current mode of the application, which includes methods for handling events.
             * @param {Object} event.lngLat - The longitude and latitude of the click location.
             * @returns {boolean} Returns false if the event does not have a valid lngLat or if the event type is not handled.
             * 
             * @author Solutegrate
             * @copyright 2025
             */
            'JoyRightClick': function (event) {
                if (event.type === 'press') {
                    if (event.mode.id === 'draw') {
                        if (!event.lngLat) return false;
                        return event.mode.handleDown(event);
                    }
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    if (!event.lngLat) return false;
    
                    if (event.mode.id === 'draw') {
                        event.mode.handleUp(event); 
                        event.mode.handleClick(event);
                    } else {
                        event.mode.handleClick(event);
                    }
                }
            },
            /**
             * @function
             * @name BumpLeft
             * @memberof module:geoflo.Options.gamepad.mapping
             * @description Handles the bump left action based on the event type and gamepad state.
             *
             * @param {Object} event - The event object containing information about the action.
             * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
             * @param {Object} event.gamepad - The gamepad object associated with the event.
             * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joysticks.
             * @param {Object} event.gamepad.pressed - An object representing the buttons pressed on the gamepad.
             * @param {function} event.gamepad.setSpeed - A function to set the speed of the gamepad.
             * @param {number} event.value - The value to be used for setting the speed.
             * @returns {boolean|undefined} Returns false if the right bump is pressed without joysticks, otherwise returns the result of setSpeed.
             * 
             * @author Solutegrate
             * @copyright 2025
             */
            'BumpLeft': function (event) {
                if (event.type === 'press') {
                    if (!event.gamepad.hasJoysticks) {
                        if (event.gamepad.pressed['BumpRight']) return false
                    } else {
                        return event.gamepad.setSpeed(event.value, true); // Pan speed down
                    }
                } else if (event.type === 'hold') {
                    if (!event.gamepad.hasJoysticks) {
    
                    }
                } else if (event.type === 'release') {
                    
                }
            },
            /**
             * @function
             * @name BumpRight
             * @memberof module:geoflo.Options.gamepad.mapping
             * @description Handles the bump right action based on the event type and gamepad state.
             *
             * @param {Object} event - The event object containing information about the action.
             * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
             * @param {Object} event.gamepad - The gamepad object associated with the event.
             * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joysticks.
             * @param {Object} event.gamepad.pressed - The current pressed buttons on the gamepad.
             * @param {function} event.gamepad.setSpeed - Function to set the speed of the gamepad.
             * @param {number} event.value - The value to set the speed to.
             * @returns {boolean} Returns false if the left bump is pressed and no joysticks are present, otherwise returns the result of setting the speed.
             * 
             * @author Solutegrate
             * @copyright 2025
             */
            'BumpRight': function (event) {
                if (event.type === 'press') {
                    if (!event.gamepad.hasJoysticks) {
                        if (event.gamepad.pressed['BumpLeft']) return false
                    } else {
                        return event.gamepad.setSpeed(event.value, false); // Pan speed down
                    }
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    
                }
            },
            /**
             * @function
             * @name TrigLeft
             * @memberof module:geoflo.Options.gamepad.mapping
             * @description Handles different types of events related to gamepad input, specifically press, hold, and release actions.
             *
             * @param {Object} event - The event object containing information about the gamepad input.
             * @param {string} event.type - The type of event, which can be 'press', 'hold', or 'release'.
             * @param {number} event.value - The value associated with the event, used when the event type is 'hold'.
             * @param {Object} event.gamepad - The gamepad object that provides methods for interaction.
             * @returns {void} This function does not return a value.
             * 
             * @author Solutegrate
             * @copyright 2025
             */
            'TrigLeft': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    event.gamepad.setZoom(event.value, true);
                } else if (event.type === 'release') {
                    
                }
            },
            /**
             * @function
             * @name TrigRight
             * @memberof module:geoflo.Options.gamepad.mapping
             * @description Handles different types of events related to gamepad interactions, including press, hold, and release actions.
             *
             * @param {Object} event - The event object containing details about the interaction.
             * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
             * @param {number} event.value - The value associated with the event, used when the event type is 'hold'.
             * @param {Object} event.gamepad - The gamepad object that provides methods for interaction.
             * @returns {void} This function does not return a value.
             * 
             * @author Solutegrate
             * @copyright 2025
             */
            'TrigRight': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    event.gamepad.setZoom(event.value, false);
                } else if (event.type === 'release') {
                    
                }
            },
            /**
             * @function
             * @name DpadUp
             * @memberof module:geoflo.Options.gamepad.mapping
             * @description Handles the D-pad up input events for gamepad controls, managing different actions based on the event type.
             *
             * @param {Object} event - The event object containing details about the input event.
             * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
             * @param {Object} event.gamepad - The gamepad object associated with the event.
             * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joysticks.
             * @param {Object} event.gamepad.pressed - An object representing the buttons currently pressed on the gamepad.
             * @param {function} event.gamepad.setPitch - Function to set the pitch based on the event value.
             * @param {function} event.gamepad.setCenter - Function to set the center based on the event value and camera options.
             * @param {Object} event.geoflo - The context object for accessing gamepad buttons.
             * @param {Object} event.geoflo.getButtons - Function to retrieve button states.
             * @param {Object} event.value - The value associated with the event.
             * @returns {void} This function does not return a value.
             * 
             * @author Solutegrate
             * @copyright 2025
             */
            'DpadUp': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    if (!event.gamepad.hasJoysticks) {
                        if (event.gamepad.pressed['BumpLeft'] && event.gamepad.pressed['BumpRight']) {
                            event.gamepad.setPitch(event.value, true); // Pitch map
                        } else {
                            event.gamepad.setCenter(event.value, event.gamepad.options.camera.free) // Pan map
                        }
                    }
                } else if (event.type === 'release') {
                    if (event.gamepad.hasJoysticks) {
                        event.geoflo.getButtons('Polygon').button.click();
                    }
                }
            },
            /**
             * @function
             * @name DpadDown
             * @memberof module:geoflo.Options.gamepad.mapping
             * @description Handles the D-pad down input event for gamepad controls, managing different actions based on the event type.
             *
             * @param {Object} event - The event object containing information about the input event.
             * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
             * @param {Object} event.gamepad - The gamepad object that contains the state of the gamepad.
             * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joystick controls.
             * @param {Object} event.gamepad.pressed - An object representing the buttons currently pressed on the gamepad.
             * @param {Function} event.gamepad.setPitch - Function to set the pitch based on the event value.
             * @param {Function} event.gamepad.setCenter - Function to set the center based on the event value and camera options.
             * @param {Object} event.geoflo - The context object for the gamepad.
             * @param {Object} event.geoflo.getButtons - Function to retrieve button states.
             * @param {Object} event.geoflo.getButtons('Circle') - The button object for the 'Circle' button.
             * @param {Function} event.geoflo.getButtons('Circle').button.click - Function to simulate a button click.
             * @returns {void} This function does not return a value.
             * 
             * @author Solutegrate
             * @copyright 2025
             */
            'DpadDown': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    if (!event.gamepad.hasJoysticks) {
                        if (event.gamepad.pressed['BumpLeft'] && event.gamepad.pressed['BumpRight']) {
                            event.gamepad.setPitch(event.value, false); // Pitch map
                        } else {
                            event.gamepad.setCenter(event.value, event.gamepad.options.camera.free) // Pan map
                        }
                    }
                } else if (event.type === 'release') {
                    if (event.gamepad.hasJoysticks) {
                        event.geoflo.getButtons('Circle').button.click();
                    }
                }
            },
            /**
             * @function
             * @name DpadLeft
             * @memberof module:geoflo.Options.gamepad.mapping
             * @description Handles the D-pad left input events for a gamepad, processing press, hold, and release actions.
             *
             * @param {Object} event - The event object containing details about the input action.
             * @param {string} event.type - The type of the event (press, hold, or release).
             * @param {Object} event.gamepad - The gamepad object associated with the event.
             * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joysticks.
             * @param {Object} event.gamepad.pressed - An object representing the buttons currently pressed on the gamepad.
             * @param {Function} event.gamepad.setBearing - Function to set the bearing of the map.
             * @param {Function} event.gamepad.setCenter - Function to set the center of the map.
             * @param {Object} event.gamepad.options - Options related to the gamepad.
             * @param {Object} event.geoflo - The context object for the gamepad.
             * @returns {void} This function does not return a value.
             * 
             * @author Solutegrate
             * @copyright 2025
             */
            'DpadLeft': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    if (!event.gamepad.hasJoysticks) {
                        if (event.gamepad.pressed['BumpLeft'] && event.gamepad.pressed['BumpRight']) {
                            event.gamepad.setBearing(event.value, true); // Rotate map
                        } else {
                            event.gamepad.setCenter(event.value, event.gamepad.options.camera.free) // Pan map
                        }
                    }
                } else if (event.type === 'release') {
                    if (event.gamepad.hasJoysticks) {
                        event.geoflo.getButtons('Polyline').button.click();
                    }
                }
            },
            /**
             * @function
             * @name DpadRight
             * @memberof module:geoflo.Options.gamepad.mapping
             * @description Handles the D-pad right input events for gamepad controls, managing actions based on the type of event (press, hold, release).
             *
             * @param {Object} event - The event object containing details about the input event.
             * @param {string} event.type - The type of the event (press, hold, release).
             * @param {Object} event.gamepad - The gamepad object that contains the state of the gamepad.
             * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joystick controls.
             * @param {Object} event.gamepad.pressed - An object representing the buttons currently pressed on the gamepad.
             * @param {Function} event.gamepad.setBearing - Function to set the bearing of the map.
             * @param {Function} event.gamepad.setCenter - Function to set the center of the map.
             * @param {Object} event.gamepad.options - Options for the gamepad.
             * @param {Object} event.geoflo - The context object for the gamepad.
             * @returns {void} This function does not return a value.
             * 
             * @author Solutegrate
             * @copyright 2025
             */
            'DpadRight': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    if (!event.gamepad.hasJoysticks) {
                        if (event.gamepad.pressed['BumpLeft'] && event.gamepad.pressed['BumpRight']) {
                            event.gamepad.setBearing(event.value, false); // Rotate map
                        } else {
                            event.gamepad.setCenter(event.value, event.gamepad.options.camera.free) // Pan map
                        }
                    }
                } else if (event.type === 'release') {
                    if (event.gamepad.hasJoysticks) {
                        event.geoflo.getButtons('Rectangle').button.click();
                    }
                }
            }
        }
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Options);

/***/ }),

/***/ "./src/Painting.js":
/*!*************************!*\
  !*** ./src/Painting.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Painting
 * @description This module provides the painting functionality for the Geoflo application. It allows users to paint features on the map by creating a buffer around the feature and snapping to nearby features.
 * @param {Object} mode - The mode object containing the type of mode.
 * @returns {Object} Returns the Painting object.
 */
const Painting = function (mode) {
    const geoflo = this.geoflo;

    this.type = mode.type;
    this.feature = false;
    this.currentCoords = [];

	/**
	 * @function
     * @memberof module:geoflo.Painting
	 * @name activate
	 * @description Activates the painting functionality by enabling painting mode and clearing the source data.
	 * @returns {void}
	 */
    this.activate = function () {
        this.deactivate();
        this.enabled = true;
        geoflo.options['painting'].enable = true;
        geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
    }

	/**
	 * @function
     * @memberof module:geoflo.Painting
	 * @name deactivate
	 * @description This function deactivates the current feature by setting the 'enabled' property to false, disabling the painting tool, enabling drag pan on the map, and deleting the feature.
	 * @returns {void}
	 */
    this.deactivate = function () {
        this.enabled = false;
        geoflo.options['painting'].enable = false;
        geoflo.map.dragPan.enable();
        delete this.feature;
    }

	/**
	 * @function
     * @memberof module:geoflo.Painting getFeature
	 * @name getFeature
	 * @description This function retrieves the current painted feature.
	 * @returns {any} The painted feature.
	 */
    this.getFeature = function () {
        return this.feature;
    }

	/**
	 * @function
     * @memberof module:geoflo.Painting
	 * @name setFeature
	 * @description This function creates a feature based on the given type and coordinates. It updates the currentCoords array, sets the feature, and triggers a 'painting.start' event.
	 * @param {Array} coords - The coordinates to set the feature at.
	 * @returns {Object} The created feature.
	 */
    this.setFeature = function (coords) {
        if (!this.type || !coords) return false;
        if (!geoflo.mouseIsDown) return geoflo.hotFeature;
        
        var type = this.type;
        var feature = setFeature(type, coords);

        if (!this.feature) {
            this.currentCoords = [];
            geoflo.startPoint = coords;
            geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([feature]));
            geoflo.fire('painting.start', { type: type, coords: coords, feature: feature });
        }

        this.currentCoords.push(coords);
        this.feature = feature;
        return this.feature;
    }

	/**
	 * @function
     * @memberof module:geoflo.Painting
	 * @name updateFeature
	 * @description This function updates the feature based on the provided coordinates. It handles different types of features like Rectangle, Circle, and others.
	 * @param {Array} coords - The coordinates to update the feature with.
	 * @returns {Object} The updated feature object.
	 */
    this.updateFeature = function (coords) {
        if (!this.enabled) return geoflo.hotFeature;
        if (!this.feature) return this.setFeature(coords);

        var feature = this.feature;
        var type = this.type;

        this.currentCoords.push(coords);

        if (type === 'Rectangle') {
            updateCoordinate(feature, "0.1", coords[0], geoflo.mouseIsDown[1]);
            updateCoordinate(feature, "0.2", coords[0], coords[1]);
            updateCoordinate(feature, "0.3", geoflo.mouseIsDown[0], coords[1]);
            updateCoordinate(feature, "0.4", geoflo.mouseIsDown[0], geoflo.mouseIsDown[1] );
        } else if (type === 'Circle') {
            var center = feature.properties.center;
            if (!center || !center.length) return feature;

            const distanceInKm = turf.distance(turf.point(center), turf.point(coords), { units : 'kilometers'});
            const circleFeature = turf.circle(center, distanceInKm);

            feature.geometry.coordinates = circleFeature.geometry.coordinates;
            geoflo.Utilities.setProperty(feature, 'radiusInKm', distanceInKm);
        } else {
            feature.geometry.coordinates.push(coords);
        }

        geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([this.feature]));
        geoflo.fire('painting.update', { type: type, coords: coords, feature: feature });
        return feature;
    }

	/**
	 * @function
     * @memberof module:geoflo.Painting
	 * @name handleUp
	 * @description This function updates the feature based on the 'mouse up' event. It retrieves the current feature, updates the hot source, clones the updated feature, and sets the last click coordinates.
	 * @param {Event} event - The event triggering the function.
	 * @returns {Promise<Object>} The updated feature object.
	 */
	
    this.handleUp = async function (event) {
        if (!this.feature) return false;

        var feature;

        if (geoflo.Exploring.enabled) this.feature = await geoflo.Exploring.getMatch(this.currentCoords, { set: true, start: geoflo.startPoint });

        feature = mode.updateHotSource(this.feature);
        feature = geoflo.Utilities.cloneDeep(feature);

        geoflo.lastClick = { coords: feature.geometry.coordinates[feature.geometry.coordinates.length - 1] };
        this.currentCoords = [];
        this.feature = feature;
        return feature;
    }



    if (geoflo.options['painting'].enable) this.activate();



    function setFeature (type, coords) {
        var feature;

        if (type === 'Rectangle') {
            feature = turf.polygon([[
                geoflo.mouseIsDown,
                coords,
                coords,
                geoflo.mouseIsDown
            ]]);
        } else if (type === 'Circle') {
            feature = turf.polygon([[
                geoflo.mouseIsDown,
                coords,
                coords,
                geoflo.mouseIsDown
            ]]);

            geoflo.Utilities.setProperty(feature, 'center', geoflo.mouseIsDown);
        } else {
            feature = turf.lineString([geoflo.mouseIsDown, coords]);
        }

        geoflo.Utilities.setProperty(feature, 'type', type);
        geoflo.Utilities.setProperty(feature, 'painting', 1);
        return feature;
    }

    function updateCoordinate (f, t, e, n) {
        var o = t.split(".")
            , r = parseInt(o[0], 10)
            , i = parseInt(o[1], 10);
        void 0 === f.geometry.coordinates[r] && (f.geometry.coordinates[r] = []),
        f.geometry.coordinates[r][i] = [e, n]
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Painting);

/***/ }),

/***/ "./src/Pinning.js":
/*!************************!*\
  !*** ./src/Pinning.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Pinning
 * @description This module provides the pinning functionality for the Geoflo application. It allows users to pin features to the map by creating a buffer around the feature and snapping to nearby features.
 * @param {Object} mode - The mode object containing the type of mode.
 * @returns {Object} Returns the Pinning object.
 */
const Pinning = function (mode) {
    const geoflo = this.geoflo;

    this.type = mode.type;
    this.updatedFeatures = [];

	/**
	 * @function
     * @memberof module:geoflo.Pinning
	 * @name activate
	 * @description Activates the feature by setting the enabled flag to true and enabling pinning in the options.
	 * @params {void} None
	 * @returns {void}
	 */
    this.activate = function () {
        this.updatedFeatures = [];
        this.enabled = true;
        geoflo.options['pinning'].enable = true;
    }

	/**
	 * @function
     * @memberof module:geoflo.Pinning
	 * @name deactivate
	 * @description This function deactivates the pinning feature by setting enabled to false, disabling pinning in options, clearing buffer, pinableFeatures, and pinningFeatures, and resetting updatedFeatures.
	 */
    this.deactivate = function () {
        this.enabled = false;
        geoflo.options['pinning'].enable = false;
        this.resetFeatures();
        delete this.buffer;
        delete geoflo.pinableFeatures;
        delete geoflo.pinningFeatures;
        this.updatedFeatures = [];
    }

	/**
	 * @function
     * @memberof module:geoflo.Pinning
	 * @name getFeatures
	 * @description Retrieves the features from the pinnedFeatures array in the context object.
	 * @returns {Array} An array of features extracted from the pinnedFeatures array.
	 */
    this.getFeatures = function () {
        var features = geoflo.pinnedFeatures && geoflo.pinnedFeatures.length ? geoflo.pinnedFeatures.map(function (feature) { return feature.feature }) : [];
        return features;
    }

	/**
	 * @function
     * @memberof module:geoflo.Pinning
	 * @name setBuffer
	 * @description This function creates a buffer around the provided coordinates based on the pinning buffer option.
	 * @param {Array<number>} coords - The coordinates [longitude, latitude] to create the buffer around.
	 * @returns {Object|boolean} Returns the buffer object containing the feature, radius, and coordinates if successful, otherwise false.
	 */
    this.setBuffer = function (coords) {
        delete this.buffer;

        if (!this.enabled) return false;
        if (!coords || !geoflo.options.pinning.buffer) return false;

        var buffer = turf.buffer(turf.point(coords), geoflo.options.pinning.buffer);
        var radius = turf.polygon(buffer.geometry.coordinates);

        this.buffer = {
            feature: buffer,
            radius: radius,
            coords: coords
        }

        return this.buffer;
    }

	/**
	 * @function
     * @memberof module:geoflo.Pinning
	 * @name setFeatures
	 * @description Sets the pinable features based on the provided coordinates and fires an event.
	 * @param {Object} coords - The coordinates to determine nearby features.
	 * @returns {Array} - An array of pinable features.
	 */
    this.setFeatures = function (coords) {
        geoflo.pinableFeatures = [];
        if (!this.enabled || !coords) return false;
        geoflo.pinableFeatures = this.getNearByFeatures(coords);
        geoflo.fire('pinning.add', { features: geoflo.pinableFeatures, buffer: this.buffer });
        return geoflo.pinableFeatures;
    }

	/**
	 * @function
     * @memberof module:geoflo.Pinning
	 * @name resetFeatures
	 * @description Resets the updated features by adding them to the canvas context.
	 * @returns {boolean} Returns false if there are no updated features to reset.
	 */
    this.resetFeatures = function () {
        if (!this.updatedFeatures.length) return false;
        geoflo.addFeatures(this.updatedFeatures, true);
    }

	/**
	 * @function
     * @memberof module:geoflo.Pinning
	 * @name updateFeatures
	 * @description This function updates the features if the pinning functionality is enabled. It updates the pinable features, pinned features, and triggers events accordingly.
	 * @returns {boolean} Returns false if the pinning functionality is not enabled, otherwise returns the updated pinning features.
	 */
    this.updateFeatures = function () {
        if (!this.enabled) return false;
        if (!geoflo.pinableFeatures || !geoflo.pinableFeatures.length) return delete geoflo.pinningFeatures, false;
        updateFeatures.call(this, geoflo.pinableFeatures);
        geoflo.Features.updateFeatures(geoflo.pinableFeatures, { type: 'pinning', coords: geoflo.snappedVertex, addUnits: true });
        geoflo.pinnedFeatures = geoflo.Utilities.cloneDeep(geoflo.pinableFeatures);
        geoflo.fire('pinning.update', { feature: geoflo.hotFeature, vertex: turf.point(geoflo.snappedVertex), features: geoflo.pinnedFeatures });
        return geoflo.pinningFeatures;
    }

	/**
	 * @function
     * @memberof module:geoflo.Pinning
	 * @name getNearByFeatures
	 * @description This function calculates the radius based on the map zoom level and retrieves nearby features within that radius.
	 * @param {Array<number>} coords - The coordinates [longitude, latitude] to find nearby features.
	 * @returns {Array<Object>} An array of nearby features with their IDs, types, indices, and feature objects.
	 */
    this.getNearByFeatures = function (coords) {
        if (!this.enabled || !coords) return false;

        var hotFeature = geoflo.hotFeature;
        var calculatedRadius = geoflo.options.snapping.distance * Math.pow(2, Math.max(1, 19 - geoflo.map.getZoom()));
        var radiusInKm = calculatedRadius / 100000;
        var buffer = this.setBuffer(coords);
        var features = geoflo.getRenderedDrawnFeatures({lng: coords[0], lat: coords[1]}, radiusInKm);
        var nearby = [];

        features.forEach(function (feature) {
            turf.coordEach(feature, function (coord, index) {
                var isNearby = false;
    
                if (buffer.radius && turf.booleanWithin(turf.point(coord), buffer.radius)) isNearby = true;
                if (!isNearby && buffer.coords && geoflo.Utilities.isPointEqual(coord, buffer.coords)) isNearby = true;
                if (!isNearby) return;
                if (hotFeature && hotFeature.id === feature.id) return;
                    
                nearby.push({
                    id: feature.id || feature.properties.id,
                    type: feature.properties.type,
                    index: index,
                    feature: feature
                })
            });
        });

        return nearby;
    }
    
    if (geoflo.options['pinning'].enable) this.activate();


    function updateFeatures(features) {
        if (!features || !features.length) return false;

        features.forEach(function (feature) {
            var pinned = this.updatedFeatures.find(function (f) { return f.id === feature.id });
            if (pinned) return;
            this.updatedFeatures.push(geoflo.Utilities.cloneDeep(feature.feature));
        }, this);
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Pinning);

/***/ }),

/***/ "./src/Routing.js":
/*!************************!*\
  !*** ./src/Routing.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Routing
 * @description This module provides the routing functionality for the Geoflo application. It allows users to calculate routes between two points on the map using a PathFinder object.
 * @param {Object} mode - The mode object containing the type of mode.
 * @returns {Object} Returns the Routing object.
 */
const Routing = function (mode) {
    const geoflo = this.geoflo;

    this.type = mode.type;
    this.graphData = {};
    this.features = geoflo.Features.getColdFeatures();

	/**
	 * @function
     * @memberof module:geoflo.Routing
	 * @name activate
	 * @description Activates the functionality by setting the 'enabled' property to true and enabling routing in the options.
	 * @params {void} None
	 * @returns {void}
	 */
    this.activate = function () {
        this.enabled = true;
        geoflo.options['routing'].enable = true;
    };

	/**
	 * @function
     * @memberof module:geoflo.Routing
	 * @name deactivate
	 * @description This function deactivates the routing feature by setting the enabled flag to false, disabling routing in the options, and clearing the route data on the map.
	 * @returns {void}
	 */
    this.deactivate = function () {
        this.enabled = false;
        geoflo.options['routing'].enable = false;
        geoflo.map.getSource(geoflo.statics.constants.sources['ROUTE']).setData(turf.featureCollection([]));
    };

	/**
	 * @function
     * @memberof module:geoflo.Routing
	 * @name getRoute
	 * @description This function calculates a route between two points on a map using a PathFinder object. It checks if the routing feature is enabled and if the map is not currently moving. It then creates a feature collection from the existing features, initializes a PathFinder object, and finds a path between the two points. The path is validated and then added to the map with a 'routing.add' event.
	 * @param {Object} fromPoint - The starting point for the route.
	 * @param {Object} toPoint - The destination point for the route.
	 * @returns {Array|boolean} The calculated route path as an array of points, or false if the route could not be calculated.
	 */
    this.getRoute = function (fromPoint, toPoint) {
        if (!this.enabled || geoflo.mapMoving) return false;
        var features = turf.featureCollection(this.getFeatures());
        var pathfinder = new PathFinder(features, geoflo.options.routing);
        var path = pathfinder.findPath ? pathfinder.findPath(fromPoint, toPoint) : false;
        path = validatePath(fromPoint, toPoint, path);
        geoflo.fire('routing.add', { from: fromPoint, to: toPoint, path: path });
        return path;
    };

	/**
	 * @function
     * @memberof module:geoflo.Routing
	 * @name getMatch
	 * @description Retrieves a match for the given coordinates using the Exploring service. Sets the match as a starting point for routing.
	 * @param {Object} coords - The coordinates for which to find a match.
	 * @returns {Promise<Object>} The matched feature with routing property set to true.
	 */
    this.getMatch = async function (coords) {
        var feature = await geoflo.Exploring.getMatch(coords, { set: true, start: geoflo.startPoint });
        feature.properties.routing = true;
        return feature;
    }

	/**
	 * @function
     * @memberof module:geoflo.Routing
	 * @name getClosest
	 * @description Calculates the closest point on a route based on the last click and the closest point to it.
	 * @returns {Object|boolean} Returns a GeoJSON LineString feature with routing property set to true if successful, otherwise false.
	 */
    this.getClosest = function () {
        if (!geoflo.closestPoint || !geoflo.lastClick) return false;
        var route = this.getRoute(geoflo.lastClick, geoflo.closestPoint);
        if (!route || !route.path) return false;
        var feature = turf.lineString(route.path);
        feature.properties.routing = true;
        return feature;
    };

	/**
	 * @function
     * @memberof module:geoflo.Routing
	 * @name getFeatures
	 * @description Retrieves features of type 'LineString' from the mesh index.
	 * @returns {Array} An array of features of type 'LineString'.
	 */
    this.getFeatures = function () {
        var mesh = geoflo.meshIndex.getFeatures();
        var features = [mesh, this.features].flat();
        return features.filter(function(feature) { return feature.geometry.type === 'LineString' });
    };

    
    if (geoflo.options['routing'].enable) this.activate();


    function PathFinder(features, options) {
        options = options || {};
        
        if (!features.compactedVertices) { features = preprocess(features, options); }

        this._graph = features;
        this._keyFn = options.keyFn || function(c) { return c.join(','); };
        this._precision = options.precision || 1e-5;
        this._options = options;
    
        if (Object.keys(this._graph.compactedVertices).filter(function(k) { return k !== 'edgeData'; }).length === 0) {
            return null;
        }

        this.findPath = function(a, b) {
            var start = this._keyFn(roundCoord(a.coords, this._precision)),
                finish = this._keyFn(roundCoord(b.coords, this._precision));
    
            if (!this._graph.vertices[start] || !this._graph.vertices[finish]) {
                return null;
            }
    
            var phantomStart = this._createPhantom(start);
            var phantomEnd = this._createPhantom(finish);
    
            var path = findPath(this._graph.compactedVertices, start, finish);
    
            if (path) {
                var weight = path[0];
                path = path[1];
                return {
                    fullPath: path,
                    path: path.reduce(function buildPath(cs, v, i, vs) {
                        if (i > 0) {
                            cs = cs.concat(this._graph.compactedCoordinates[vs[i - 1]][v]);
                        }
    
                        return cs;
                    }.bind(this), []).concat([this._graph.sourceVertices[finish]]),
                    weight: weight,
                    edgeDatas: this._graph.compactedEdges 
                        ? path.reduce(function buildEdgeData(eds, v, i, vs) {
                            if (i > 0) {
                                eds.push({
                                    reducedEdge: this._graph.compactedEdges[vs[i - 1]][v]
                                });
                            }
    
                            return eds;
                        }.bind(this), [])
                        : undefined
                };
            } else {
                return null;
            }
    
            this._removePhantom(phantomStart);
            this._removePhantom(phantomEnd);
        }

        this.serialize = function() {
            return this._graph;
        }

        this._createPhantom = function(n) {
            if (this._graph.compactedVertices[n]) return null;
    
            var phantom = compactNode(n, this._graph.vertices, this._graph.compactedVertices, this._graph.sourceVertices, this._graph.edgeData, true, this._options);
            this._graph.compactedVertices[n] = phantom.edges;
            this._graph.compactedCoordinates[n] = phantom.coordinates;
    
            if (this._graph.compactedEdges) {
                this._graph.compactedEdges[n] = phantom.reducedEdges;
            }
    
            Object.keys(phantom.incomingEdges).forEach(function(neighbor) {
                this._graph.compactedVertices[neighbor][n] = phantom.incomingEdges[neighbor];
                this._graph.compactedCoordinates[neighbor][n] = [this._graph.sourceVertices[neighbor]].concat(phantom.incomingCoordinates[neighbor].slice(0, -1));
                if (this._graph.compactedEdges) {
                    this._graph.compactedEdges[neighbor][n] = phantom.reducedEdges[neighbor];
                }
            }.bind(this))
    
            return n;
        }

        this._removePhantom = function(n) {
            if (!n) return;
    
            Object.keys(this._graph.compactedVertices[n]).forEach(function(neighbor) {
                delete this._graph.compactedVertices[neighbor][n];
            }.bind(this));
            Object.keys(this._graph.compactedCoordinates[n]).forEach(function(neighbor) {
                delete this._graph.compactedCoordinates[neighbor][n];
            }.bind(this));
            if (this._graph.compactedEdges) {
                Object.keys(this._graph.compactedEdges[n]).forEach(function(neighbor) {
                    delete this._graph.compactedEdges[neighbor][n];
                }.bind(this));
            }
    
            delete this._graph.compactedVertices[n];
            delete this._graph.compactedCoordinates[n];
    
            if (this._graph.compactedEdges) {
                delete this._graph.compactedEdges[n];
            }
        }
    };

    function ShortestPath () {
        var INFINITY = 1 / 0;
        this.vertices = {};
    
        this.addVertex = function (name, edges) {
            this.vertices[name] = edges;
        };
    
        this.setVertices = function (graph) {
            this.vertices = graph;
        };
    
        this.shortestPath = function (start, finish) {
            var nodes = new PriorityQueue(),
                distances = {},
                previous = {},
                path = [],
                smallest, vertex, neighbor, alt;
        
            for (vertex in this.vertices) {
                if (vertex === start) {
                    distances[vertex] = 0;
                    nodes.enqueue(0, vertex);
                } else {
                    distances[vertex] = INFINITY;
                    nodes.enqueue(INFINITY, vertex);
                }
        
                previous[vertex] = null;
            }
        
            while (!nodes.isEmpty()) {
                smallest = nodes.dequeue();
        
                if (smallest === finish) {
                    path = [];
            
                    while (previous[smallest]) {
                        path.push(smallest);
                        smallest = previous[smallest];
                    }
            
                    break;
                }
        
                if (!smallest || distances[smallest] === INFINITY) {
                    continue;
                }
        
                for (neighbor in this.vertices[smallest]) {
                    alt = distances[smallest] + this.vertices[smallest][neighbor];
        
                    if (alt < distances[neighbor]) {
                        distances[neighbor] = alt;
                        previous[neighbor] = smallest;
            
                        nodes.enqueue(alt, neighbor);
                    }
                }
            }
        
            return path;
        };
    };
    
    function PriorityQueue() {
        this._nodes = [];
    
        this.enqueue = function (priority, key) {
            this._nodes.push({key: key, priority: priority});
            this.sort();
        };
    
        this.dequeue = function () {
            return this._nodes.shift().key;
        };
    
        this.sort = function () {
            this._nodes.sort((a, b) => {
                return a.priority - b.priority;
            });
        };
    
        this.isEmpty = function () {
            return !this._nodes.length;
        };
    };

    function TinyQueue(data, compare) {
        if ( data === void 0 ) data = [];
        if ( compare === void 0 ) compare = function (a, b) {
            return a < b ? -1 : a > b ? 1 : 0;
        };
    
        this.data = data;
        this.length = this.data.length;
        this.compare = compare;
    
        if (this.length > 0) {
            for (var i = (this.length >> 1) - 1; i >= 0; i--) { this._down(i); }
        }
    
        this.push = function push (item) {
            this.data.push(item);
            this.length++;
            this._up(this.length - 1);
        };
        
        this.pop = function pop () {
            if (this.length === 0) { return undefined; }
        
            var top = this.data[0];
            var bottom = this.data.pop();
            this.length--;
        
            if (this.length > 0) {
                this.data[0] = bottom;
                this._down(0);
            }
        
            return top;
        };
        
        this.peek = function peek () {
            return this.data[0];
        };
        
        this._up = function _up (pos) {
            var ref = this;
                var data = ref.data;
                var compare = ref.compare;
            var item = data[pos];
        
            while (pos > 0) {
                var parent = (pos - 1) >> 1;
                var current = data[parent];
                if (compare(item, current) >= 0) { break; }
                data[pos] = current;
                pos = parent;
            }
        
            data[pos] = item;
        };
        
        this._down = function _down (pos) {
            var ref = this;
                var data = ref.data;
                var compare = ref.compare;
            var halfLength = this.length >> 1;
            var item = data[pos];
        
            while (pos < halfLength) {
                var left = (pos << 1) + 1;
                var best = data[left];
                var right = left + 1;
        
                if (right < this.length && compare(data[right], best) < 0) {
                    left = right;
                    best = data[right];
                }
                if (compare(best, item) >= 0) { break; }
        
                data[pos] = best;
                pos = left;
            }
        
            data[pos] = item;
        };
    };

    function findNextEnd(prev, v, vertices, ends, vertexCoords, edgeData, trackIncoming, options) {
        var weight = vertices[prev][v],
            reverseWeight = vertices[v][prev],
            coordinates = [],
            path = [],
            reducedEdge = options.edgeDataSeed;
            
        if (options.edgeDataReduceFn) {
            reducedEdge = options.edgeDataReduceFn(reducedEdge, edgeData[v][prev]);
        }
    
        while (!ends[v]) {
            var edges = vertices[v];
    
            if (!edges) { break; }
    
            var next = Object.keys(edges).filter(function notPrevious(k) { return k !== prev; })[0];
            weight += edges[next];
    
            if (trackIncoming) {
                reverseWeight += vertices[next][v];
    
                if (path.indexOf(v) >= 0) {
                    ends[v] = vertices[v];
                    break;
                }
                path.push(v);
            }
    
            if (options.edgeDataReduceFn) {
                reducedEdge = options.edgeDataReduceFn(reducedEdge, edgeData[v][next]);
            }
    
            coordinates.push(vertexCoords[v]);
            prev = v;
            v = next;
        }
    
        return {
            vertex: v,
            weight: weight,
            reverseWeight: reverseWeight,
            coordinates: coordinates,
            reducedEdge: reducedEdge
        };
    };
    
    function compactNode(k, vertices, ends, vertexCoords, edgeData, trackIncoming, options) {
        options = options || {};
        var neighbors = vertices[k];
        return Object.keys(neighbors).reduce(function compactEdge(result, j) {
            var neighbor = findNextEnd(k, j, vertices, ends, vertexCoords, edgeData, trackIncoming, options);
            var weight = neighbor.weight;
            var reverseWeight = neighbor.reverseWeight;
            if (neighbor.vertex !== k) {
                if (!result.edges[neighbor.vertex] || result.edges[neighbor.vertex] > weight) {
                    result.edges[neighbor.vertex] = weight;
                    result.coordinates[neighbor.vertex] = [vertexCoords[k]].concat(neighbor.coordinates);
                    result.reducedEdges[neighbor.vertex] = neighbor.reducedEdge;
                }
                if (trackIncoming && 
                    !isNaN(reverseWeight) && (!result.incomingEdges[neighbor.vertex] || result.incomingEdges[neighbor.vertex] > reverseWeight)) {
                    result.incomingEdges[neighbor.vertex] = reverseWeight;
                    var coordinates = [vertexCoords[k]].concat(neighbor.coordinates);
                    coordinates.reverse();
                    result.incomingCoordinates[neighbor.vertex] = coordinates;
                }
            }
            return result;
        }, {edges: {}, incomingEdges: {}, coordinates: {}, incomingCoordinates: {}, reducedEdges: {}});
    };
    
    function compactGraph(vertices, vertexCoords, edgeData, options) {
        options = options || {};
        var progress = options.progress;
        var ends = Object.keys(vertices).reduce(function findEnds(es, k, i, vs) {
            var vertex = vertices[k];
            var edges = Object.keys(vertex);
            var numberEdges = edges.length;
            var remove;
    
            if(options.compact === false)  {
                remove = false;
            } else if (numberEdges === 1) {
                var other = vertices[edges[0]];
                remove = !other[k];
            } else if (numberEdges === 2) {
                remove = edges.filter(function(n) {
                    return vertices[n][k];
                }).length === numberEdges;
            } else {
                remove = false;
            }
            
            if (!remove) {
                es[k] = vertex;
            }
    
            if (i % 1000 === 0 && progress) {
                progress('compact:ends', i, vs.length);
            }
    
            return es;
        }, {});
    
        return Object.keys(ends).reduce(function compactEnd(result, k, i, es) {
            var compacted = compactNode(k, vertices, ends, vertexCoords, edgeData, false, options);
            result.graph[k] = compacted.edges;
            result.coordinates[k] = compacted.coordinates;
    
            if (options.edgeDataReduceFn) {
                result.reducedEdges[k] = compacted.reducedEdges;
            }
    
            if (i % 1000 === 0 && progress) {
                progress('compact:nodes', i, es.length);
            }
    
            return result;
        }, {graph: {}, coordinates: {}, reducedEdges: {}});
    };
    
    function findPath(graph, start, end) {
        var costs = {};
        costs[start] = 0;
        var initialState = [0, [start], start];
        var queue = new TinyQueue([initialState], function(a, b) { return a[0] - b[0]; });
        var explored = {};
    
        while (queue.length) {
            var state = queue.pop();
            var cost = state[0];
            var node = state[2];
            if (node === end) {
                return state.slice(0, 2);
            }
    
            var neighbours = graph[node];
            Object.keys(neighbours).forEach(function(n) {
                var newCost = cost + neighbours[n];
                if (!(n in costs) || newCost < costs[n]) {
                    costs[n] = newCost;
                    var newState = [newCost, state[1].concat([n]), n];
                    queue.push(newState);
                }
            });
        }
    
        return null;
    };
    
    function preprocess(graph, options) {
        options = options || {};

        var topo;

        var weightFn = options.weightFn || function defaultWeightFn(a, b) {
            return turf.distance(turf.point(a), turf.point(b));
        }
    
        if (graph.type === 'FeatureCollection') {
            // Graph is GeoJSON data, create a topology from it
            topo = topology(graph, options);
        } else if (graph.edges) {
            // Graph is a preprocessed topology
            topo = graph;
        }
    
        var graph = topo.edges.reduce(function buildGraph(g, edge, i, es) {
            var a = edge[0],
                b = edge[1],
                props = edge[2],
                w = weightFn(topo.vertices[a], topo.vertices[b], props),
                makeEdgeList = function makeEdgeList(node) {
                    if (!g.vertices[node]) {
                        g.vertices[node] = {};
                        if (options.edgeDataReduceFn) {
                            g.edgeData[node] = {};
                        }
                    }
                },
                concatEdge = function concatEdge(startNode, endNode, weight) {
                    var v = g.vertices[startNode];
                    v[endNode] = weight;
                    if (options.edgeDataReduceFn) {
                        g.edgeData[startNode][endNode] = options.edgeDataReduceFn(options.edgeDataSeed, props);
                    }
                };
    
            if (w) {
                makeEdgeList(a);
                makeEdgeList(b);
                if (w instanceof Object) {
                    if (w.forward) {
                        concatEdge(a, b, w.forward);
                    }
                    if (w.backward) {
                        concatEdge(b, a, w.backward);
                    }
                } else {
                    concatEdge(a, b, w);
                    concatEdge(b, a, w);
                }
            }
    
            if (i % 1000 === 0 && options.progress) {
                options.progress('edgeweights', i,es.length);
            }
    
            return g;
        }, {edgeData: {}, vertices: {}});
    
        var compact = compactGraph(graph.vertices, topo.vertices, graph.edgeData, options);
    
        return {
            vertices: graph.vertices,
            edgeData: graph.edgeData,
            sourceVertices: topo.vertices,
            compactedVertices: compact.graph,
            compactedCoordinates: compact.coordinates,
            compactedEdges: options.edgeDataReduceFn ? compact.reducedEdges : null
        };
    };
    
    function roundCoord(c, precision) {
        return [
            Math.round(c[0] / precision) * precision,
            Math.round(c[1] / precision) * precision,
        ];
    };
    
    function geoJsonReduce(geojson, fn, seed) {
        if (geojson.type === 'FeatureCollection') {
            return geojson.features.reduce(function reduceFeatures(a, f) {
                return geoJsonReduce(f, fn, a);
            }, seed);
        } else {
            return fn(seed, geojson);
        }
    };
    
    function geoJsonFilterFeatures(geojson, fn) {
        var features = [];
        if (geojson.type === 'FeatureCollection') {
            features = features.concat(geojson.features.filter(fn));
        }
    
        return {
            type: 'FeatureCollection',
            features: features
        };
    };
    
    function isLineString(f) {
        return f.geometry.type === 'LineString';
    };
    
    function topology(geojson, options) {
        options = options || {};
        var keyFn = options.keyFn || function defaultKeyFn(c) {
                return c.join(',');
            },
            precision = options.precision || 1e-5;
    
        var lineStrings = geoJsonFilterFeatures(geojson, isLineString);
        var explodedLineStrings = turf.explode(lineStrings);
        var vertices = explodedLineStrings.features.reduce(function buildTopologyVertices(cs, f, i, fs) {
                var rc = roundCoord(f.geometry.coordinates, precision);
                cs[keyFn(rc)] = f.geometry.coordinates;
    
                if (i % 1000 === 0 && options.progress) {
                    options.progress('topo:vertices', i, fs.length);
                }
    
                return cs;
            }, {}),
            edges = geoJsonReduce(lineStrings, function buildTopologyEdges(es, f, i, fs) {
                f.geometry.coordinates.forEach(function buildLineStringEdges(c, i, cs) {
                    if (i > 0) {
                        var k1 = keyFn(roundCoord(cs[i - 1], precision)),
                            k2 = keyFn(roundCoord(c, precision));
                        es.push([k1, k2, f.properties]);
                    }
                });
    
                if (i % 1000 === 0 && options.progress) {
                    options.progress('topo:edges', i, fs.length);
                }
    
                return es;
            }, []);
        return {
            vertices: vertices,
            edges: edges
        };
    };

    function validatePath(fromPoint, toPoint, path) {
        if (toPoint && toPoint.type === 'linepoint') return false;
        //if (precision > 0.0005) return false;
        if (!path || !path.path || !path.path.length || path.path.length < 2) return false;
        return path;

        precision = Number((Number(precision) + 0.000002).toFixed(7));
        var pathfinder = new PathFinder(features, { precision: precision });
        var newPath = pathfinder.findPath(fromPoint, toPoint);
        return validatePath(fromPoint, toPoint, features, newPath);
    };
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Routing);

/***/ }),

/***/ "./src/Select.js":
/*!***********************!*\
  !*** ./src/Select.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Select
 * @description This module provides the select functionality for the Geoflo application. It allows users to select features on the map by clicking on them.
 * @returns {Object} Returns the Select object.
 */
const Select = function () {
    const geoflo = this.geoflo;

    var lastKnownSelectIds = [];
    var removedFeatures = [];
    var nearFeatures = [];
    var clickCoords;
    var multipleSelect;
    var selectedId;

    this.id = 'select';

    /**
	 * @function
     * @memberof module:geoflo.Select
	 * @name activate
	 * @description This function activates the select feature functionality by enabling drag pan, setting buttons, and setting the active button to 'select'. It also triggers a 'select.activate' event with the provided options.
	 * @param {Object} options - The options object for activation.
	 * @param {string} [options.id] - The ID of the feature to select.
	 * @param {Object} [options.feature] - The feature object to select.
	 * @returns {boolean} Returns false if already activated.
	 */
    this.activate = function (options={}) {
        if (this.activated) return false;
        if (geoflo.currentMode.id !== this.id) return options.mode = this.id, geoflo.setMode(options);

        this.activated = true;
        geoflo.map.dragPan.enable();
        geoflo.setButtons();
        geoflo.setActiveButton('select');
        geoflo.fire('select.activate', { activated: true, options: options })
        if (this.gamepad) {}
        geoflo.map.getSource(geoflo.statics.constants.sources.SELECT).setData(turf.featureCollection([]));
        setTimeout(function(e) { e.selectFeature(options.id ? options.id : options.feature ? options.feature.id : false) }, 5, this)
    };

	/**
	 * @function
     * @memberof module:geoflo.Select
	 * @name deactivate
	 * @description This function deactivates the current feature by setting the 'activated' flag to false and triggering necessary actions.
	 * @returns {boolean} Returns false if the feature is not activated.
	 */
    this.deactivate = function () {
        if (!this.activated) return false;

        this.activated = false;
        this.deselectCurrentFeature();
        
        geoflo.setButtons();
        geoflo.fire('select.deactivate', { activated: true });
    };

	/**
	 * @function
     * @memberof module:geoflo.Select
	 * @name canHandle
	 * @description This function determines if the given mode name is equal to the SELECT mode.
	 * @param {string} modeName - The mode name to be checked.
	 * @returns {boolean} Returns true if the mode name is SELECT, false otherwise.
	 */
    this.canHandle = function (modeName) {
        return geoflo.statics.constants.modes.SELECT === modeName;
    };

	/**
	 * @function
     * @memberof module:geoflo.Select
	 * @name selectFeature
	 * @description Selects a feature by its ID, adds it to the selected features list, and optionally adds a popup.
	 * @param {string} id - The ID of the feature to be selected.
	 * @returns {Array} - An array of removed features if wantingToEdit is false, otherwise returns the removed feature.
	 */
    this.selectFeature = function (id, options={}) {
        const popup = geoflo.options.select.popup;
        
        geoflo.map.getSource(geoflo.statics.constants.sources.SELECT).setData(turf.featureCollection([]));
        
        if (!id) return false;
        if (lastKnownSelectIds.indexOf(id) === -1) lastKnownSelectIds.push(id);
        //if (geoflo.hasSelection()) geoflo.forEachSelectedFeature((feature) => { });

        removedFeatures = geoflo.Features.removeFeatures(id, true);
        geoflo.addFeaturesToSelected(removedFeatures, options);
        popup ? this.addPopup(removedFeatures) : false;

        geoflo.fire('feature.select', { ids: geoflo.getSelectedFeatureIds(), features: geoflo.getSelectedFeatures() });
        if (!geoflo.wantingToEdit) return removedFeatures;
        if (removedFeatures.length == 1 && id === removedFeatures[0].id) editFeature(removedFeatures[0]);
        return removedFeatures;
    };

	/**
	 * @function
     * @memberof module:geoflo.Select
	 * @name deselectCurrentFeature
	 * @description Deselects the current feature by removing its selection.
	 */
    this.deselectCurrentFeature = function () {
        geoflo.removeSelection();
        geoflo.fire('feature.deselect', { ids: geoflo.getSelectedFeatureIds(), features: geoflo.getSelectedFeatures() });
    };

	/**
	 * @function
     * @memberof module:geoflo.Select
	 * @name addPopup
	 * @description This function creates a popup element with the specified features and adds it to the map at the click coordinates.
	 * @param {Object} features - The features to be displayed in the popup.
	 * @param {string} features.title - The title of the popup.
	 * @param {string} features.description - The description of the popup.
	 * @param {number} features.latitude - The latitude coordinate for the popup location.
	 * @param {number} features.longitude - The longitude coordinate for the popup location.
	 */
    this.addPopup = function (features) {
        this.popupElement = buildPopup(features);

        this.popup = new mapboxgl.Popup({ closeOnClick: false })
            .setLngLat(clickCoords)
            .setDOMContent(this.popupElement)
            .addTo(geoflo.map)
            .setOffset(12);

        this.popup._container.style['margin-bottom'] = '10px'
    };

	/**
	 * @function
     * @memberof module:geoflo.Select
	 * @name removePopup
	 * @description Removes the popup element from the DOM if it exists.
	 * @return {boolean} Returns true if the popup element was successfully removed, otherwise false.
	 */
    this.removePopup = function () {
        return this.popup && this.popup.remove ? this.popup.remove() : false;
    };

	/**
	 * @function
     * @memberof module:geoflo.Select
	 * @name handleMove
	 * @description Handles the mouse move event.
	 * @param {Event} event - The event object representing the mouse move event.
	 */
    this.handleMove = function (event) {
        //geoflo.setMapClass('pointer');
    };

	/**
	 * @function
     * @memberof module:geoflo.Select
	 * @name handleClick
	 * @description Handles the click event on the map and selects features based on the event.
	 * @param {Object} event - The event object containing information about the click event.
	 * @returns {boolean} Returns false if geoflo.noSelect is true, otherwise selects features based on the event.
	 */
    this.handleClick = function (event) {
        var features = geoflo.getRenderedDrawnFeatures(event.lngLat);

        clickCoords = [event.lngLat.lng, event.lngLat.lat];
        multipleSelect = event.originalEvent && event.originalEvent.shiftKey && geoflo.options.select.multiple;

        if (features.length > 0) {
            if (!geoflo.Layers.getSelection(features, clickCoords)) return;
            selectFeature.call(this, features);
        } else if (!multipleSelect) {
            lastKnownSelectIds = [];
            nearFeatures = [];
            clickCoords = false;
            selectedId = false;
            this.deselectCurrentFeature();
        }
    };

	/**
	 * @function
     * @memberof module:geoflo.Select
	 * @name handleDrag
	 * @description Handles the drag event triggered by a user interaction. It sets the map class to 'grabbing' to indicate dragging.
	 * @param {Event} event - The event object representing the drag event.
	 */
    this.handleDrag = function (event) {
        //geoflo.setMapClass('grabbing');
    }


    function buildPopup (features) {
        const element = document.createElement('div');
        element.classList.add('popup-table-holder');

        const table = buildTable(features);

        element.appendChild(table);

        if (nearFeatures.length > 1) {
            var button = document.createElement('div');
            button.classList.add('popup-table-button');
            button.innerHTML = `<button> Next </button>`;
            button.addEventListener('click', selectFeature.bind(this));
            element.appendChild(button);
        }

        return element;
        
        /* const button = document.createElement('div');
        button.innerHTML = `<button class="btn btn-success btn-simple text-white" > Assign</button>`;
        element.appendChild(button);
        button.addEventListener('click', (e) => { console.log('Button clicked' + name); }); */
    };

    function buildTable (features) {
        var table = document.createElement('table');
        var properties = ['id', 'type'];

        table.style.width = '100%';
        table.style.height = '100%';
        table.setAttribute('border', '1');
        table.classList.add('popup-table');

        var tableBody = document.createElement('tbody');

        features.forEach(function(feature, index) {
            var type = feature.properties.type;

            properties.forEach(function(prop) {
                tableBody.appendChild(buildRow(prop, feature.properties[prop]));
            })

            tableBody.appendChild(buildRow('geometry', feature.geometry.type));

            if (feature.geometry.type === 'LineString') {
                geoflo.Features.addUnits(feature, 'feet');
                tableBody.appendChild(buildRow('unit', feature.geometry.unit));
                tableBody.appendChild(buildRow('units', feature.geometry.units));
            } else if (type === 'Text') {
                tableBody.appendChild(buildRow('content', feature.properties.text));
            } else if (feature.geometry.type === 'Polygon') {
                geoflo.Features.addUnits(feature, 'acres');
                tableBody.appendChild(buildRow('unit', feature.geometry.unit));
                tableBody.appendChild(buildRow('units', feature.geometry.units));
            }
        })

        table.appendChild(tableBody);
        return table;
    };

    function buildRow (header, data) {
        var tr = document.createElement('tr');
        tr.classList.add('popup-table-row');

        if (header) {
            var th = document.createElement('th');
            th.classList.add('popup-table-header');
            th.appendChild(document.createTextNode(header));
            tr.appendChild(th);
        }
        
        var td = document.createElement('td');
        td.classList.add('popup-table-data');
        td.classList.add(header);
        td.appendChild(document.createTextNode(data));
        tr.appendChild(td);

        return tr;
    }

    function selectFeature (features) {
        multipleSelect = geoflo.options.select.multiple;
        nearFeatures = features;
        lastKnownSelectIds = lastKnownSelectIds === undefined ? [] : lastKnownSelectIds;

        if (features.length >= lastKnownSelectIds.length) {
            lastKnownSelectIds.splice(0, features.length - lastKnownSelectIds.length + 1);
        }

        var feat = features[0];
        selectedId = feat.id || feat.properties['id'];

        if (features.length > 1) {
            features.forEach((feature) => {
                const id = feature.id || feature.properties['id'];
                if (lastKnownSelectIds.indexOf(id) === -1) {
                    selectedId = id;
                    feat = feature;
                }
            });
        }

        if (!multipleSelect) geoflo.currentMode.deselectCurrentFeature();
        geoflo.currentMode.selectFeature(selectedId);
    }

    function editFeature (feature) {
        geoflo.wantingToEdit = false;
        geoflo.setMode('edit', feature.properties.type, feature);
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Select);

/***/ }),

/***/ "./src/Snapping.js":
/*!*************************!*\
  !*** ./src/Snapping.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Snapping
 * @description This module provides the snapping functionality for the Geoflo application. It allows users to snap features to the map by creating a buffer around the feature and snapping to nearby features.
 * @param {Object} mode - The mode object containing the type of mode.
 * @returns {Object} Returns the Snapping object.
 */
const Snapping = function (mode) {
    const geoflo = this.geoflo;
    this.type = mode.type;

	/**
	 * @function
     * @memberof module:geoflo.Snapping
	 * @name activate
	 * @description This function enables the object and sets the snapping option to true.
	 */
    this.activate = function () {
        this.enabled = true;
        geoflo.options['snapping'].enable = true;
    }

	/**
	 * @function
     * @memberof module:geoflo.Snapping
	 * @name deactivate
	 * @description This function sets the 'enabled' property to false, disables snapping, and updates the mesh data.
	 * @returns {void}
	 */
    this.deactivate = function () {
        this.enabled = false;
        geoflo.options['snapping'].enable = false;
        geoflo.updateMeshData([], true);
    }


	/**
	 * @function
     * @memberof module:geoflo.Snapping
	 * @name getClosest
	 * @description Finds the closest point to the given coordinates within a specified radius or pixel distance.
	 * @param {Array<number>} coords - The coordinates [longitude, latitude] to find the closest point to.
	 * @param {Array<Object>} features - An array of features to search for the closest point within.
	 * @returns {Object} An object containing the closest point and its coordinates.
	 */
    this.getClosest = function (coords, features) {
        var calculatedRadius = geoflo.options.snapping.distance * Math.pow(2, Math.max(1, 19 - geoflo.map.getZoom()));
        var radiusInKm = calculatedRadius / 100000;
        var pixelDistance = geoflo.options.snapping.pixels ? geoflo.options.snapping.pixels * metersPerPixel(coords[1], geoflo.map.getZoom()) : false;
        
        features = features ? geoflo.getRenderedSnapFeatures({ lng: coords[0], lat: coords[1] }, radiusInKm) : [geoflo.hotFeature];

        var closestPoint = findClosestPoint(features, coords, radiusInKm, pixelDistance);

        var coords = !closestPoint ? false :
            pixelDistance ? closestPoint.coords :
            closestPoint.type === 'vertex' && closestPoint.dist <= radiusInKm ? closestPoint.coords :
            false;
        
        return {
            point: closestPoint,
            coords: coords
        };
    }

	/**
	 * @function
     * @memberof module:geoflo.Snapping
	 * @name setClosest
	 * @description This function calculates the closest feature to the given coordinates within a specified radius and snapping parameters. It determines if the closest feature is a point or a vertex and returns the snapped feature accordingly.
	 * @param {Array<number>} coords - The coordinates [longitude, latitude] to find the closest feature to.
	 * @param {boolean} isPoint - Indicates if the feature is a point.
	 * @param {boolean} isVertex - Indicates if the feature is a vertex.
	 * @returns {Object} The snapped feature based on the calculated closest point or line.
	 */
    this.setClosest = function (coords, isPoint, isVertex) {
        var snapFeature = null;
        var calculatedRadius = geoflo.options.snapping.distance * Math.pow(2, Math.max(1, 19 - geoflo.map.getZoom()));
        var radiusInKm = calculatedRadius / 100000;
        var pixelDistance = geoflo.options.snapping.pixels ? geoflo.options.snapping.pixels * metersPerPixel(coords[1], geoflo.map.getZoom()) : false;
        var filter = geoflo.pinableFeatures && geoflo.pinableFeatures.length ? ['case', ['any', ...geoflo.pinableFeatures.map(e => ["==", ["get", "id"], e.id || e.properties.id])], false, true] : false;
        var nearFeatures = geoflo.getRenderedFeatures({ lng: coords[0], lat: coords[1] }, radiusInKm, filter);
        var closestPoint = nearFeatures && nearFeatures.length ? findClosestPoint(nearFeatures, coords, radiusInKm, pixelDistance) : false;
        var lastClickDistance, lastClickArray, lastClickEqual;

        geoflo.closestPoint = closestPoint;

        if ((!nearFeatures && !isPoint) || (!closestPoint && !isPoint)) return this.updateFeature(coords);
        if (!closestPoint || !closestPoint.coords) return snapFeature;

        if (isVertex || !geoflo.lastClick) {
            snapFeature = turf.point(closestPoint.coords);
        } else {
            lastClickArray = Array.isArray(geoflo.lastClick.coords) && Array.isArray(geoflo.lastClick.coords[0]);
            if (lastClickArray) geoflo.lastClick.coords = geoflo.lastClick.coords[0];

            lastClickDistance = turf.distance(turf.point(coords), turf.point(geoflo.lastClick.coords));
            lastClickEqual = geoflo.Utilities.isPointEqual(geoflo.lastClick.coords, closestPoint.coords);

            if (lastClickEqual && lastClickDistance > geoflo.options.snapping.tolerance) return this.updateFeature(coords);

            snapFeature = turf.lineString([geoflo.lastClick.coords, closestPoint.coords]);
        }

        geoflo.fire('snapping.add', { closest: closestPoint, snapped: snapFeature });
        return snapFeature;
    }


	/**
	 * @function
     * @memberof module:geoflo.Snapping
	 * @name setFeature
	 * @description This function sets a feature on the map using the provided feature and coordinates. It handles different scenarios such as creating a point, line, or polygon feature based on the input parameters.
	 * @param {Object} feature - The feature to be set on the map.
	 * @param {Array} coords - The coordinates for the feature.
	 * @returns {Object} The feature that was set on the map.
	 */
    this.setFeature = function (feature, coords) {
        if (geoflo.touchClick) return null;

        feature = feature || geoflo.snapFeature;
        
        if (!feature && coords) return setFeature(turf.point(coords));
        if (!feature) return geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([])), null;

        var snapCoords = feature.geometry.coordinates;
        var lastClick = coords || geoflo.lastClick.coords;
        var firstClick = geoflo.firstClick.coords;
        var isPolygon = this.type === 'Polygon' || feature.properties.type === 'Polygon';
        var isPolyline = feature.geometry.type === "LineString";

        if (!isPolyline || snapCoords.length < 2) {
            feature = setFeature(isPolygon ? turf.lineString([firstClick, lastClick]) : turf.point(lastClick));
        } else if (geoflo.hotFeature) {
            var hotCoords = geoflo.hotFeature.geometry.coordinates;
            if (isPolygon) snapCoords.pop();
            hotCoords.splice.apply(hotCoords, [-1, 1].concat(geoflo.Utilities.consumableArray(snapCoords)));
        } else {
            geoflo.hotFeature = turf.lineString(snapCoords);
        }

        geoflo.Utilities.setProperty(geoflo.hotFeature, 'type', this.type);

        feature = setFeature(isPolygon ? turf.lineString([firstClick, lastClick]) : turf.point(lastClick));
        geoflo.snapFeature = feature;
        return geoflo.snapFeature;
    }

	/**
	 * @function
     * @memberof module:geoflo.Snapping
	 * @name setVertex
	 * @description This function determines the vertex based on snapping and routing settings. It sets the closest feature when snapping is enabled and calculates the route if routing is enabled. It updates the map sources accordingly and triggers events related to vertex dragging and snapping.
	 * @param {Object} geoflo - The context object containing various settings and data.
	 * @returns {boolean} Returns false if snapping is disabled or no snapped vertex is available.
	 */
    this.setVertex = function () {
        var snapToFeature = geoflo.Snapping.enabled;
        if (geoflo.bypassSnapping) snapToFeature = false;

        var calculateRoute = geoflo.Routing.enabled;
        if (geoflo.bypassRouting) calculateRoute = false;

        if (!snapToFeature || !geoflo.snappedVertex) return false;

        geoflo.snapFeature = this.setClosest(geoflo.snappedVertex, true, true);

        if (calculateRoute) geoflo.snapFeature = geoflo.Routing.getClosest() || geoflo.snapFeature;
        if (!geoflo.snapFeature) return geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));

        geoflo.Utilities.setProperty(geoflo.snapFeature, 'type', geoflo.currentMode.type);
        geoflo.map.getSource(geoflo.statics.constants.sources[calculateRoute ? 'ROUTE' : 'SNAP']).setData(turf.featureCollection([geoflo.snapFeature]));

        geoflo.hotFeature.geometry.coordinates[geoflo.dragIndex] = geoflo.snapFeature.geometry.coordinates;
        geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
        geoflo.fire('vertex.dragsnap', { feature: geoflo.hotFeature, vertex: turf.point(geoflo.snappedVertex) });
    }


	/**
	 * @function
     * @memberof module:geoflo.Snapping
	 * @name addFeature
	 * @description This function adds a feature to the map by setting the data of the specified source with the provided feature. It also updates the properties of the feature if properties are provided.
	 * @param {Object} feature - The feature to be added to the map.
	 * @param {Object} [properties={}] - Additional properties to be assigned to the feature.
	 * @param {boolean} [dontAdd] - Flag to prevent adding the feature if set to true.
	 * @returns {boolean} Returns false if the feature is not provided or if dontAdd flag is set.
	 */
    this.addFeature = function (feature, properties={}, dontAdd) {
        geoflo.map.getSource(geoflo.statics.constants.sources['SNAP']).setData(turf.featureCollection([]));
        geoflo.map.getSource(geoflo.statics.constants.sources['ROUTE']).setData(turf.featureCollection([]));
        if (!feature || dontAdd) return false;
        if (properties) feature.properties = geoflo.Utilities.assignDeep(geoflo.Utilities.cloneDeep(properties), feature.properties);
        geoflo.snapFeature = feature;
        geoflo.map.getSource(geoflo.statics.constants.sources[feature.properties.routing ? 'ROUTE' : 'SNAP']).setData(turf.featureCollection([geoflo.snapFeature]));
    }

	/**
	 * @function
     * @memberof module:geoflo.Snapping
	 * @name updateFeature
	 * @description This function updates a feature based on the event coordinates provided. It determines the type of feature, calculates the necessary coordinates, creates a line feature with hint properties, and converts units if needed.
	 * @param {Array} evtCoords - The event coordinates to update the feature.
	 * @returns {Object} The updated feature based on the event coordinates.
	 */
    this.updateFeature = function (evtCoords) {
        geoflo.closestPoint = null;
        if (!geoflo.lastClick) return null;
        if (!geoflo.firstClick || geoflo.mouseIsDown) return null;
    
        var type = geoflo.Features.getType(geoflo.hotFeature) || geoflo.currentMode.type;
        var coords = geoflo.hotFeature ? geoflo.Utilities.getLastIndexCoords(geoflo.hotFeature) : geoflo.lastClick.coords;
        var vertex = turf.point(evtCoords);
        var hintCoords = type && type === "Polygon" && geoflo.hotFeature ? [coords, evtCoords, geoflo.firstClick.coords] : [coords, evtCoords];
        var feature = turf.lineString(hintCoords);

        feature.properties.type = type;
        feature.properties.hint = true;
        
        var unit = 'feet';
        var units = geoflo.Features.convertUnits(geoflo.hotFeature, 0, unit);
        units += geoflo.Features.convertUnits(feature, 0, unit);
        vertex = updateVertex(vertex, { units: units, unit: unit });

        return feature;
    }




    if (geoflo.options['snapping'].enable) this.activate();




    function cheapRuler (lat, units) {
        function cheapruler(lat, units) {
            return new CheapRuler(lat,units);
        }
        
        cheapruler.fromTile = function(y, z, units) {
            var n = Math.PI * (1 - 2 * (y + 0.5) / Math.pow(2, z));
            var lat = Math.atan(0.5 * (Math.exp(n) - Math.exp(-n))) * 180 / Math.PI;
            return new CheapRuler(lat,units);
        };
        
        cheapruler.units = {
            kilometers: 1,
            miles: 1000 / 1609.344,
            nauticalmiles: 1000 / 1852,
            meters: 1000,
            metres: 1000,
            yards: 1000 / 0.9144,
            feet: 1000 / 0.3048,
            inches: 1000 / 0.0254
        };
        
        function CheapRuler(lat, units) {
            var factors = {
                kilometers: 1,
                miles: 1000 / 1609.344,
                nauticalmiles: 1000 / 1852,
                meters: 1000,
                metres: 1000,
                yards: 1000 / 0.9144,
                feet: 1000 / 0.3048,
                inches: 1000 / 0.0254
            }
        
            if (lat === undefined)
                throw new Error('No latitude given.');
            if (units && !factors[units])
                throw new Error('Unknown unit ' + units + '. Use one of: ' + Object.keys(factors));
        
            var m = units ? factors[units] : 1;
        
            var cos = Math.cos(lat * Math.PI / 180);
            var cos2 = 2 * cos * cos - 1;
            var cos3 = 2 * cos * cos2 - cos;
            var cos4 = 2 * cos * cos3 - cos2;
            var cos5 = 2 * cos * cos4 - cos3;
        
            this.kx = m * (111.41513 * cos - 0.09455 * cos3 + 0.00012 * cos5);
            this.ky = m * (111.13209 - 0.56605 * cos2 + 0.0012 * cos4);
        }
        
        CheapRuler.prototype = {
            equals: function (a, b) {
                return a[0] === b[0] && a[1] === b[1];
            },
      
            interpolate: function (a, b, t) {
                var dx = b[0] - a[0];
                var dy = b[1] - a[1];
                return [a[0] + dx * t, a[1] + dy * t];
            },
      
            distance: function(a, b) {
                var dx = (a[0] - b[0]) * this.kx;
                var dy = (a[1] - b[1]) * this.ky;
                return Math.sqrt(dx * dx + dy * dy);
            },
        
            bearing: function(a, b) {
                var dx = (b[0] - a[0]) * this.kx;
                var dy = (b[1] - a[1]) * this.ky;
                if (!dx && !dy)
                    return 0;
                var bearing = Math.atan2(-dy, dx) * 180 / Math.PI + 90;
                if (bearing > 180)
                    bearing -= 360;
                return bearing;
            },
        
            destination: function(p, dist, bearing) {
                var a = (90 - bearing) * Math.PI / 180;
                return this.offset(p, Math.cos(a) * dist, Math.sin(a) * dist);
            },
        
            offset: function(p, dx, dy) {
                return [p[0] + dx / this.kx, p[1] + dy / this.ky];
            },
        
            lineDistance: function(points) {
                var total = 0;
                for (var i = 0; i < points.length - 1; i++) {
                    total += this.distance(points[i], points[i + 1]);
                }
                return total;
            },
        
            area: function(polygon) {
                var sum = 0;
        
                for (var i = 0; i < polygon.length; i++) {
                    var ring = polygon[i];
        
                    for (var j = 0, len = ring.length, k = len - 1; j < len; k = j++) {
                        sum += (ring[j][0] - ring[k][0]) * (ring[j][1] + ring[k][1]) * (i ? -1 : 1);
                    }
                }
        
                return (Math.abs(sum) / 2) * this.kx * this.ky;
            },
        
            along: function(line, dist) {
                var sum = 0;
        
                if (dist <= 0)
                    return line[0];
        
                for (var i = 0; i < line.length - 1; i++) {
                    var p0 = line[i];
                    var p1 = line[i + 1];
                    var d = this.distance(p0, p1);
                    sum += d;
                    if (sum > dist)
                        return this.interpolate(p0, p1, (dist - (sum - d)) / d);
                }
        
                return line[line.length - 1];
            },
        
            pointOnLine: function(line, p) {
                var minDist = Infinity;
                var minX, minY, minI, minT;
        
                for (var i = 0; i < line.length - 1; i++) {
        
                    var x = line[i][0];
                    var y = line[i][1];
                    var dx = (line[i + 1][0] - x) * this.kx;
                    var dy = (line[i + 1][1] - y) * this.ky;
        
                    if (dx !== 0 || dy !== 0) {
        
                        var t = ((p[0] - x) * this.kx * dx + (p[1] - y) * this.ky * dy) / (dx * dx + dy * dy);
        
                        if (t > 1) {
                            x = line[i + 1][0];
                            y = line[i + 1][1];
        
                        } else if (t > 0) {
                            x += (dx / this.kx) * t;
                            y += (dy / this.ky) * t;
                        }
                    }
        
                    dx = (p[0] - x) * this.kx;
                    dy = (p[1] - y) * this.ky;
        
                    var sqDist = dx * dx + dy * dy;
                    if (sqDist < minDist) {
                        minDist = sqDist;
                        minX = x;
                        minY = y;
                        minI = i;
                        minT = t;
                    }
                }
        
                return {
                    point: [minX, minY],
                    index: minI,
                    t: minT
                };
            },
        
            lineSlice: function(start, stop, line) {
                var p1 = this.pointOnLine(line, start);
                var p2 = this.pointOnLine(line, stop);
        
                if (p1.index > p2.index || (p1.index === p2.index && p1.t > p2.t)) {
                    var tmp = p1;
                    p1 = p2;
                    p2 = tmp;
                }
        
                var slice = [p1.point];
        
                var l = p1.index + 1;
                var r = p2.index;
        
                if (!this.equals(line[l], slice[0]) && l <= r)
                    slice.push(line[l]);
        
                for (var i = l + 1; i <= r; i++) {
                    slice.push(line[i]);
                }
        
                if (!this.equals(line[r], p2.point))
                    slice.push(p2.point);
        
                return slice;
            },
        
            lineSliceAlong: function(start, stop, line) {
                var sum = 0;
                var slice = [];
        
                for (var i = 0; i < line.length - 1; i++) {
                    var p0 = line[i];
                    var p1 = line[i + 1];
                    var d = this.distance(p0, p1);
        
                    sum += d;
        
                    if (sum > start && slice.length === 0) {
                        slice.push(this.interpolate(p0, p1, (start - (sum - d)) / d));
                    }
        
                    if (sum >= stop) {
                        slice.push(this.interpolate(p0, p1, (stop - (sum - d)) / d));
                        return slice;
                    }
        
                    if (sum > start)
                        slice.push(p1);
                }
        
                return slice;
            },
        
            bufferPoint: function(p, buffer) {
                var v = buffer / this.ky;
                var h = buffer / this.kx;
                return [p[0] - h, p[1] - v, p[0] + h, p[1] + v];
            },
        
            bufferBBox: function(bbox, buffer) {
                var v = buffer / this.ky;
                var h = buffer / this.kx;
                return [bbox[0] - h, bbox[1] - v, bbox[2] + h, bbox[3] + v];
            },
        
            insideBBox: function(p, bbox) {
                return p[0] >= bbox[0] && p[0] <= bbox[2] && p[1] >= bbox[1] && p[1] <= bbox[3];
            }
        }
      
        return cheapruler(lat, units);
    }

    function findClosestPoint (uniqueFeatures, evtCoords, radiusInKm, pixelDistance) {
        const coords = calculatePointsOnLine(uniqueFeatures, evtCoords);
  
        let closestVertex = null;
        let closestLinepoint = null;
        let borders;
        let id = geoflo.id || 'id';
  
        coords.forEach((pointType) => {
            const dist = pointType.dist;
  
            if (dist !== null) {
                if (pointType.type === "vertex") {
                    if (closestVertex === null) {
                        closestVertex = pointType;
                    } else if (pixelDistance !== undefined) {
                        if (dist * 1000 < pixelDistance) {
                            if (closestVertex && closestVertex.lineEdge) {
                                closestVertex = pointType;
                            }
                        }
                    } else if (dist <= closestVertex.dist) {
                        if (dist === closestVertex.dist) {
                            if (closestVertex.lineEdge) {
                                closestVertex = pointType;
                            }
                        } else {
                            closestVertex = pointType;
                        }
                    }
                } else if (dist < radiusInKm) {
                    if (closestLinepoint !== null && dist === closestLinepoint.dist && closestLinepoint[id] !== pointType[id]) {
                        if (closestLinepoint.type === "linepoint") {
                            if ((pointType.distance1 <= closestLinepoint.distance1 && pointType.distance2 <= closestLinepoint.distance2) ||
                                (pointType.distance2 <= closestLinepoint.distance1 && pointType.distance1 <= closestLinepoint.distance2)) {
                                console.log("switch closest points");
                                closestLinepoint = pointType;
                            }
                        }
                    }
  
                    if (closestLinepoint === null || dist < closestLinepoint.dist) {
                        closestLinepoint = pointType;
  
                        if (pointType.border1 && pointType.border2) {
                            borders = {
                                border1: pointType.border1,
                                border2: pointType.border2,
                                distance1: pointType.distance1,
                                distance2: pointType.distance2
                            };
                        } else {
                            borders = null;
                        }
                    }
                }
            }
        });
  
        if (closestVertex !== null) {
            if (closestLinepoint !== null) {
                if (closestVertex.dist < radiusInKm) {
                    return Object.assign({ borders: null }, closestVertex);
                } else {
                    return Object.assign({ borders: borders }, closestLinepoint);
                }
            } else {
                return Object.assign({ borders: null }, closestVertex);
            }
        } else if (closestLinepoint !== null) {
            return Object.assign({ borders: borders }, closestLinepoint);
        } else {
            return null;
        }
    }

    function closestPoints (ruler, coordinates, evtCoords) {
        const result = [];
        const pointOnLine = ruler.pointOnLine(coordinates, evtCoords);
        const pointCoords = pointOnLine.point;
        const pointIndex = pointOnLine.index;
        const linePoint = { type: "linepoint", coords: pointCoords };
        const p1 = coordinates[pointIndex];
        const p2 = coordinates[pointIndex + 1];
        const distance1 = ruler.distance(p1, evtCoords);
        const distance2 = ruler.distance(p2, evtCoords);

        let lineEdge = false;
        let vertex = null;
    
        if (distance1 < distance2) {
            lineEdge = pointIndex === 0;
            vertex = p1;
        } else {
            lineEdge = pointIndex + 1 === coordinates.length - 1;
            vertex = p2;
        }
    
        linePoint.border1 = p1;
        linePoint.distance1 = distance1;
        linePoint.border2 = p2;
        linePoint.distance2 = distance2;
    
        result.push(linePoint);
        result.push({ type: "vertex", coords: vertex, lineEdge: lineEdge });
        return result;
    }

    function calculatePointsOnLine (uniqueFeatures, evtCoords) {
        const coords = [];
        const knownIds = {};
        const ruler = cheapRuler(evtCoords[1]);
    
        uniqueFeatures.forEach((feature) => {
            const id = feature.id || feature.properties.id;
            var closest = [];
    
            if (knownIds[id] === undefined) {
                knownIds[id] = true;
                const type = feature.geometry.type;
    
                if (type === "LineString") {
                    if (feature.geometry.coordinates) {
                        closest = closestPoints(ruler, feature.geometry.coordinates, evtCoords);
  
                        closest.forEach((pointType) => {
                            pointType.id = id;
                            pointType.dist = ruler.distance(pointType.coords, evtCoords);
                            coords.push(pointType);
                        });
                    } else {
                        console.log("no coordinates: ", feature);
                    }
                } else if (type === "Point") {
                    const pointType = { id: id, type: "vertex", coords: feature.geometry.coordinates, lineEdge: true };
                    pointType.dist = ruler.distance(pointType.coords, evtCoords);
                    coords.push(pointType);
                } else if (type === "Polygon") {
                    if (turf.booleanWithin(turf.point(evtCoords), feature)) return;
                    
                    feature.geometry.coordinates.forEach((featureCoords, index) => {
                        closest = closestPoints(ruler, featureCoords, evtCoords);
  
                        closest.forEach((pointType) => {
                            pointType.id = id;
                            pointType.polygonCoordsArray = index;
                            pointType.dist = ruler.distance(pointType.coords, evtCoords);
                            coords.push(pointType);
                        });
                    });
                }
            }
        });
    
        return coords;
    }

    function addVertex (startPoint, endPoint, length, data) {
        var startData = data[startPoint];
    
        if (!startData) {
            startData = {};
            data[startPoint] = startData;
        }
    
        if (!startData[endPoint]) {
            startData[endPoint] = length;
        }
    }

    function addVertexPointTwoWay (startCoord, endCoords, length, data) {
        var startPoint = startCoord.join("#");
        var endPoint = endCoords.join("#");
        addVertex(startPoint, endPoint, length, data);
        addVertex(endPoint, startPoint, length, data);
    }
    
    function metersPerPixel (latitude, zoomLevel) {
        return ((geoflo.statics.constants.CIRCUM * Math.cos((latitude * (Math.PI / 180)))) / Math.pow(2, zoomLevel + 8));
    }
    
    function setFeature (feature) {
        if (!feature) return geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([])), geoflo.snapFeature;
        geoflo.Utilities.setProperty(feature, 'type', geoflo.currentMode.type);
        geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([feature]));
        return feature;
    }

    function updateVertex (vertex, options={}) {
        var features = geoflo.map.getSource(geoflo.statics.constants.sources.HOTTEXT)._data.features;
        if (features.length && features[features.length - 1].properties.mouseLine) features.pop();

        vertex.properties.units = options.units;
        vertex.properties.unit = options.unit;
        vertex.properties.text = `${options.units} ${options.unit}`;
        vertex.properties.transform = 'uppercase';
        vertex.properties.anchor = 'top-left';
        vertex.properties.mouseLine = true;
    
        features.push(vertex);
        geoflo.map.getSource(geoflo.statics.constants.sources.HOTTEXT).setData(turf.featureCollection(features));
        return vertex;
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Snapping);

/***/ }),

/***/ "./src/Statics.js":
/*!************************!*\
  !*** ./src/Statics.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const Dev = 'solutegrate';
const Id = 'geoflo';

const Statics = {
    developer: Dev,
    id: Id,
    logo: {
        full: `https://${Id}.s3.amazonaws.com/logos/logo_full_white.png`,
        icon: `https://${Id}.s3.amazonaws.com/logos/logo_icon_white.svg`,
        fullClass: Id + '-logo',
        iconClass: Id + '-icon'
    },
    controls: [
        // TOP //
        [{
            type: 'utils',
            enable: true,
            position: 'top-center',
            group: 'action',
            divider: true,
            show: true,
            buttons: {
                repeat: true,
                zoom: true,
                refresh: true,
                locate: true
            }
        },
        {
            type: 'modes',
            enable: true,
            group: 'control',
            divider: true,
            show: true,
            buttons: {
                select: true,
                edit: true,
                save: true
            }
        },
        {
            type: 'options',
            enable: true,
            group: 'action',
            divider: false,
            show: true,
            buttons: {
                import: true,
                export: true,
                clear: true,
                undo: true,
                redo: true,
                cancel: true
            }
        }],

        // BOTTOM //
        [{
            type: 'types',
            enable: true,
            position: 'top-center',
            group: 'control',
            divider: true,
            show: true,
            buttons: {
                polyline: true,
                polygon: true,
                rectangle: true,
                circle: true,
                text: true
            }
        },
        {
            type: 'actions',
            enable: true,
            group: 'control',
            divider: false,
            show: true,
            buttons: {
                snapping: true,
                pinning: true,
                routing: true,
                exploring: true,
                painting: true
            }
        }]
    ],
    constants: {
        classes: {
            PREDEFINED_CONTROL_BASE: "mapboxgl-ctrl",
            PREDEFINED_CONTROL_GROUP: "mapboxgl-ctrl-group",
            CONTROL_PREFIX: "mapboxgl-ctrl-",
            ACTION_BUTTON: Id + "-action-btn",
            CONTROL_BUTTON: "mapbox-gl-draw_ctrl-draw-btn",
            CONTROL_BUTTON_LINE: "mapbox-gl-draw_line",
            CONTROL_BUTTON_POLYGON: "mapbox-gl-draw_polygon",
            CONTROL_BUTTON_RECTANGLE: "mapbox-gl-draw_rectangle",
            CONTROL_BUTTON_POINT: "mapbox-gl-draw_point",
            CONTROL_BUTTON_TEXT: "mapbox-gl-draw_text",
            CONTROL_BUTTON_ICON: "mapbox-gl-draw_icon",
            CONTROL_BUTTON_CLEAR: Id + "-delete-data",
            CONTROL_BUTTON_DELETE_SNAP: Id + "-delete-snap-data",
            CONTROL_BUTTON_LOCATE: Id + "-locate",
            CONTROL_BUTTON_ZOOM_IN_FEATURES: Id + "-zoom-in-features",
            CONTROL_BUTTON_HIDE_SELECTED: Id + "-hide-selected",
            CONTROL_BUTTON_ADD_FEATURE_TO_GRID: Id + "-add-feature-to-grid",
            CONTROL_BUTTON_CREATE_POLYGON: Id + "-create-polygon",
            CONTROL_BUTTON_COMBINE_FEATURES: "mapbox-gl-draw_combine",
            CONTROL_BUTTON_UNCOMBINE_FEATURES: "mapbox-gl-draw_uncombine",
            CONTROL_BUTTON_GROUP_FEATURES: Id + "-group-features",
            CONTROL_BUTTON_UNGROUP_FEATURES: Id + "-ungroup-features",
            CONTROL_BUTTON_DOWNLOAD_WAYS: Id + "-download-ways",
            CONTROL_BUTTON_DOWNLOAD_BUILDINGS: Id + "-download-buildings",
            CONTROL_BUTTON_REFRESH: Id + "-refresh",
            CONTROL_BUTTON_EDIT: Id + "-edit",
            CONTROL_BUTTON_CUT: Id + "-cut",
            CONTROL_BUTTON_SELECT: Id + "-select",
            CONTROL_BUTTON_DOWNLOAD_DATA: Id + "-download-data",
            CONTROL_BUTTON_EXPORT: Id + "-export",
            CONTROL_BUTTON_SAVE_AS_GIST: Id + "-save-as-gist",
            CONTROL_BUTTON_SAVE_AS_GEOJSON: Id + "-save-as-geojson",
            CONTROL_BUTTON_SAVE_AS_KML: Id + "-save-as-kml",
            CONTROL_BUTTON_EXPAND_EDITOR: Id + "-expand-editor",
            CONTROL_BUTTON_IMPORT: Id + "-import",
            CONTROL_BUTTON_FINSIH: Id + "-finish",
            CONTROL_BUTTON_CANCEL: Id + "-cancel",
            CONTROL_BUTTON_UNDO: Id + "-undo",
            CONTROL_BUTTON_REDO: Id + "-redo",
            CONTROL_BUTTON_SNAPPING: Id + "-snapping",
            CONTROL_BUTTON_PINNING: Id + "-pinning",
            CONTROL_BUTTON_ROUTING: Id + "-routing",
            CONTROL_BUTTON_EXPLORING: Id + "-exploring",
            CONTROL_BUTTON_PAINTING: Id + "-painting",
            CONTROL_BUTTON_REPEAT: Id + "-repeat",
            CONTROL_GROUP: Id + "-ctrl-group",
            DROPDOWN_GROUP: Id + "-dropdown-group",
            DIVIDER: Id + "-divider",
            ACTION_GROUP: Id + "-action-group",
            ATTRIBUTION: "mapboxgl-ctrl-attrib",
            ACTIVE_BUTTON: "active",
            BOX_SELECT: "mapbox-gl-draw_boxselect",
        },
        sources: {
            SELECT: Id + "-select",
            SNAP: Id + "-snap",
            ROUTE: Id + "-route",
            HOT: Id + "-hot",
            COLD: Id + "-cold",
            MESH: Id + "-mesh",
            VERTEX: Id + "-vertex",
            HOTTEXT: Id + "-text",
            COLDTEXT: Id + "-coldtext",
            GAMEPAD: Id + "-gamepad"
        },
        layers: {
            MESH: Id + "-mesh"
        },
        cursors: {
            ADD: "add",
            MOVE: "move",
            DRAG: "drag",
            POINTER: "pointer",
            NONE: "none",
        },
        types: {
            POLYGON: "polygon",
            LINE: "line_string",
            POINT: "point",
        },
        geojsonTypes: {
            FEATURE: "Feature",
            POLYGON: "Polygon",
            LINE_STRING: "LineString",
            POINT: "Point",
            FEATURE_COLLECTION: "FeatureCollection",
            MULTI_PREFIX: "Multi",
            MULTI_POINT: "MultiPoint",
            MULTI_LINE_STRING: "MultiLineString",
            MULTI_POLYGON: "MultiPolygon",
        },
        modes: {
            DRAW: "draw",
            CUT: "cut",
            SELECT: "select",
            DELETE: "delete",
            EDIT: "edit"
        },
        events: {
            CREATE: "draw.create",
            DELETE: "draw.delete",
            UPDATE: "draw.update",
            SELECTION_CHANGE: "draw.selectionchange",
            MODE_CHANGE: "draw.modechange",
            ACTIONABLE: "draw.actionable",
            RENDER: "draw.render",
            COMBINE_FEATURES: "draw.combine",
            UNCOMBINE_FEATURES: "draw.uncombine",
        },
        updateActions: {
            MOVE: "move",
            CHANGE_COORDINATES: "change_coordinates",
        },
        meta: {
            FEATURE: "feature",
            MIDPOINT: "midpoint",
            VERTEX: "vertex",
        },
        activeStates: {
            ACTIVE: "true",
            INACTIVE: "false",
        },
        LAT_MIN: -90,
        LAT_RENDERED_MIN: -85,
        LAT_MAX: 90,
        LAT_RENDERED_MAX: 85,
        LNG_MIN: -270,
        LNG_MAX: 270,
        MIN_SEGMENT_LENGTH: 0.000001,
        MIN_DISTANCE: 0.00001, // 0.000001
        CIRCUM: 40075017
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Statics);

/***/ }),

/***/ "./src/Styles.js":
/*!***********************!*\
  !*** ./src/Styles.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Styles
 * @description This module provides the styling functionality for the Geoflo application. It allows users to change the map style by selecting from a list of predefined styles.
 * @param {Object} options - The options object containing the styles and selected style.
 * @returns {Object} Returns the Styles object.
 */
const Styles = function (options={}) {
    const geoflo = this.geoflo;
    this.options = options;
    
    /**
	 * @function
     * @memberof module:geoflo.Styles
     * @name init
     * @description Initializes the Styles object by extending the options object with the provided options, setting the styles, defaultStyle, and event listeners.
     * @param {Object} options - The options object containing the styles and selected style.
     * @returns {Object} Returns the Styles object.
     */
    this.init = function (options={}) {
        geoflo.Utilities.extend(this.options, options);

        this.styles = this.options.styles || [
            { title: "Standard", uri: "mapbox://styles/solutegrate/clxdoec8x006901qj7wjf8uxo" },
            { title: "Satellite", uri: "mapbox://styles/mapbox/satellite-streets-v11" },
            { title: "Standard", uri: "mapbox://styles/mapbox/standard" },
            { title: "Dark", uri: "mapbox://styles/mapbox/dark-v11" },
            { title: "Light", uri: "mapbox://styles/mapbox/light-v11" },
            { title: "Outdoors", uri: "mapbox://styles/mapbox/outdoors-v11" }
        ];
    
        this.selected = this.options.selected || "Standard";
        this.onDocumentClick = this.onDocumentClick.bind(this);
        this.events = this.options.eventListeners;
        return this;
    }

    /**
	 * @function
     * @memberof module:geoflo.Styles
     * @name select
     * @description Selects the style with the provided name by setting the map style to the style's uri.
     * @param {String} name - The name of the style to select.
     * @returns {void}
     */
    this.select = function (name) {
        if (!this.mapStyleContainer || !this.mapStyleContainer.checkVisibility()) {
            var style = this.styles.find(style => style.title === name);
            if (style) this.map.setStyle(style.uri), this.selected = name;
            if (this.events && this.events.onChange && this.events.onChange({ style: style }, style))
            return;
        }

        const elms = this.mapStyleContainer.getElementsByClassName(name);
        if (elms.length > 0) elms[0].click();
    }

    /**
	 * @function
     * @memberof module:geoflo.Styles
     * @name hide
     * @description Hides the style control container.
     * @returns {void}
     */
    this.hide = function () {
        if (this.controlContainer) this.controlContainer.style.display = "none";
    }

    /**
     * @function
     * @memberof module:geoflo.Styles
     * @name show
     * @description Shows the style control container.
     * @returns {void}
     */
    this.show = function () {
        if (this.controlContainer) this.controlContainer.style.display = "block";
    }

    /**
	 * @function
     * @memberof module:geoflo.Styles
     * @name getDefaultPosition
     * @description Returns the default position for the style control container.
     * @returns {String} The default position for the style control container.
     */
    this.getDefaultPosition = function () {
        const defaultPosition = "top-right";
        return defaultPosition;
    }

    /**
	 * @function
     * @memberof module:geoflo.Styles
     * @name onAdd
     * @description Adds the style control container to the map.
     * @param {Object} map - The map object to add the style control container to.
     * @returns {Object} The style control container.
     * @throws {Error} Throws an error if the map object is not provided.
     */
    this.onAdd = function (map) {
        this.map = map;
        this.controlContainer = document.createElement("div");
        this.controlContainer.classList.add("mapboxgl-ctrl");
        this.controlContainer.classList.add("mapboxgl-ctrl-group");
        this.mapStyleContainer = document.createElement("div");
        this.styleButton = document.createElement("button");
        this.styleButton.type = "button";
        this.mapStyleContainer.classList.add("mapboxgl-style-list");

        for (const style of this.styles) {
            const styleElement = document.createElement("button");

            styleElement.type = "button";
            styleElement.classList.add(style.title.replace(/[^a-z0-9-]/gi, '_'));
            styleElement.dataset.uri = JSON.stringify(style.uri);

            styleElement.addEventListener("click", event => {
                const srcElement = event.target || event.srcElement;
                this.closeModal();
                if (srcElement.classList.contains("active")) return;
                if (this.events && this.events.onOpen && this.events.onOpen(event)) return;
                const style = JSON.parse(srcElement.dataset.uri);
                this.map.setStyle(style);
                const elms = this.mapStyleContainer.getElementsByClassName("active");
                while (elms[0]) elms[0].classList.remove("active");
                srcElement.classList.add("active");
                if (this.events && this.events.onChange && this.events.onChange(event, style)) return;
            });

            if (style.title === this.selected) {
                styleElement.classList.add("active");
            }

            this.mapStyleContainer.appendChild(styleElement);
        }

        this.styleButton.classList.add("mapboxgl-ctrl-icon");
        this.styleButton.classList.add("mapboxgl-style-switcher");

        this.styleButton.addEventListener("click", event => {
            if (this.events && this.events.onSelect && this.events.onSelect(event)) return;
            this.openModal();
        });

        document.addEventListener("click", this.onDocumentClick);

        this.controlContainer.appendChild(this.styleButton);
        this.controlContainer.appendChild(this.mapStyleContainer);
        
        this.closeModal();
        return this.controlContainer;
    }

    /**
	 * @function
     * @memberof module:geoflo.Styles
     * @name onRemove
     * @description Removes the style control container from the map.
     * @returns {void}
     * @throws {Error} Throws an error if the control container, control container parent node, map, or style button is not provided.
     * @throws {Error} Throws an error if the style button event listener is not removed.
     * @throws {Error} Throws an error if the document event listener is not removed.
     */
    this.onRemove = function () {
        if (!this.controlContainer || !this.controlContainer.parentNode || !this.map || !this.styleButton) {
            return;
        }
        this.styleButton.removeEventListener("click", this.onDocumentClick);
        this.controlContainer.parentNode.removeChild(this.controlContainer);
        document.removeEventListener("click", this.onDocumentClick);
        this.map = undefined;
    }

    /**
	 * @function
     * @memberof module:geoflo.Styles
     * @name closeModal
     * @description Closes the style control container.
     * @returns {void}
     */
    this.closeModal = function () {
        if (this.mapStyleContainer && this.styleButton) {
            this.mapStyleContainer.style.display = "none";
            this.styleButton.style.display = "block";
        }
    }

    /**
     * @function
     * @memberof module:geoflo.Styles
     * @name openModal
     * @description Opens the style control container.
     * @returns {void}
     */
    this.openModal = function () {
        if (this.mapStyleContainer && this.styleButton) {
            this.mapStyleContainer.style.display = "block";
            this.styleButton.style.display = "none";
        }
    }

    this.onDocumentClick = function (event) {
        if (this.controlContainer && !this.controlContainer.contains(event.target)) this.closeModal();
    }

    this.init();
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Styles);

/***/ }),

/***/ "./src/Utilities.js":
/*!**************************!*\
  !*** ./src/Utilities.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Utilities
 * @description This module provides utility functions for the Geoflo application.
 * @returns {Object} Returns the Utilities object.
 */
const Utilities = function () {
    const geoflo = this.geoflo;

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name pointInCoordinates
	 * @description This function takes a line string and a point's coordinates as input and returns an array of indices where the point is found in the line string's coordinates.
	 * @param {Object} lineString - The line string object containing geometry coordinates.
	 * @param {Array} pointCoords - The coordinates of the point to search for in the line string.
	 * @returns {Array} An array containing the indices of the point in the line string's coordinates.
	 */
    this.pointInCoordinates = function (lineString, pointCoords) {
        var result = [];

        lineString.geometry.coordinates.forEach(function(coords, index) {
            if (index !== 0 && index !== lineString.geometry.coordinates.length - 1) {
                if (coords[0] === pointCoords[0] && coords[1] === pointCoords[1]) {
                    result.push(index);
                }
            }
        });

        return result;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name sameBorders
	 * @description This function compares two sets of borders to determine if they are the same.
	 * @param {Object} fromBorders - The first set of borders to compare.
	 * @param {Object} toBorders - The second set of borders to compare.
	 * @returns {boolean} Returns true if the borders are the same, false otherwise.
	 */
    this.sameBorders = function (fromBorders, toBorders) {
        if (fromBorders && toBorders) {
            return fromBorders.border1[0] === toBorders.border1[0] && fromBorders.border1[1] === toBorders.border1[1] && fromBorders.border2[0] === toBorders.border2[0] && fromBorders.border2[1] === toBorders.border2[1] || fromBorders.border1[0] === toBorders.border2[0] && fromBorders.border1[1] === toBorders.border2[1] && fromBorders.border2[0] === toBorders.border1[0] && fromBorders.border2[1] === toBorders.border1[1];
        } else {
            return false;
        }
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name getRandomColor
	 * @description This function generates a random color by randomly selecting hexadecimal values for each digit of the color code.
	 * @returns {string} A random color in hexadecimal format.
	 */
    this.getRandomColor = function () {
        var letters = '0123456789ABCDEF';
        var color = '#';
        for (var i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name createRandomStroke
	 * @description Generates a random stroke color for a shape.
	 * @returns {Object} An object containing the randomly generated stroke color.
	 */
    this.createRandomStroke = function () {
        return {
            stroke: this.getRandomColor()
        };
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name createLineAndSaveLength
	 * @description This function takes an array of line coordinates and properties, creates a line string with random stroke properties, calculates the length of the line, and saves it in the properties.
	 * @param {Array} lineCoords - Array of coordinates for the line string.
	 * @param {Object} props - Properties object for the line string.
	 * @returns {Object} - The created line string with saved length in properties.
	 */
    this.createLineAndSaveLength = function (lineCoords, props) {
        var copyProps = Object.assign({}, props, this.createRandomStroke());
        var line = turf.lineString(lineCoords, copyProps);
        copyProps.length = turf.lineDistance(line);
        return line;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name lineSplit
	 * @description Splits a line string based on the provided point indexes and returns an array of split line strings.
	 * @param {Object} lineString - The line string object to split.
	 * @param {Array} pointIndexes - An array of indexes where the line string should be split.
	 * @returns {Array} - An array of split line strings.
	 */
    this.lineSplit = function (lineString, pointIndexes) {
        var props = lineString.properties;
        var lineCoords = [].concat(_toConsumableArray(lineString.geometry.coordinates));
        var result = [];
        var delta = 0;

        pointIndexes.forEach(function(pointIndex) {
            pointIndex -= delta;
            if (pointIndex < lineCoords.length - 1) {
                var secondPart = lineCoords.splice(pointIndex, lineCoords.length - pointIndex);
                
                if (lineCoords.length > 0) {
                    lineCoords.push(secondPart[0]);
                    result.push(this.createLineAndSaveLength(lineCoords, props));
                }

                lineCoords = secondPart;
                delta += pointIndex;
            }
        }, this);

        if (lineCoords.length > 0) {
            result.push(this.createLineAndSaveLength(lineCoords, props));
        }

        return result;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name splitLines
	 * @description This function takes two line strings and splits them at their intersection points.
	 * @param {Object} lineString1 - The first line string object.
	 * @param {Object} lineString2 - The second line string object.
	 * @returns {Array|null} - An array containing the split line strings or null if no intersection points are found.
	 */
    this.splitLines = function (lineString1, lineString2) {
        var line1CutPoints = [];
        var line2CutPoints = [];

        lineString1.geometry.coordinates.forEach(function(coords, index) {
            var points = this.pointInCoordinates(lineString2, coords);
            if (points.length > 0) {
                line2CutPoints.push.apply(line2CutPoints, _toConsumableArray(points));
                line1CutPoints.push(index);
            }
        }, this);

        if (line1CutPoints.length === 0 && line2CutPoints.length === 0) {
            return null;
        } else {
            var result = [];
            result.push.apply(result, _toConsumableArray(this.lineSplit(lineString1, line1CutPoints)));
            result.push.apply(result, _toConsumableArray(this.lineSplit(lineString2, line2CutPoints)));
            return result;
        }
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name createSimpleMesh
	 * @description Creates a simple mesh by processing a list of features containing line strings.
	 * @param {Array} features - An array of line string features to be processed.
	 * @returns {Array} - An array of processed line segments forming the mesh.
	 */
    this.createSimpleMesh = function (features) {
        var result = [];

        features.forEach(function(lineString) {
            var props = lineString.properties;
            var coords = lineString.geometry.coordinates;
            var firstPoint = coords[0];
            var secondPoint = null;

            for (var index = 1; index < coords.length; index++) {
                secondPoint = coords[index];
                result.push(this.createLineAndSaveLength([firstPoint, secondPoint], props));
                firstPoint = secondPoint;
            }
        }, this);

        return result;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name createMesh
	 * @description This function takes an array of line string features and splits them at intersection points to create a mesh.
	 * @param {Array} features - An array of line string features to create the mesh from.
	 * @returns {Array} - An array representing the mesh created by splitting the line strings at intersection points.
	 */
    this.createMesh = function (features) {
        var mesh = [];

        features.forEach(function(lineString1) {
            var line1CutPoints = lineString1.properties.cutPoints;

            if (!line1CutPoints) {
                line1CutPoints = [];
                lineString1.properties.cutPoints = line1CutPoints;
            }

            features.forEach(function(lineString2) {
                if (lineString1 !== lineString2) {
                    var line2CutPoints = lineString2.properties.cutPoints;

                    if (!line2CutPoints) {
                        line2CutPoints = [];
                        lineString2.properties.cutPoints = line2CutPoints;
                    }

                    lineString1.geometry.coordinates.forEach(function(coords, index) {
                        var points = this.pointInCoordinates(lineString2, coords);

                        if (points.length > 0) {
                            points.forEach(function(cutPoint) {
                                if (line2CutPoints.indexOf(cutPoint) === -1) {
                                    line2CutPoints.push(cutPoint);
                                }
                            });

                            if (index !== 0 && index !== lineString1.geometry.coordinates.length - 1) {
                                if (line1CutPoints.indexOf(index) === -1) {
                                    line1CutPoints.push(index);
                                }
                            }
                        }
                    }, this);
                }
            }, this);
        }, this);

        features.forEach(function(lineString) {
            lineString.properties.cutPoints.sort(function(a, b) { return a - b; });
            mesh.push.apply(mesh, _toConsumableArray(this.lineSplit(lineString, lineString.properties.cutPoints)));
        }, this);

        return mesh;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name setProperty
	 * @description This function sets a property value for a given feature. If the feature does not have properties, it creates a new properties object. If the property name includes a dot (.), it creates nested objects to set the value.
	 * @param {Object} feature - The feature object to set the property for.
	 * @param {string} name - The name of the property to set.
	 * @param {any} value - The value to set for the property.
	 */
    this.setProperty = function (feature, name, value) {
        if (!feature) return false;
        
        var props = feature.properties;
        
        if (!props) {
            props = {};
            feature.properties = props;
        }

        if (name.includes('.')) {
            name = name.split('.');
            if (!props[name[0]]) props[name[0]] = {};
            props[name[0]][name[1]] = value;
        } else {
            props[name] = value;
        }
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name setProperties
	 * @description Updates the properties of a given feature object with new properties.
	 * @param {Object} feature - The feature object whose properties will be updated.
	 * @param {Object} newProps - The new properties to be merged with the existing properties of the feature.
	 */
    this.setProperties = function (feature, newProps) {
        feature.properties = Object.assign(feature.properties || {}, newProps);
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name findClosestFeatures
	 * @description This function takes an indexData object, a point object, and a radius value as parameters. It then retrieves the feature IDs within the specified radius from the point index in the indexData object. It ensures unique features are included in the result and returns an array of closest features.
	 * @param {Object} indexData - The index data object containing pointIndex, pointFeatureMap, and featureById.
	 * @param {Object} point - The point object with lng (longitude) and lat (latitude) properties.
	 * @param {number} radius - The radius within which to search for features.
	 * @returns {Array} An array of closest features to the given point within the specified radius.
	 */
    this.findClosestFeatures = function (indexData, point, radius) {
        var featureIdsWithin = indexData.pointIndex.within(point.lng, point.lat, radius);
        var assertUniqueFeatures = {};
        var featureResult = [];

        featureIdsWithin.forEach(function(pointId) {
            var featureId = indexData.pointFeatureMap[pointId];
            if (!assertUniqueFeatures[featureId]) {
                featureResult.push(indexData.featureById[featureId]);
                assertUniqueFeatures[featureId] = true;
            }
        });
        
        return featureResult;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name isPointEqual
	 * @description Checks if two points are equal based on their coordinates.
	 * @param {Array} coords1 - The coordinates of the first point [x, y].
	 * @param {Array} coords2 - The coordinates of the second point [x, y].
	 * @returns {boolean} Returns true if the points have the same coordinates, false otherwise.
	 */
    this.isPointEqual = function (coords1, coords2) {
        return coords1[0] === coords2[0] && coords1[1] === coords2[1];
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name isPoint
	 * @description This function takes a feature object and determines if it represents a Point geometry.
	 * @param {Object} f - The feature object to be checked.
	 * @returns {boolean} Returns true if the feature is a Point geometry, false otherwise.
	 */
    this.isPoint = function (f) {
        return !f ? false : f.geometry.type === 'Point';
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name isPolygon
	 * @description This function determines if a feature represents a polygon by comparing its first and last coordinates.
	 * @param {Object} feature - The feature object to be checked.
	 * @returns {boolean} Returns true if the feature is a polygon, false otherwise.
	 */
    this.isPolygon = function (feature) {
        var coords = feature.geometry.coordinates;
        var firstCoords = coords[0];
        var lastCoords = coords[coords.length - 1];
        return this.isPointEqual(firstCoords, lastCoords);
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name isLineString
	 * @description This function takes a GeoJSON feature object and determines if it represents a LineString geometry.
	 * @param {Object} f - The GeoJSON feature object to be checked.
	 * @returns {boolean} Returns true if the feature is a LineString, false otherwise.
	 */
    this.isLineString = function (f) {
        return !f ? false : f.geometry.type === 'LineString';
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name isValidLineString
	 * @description Checks if the input feature is a valid LineString by verifying its geometry coordinates.
	 * @param {Object} f - The input feature to be validated.
	 * @returns {boolean} Returns true if the input feature is a valid LineString, false otherwise.
	 */
    this.isValidLineString = function (f) {
        if (!this.isLineString(f)) return false;
        var coords = f.geometry.coordinates;
        if (coords.length < 2) return false;
        return true;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name isLastIndex
	 * @description This function determines if the provided index is the last index in the coordinates array of a feature.
	 * @param {number} i - The index to check.
	 * @param {object} f - The feature object containing the coordinates array.
	 * @returns {boolean} Returns true if the index is the last index, false otherwise.
	 */
    this.isLastIndex = function (i, f) {
        return !f ? false :
        this.isLineString(f) ? i == f.geometry.coordinates.length - 1 :
        this.isPolygon(f) ? i == f.geometry.coordinates[0].length - 1 :
        i == 0 ? true :
        false;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name getLastIndexCoords
	 * @description This function returns the last coordinates of a given geometry object.
	 * @param {Object} f - The geometry object to extract the last coordinates from.
	 * @returns {Array} The last coordinates of the geometry object.
	 */
    this.getLastIndexCoords = function (f) {
        return this.isLineString(f) ? f.geometry.coordinates[f.geometry.coordinates.length - 1] :
        this.isPolygon(f) ? f.geometry.coordinates[0][f.geometry.coordinates.length - 1] :
        f.geometry.coordinates;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name isEmptyLineString
	 * @description This function determines if the provided feature is a LineString with only two identical points, making it an empty LineString.
	 * @param {Object} feature - The feature object to be checked.
	 * @returns {boolean} Returns true if the feature is an empty LineString, otherwise false.
	 */
    this.isEmptyLineString = function (feature) {
        if (feature.geometry.type === "LineString") {
            var coords = feature.geometry.coordinates;

            if (coords.length === 2) {
                var firstCoords = coords[0];
                var lastCoords = coords[coords.length - 1];
                return this.isPointEqual(firstCoords, lastCoords);
            }
        }

        return false;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name isPointAtVertex
	 * @description This function determines if a point is at the first or last vertex of a geometry by comparing it with the first and last coordinates.
	 * @param {Array} geometryCoords - The array of coordinates representing the geometry.
	 * @param {Array} pointCoords - The coordinates of the point to check.
	 * @returns {boolean} Returns true if the point is at the first or last vertex, false otherwise.
	 */
    this.isPointAtVertex = function (geometryCoords, pointCoords) {
        var firstPoint = geometryCoords[0];
        var lastPoint = geometryCoords[geometryCoords.length - 1];
        return this.isPointEqual(firstPoint, pointCoords) || this.isPointEqual(lastPoint, pointCoords);
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name isPointNotTooClose
	 * @description This function calculates the distance between two points and checks if it exceeds a minimum distance threshold.
	 * @param {Array<number>} coords1 - The coordinates of the first point [x, y].
	 * @param {Array<number>} coords2 - The coordinates of the second point [x, y].
	 * @returns {boolean} Returns true if the distance between the points is greater than or equal to the minimum distance threshold, false otherwise.
	 */
    this.isPointNotTooClose = function (coords1, coords2) {
        var line = turf.lineString([coords1, coords2]);
        var length = turf.lineDistance(line);

        if (length >= statics.constants.MIN_DISTANCE) {
            return !(coords1[0] === coords2[0] && coords1[1] === coords2[1]);
        } else {
            return false;
        }
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name isOverlapping
	 * @description This function takes two features and determines if they overlap by comparing their bounding boxes.
	 * @param {Object} feature1 - The first feature object with geometry.coordinates.
	 * @param {Object} feature2 - The second feature object with geometry.coordinates.
	 * @returns {boolean} Returns true if the features overlap, false otherwise.
	 */
    this.isOverlapping = function (feature1, feature2) {
        var coords1 = feature1.geometry.coordinates;
        var coords2 = feature2.geometry.coordinates;

        if (coords1.length === 2 && coords2.length === 2) {
            var bbox1 = this.createBbox(coords1);
            var bbox2 = this.createBbox(coords2);
            if (bbox1.east < bbox2.west || bbox1.west > bbox2.east) {
                return false;
            } else if (bbox1.north < bbox2.south || bbox1.south > bbox2.north) {
                return false;
            }
            return true;
        } else {
            throw new Error("wrong number of coordinates, expected 2");
        }
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name createLineWithLength
	 * @description This function takes an array of coordinates and creates a line string using Turf.js. It then calculates the length of the line and sets it as a property of the line.
	 * @param {Array} coords - An array of coordinates [ [x1, y1], [x2, y2], ... ].
	 * @returns {Object} - A Turf.js line string with the calculated length property.
	 */
    this.createLineWithLength = function (coords) {
        var line = turf.lineString(coords);
        var length = turf.lineDistance(line);
        this.setProperties(line, { length: length });
        return line;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name reducePrecision
	 * @description This function reduces the precision of the coordinates to 7 decimal places.
	 * @param {Array} coords - An array containing the coordinates to be processed.
	 * @returns {Array} The coordinates with reduced precision to 7 decimal places.
	 */
    this.reducePrecision = function (coords) {
        coords[0] = Number(Number(coords[0]).toFixed(7));
        coords[1] = Number(Number(coords[1]).toFixed(7));
        return coords;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name createBbox
	 * @description This function takes an array of two coordinates and constructs a bounding box object with west, east, south, and north properties.
	 * @param {Array} coords - An array of two coordinates in the format [[lon1, lat1], [lon2, lat2]].
	 * @returns {Object} Returns a bounding box object with west, east, south, and north properties.
	 */
    this.createBbox = function (coords) {
        var bbox1 = {};
        if (coords[0][0] < coords[1][0]) {
            bbox1.west = coords[0][0];
            bbox1.east = coords[1][0];
        } else {
            bbox1.west = coords[1][0];
            bbox1.east = coords[0][0];
        }
        if (coords[0][1] < coords[1][1]) {
            bbox1.south = coords[0][1];
            bbox1.north = coords[1][1];
        } else {
            bbox1.south = coords[1][1];
            bbox1.north = coords[0][1];
        }
        return bbox1;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name stringToDOM
	 * @description Converts a string to a DOM object using DOMParser.
	 * @param {string} str - The input string to be converted to a DOM object.
	 * @returns {Document} - The DOM object created from the input string.
	 */
    this.stringToDOM = function (str) {
        var parser = new DOMParser();
        return parser.parseFromString(str, "text/xml");
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name processFiles
	 * @description This function reads each file in the input array, extracts the file name and extension, and then reads the file content using FileReader. The content is passed to the handler function along with the file name and extension.
	 * @param {File[]} files - An array of File objects to be processed.
	 * @param {function} handler - A function that will be called for each file with the file content, name, and extension as parameters.
	 */
    this.processFiles = function (files, handler) {
        files.forEach(function(file) {
            var name = file.name;
            var ext = name.substring(name.lastIndexOf('.') + 1, name.length).toLowerCase();
            var fileReader = new FileReader();

            fileReader.onloadend = function() {
                if (fileReader.readyState === FileReader.DONE) {
                    try {
                        handler(fileReader.result, name, ext);
                    } catch (e) {
                        console.log(e);
                        console.error("Invalid JSON data");
                    }
                }
            }
            
            fileReader.readAsText(file);
        });
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name combineSameTypeFeatures
	 * @description This function takes an array of line features and combines them by connecting them based on their coordinates. It checks the endpoints of each line feature and connects them accordingly to form a continuous line.
	 * @param {Array} features - An array of line features to be combined.
	 * @returns {Array} - An array of coordinates representing the combined line features.
	 */
    this.combineSameTypeFeatures = function (features) {
        var coords = [];

        features.forEach(function(lineString) {
            if (coords.length === 0) {
                coords.push.apply(coords, _toConsumableArray(lineString.geometry.coordinates));
            } else {
                var firstPoint = coords[0];
                var lastPoint = coords[coords.length - 1];
                var currentFirstPoint = lineString.geometry.coordinates[0];
                var currentLastPoint = lineString.geometry.coordinates[lineString.geometry.coordinates.length - 1];

                if (this.isPointEqual(lastPoint, currentFirstPoint)) {
                    coords.push.apply(coords, _toConsumableArray(lineString.geometry.coordinates.slice(1, lineString.geometry.coordinates.length)));
                } else if (this.isPointEqual(lastPoint, currentLastPoint)) {
                    coords.push.apply(coords, _toConsumableArray(lineString.geometry.coordinates.slice(0, lineString.geometry.coordinates.length - 1).reverse()));
                } else if (this.isPointEqual(firstPoint, currentLastPoint)) {
                    coords.splice.apply(coords, [0, 0].concat(_toConsumableArray(lineString.geometry.coordinates.slice(0, lineString.geometry.coordinates.length - 1))));
                } else if (this.isPointEqual(firstPoint, currentFirstPoint)) {
                    coords.splice.apply(coords, [0, 1].concat(_toConsumableArray(lineString.geometry.coordinates.reverse())));
                } else {
                    var distanceToFirstPoint = turf.distance(lastPoint, currentFirstPoint);
                    var distanceToLastPoint = turf.distance(lastPoint, currentLastPoint);

                    if (distanceToFirstPoint < distanceToLastPoint) {
                        coords.push.apply(coords, _toConsumableArray(lineString.geometry.coordinates));
                    } else {
                        coords.push.apply(coords, _toConsumableArray([].concat(_toConsumableArray(lineString.geometry.coordinates)).reverse()));
                    }
                }
            }
        }, this);

        return coords;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name degrees2meters
	 * @description This function takes an array of latitude and longitude in degrees and converts it to meters using the Mercator projection formula.
	 * @param {Array<number>} px - An array containing latitude and longitude in degrees [longitude, latitude].
	 * @returns {Array<number>} An array containing the converted x and y coordinates in meters.
	 */
    this.degrees2meters = function (px) {
        const x = px[0] * 20037508.34 / 180;
        let y = Math.log(Math.tan((90 + px[1]) * Math.PI / 360)) / (Math.PI / 180);
        y = y * 20037508.34 / 180;
        return [x, y]
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name meters2degrees
	 * @description This function takes a pixel value and converts it to longitude and latitude in degrees.
	 * @param {Array} px - The pixel value to be converted, in the format [x, y].
	 * @returns {Array} An array containing the longitude and latitude in degrees, [lon, lat].
	 */
    this.meters2degrees = function (px) {
        const lon = px[0] * 180 / 20037508.34;
        const lat = Math.atan(Math.exp(px[1] * Math.PI / 20037508.34)) * 360 / Math.PI - 90;
        return [lon, lat]
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name extend
	 * @description Extends the properties of the first object with the properties of the subsequent objects.
	 * @param {Object} target - The object to be extended.
	 * @param {...Object} sources - The objects whose properties will be added to the target object.
	 * @return {Object} The extended object.
	 */
    this.extend = function () {
        for(var i=1; i<arguments.length; i++)
            for(var key in arguments[i])
                if(arguments[i].hasOwnProperty(key))
                    arguments[0][key] = arguments[i][key];
        return arguments[0];
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name clone
	 * @description This function recursively clones the input object or array, preserving the structure and types of the elements.
	 * @param {Object|Array|Date|RegExp|Function|Symbol} thing - The object or array to be cloned.
	 * @param {Object} opts - Optional settings for cloning functions and symbols.
	 * @returns {Object|Array|Date|RegExp|Function|Symbol} - A deep clone of the input object or array.
	 */
    this.clone = function(thing, opts) {
        var newObject = {};

        if (thing instanceof Array) {
            return thing.map(function (i) { return this.clone(i, opts); }, this);
        } else if (thing instanceof Date) {
            return new Date(thing);
        } else if (thing instanceof RegExp) {
            return new RegExp(thing);
        } else if (thing instanceof Function) {
            return opts && opts.newFns ?
            new Function('return ' + thing.toString())() :
            thing;
        } else if (thing instanceof Object) {
            Object.keys(thing).forEach(function (key) { newObject[key] = this.clone(thing[key], opts); }, this);
            return newObject;
        } else if ([ undefined, null ].indexOf(thing) > -1) {
            return thing;
        } else {
            if (thing.constructor.name === 'Symbol') {
                return Symbol(thing.toString().replace(/^Symbol\(/, '').slice(0, -1));
            }

            return thing.__proto__.constructor(thing);
        }
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name cloneDeep
	 * @description Recursively clones a value, including objects and arrays, preserving the original structure deeply.
	 * @param {any} value - The value to be cloned.
	 * @param {Function} instance - A function that can be used to clone custom instances.
	 * @returns {any} - The deeply cloned value.
	 */
    this.cloneDeep = function(value, instance) {
        var hasOwn = Object.prototype.hasOwnProperty;
        var toString = Object.prototype.toString;
    
        function _cloneDeep(val, instanceClone) {
            switch (kindOf(val)) {
            case 'object':
                return cloneObjectDeep(val, instanceClone);
            case 'array':
                return cloneArrayDeep(val, instanceClone);
            default:
                {
                    return clone(val);
                }
            }
        }
    
        function cloneObjectDeep(obj, instanceClone) {
            if (isObject(obj)) {
                var res = {};
                forOwn(obj, function(obj, key) {
                    this[key] = _cloneDeep(obj, instanceClone);
                }, res);
                return res;
            } else if (instanceClone) {
                return instanceClone(obj);
            } else {
                return obj;
            }
        }
    
        function cloneArrayDeep(arr, instanceClone) {
            var len = arr.length
            , res = [];
            var i = -1;
            while (++i < len) {
                res[i] = _cloneDeep(arr[i], instanceClone);
            }
            return res;
        }
    
        function isObject(val) {
            return val != null && typeof val === 'object' && Array.isArray(val) === false;
        }
    
        function isObjectObject(o) {
            return isObject(o) === true && Object.prototype.toString.call(o) === '[object Object]';
        }
    
        function isPlainObject(o) {
            var ctor, prot;
    
            if (isObjectObject(o) === false)
                return false;
    
            // If has modified constructor
            ctor = o.constructor;
            if (typeof ctor !== 'function')
                return false;
    
            // If has modified prototype
            prot = ctor.prototype;
            if (isObjectObject(prot) === false)
                return false;
    
            // If constructor does not have an Object-specific method
            if (prot.hasOwnProperty('isPrototypeOf') === false) {
                return false;
            }
    
            // Most likely a plain Object
            return true;
        }
    
        function forIn(obj, fn, thisArg) {
            for (var key in obj) {
                if (fn.call(thisArg, obj[key], key, obj) === false) {
                    break;
                }
            }
        }
    
        function forOwn(obj, fn, thisArg) {
            forIn(obj, function(val, key) {
                if (hasOwn.call(obj, key)) {
                    return fn.call(thisArg, obj[key], key, obj);
                }
            });
        }
    
        function kindOf(val) {
            // primitivies
            if (typeof val === 'undefined') {
                return 'undefined';
            }
            if (val === null) {
                return 'null';
            }
            if (val === true || val === false || val instanceof Boolean) {
                return 'boolean';
            }
            if (typeof val === 'string' || val instanceof String) {
                return 'string';
            }
            if (typeof val === 'number' || val instanceof Number) {
                return 'number';
            }
    
            // functions
            if (typeof val === 'function' || val instanceof Function) {
                return 'function';
            }
    
            // array
            if (typeof Array.isArray !== 'undefined' && Array.isArray(val)) {
                return 'array';
            }
    
            // check for instances of RegExp and Date before calling `toString`
            if (val instanceof RegExp) {
                return 'regexp';
            }
            if (val instanceof Date) {
                return 'date';
            }
    
            // other objects
            var type = toString.call(val);
    
            if (type === '[object RegExp]') {
                return 'regexp';
            }
            if (type === '[object Date]') {
                return 'date';
            }
            if (type === '[object Arguments]') {
                return 'arguments';
            }
            if (type === '[object Error]') {
                return 'error';
            }
    
            // buffer
            if (isBuffer(val)) {
                return 'buffer';
            }
    
            // es6: Map, WeakMap, Set, WeakSet
            if (type === '[object Set]') {
                return 'set';
            }
            if (type === '[object WeakSet]') {
                return 'weakset';
            }
            if (type === '[object Map]') {
                return 'map';
            }
            if (type === '[object WeakMap]') {
                return 'weakmap';
            }
            if (type === '[object Symbol]') {
                return 'symbol';
            }
    
            // typed arrays
            if (type === '[object Int8Array]') {
                return 'int8array';
            }
            if (type === '[object Uint8Array]') {
                return 'uint8array';
            }
            if (type === '[object Uint8ClampedArray]') {
                return 'uint8clampedarray';
            }
            if (type === '[object Int16Array]') {
                return 'int16array';
            }
            if (type === '[object Uint16Array]') {
                return 'uint16array';
            }
            if (type === '[object Int32Array]') {
                return 'int32array';
            }
            if (type === '[object Uint32Array]') {
                return 'uint32array';
            }
            if (type === '[object Float32Array]') {
                return 'float32array';
            }
            if (type === '[object Float64Array]') {
                return 'float64array';
            }
    
            // must be a plain object
            return 'object';
        }
    
        function isBuffer(obj) {
            return obj != null && (_isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
        }
    
        function _isBuffer(obj) {
            return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
        }
    
        function isSlowBuffer(obj) {
            return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
        }
    
        function isExtendable(val) {
            return typeof val !== 'undefined' && val !== null && (typeof val === 'object' || typeof val === 'function');
        }
    
        function mixin(target, objects) {
            if (!isExtendable(target)) {
                throw new TypeError('mixin-object expects the first argument to be an object.');
            }
            var len = arguments.length
            , i = 0;
            while (++i < len) {
                var obj = arguments[i];
                if (isExtendable(obj)) {
                    forIn(obj, copy, target);
                }
            }
            return target;
        }
    
        function clone(val) {
            var type = kindOf(val);
    
            if (clone.hasOwnProperty(type)) {
                return clone[type](val);
            }
            return val;
        }
    
        clone.array = function cloneArray(arr) {
            return arr.slice();
        }
    
        clone.date = function cloneDate(date) {
            return new Date(+date);
        }
    
        clone.object = function cloneObject(obj) {
            if (isExtendable(obj)) {
                return mixin({}, obj);
            } else {
                return obj;
            }
        }
    
        clone.regexp = function cloneRegExp(re) {
            var flags = '';
            flags += re.multiline ? 'm' : '';
            flags += re.global ? 'g' : '';
            flags += re.ignorecase ? 'i' : '';
            return new RegExp(re.source,flags);
        }
    
        return _cloneDeep(value, instance);
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name assignDeep
	 * @description Recursively assigns properties of source object to target object deeply.
	 * @param {Object} target - The target object to which properties will be assigned.
	 * @param {Object} source - The source object whose properties will be assigned to the target.
	 * @param {Object} options - Optional parameters for the assignment process.
	 * @param {boolean} [options.isMutatingOk=false] - Flag to allow mutating the target object.
	 * @param {boolean} [options.isStrictlySafe=false] - Flag to enforce strict safety checks during assignment.
	 * @returns {Object} The target object with assigned properties from the source object.
	 */
    this.assignDeep = function (target, source, {isMutatingOk = false, isStrictlySafe = false} = {}) {
        target = isMutatingOk ? target : this.cloneDeep(target);

        for (const [key, val] of Object.entries(source)) {
            if (val !== null && typeof val === `object`) {
                if (target[key] === undefined) target[key] = {};    
                target[key] = this.assignDeep(target[key], val, {isMutatingOk: true});
            } else {
                target[key] = val;
            }
        }

        return target;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name compareDeep
	 * @description Recursively compares two objects deeply to check if they are equal.
	 * @param {Object} x - The first object to compare.
	 * @param {Object} y - The second object to compare.
	 * @returns {boolean} Returns true if the objects are deeply equal, false otherwise.
	 */
    this.compareDeep = function() {
        var i, l, leftChain, rightChain;
      
        function compare2Objects (x, y) {
          var p;
      
          // remember that NaN === NaN returns false
          // and isNaN(undefined) returns true
          if (isNaN(x) && isNaN(y) && typeof x === 'number' && typeof y === 'number') {
               return true;
          }
      
          // Compare primitives and functions.     
          // Check if both arguments link to the same object.
          // Especially useful on the step where we compare prototypes
          if (x === y) {
              return true;
          }
      
          // Works in case when functions are created in constructor.
          // Comparing dates is a common scenario. Another built-ins?
          // We can even handle functions passed across iframes
          if ((typeof x === 'function' && typeof y === 'function') ||
             (x instanceof Date && y instanceof Date) ||
             (x instanceof RegExp && y instanceof RegExp) ||
             (x instanceof String && y instanceof String) ||
             (x instanceof Number && y instanceof Number)) {
              return x.toString() === y.toString();
          }
      
          // At last checking prototypes as good as we can
          if (!(x instanceof Object && y instanceof Object)) {
              return false;
          }
      
          if (x.isPrototypeOf(y) || y.isPrototypeOf(x)) {
              return false;
          }
      
          if (x.constructor !== y.constructor) {
              return false;
          }
      
          if (x.prototype !== y.prototype) {
              return false;
          }
      
          // Check for infinitive linking loops
          if (leftChain.indexOf(x) > -1 || rightChain.indexOf(y) > -1) {
               return false;
          }
      
          // Quick checking of one object being a subset of another.
          // todo: cache the structure of arguments[0] for performance
          for (p in y) {
              if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
                  return false;
              }
              else if (typeof y[p] !== typeof x[p]) {
                  return false;
              }
          }
      
          for (p in x) {
              if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
                  return false;
              }
              else if (typeof y[p] !== typeof x[p]) {
                  return false;
              }
      
              switch (typeof (x[p])) {
                  case 'object':
                  case 'function':
      
                      leftChain.push(x);
                      rightChain.push(y);
      
                      if (!compare2Objects (x[p], y[p])) {
                          return false;
                      }
      
                      leftChain.pop();
                      rightChain.pop();
                      break;
      
                  default:
                      if (x[p] !== y[p]) {
                          return false;
                      }
                      break;
              }
          }
      
          return true;
        }
      
        if (arguments.length < 1) return true;
      
        for (i = 1, l = arguments.length; i < l; i++) {
      
            leftChain = []; //Todo: this can be cached
            rightChain = [];
      
            if (!compare2Objects(arguments[0], arguments[i])) return false;
        }
      
        return true;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name consumableArray
	 * @description Creates a consumable copy of an array or array-like object.
	 * @param {Array|Array-like} arr - The input array or array-like object to be copied.
	 * @returns {Array} A consumable copy of the input array or array-like object.
	 */
    this.consumableArray = function (arr) {
        if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                arr2[i] = arr[i];
            }
            return arr2;
        } else {
            return Array.from(arr);
        }
    }
}

function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
        }
        return arr2;
    } else {
        return Array.from(arr);
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Utilities);

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be isolated against other modules in the chunk.
(() => {
/*!******************!*\
  !*** ./index.js ***!
  \******************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ geoflo)
/* harmony export */ });
/* harmony import */ var _src_Statics_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/Statics.js */ "./src/Statics.js");
/* harmony import */ var _src_Options_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/Options.js */ "./src/Options.js");
/* harmony import */ var _src_Utilities_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/Utilities.js */ "./src/Utilities.js");
/* harmony import */ var _src_Styles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/Styles.js */ "./src/Styles.js");
/* harmony import */ var _src_Layers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src/Layers.js */ "./src/Layers.js");
/* harmony import */ var _src_Features_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./src/Features.js */ "./src/Features.js");
/* harmony import */ var _src_Mesh_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./src/Mesh.js */ "./src/Mesh.js");
/* harmony import */ var _src_Events_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./src/Events.js */ "./src/Events.js");
/* harmony import */ var _src_Select_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./src/Select.js */ "./src/Select.js");
/* harmony import */ var _src_Draw_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./src/Draw.js */ "./src/Draw.js");
/* harmony import */ var _src_Locate_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./src/Locate.js */ "./src/Locate.js");
/* harmony import */ var _src_Snapping_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./src/Snapping.js */ "./src/Snapping.js");
/* harmony import */ var _src_Pinning_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./src/Pinning.js */ "./src/Pinning.js");
/* harmony import */ var _src_Routing_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./src/Routing.js */ "./src/Routing.js");
/* harmony import */ var _src_Exploring_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./src/Exploring.js */ "./src/Exploring.js");
/* harmony import */ var _src_Painting_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./src/Painting.js */ "./src/Painting.js");
/* harmony import */ var _src_Control_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/Control.js */ "./src/Control.js");
/* harmony import */ var _src_Gamepad_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./src/Gamepad.js */ "./src/Gamepad.js");



















/**
 * @module geoflo
 * @name geoflo
 * @description Represents the GeoFlo object that manages all modules.
 * @returns {Object} The GeoFlo object with various methods for managing the entire app.
 */
const GeoFlo = function () {
    const geoflo = this;
    
    this.statics = _src_Statics_js__WEBPACK_IMPORTED_MODULE_0__["default"];
    this.options = _src_Options_js__WEBPACK_IMPORTED_MODULE_1__["default"];
    this.dev = this.statics.developer;
    this.id = this.statics.id;

    this.modes = [];
    this.plugins = {};
    this.gamepads = {};
    this.enabled = false;
    this.mobile = isMobile();

    var selectedFeatures = [];
    var hiddenFeatures = [];

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name initialize
	 * @description Initializes the object and optionally assigns it to the global window object.
	 * @returns {Object} The initialized object.
	 */
    this.initialize = function () {
        if (this.initialized) return this;
        window[this.id] = this;
        this.initialized = true;
        return this;
    }
    
	/**
	 * @function
     * @memberOf module:geoflo
	 * @name init
	 * @description Initializes the map component with the provided options and a callback function when ready.
	 * @param {Object} [options={}] - The options object for configuring the map component.
	 * @param {Function} onReady - The callback function to be executed when the map is ready.
	 * @returns {Object} Returns the map component instance.
	 */
    this.init = async function (accessToken, options={}, onReady) {
        var onReadyReturn;

        this.Utilities = new _src_Utilities_js__WEBPACK_IMPORTED_MODULE_2__["default"]();

        if (!accessToken) throw new Error('No Mapbox Access Token Provided!');
        if (this.isReady) return this.setOptions(options);

        const id = options.container || this.options.map.container;
        if (!id) throw new Error('Element id is required in the DOM for the map!');

        await loadStylesheet("https://api.mapbox.com/mapbox-gl-js/v3.4.0/mapbox-gl.css");
        await loadScript("https://api.mapbox.com/mapbox-gl-js/v3.4.0/mapbox-gl.js");
        await loadScript("https://unpkg.com/@turf/turf@7/turf.min.js");
        await loadScript("https://api.tiles.mapbox.com/mapbox.js/plugins/leaflet-omnivore/v0.3.1/leaflet-omnivore.min.js");
        await loadScript("https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js");
        await loadScript("https://api.mapbox.com/search-js/v1.0.0-beta.18/core.js");

        this.styles = this.options.map.styles;
        this.setOptions(options);
        
        var container = await ready(id);
        var style = this.styles.find(style => style.title === this.options.map.style).uri;

        this.isReady = container ? true : false;
        if (!this.isReady) throw new Error('Element id is required in the DOM for the map!');

        container.classList.add(this.statics.id);

        buildMapbox.call(this);

        turf.distanceToDegrees = function distanceToDegrees(distanceInKm) { return distanceInKm / 111.32; }

        this.mapbox = new mapboxgl.Map({
            accessToken: accessToken,
            container: container,
            style: style,
            center: this.options.map.center,
            zoom: this.options.map.zoom,
            hash: true,
            projection: 'mercator',
            extent: this.options.map.extent
        });

        this.viewport = document.createElement('div');
        this.viewportHeightOffset = 110;
        this.viewportWidthOffset = 20;
        this.viewportLeft = '10px';
        this.viewportBottom = '5%';
        this.noSelect = options.noSelect || false;
        this.mapbox.on('load', this.onLoad.bind(this));

        await loaded(this);
        await this.redraw();

        this.setViewport();
        //this.setExtent(false, true);
        this.setOpacity(this.options.map.opacity);

        this.fire('sdk.ready', { enabled: this.enabled, map: this.map, ready: this.isLoaded });

        if (onReady && typeof onReady === 'function') {
            if (onReady.constructor.name === 'AsyncFunction') {
                onReadyReturn = await onReady.call(this, this);
            } else {
                onReadyReturn = onReady.call(this, this);
            }
        }

        if (onReadyReturn) {
            if (!onReadyReturn.disable) {
                this.enable();
            }
        } else {
            this.enable();
        }
        return this;
    }

    /**
	 * @function
     * @memberOf module:geoflo
	 * @name load
	 * @description This function loads the MapboxGL SDK with the given MapboxGL map object and sets up necessary components for interaction. Loads the User, Layers, and Features components, and initializes event listeners. Calls the onReady callback if provided.
	 * @param {Object} map - The MapboxGL map object to be used by the SDK.
	 * @returns {Object} - Returns the SDK instance after loading and initialization.
	 */
    this.load = function (map) {
        if (this.isLoaded || !this.isReady) return this;

        this.map = map;

        this.locate = new _src_Locate_js__WEBPACK_IMPORTED_MODULE_10__["default"]();

        this.navigation = new mapboxgl.NavigationControl({ visualizePitch: true, showZoom: true, showCompass: true });
        this.navigation.hide = function () { this._container.style.display = 'none' }.bind(this.navigation);
        this.navigation.show = function () { this._container.style.display = 'block' }.bind(this.navigation);
        this.map.addControl(this.navigation, 'top-right');

        if (!this.mobile) {
            this.fullscreen = new mapboxgl.FullscreenControl({ container: document.querySelector('body') });
            this.fullscreen.hide = function () { this._controlContainer.style.display = 'none' }.bind(this.fullscreen);
            this.fullscreen.show = function () { this._controlContainer.style.display = 'block' }.bind(this.fullscreen);
            this.map.addControl(this.fullscreen, 'top-right');
        }
    
        this.styles = new _src_Styles_js__WEBPACK_IMPORTED_MODULE_3__["default"](this, { styles: this.styles, selected: this.options.map.style });
        this.Layers = new _src_Layers_js__WEBPACK_IMPORTED_MODULE_4__["default"](this);
        this.Features = new _src_Features_js__WEBPACK_IMPORTED_MODULE_5__["default"](this);

        this.map.addControl(this.styles);
        
        this.Events = (0,_src_Events_js__WEBPACK_IMPORTED_MODULE_7__["default"])(this);
        this.Events.removeEventListeners();
        this.Events.addEventListeners();

        this.isLoaded = true;
        return this;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name enable
	 * @description This function enables the map interaction mode based on the provided type and options. It sets the mode to 'select' or 'draw' depending on the type parameter, initializes options, controls, modes, and triggers events.
	 * @param {string} type - The type of interaction mode to enable ('select' or 'draw').
	 * @param {Object} options - Additional options for the interaction mode (default: {}).
	 * @returns {Object} - The current instance of the map with the enabled interaction mode.
	 */
    this.enable = function (type, options={}) {
        if (this.enabled) return this;
        
        this.mode = !type || type === 'select' ? 'select' : 'draw';
        this.type = type;

        this.setOptions(options);
        this.setControls();

        this.Select = new _src_Select_js__WEBPACK_IMPORTED_MODULE_8__["default"](this);
        this.Draw = new _src_Draw_js__WEBPACK_IMPORTED_MODULE_9__["default"](this);

        this.modes = [ this.Select, this.Draw ];
        this.enabled = true;

        this.setMode({ mode: this.mode, type: this.type});
        this.fire('map.enable', { enabled: this.enabled, mode: this.mode, type: this.type });
        return this;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name disable
	 * @description This function disables the map by clearing modes, setting enabled to false, resetting mode to null, resetting options to default, firing a 'map.disable' event, enabling double click zoom, removing event listeners, layers, and controls.
	 * @returns {Object} Returns the current instance of the map object.
	 */
    this.disable = function () {
        if (!this.enabled) return this;

        this.modes = [];
        this.enabled = false;
        this.mode = null;
        this.options = _src_Options_js__WEBPACK_IMPORTED_MODULE_1__["default"];
        this.doubleClickZoom.enable(this.map);
        this.Layers.removeEventListeners();
        this.Events.removeEventListeners();
        this.Layers.removeLayers();
        this.removeControls();
        this.fire('map.disable', { enabled: this.enabled, mode: this.mode });
        return this;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name redraw
	 * @description Redraws the map by refreshing layers, updating event listeners, and disabling double click zoom.
	 * @returns {Promise<boolean>} Returns a promise that resolves to true if the map is successfully redrawn, false otherwise.
	 */
    this.redraw = async function () {
        if (!this.Events) return false;
        await this.Layers.refresh();
        console.log(this.Layers.getSources())
        this.Events.removeEventListeners();
        this.Events.addEventListeners();
        this.Features.updateSource();
        this.doubleClickZoom.disable(this.map);
        this.setViewport();
        this.map.style.glyphManager.urls[""] = `mapbox://fonts/${this.dev}/{fontstack}/{range}.pbf`
        this.fire('map.redraw', { enabled: this.enabled, mode: this.mode })
        if (this.onReady) await this.onReady(this), delete this.onReady;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name refresh
	 * @description Refreshes the content by redrawing it asynchronously.
	 * @returns {Promise<boolean>} Returns a Promise that resolves to a boolean value.
	 */
    this.refresh = async function () {
        if (this.noRefresh) return false;
        await this.redraw();
        this.fire('map.refresh', { enabled: this.enabled, mode: this.mode })
    }




	/**
	 * @function
     * @memberOf module:geoflo
	 * @name once
	 * @description Registers a callback function to be executed only once for a specific GeoFlo event type.
	 * @param {string} type - The type of event to listen for.
	 * @param {function} callback - The callback function to be executed when the event occurs.
	 * @returns {boolean} Returns true if the callback is successfully registered to be executed once, otherwise false.
	 */
    this.once = function (type, callback) {
        return this.map && type ? this.map.once(this.id + ':' + type, callback) : false;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name on
	 * @description Registers a callback function to be executed for a specific GeoFlo event type.
	 * @param {string} type - The type of event to listen for.
	 * @param {function} callback - The callback function to be executed when the event occurs.
	 * @returns {boolean} Returns true if the event listener was successfully attached, false otherwise.
	 */
    this.on = function (type, callback) {
        if (!callback.name) throw new Error('Function must have a name!')
        return this.map && type ? this.map.on(this.id + ':' + type, callback) : false;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name off
	 * @description Removes an event listener from the map based on the provided GeoFlo event type and callback. Callback function must have a name.
	 * @param {string} type - The type of event to remove the listener from.
	 * @param {function} callback - The callback function to be removed as the event listener.
	 * @returns {boolean} Returns true if the event listener was successfully removed, false otherwise.
	 */
    this.off = function (type, callback) {
        if (!callback.name) throw new Error('Function must have a name!')
        return this.map && type ? this.map.off(this.id + ':' + type, callback) : false;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name fire
	 * @description Fires an event with the specified GeoFlo type and detail. Detail is an Object type.
	 * @param {string} type - The type of the event to fire.
	 * @param {any} detail - Additional details to include with the event.
	 * @returns {boolean} Returns true if the event was successfully fired, false otherwise.
	 */
    this.fire = function (type, detail) {
        return this.map && type ? this.map.fire(this.id + ':' + type, { detail: detail }) : false;
    }




	/**
	 * @function
     * @memberOf module:geoflo
	 * @name setOptions
	 * @description Sets the options for the object by merging the provided options with the existing ones.
	 * @param {Object} options - The options to be merged with the existing options.
	 * @returns {Object} The updated options object after merging.
	 */
    this.setOptions = function(options={}) {
        this.options = this.Utilities.assignDeep(this.options || {}, options);
        return this.options;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name setMode
	 * @description This function allows the user to set the mode of the map editor with various options.
	 * @param {Object} options - The options object for setting the mode.
	 * @param {string} [options.mode='select'] - The mode to set (default: select).
	 * @param {string} [options.type='LineString'] - The type of the mode (default: LineString).
	 * @param {Object} [options.feature] - The feature to edit in the mode.
	 * @returns {Object} The current mode after setting it based on the options.
	 */
    this.setMode = function (options={}) {
        if (!options.mode) options.mode = this.statics.constants.modes.SELECT;
        if (!options.type) options.type = 'Polyline';

        var classesToRemove = [];
        var selectedMode = null;
        var editMode = options.mode === this.statics.constants.modes.EDIT;

        if (this.currentMode && options.mode === this.mode && options.type === this.currentMode.type) return this.currentMode;
        
        if (editMode) {
            if (options.feature) {
                options.feature = geoflo.Utilities.cloneDeep(options.feature);
                options.mode = this.statics.constants.modes.DRAW;
                options.type = options.type || options.feature.properties.type;

                this.editing = geoflo.Utilities.cloneDeep(options.feature);
                this.removeSelection();
            } else {
                //this.wantingToEdit = true;
                if (this.currentMode) this.currentMode.deactivate(options);
                return this.setMode();
            }
        }

        if (this.currentMode && this.currentMode.activated) this.currentMode.deactivate(options);

        this.container.classList.forEach(function(className) {
            if (className.indexOf("mouse-") !== -1) {
                classesToRemove.push(className);
            }
        });

        if (classesToRemove.length > 0) {
            var _map$container$classL;
            (_map$container$classL = this.container.classList).remove.apply(_map$container$classL, classesToRemove);
        }

        this.setMapClass('pointer');

        this.modes.forEach(function(m) { if (m.canHandle && m.canHandle(options.mode)) { selectedMode = m; } });

        if (selectedMode) {
            this.fire('mode.change', {
                old: this.mode,
                new: options.mode,
                mode: selectedMode,
                type: options.type
            })

            this.currentMode = selectedMode;
            this.mode = options.mode;
            selectedMode.activate(options);
        }

        this.Snapping = new _src_Snapping_js__WEBPACK_IMPORTED_MODULE_11__["default"](this.currentMode);
        this.Pinning = new _src_Pinning_js__WEBPACK_IMPORTED_MODULE_12__["default"](this.currentMode);
        this.Routing = new _src_Routing_js__WEBPACK_IMPORTED_MODULE_13__["default"](this.currentMode);
        this.Exploring = new _src_Exploring_js__WEBPACK_IMPORTED_MODULE_14__["default"](this.currentMode);
        this.Painting = new _src_Painting_js__WEBPACK_IMPORTED_MODULE_15__["default"](this.currentMode);
        this.Layers.moveLayers();
        return this.currentMode;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name setControls
	 * @description Initializes and sets the controls for the map. Adds the fullscreen and navigation controls, and initializes the custom controls.
	 * @params {none} - No parameters needed for this function.
	 * @returns {Array} - An array of initialized controls for the map.
	 */
    this.setControls = function (controls=[]) {
        if (this.controls && this.controls.length) {
            this.controls.forEach(function(control) { control.enable() });
            return this.controls;
        }

        if (!this.options.controls) return false;

        this.controls = [];
        controls = controls.length ? controls : this.statics.controls;
        controls.forEach(function(control) { this.controls.push(new _src_Control_js__WEBPACK_IMPORTED_MODULE_16__["default"](control)) }, this);
        return this.controls;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name setIcon
	 * @description This function determines the appropriate icon to display based on the user's following status and navigation compass icon.
     * @deprecated
	 * @param {Event} event - The event for which the icon is being set.
	 * @returns {void}
	 */
    this.setIcon = function (event) {
        var icon = this.navigation ? this.navigation._compassIcon : false;
        var following = this.Locate && this.Locate.following;

        if (following) {

        } else if (icon) {
            //control.style.transform = icon.style.transform;
        }
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name setCenterMarker
	 * @description This function sets a marker at the center of the map. It allows customization of the marker icon and behavior.
	 * @param {Object} options - Options object for customizing the center marker.
	 * @param {boolean} [options.remove] - If true, removes the center marker.
	 * @param {boolean} [options.transform] - If true, applies transformation to the center marker.
	 * @param {boolean} [options.gamepad] - If true, applies gamepad settings to the center marker.
	 * @param {boolean} [options.dontAdd] - If true, does not add the center marker.
	 * @param {boolean} [options.noRemove] - If true, prevents the center marker from being removed.
	 * @return {Object|boolean} Returns the center marker object if successfully added or updated, or false if not applicable.
	 */
    this.setCenterMarker = function (options={}) {
        return;
        if (!this.mobile || this.noCenterMarker) return false;
        
        var following = this.Locate && this.Locate.following;
        var icon = this.statics.logo.icon;
        var el;

        if (options.remove) {
            if (this.centerMarker && !this.centerMarker.noRemove) return this.centerMarker.remove(), delete this.centerMarker;
            return false;
        }
       
        if (this.centerMarker) {
            this.centerMarker.setLngLat(this.map.getCenter()).addTo(this.map);
            if (options.transform || options.gamepad) this.centerMarker.setPitchAlignment('map');
            return this.centerMarker;
        } else if (options.dontAdd) {
            return false;
        }

        if (!this.centerMarkerIcon) {
            el = document.createElement('div');
            el.className = this.id + '-center-marker';
            setIcon(el, icon);
        }
        
        this.centerMarkerIcon = el;
        this.centerMarker = new mapboxgl.Marker(this.centerMarkerIcon);
        this.centerMarker.setLngLat(this.map.getCenter()).addTo(this.map).setOffset([0,0]);
        this.centerMarker.noRemove = options.noRemove;

        if (following) this.centerMarker.setOffset([0,-20]);

        function setIcon(marker, icon) {
            marker.style.backgroundImage = `url("${icon}")`;
        }

        return this.centerMarker;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name setButtons
	 * @description This function resets the active buttons and activates the Select button.
	 * @return {boolean} Returns true if the Select button is successfully set, false otherwise.
	 */
    this.setButtons = function () {
        return this.getButtons('select') ? this.getButtons('select').add() : false;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name setActiveButton
	 * @description Sets the active button with the specified id in the controls array.
	 * @param {string} id - The id of the button to set as active.
	 * @returns {boolean} Returns false if the controls array is empty or undefined.
	 */
    this.setActiveButton = function (id) {
        if (!this.controls || !this.controls.length) return false;
        this.controls.forEach(function(control) { control.setActiveButton(id.toLowerCase()) })
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name setTheme
	 * @description Sets the theme colors for the control.
	 * @param {Object} colors - An object containing the theme colors.
	 * @returns {void}
	 */
    this.setTheme = function (colors) {
        this.Control ? this.Control.setTheme(colors) : false;
    }
	
    /**
     * @function
     * @name setLayers
     * @memberof module:geoflo
     * @description Sets custom layers and optionally resets features based on the provided options.
     *
     * @param {Array} layers - An array of layers to be set.
     * @param {Object} options - An object containing options for setting layers.
     * @param {boolean} options.reset - Indicates whether to reset features before setting layers.
     * @returns {Promise} A promise that resolves when the custom layers have been set.
     * 
     * @author Solutegrate
     * @copyright 2025
     */
    this.setLayers = async function (layers=[], options={}) {
        if (options.reset) this.removeFeatures(layers, options);
        return await this.Layers.setCustomLayers(layers, options);
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name setSelectedFeatures
	 * @description This function updates the selected features on the map with the provided array of features.
	 * @param {Array} features - An array of features to set as selected.
	 * @returns {boolean} Returns false if the features array is empty.
	 */
    this.setSelectedFeatures = function (features=[]) {
        if (!features.length) {
            selectedFeatures = [];
        } else {
            selectedFeatures.splice(0, selectedFeatures.length, ...features);
        }

        this.map.getSource(this.statics.constants.sources.SELECT).setData(turf.featureCollection(this.getSelectedFeatures()));
        this.map.getSource(this.statics.constants.sources.VERTEX).setData(turf.featureCollection(this.getSelectedFeatures()));

        this.fire('select.load', {
            features: turf.featureCollection(this.getSelectedFeatures()),
            source: this.map.getSource(this.statics.constants.sources.SELECT)
        })
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name setMeshFeatures
	 * @description Updates the mesh data with the provided features and returns the updated mesh. Adds a mesh index if it does not exist.
	 * @param {Array} features - An array of features to update the mesh with.
	 * @returns {Object} The updated mesh after setting the features.
	 */
    this.setMeshFeatures = function (features=[]) {
        if (!features.length) return false;
        this.updateMeshData(features, true);
        return this.meshIndex.getFeatures();
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name setMapClass
	 * @description Sets a specific mouse class on the map container element based on the provided name. Removes any existing classes starting with "mouse-" before adding the new class.
	 * @param {string} name - The name of the class to be added (without the "mouse-" prefix).
	 * @returns {boolean} Returns false if the name is empty, otherwise adds the class and returns undefined.
	 */
    this.setMapClass = function (name) {
        this.container.classList.forEach(function(className) {
            if (className.indexOf("mouse-") !== -1) this.container.classList.remove(className)
        }, this);

        if (!name) return false;
        this.container.classList.add("mouse-" + name);
    }

    /**
	 * @function
     * @memberof module:geoflo.Map
	 * @name setViewport
	 * @description This function sets the style of the viewport based on the options provided. It resizes the map, calculates the height and width of the container, adjusts the height and width of the viewport, extends the viewport style, sets padding, and returns the updated viewport element.
	 * @param {Object} options - The options object containing style properties for the viewport.
	 * @param {string} [options.position='absolute'] - The position property for the viewport.
	 * @param {string} [options.margin='auto'] - The margin property for the viewport.
	 * @param {string} [options.top=''] - The top property for the viewport.
	 * @param {string} [options.left=this.viewportLeft] - The left property for the viewport.
	 * @param {string} [options.bottom=this.viewportBottom] - The bottom property for the viewport.
	 * @returns {Element} The updated viewport element.
	 */
    this.setViewport = function (options) {
        var style = options || {
            position: 'absolute',
            margin: 'auto',
            top: '',
            left: this.viewportLeft,
            bottom: this.viewportBottom
        };

        var height = this.container.getBoundingClientRect().height;
        var width = this.container.getBoundingClientRect().width;

        style.height = `${Number.parseInt(height) - this.viewportHeightOffset}px`;
        style.width = `${Number.parseInt(width) - this.viewportWidthOffset}px`;

        this.Utilities.extend(this.viewport.style, style);
        this.setPadding();
        this.map.resize();
        return this.viewport;
    }

	/**
	 * @function
     * @memberof module:geoflo.Map
	 * @name setPadding
	 * @description Calculates the padding values for the container by comparing its position with the viewport.
	 * @returns {Object} The padding object containing left, right, top, and bottom padding values.
	 * @params {void}
	 */
    this.setPadding = function () {
        var left = (this.container.getBoundingClientRect().left) - (this.viewport.getBoundingClientRect().left);
        var right = (this.container.getBoundingClientRect().right) - (this.viewport.getBoundingClientRect().right);
        var top = (this.container.getBoundingClientRect().top) - (this.viewport.getBoundingClientRect().top);
        var bottom = (this.container.getBoundingClientRect().bottom) - (this.viewport.getBoundingClientRect().bottom);
        var noPadding = this.container.getBoundingClientRect().width < 20;

        this.padding = {
            left: noPadding ? 0 : Math.abs(left),
            right: noPadding ? 0 : Math.abs(right),
            top: noPadding ? 0 : Math.abs(top),
            bottom: noPadding ? 0 : Math.abs(bottom)
        };

        this.map.setPadding(this.padding);    
        return this.padding;
    }

    /**
	 * @function
     * @memberof module:geoflo.Map
	 * @name setStyle
	 * @description Sets the style of the map and returns the updated style.
	 * @param {Object} style - The style object to be applied to the map.
	 * @returns {Object} The updated style object of the map.
	 */
    this.setStyle = function (style, options) {
        if (!style) { return false };
        this.map.setStyle(style, options);
        return this.map.getStyle();
    }

    /**
	 * @description Sets the extent of the map based on the provided features or a given extent. If no features are provided, it uses the rendered drawn features. If extent is specified, it sets the map extent to the extent polygon. If center is not specified and isPoint is true, it centers the map at the centroid of the extent. If center is false, it fits the map to the bounding box of the features. If center is true, it centers the map at the centroid of the bounding box.
	 * @function
     * @memberof module:geoflo.Map
	 * @name setExtent
	 * @param {Array} features - Array of features to set the extent based on.
	 * @param {Array} extent - Extent polygon to set the map extent to.
	 * @param {Object} options - Additional options for setting the extent (center, isPoint).
	 * @returns {Object} - The map object after setting the extent.
	 */
    this.setExtent = function (features, extent, options={}) {
        this.settingExtent = true;

        var noFeatures = !features || !features.length;
        var center = options.center;
        !center && options.isPoint ? center = true : false;

        this.setViewport();
        
        if (extent) {
            this.preventDefault = true;
            features = !this.options.map.extent ? [] : [turf.polygon(this.options.map.extent)];
        } else if (noFeatures) {
            features = this.getDrawnFeatures();
        }

        var jumpTo = {
            bearing: options.bearing || this.options.map.bearing || this.map.getBearing(),
            center: this.options.map.center || this.map.getCenter(),
            zoom: options.zoom || this.options.map.zoom || this.map.getZoom(),
            pitch: options.pitch || this.options.map.pitch || this.map.getPitch()
        }

        if (!features) return this.map.jumpTo(jumpTo);
        if (!features.length) return;

        var bbox = turf.bbox(turf.featureCollection(features))

        if (center) {
            var polygon = turf.bboxPolygon(bbox);
            var centroid = turf.centroid(polygon);
            jumpTo.center = { lat: centroid.geometry.coordinates[1], lng: centroid.geometry.coordinates[0] };
            jumpTo.zoom = options.zoom || this.map.getZoom();
            jumpTo.pitch = options.pitch || this.map.getPitch();
            jumpTo.bearing = options.bearing || this.map.getBearing();
            this.map.jumpTo(jumpTo);
        } else if (bbox) {
            var settings = {
                padding: this.map.getPadding(),
                linear: true
            }

            if (options.bearing) settings.bearing = options.bearing;
            if (options.pitch) settings.pitch = options.pitch;
            if (options.maxZoom) settings.maxZoom = options.maxZoom;
            
            this.map.fitBounds(bbox, settings);
        }

        this.fire('features.zoom', { features: features, center: this.map.getCenter(), bbox: bbox });
        this.settingExtent = false;
        return this.map;
    }

    /**
     * @memberof module:geoflo
	 * @function
	 * @name setOpacity
	 * @description This function takes a numeric value and sets the opacity of specified layers on the map to that value.
	 *
	 * @param {number} value - The opacity value to set for the layers.
	 */
    this.setOpacity = function (value) {
        var opacity = this.opacity = Number(value);
        var layers = this.map.getStyle().layers;

        layers.map((layer) => {
            if (!layer.id.includes('geoflo') || layer.type === 'background') {
                if (layer.metadata && layer.metadata.custom) return;
                
                if (layer.type === 'symbol')  {
                    this.map.setPaintProperty(layer.id, `icon-opacity`, opacity);
                    this.map.setPaintProperty(layer.id, `text-opacity`, opacity);
                } else {
                    this.map.setPaintProperty(layer.id, `${layer.type}-opacity`, opacity);
                }
            }
        })
    }

    this.setColors = async function (colors={}) {
        this.options.colors = Object.assign(this.options.colors, colors);
        this.setTheme(this.options.colors);
        await this.Layers.refresh();
        this.Features.updateSource();
        return this.getColors();
    }




	/**
	 * @function
     * @memberOf module:geoflo
	 * @name hasControls
	 * @description This function checks if the object has controls by verifying the existence and length of the controls array.
	 * @returns {boolean} Returns true if the object has controls, false otherwise.
	 */
    this.hasControls = function () {
        return this.controls && this.controls.length;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name hasSelection
	 * @description This function determines whether there is a selection of features.
	 * @returns {boolean} Returns true if there is a selection of features, otherwise false.
	 */
    this.hasSelection = function () {
        return this.getSelectedFeatures().length > 0;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name hasSingleSelection
	 * @description This function checks if there is only one selected feature.
	 * @returns {boolean} Returns true if there is a single selection, false otherwise.
	 */
    this.hasSingleSelection = function () {
        return this.getSelectedFeatures().length === 1;
    }




	/**
	 * @function
     * @memberOf module:geoflo
	 * @name activateSnapping
	 * @description This function activates snapping by getting the snapping buttons, activating them, and triggering the snapping activation event. Fires a custom event 'snapping.activate' with the enabled status and the snapping object.
	 * @returns {Object} The activated Snapping object.
	 */
    this.activateSnapping = function () {
        var buttons = this.getButtons('snapping');
        if (!buttons) return;
        buttons.activate();
        this.Snapping.activate();
        this.fire('snapping.activate', { enabled: true, mesh: this.meshIndex, snapping: this.Snapping })
        return this.Snapping;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name activatePinning
	 * @description This function activates pinning by getting the pinning buttons, activating them, enabling snapping, activating pinning, and firing an event. Fires a custom event 'pinning.activate' with the enabled status and the pinning object.
	 * @returns {Object} The activated pinning object.
	 */
    this.activatePinning = function () {
        var buttons = this.getButtons('pinning');
        if (!buttons) return;
        buttons.activate();
        //this.deactivateRouting();
        this.activateSnapping();
        this.Pinning.activate();
        this.fire('pinning.activate', { enabled: true, pinning: this.Pinning });
        return this.Pinning;
    }

	/**
     * @function
     * @memberOf module:geoflo
	 * @description This function activates the routing feature by getting the routing buttons, activating them, enabling snapping, deactivating painting, and activating the routing itself. Fires a custom event 'routing.activate' with the enabled status and the routing object.
	 * @name activateRouting
	 * @returns {Object} The activated Routing object.
	 */
    this.activateRouting = function () {
        var buttons = this.getButtons('routing');
        if (!buttons) return;
        buttons.activate();
        this.activateSnapping();
        this.deactivatePainting();
        this.Routing.activate();
        this.fire('routing.activate', { enabled: true, routing: this.Routing })
        return this.Routing;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name activateExploring
	 * @description This function activates the exploring mode by activating the exploring buttons, functionalities, and events. Fires a custom event 'exploring.activate' with the enabled status and the exploring object.
	 * @returns {Object} The activated exploring object.
	 */
    this.activateExploring = function () {
        var buttons = this.getButtons('exploring');
        if (!buttons) return;
        buttons.activate();
        this.deactivatePainting();
        this.Exploring.activate();
        this.fire('exploring.activate', { enabled: true, exploring: this.Exploring });
        return this.Exploring;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name activatePainting
	 * @description Activates the painting functionality by setting the draw mode, activating the painting buttons, deactivating routing and exploring, and firing an event. Fires a custom event 'painting.activate' with the enabled status and the painting object.
	 * @returns {Object} The activated Painting object.
	 */
    this.activatePainting = function () {
        var buttons = this.getButtons('painting');
        if (!buttons) return;
        buttons.activate();
        this.deactivateRouting();
        this.deactivateExploring();
        this.Painting.activate(this.drawMode);
        this.fire('painting.activate', { enabled: true, painting: this.Painting });
        return this.Painting;
    }




	/**
	 * @function
     * @memberOf module:geoflo
	 * @name deactivateSnapping
	 * @description This function deactivates the snapping feature by performing various actions. Deletes mesh data, deactivates the snapping buttons, deactivates the Snapping object, and fires a 'snapping.deactivate' event.
	 * @returns {boolean} Returns false after deactivating the snapping feature.
	 */
    this.deactivateSnapping = function () {
        var buttons = this.getButtons('snapping');
        if (!buttons) return;
        buttons.deactivate();
        this.deleteMeshData();
        this.Snapping.deactivate();
        this.fire('snapping.deactivate', { enable: false })
        return false;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name deactivatePinning
	 * @description This function deactivates the pinning feature by deactivating the pinning buttons, the Pinning object, and firing a 'pinning.deactivate' event.
	 * @returns {boolean} Returns false after deactivating pinning.
	 */
    this.deactivatePinning = function () {
        var buttons = this.getButtons('pinning');
        if (!buttons) return;
        buttons.deactivate();
        this.Pinning.deactivate();
        this.fire('pinning.deactivate', { enable: false });
        return false;
    }

	/**
	 * @description Deactivates the routing functionality by deactivating the routing buttons and the Routing module. Triggers a custom event 'routing.deactivate' with enable set to false.
	 * @function
     * @memberOf module:geoflo
	 * @name deactivateRouting
	 * @returns {boolean} Returns false after deactivating the routing functionality.
	 */
    this.deactivateRouting = function () {
        var buttons = this.getButtons('routing');
        if (!buttons) return;
        buttons.deactivate();
        this.Routing.deactivate();
        this.fire('routing.deactivate', { enable: false })
        return false;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name deactivateExploring
	 * @description This function deactivates the exploring mode by deactivating buttons, deleting mesh data, deactivating the exploring mode, and firing an event. Fires a custom event 'exploring.deactivate' with the enable status set to false.
	 * @returns {boolean} Returns false after deactivating the exploring mode.
	 */
    this.deactivateExploring = function () {
        var buttons = this.getButtons('exploring');
        if (!buttons) return;
        buttons.deactivate();
        this.deleteMeshData();
        this.Exploring.deactivate();
        this.fire('exploring.deactivate', { enable: false });
        return false;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name deactivatePainting
	 * @description This function deactivates the painting mode by deactivating the buttons, the painting tool, and firing an event. Fires a custom event 'painting.deactivate' with the enable status set to false.
	 * @returns {boolean} Returns false.
	 */
    this.deactivatePainting = function () {
        var buttons = this.getButtons('painting');
        if (!buttons) return;
        if (this.mobile && !this.currentMode.finished && this.currentMode.id === 'draw' && this.currentMode.type && this.currentMode.type === 'Rectangle') return;
        buttons.deactivate();
        this.Painting.deactivate();
        this.fire('painting.deactivate', { enable: false });
        return false;
    }

    


	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getMap
	 * @description Retrieves the map property from the Map object.
	 * @returns {Object} The map property of the Map object.
	 */
    this.getMap = function () {
        return this.map;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getModes
	 * @description Retrieves the modes based on the provided mode parameter. If a mode is specified, it returns the mode that can handle the input mode. If no mode is specified, it returns all available modes.
	 * @param {string} mode - The mode to be checked against available modes.
	 * @returns {Array|Object} - An array of all available modes if no mode is specified, or the mode object that can handle the input mode.
	 */
    this.getModes = function (mode) {
        return mode ? this.modes.find(function(m) { if (m.canHandle && m.canHandle(mode)) { return m; } }) : this.modes;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getMode
	 * @description Retrieves the current mode of the object. Either 'GeoFlo.Select' or 'GeoFlo.Draw'.
	 * @return {object} The current mode of the object.
	 */
    this.getMode = function () {
        return this.currentMode;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getColors
	 * @description This function retrieves the colors from the options object.
	 * @returns {Array} The colors array from the options object.
	 */
    this.getColors = function () {
        return this.options.colors;
    }

	/**
	 * @description Retrieves the buttons associated with a specific control or all buttons from the controls.
	 * @function
     * @memberOf module:geoflo
	 * @name getButtons
	 * @param {string} id - The ID of the button to retrieve. If not provided, retrieves all buttons.
	 * @returns {object|boolean} - Returns an object containing the buttons if found, or false if controls are not available.
	 */
    this.getButtons = function (id) {
        if (!this.hasControls()) return false;

        var buttons;

        this.controls.forEach(function (c) {
            var options = c.getButtonOptions();

            if (id) {
                if (!buttons && options[id]) buttons = options[id];
            } else {
                if (!buttons) buttons = {};

                Object.entries(options).forEach(function(entry) {
                    var key = entry[0];
                    var val = entry[1];
                    buttons[key] = val;
                })
            }
            
        })

        return buttons;
    }




	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getFeatures
	 * @description This function retrieves both the drawn and selected features and returns them as a single array.
	 * @return {Array} An array containing both the drawn and selected features.
	 */
    this.getFeatures = function () {
        return [this.getDrawnFeatures(), this.getSelectedFeatures()].flat();
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getDrawnFeatures
	 * @description Retrieves the drawn features from the Features object.
	 * @returns {Array} An array of drawn features.
	 */
    this.getDrawnFeatures = function () {
        return this.Features.getColdFeatures();
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getRenderedFeatures
	 * @description Retrieves rendered features within a specified radius around a given longitude and latitude, based on a filter.
	 * @param {Array<number>} lngLat - An array containing the longitude and latitude coordinates.
	 * @param {number} radiusInKm - The radius in kilometers within which to search for features.
	 * @param {object} filter - An optional filter object to apply when retrieving features.
	 * @returns {Array<object>} An array of rendered features that match the criteria.
	 */
    this.getRenderedFeatures = function (lngLat, radiusInKm, filter) {
        var features = [this.getRenderedDrawnFeatures(lngLat, radiusInKm, filter), this.getRenderedSnapFeatures(lngLat, radiusInKm, filter)].flat();
        return features;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getRenderedDrawnFeatures
	 * @description This function queries the map for rendered drawn features based on the provided parameters.
	 * @param {Object} lngLat - The longitude and latitude coordinates.
	 * @param {number} radiusInKm - The radius in kilometers for the search.
	 * @param {Object} filter - Optional filter object to apply to the query.
	 * @returns {Array} An array of features within the specified radius around the given coordinates.
	 */
    this.getRenderedDrawnFeatures = function (lngLat, radiusInKm, filter) {
        var bbox;
        var id = this.id;

        var prelayers = [
            id + "-line-cold",
            id + "-fill-cold",
            id + "-circle-cold",
            id + "-icon-cold"
        ];

        var layers = [];

        prelayers.forEach(function(layer) {
            if (this.map.getLayer(layer)) layers.push(layer);
        }, this)

        this.Layers.getLayers().forEach(function(layer) {
            if (layer.id.includes(id)) return;
            if (this.map.getLayer(layer.id)) layers.push(layer.id);
        }, this)

        var options = { layers: layers };

        if (radiusInKm) {
            var radius = turf.distanceToDegrees(radiusInKm);
            bbox = [this.map.project([lngLat.lng - radius, lngLat.lat - radius]), this.map.project([lngLat.lng + radius, lngLat.lat + radius])];
        } else {
            var point = lngLat ? this.map.project([lngLat.lng, lngLat.lat]) : null;
            bbox = point ? [[point.x - 5, point.y - 5], [point.x + 5, point.y + 5]] : null
        }

        filter ? options.filter = filter : false;
        
        var features = this.map.queryRenderedFeatures(bbox, options);
        var ids = features.map(function(feature) { return feature.parent || feature.properties.parent || feature.id || feature.properties.id; });

        return features && features.length ? this.Features.getFeaturesById(ids) : [];;
    }
    
	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getRenderedSnapFeatures
	 * @description Retrieves rendered mesh index features within a specified radius around a given point on the map.
	 * @param {Object} lngLat - The longitude and latitude coordinates of the center point.
	 * @param {number} radiusInKm - The radius in kilometers within which to search for features.
	 * @param {Object} filter - Optional filter to apply to the query.
	 * @returns {Array} An array of features that fall within the specified radius around the given point.
	 */
    this.getRenderedSnapFeatures = function (lngLat, radiusInKm, filter) {
        if (!this.meshIndex) return [];

        var radius = turf.distanceToDegrees(radiusInKm);
        var bbox = [this.map.project([lngLat.lng - radius, lngLat.lat - radius]), this.map.project([lngLat.lng + radius, lngLat.lat + radius])];
        var options = { layers: [] };

        geoflo.Layers.getLayers().forEach(function(layer) {
            if (!layer.id.includes('MESH')) return;
            if (layer.type === 'fill') return;
            options.layers.push(layer.id);
        })

        filter ? options.filter = filter : false;

        var features = this.map.queryRenderedFeatures(bbox, options);
        return features && features.length ? this.meshIndex.getFeaturesFromIndex(features) : [];
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getFeatureById
	 * @description Retrieves a feature by its ID from the Features object.
	 * @param {string} id - The ID of the feature to retrieve.
	 * @returns {boolean|object} Returns the feature object if found, otherwise false.
	 */
    this.getFeatureById = function (id) {
        if (!id) return false;
        return this.Features.getFeatureById(id);
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getFeaturesByLayer
	 * @description This function queries the map for features within a specified radius around a given location from a specific source layer.
	 * @param {string} source - The source layer to query features from.
	 * @param {LngLat} lngLat - The longitude and latitude coordinates of the center point for the query.
	 * @param {number} radiusInKm - The radius in kilometers within which to search for features.
	 * @param {Object} filter - Optional filter object to apply to the query.
	 * @returns {Array} An array of features that match the query criteria.
	 */
    this.getFeaturesByLayer = function (source, lngLat, radiusInKm, filter) {
        var layers = [];
        var bbox;

        this.Layers.getLayers().forEach(function(layer) {
            if (!layer.id.includes(source)) return;
            layers.push(layer.id);
        })

        var options = { layers: layers };

        if (radiusInKm) {
            var radius = turf.distanceToDegrees(radiusInKm);
            bbox = [this.map.project([lngLat.lng - radius, lngLat.lat - radius]), this.map.project([lngLat.lng + radius, lngLat.lat + radius])];
        } else {
            var point = lngLat ? this.map.project([lngLat.lng, lngLat.lat]) : null;
            bbox = point ? [[point.x - 5, point.y - 5], [point.x + 5, point.y + 5]] : null
        }

        filter ? options.filter = filter : false;

        var features = this.map.queryRenderedFeatures(bbox, options);
        var ids = features.map(function(feature) { return feature.parent || feature.properties.parent || feature.id || feature.properties.id; });

        return features && features.length ? this.Features.getFeaturesById(ids) : [];;
    }




	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getSelectedFeatures
	 * @description Retrieves the selected features stored in the selectedFeatures array.
	 * @returns {Array} An array containing the selected features.
	 */
    this.getSelectedFeatures = function () {
        return selectedFeatures;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getSelectedFeatureIds
	 * @description Retrieves the IDs of selected features.
	 * @returns {Array} An array of feature IDs.
	 */
    this.getSelectedFeatureIds = function () {
        return this.getSelectedFeatures().map((feature) => { return feature.parent || feature.properties.parent || feature.id || feature.properties.id; });
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getSelectedFeaturesBbox
	 * @description Retrieves the bounding box of the selected features.
	 * @returns {Array<number>} The bounding box coordinates [minX, minY, maxX, maxY].
	 */
    this.getSelectedFeaturesBbox = function () {
        if (!this.hasSelection()) return null;
        return turf.bbox(turf.featureCollection(this.getSelectedFeatures()));
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getSelectedPropertyNames
	 * @description Retrieves the unique property names of selected features excluding the ID property.
	 * @returns {Array} An array of unique property names.
	 */
    this.getSelectedPropertyNames = function () {
        const id = this.id;
        const names = [];

        this.getSelectedFeatures().forEach((feature) => {
            Object.keys(feature.properties).forEach((propertyName) => {
                if (names.indexOf(propertyName) === -1 && propertyName !== id) {
                    names.push(propertyName);
                }
            });
        });

        return names;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getSelectedPropertyValues
	 * @description Retrieves the properties of selected features excluding the property with the specified ID.
	 * @returns {Object} An object containing the properties of selected features.
	 */
    this.getSelectedPropertyValues = function  () {
        const id = this.id;
        var props = {};

        this.getSelectedFeatures().forEach(function (feature) { Object.assign(props, feature.properties); });
        if (props[id] !== undefined) { delete props[id]; }
        return props;
    }

	/**
	 * @description This function returns the common geometry type of the selected features. If all selected features have the same geometry type, it returns that type. If the selected features have different geometry types, it returns "illegal".
	 * @function
     * @memberOf module:geoflo
	 * @name getCommonGeometryType
	 * @returns {string|null} The common geometry type or null if different types are present.
	 */
    this.getCommonGeometryType = function () {
        let allFeaturesType = null;

        this.getSelectedFeatures().forEach((feature) => {
            if (allFeaturesType === null) {
                allFeaturesType = feature.geometry.type;
            } else if (feature.geometry.type !== allFeaturesType) {
                allFeaturesType = "illegal";
            }
        });

        if (allFeaturesType === "illegal") {
            return null;
        } else {
            return allFeaturesType;
        }
    }



    /**
     * @function
     * @name selectFeature
     * @memberOf module:geoflo
     * @description Selects a feature by its ID and returns the selection result.
     *
     * @param {string} id - The ID of the feature to be selected.
     * @returns {boolean|Object} Returns false if the feature is not found, otherwise returns the result of the selection.
     */
    this.selectFeature = function (id) {
        var feature = this.getFeatureById(id);
        if (!feature) return false;
        var selected = this.Features.selectFeatures([feature]);
        
        return selected;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name editFeature
	 * @description This function allows editing a feature by providing its ID or using the currently selected feature. It triggers a 'feature.edit' event and sets the mode to 'edit'.
	 * @param {string} id - The ID of the feature to edit.
	 * @param {Object} options - Additional options for editing the feature.
	 * @param {Object} options.feature - The feature object to edit.
	 * @returns {Object} The edited feature.
	 */
    this.editFeature = function (id, options={}) {
        var feature = options.feature || this.getFeatureById(id);
        
        if (!feature) {
            if (!this.hasSingleSelection()) return false;
            feature = this.getSelectedFeatures()[0];
        }

        options.id = feature.id;
        options.mode = 'edit';
        options.feature = feature;

        this.fire('feature.edit', { feature: feature, id: feature.id });
        this.setMode(options);
        return feature;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name cancelEdit
	 * @description This function cancels the current edit mode if it is in 'draw' mode and deactivates the editing feature.
	 * @param {boolean} standby - Indicates whether the cancel operation is standby.
	 * @param {object} feature - The feature to be deactivated. If not provided, the editing feature will be used.
	 * @returns {boolean} Returns false if the current mode is not 'draw', otherwise deactivates the editing feature.
	 */
    this.cancelEdit = function (standby, feature) {
        if (this.currentMode.id !== 'draw') return false;
        return this.currentMode.deactivate({ cancel: true, standby: standby, feature: feature || this.editing });
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name saveEdit
	 * @description Saves the edited feature using the currentModes saveEdit method.
	 * @return {any} The result of the saveEdit method of the current mode.
	 */
    this.saveEdit = function () {
        return this.currentMode.saveEdit();
    }





	/**
	 * @function
     * @memberOf module:geoflo
	 * @name addFeatures
	 * @description Adds features to the map and optionally zooms to them.
	 * @param {Array} features - Array of features to be added to the map.
	 * @param {boolean} noZoom - Flag to indicate whether to zoom to the added features.
	 */
    this.addFeatures = function (features, noZoom) {
        if (!features) return false;
        if (features.features) features = features.features;
        if (!Array.isArray(features)) features = [features];
        if (!features.length) return false;

        this.Features.addFeatures(features);
        !noZoom ? this.zoomToFeatures() : false;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name addFeaturesToSelected
	 * @description This function adds the provided features to the selected features list, updates the map sources, sets buttons and updates the text.
	 * @param {Array} features - The features to be added to the selected features list.
	 */
    this.addFeaturesToSelected = function (features, options={}) {
        if (!features || !features.length) return false;

        this.getSelectedFeatures().push(...features);
        this.setViewport();
        this.setButtons();
        this.map.getSource(this.statics.constants.sources.SELECT).setData(turf.featureCollection(this.getSelectedFeatures()));
        this.map.getSource(this.statics.constants.sources.VERTEX).setData(turf.featureCollection(this.getSelectedFeatures()));
        
        this.Layers.refresh({ select: true });

        this.Features.setText(features);
        this.Features.updateFeatures(features);

        if (options.zoom) this.zoomToFeatures(features, { center: options.center });

        if (options.text) {
            this.Layers.addTextLayer({
                select: true,
                ids: options.text.ids,
                field: options.text.field || 'text',
                layout: options.text.layout || {
                    'text-transform': 'uppercase',
                    'text-size': 10,
                    'text-offset': [0, 0.5]
                }
            });
        }
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name addFeaturesToMesh
	 * @description Adds features to the mesh index and updates its data.
	 * @param {Array} features - An array of features to be added to the mesh.
	 * @returns {Array} The array of features that were added to the mesh.
	 */
    this.addFeaturesToMesh = function (features=[]) {
        if (!features.length) return false;
        this.updateMeshData(features);
        return features;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name addGamepad
	 * @description Adds a gamepad to the list of available gamepads and fires an event. Fires a custom event 'gamepad.add' with the gamepad object.
	 * @param {Object} gamepad - The gamepad object to be added.
	 * @returns {boolean} Returns false if the 'Gamepad' plugin is not available.
	 */
    this.addGamepad = function (gamepad) {
        this.gamepads[gamepad.index] = new _src_Gamepad_js__WEBPACK_IMPORTED_MODULE_17__["default"](gamepad);
        this.fire('gamepad.add', { gamepad: gamepad });
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name addTooltip
	 * @description Attaches a tooltip by calling setTooltip to a specified element within a parent element.
	 * @param {Element} parent - The parent element to which the tooltip will be attached.
	 * @param {Element} element - The element to which the tooltip will be applied.
	 * @param {Object} options - The options for customizing the tooltip.
	 * @param {Element} appendTo - The element to which the tooltip will be appended.
	 */
    this.addTooltip = function (parent, element, options, appendTo) {
        if (!this.setTooltip) return false;

        this.setTooltip(element, {
            parent: parent,
            appendTo: appendTo,
            options: options
        })
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name addPlugin
	 * @description Adds a plugin to the plugins object of the current instance.
	 * @param {Object} plugin - The plugin object to be added.
	 * @param {string} plugin.id - The unique identifier of the plugin.
	 * @throws {Error} If no Plugin ID is provided.
	 */
    this.addPlugin = function (plugin) {
        if (!plugin.id) throw new Error('No Plugin ID provided')
        var id = plugin.id;
        this.plugins[id] = plugin;
    }



    

	/**
	 * @description Removes the selection of features based on the provided feature ID. If no ID is provided, all selected features are deselected.
	 * @function
     * @memberOf module:geoflo
	 * @name removeSelection
	 * @param {string} id - The ID of the feature to be deselected.
	 * @returns {number} The number of features that were deselected.
	 */
    this.removeSelection = function (id, options={}) {
        this.removePopup();
        if (!this.hasSelection()) return this.Features.setText(), this.updateFeatures();
        var features = this.Utilities.clone(this.getSelectedFeatures());
        this.Features.addFeatures(features, true, id);
        this.getSelectedFeatures().splice(0, features.length);
        this.map.getSource(this.statics.constants.sources.SELECT).setData(turf.featureCollection([]));
        this.map.getSource(this.statics.constants.sources.VERTEX).setData(turf.featureCollection([]));
        this.Features.setText();
        this.updateFeatures(features);
        this.setButtons();
        if (options.extent) this.setViewport(), this.setExtent();
        if (options.removeText) this.Layers.removeTextLayer();
        return features.length;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name removeControls
	 * @description This function is responsible for removing controls.
	 * @params {none} No parameters needed.
	 */
    this.removeControls = function () {
        if (!this.controls || !this.controls.length) return false;
        this.controls.forEach(function (control) { control.disable(); });
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name removeGamepad
	 * @description Removes a gamepad from the list of connected gamepads and triggers the onDisconnect event. Fires a custom event 'gamepad.remove' with the gamepad object.
	 * @param {Object} gamepad - The gamepad object to be removed.
	 * @returns {boolean} Returns false if the gamepad is not found in the list.
	 */
    this.removeGamepad = function (gamepad) {
        if (!this.gamepads[gamepad.index]) return false;
        this.gamepads[gamepad.index].onDisconnect(gamepad);
        delete this.gamepads[gamepad.index]
        this.fire('gamepad.remove', { gamepad: gamepad });
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name removeFeatures
	 * @description Removes specified features from the map. If no layers are provided, all features are removed. If the layers parameter is not an array, the function returns false.
	 * @param {Array} layers - An array of layers to remove features from.
	 * @param {Object} options - Additional options for removing features.
	 */
    this.removeFeatures = function (layers, options) {
        if (!layers) return this.Features.deleteFeatures();
        if (!Array.isArray(layers)) return false;
        this.Features.removeFeatures(layers, true);
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name removeFeature
	 * @description Removes a feature from the Features collection and fires an event if edit mode is not enabled. Fires a custom event 'feature.delete' with the ID and feature object.
	 * @param {string} id - The ID of the feature to be removed.
	 * @param {boolean} edit - A flag indicating whether edit mode is enabled.
	 * @returns {boolean} - Returns true if the feature was successfully removed, otherwise false.
	 */
    this.removeFeature = function (id, edit) {
        var removed = id ? this.Features.removeFeatures(id, edit) : false;
        !edit ? this.fire('feature.delete', { id: id, feature: removed }) : false;
        return removed;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name removePopup
	 * @description Removes the popup element from the DOM.
	 * @return {boolean} Returns true if the popup was successfully removed, false otherwise.
	 */
    this.removePopup = function () {
        return this.popup && this.popup.remove ? this.popup.remove() : this.currentMode.popup && this.currentMode.popup.remove ? this.currentMode.popup.remove() : false;
    }






	/**
	 * @function
     * @memberOf module:geoflo
	 * @name updateMeshData
	 * @description This function updates the mesh data on the map by adding new features to the mesh index and updating the map source with the new data. If the mesh index is not available or the reset flag is set to true, the mesh index is reset before adding new features.
	 * @param {Array} features - An array of features to be added to the mesh index.
	 * @param {boolean} reset - A flag indicating whether to reset the mesh index before adding new features.
	 * @returns {Object} The updated feature collection that was set on the map source.
	 */
    this.updateMeshData = function (features=[], reset) {
        if (!this.meshIndex || reset) this.meshIndex = new _src_Mesh_js__WEBPACK_IMPORTED_MODULE_6__["default"]([]);
        this.meshIndex.addNewFeatures(features);

        var source = this.statics.constants.sources.MESH;
        var features = turf.featureCollection(this.meshIndex.getFeatures());

        this.map.getSource(source).setData(features);
        this.fire('mesh.update', { features: features });
        return features;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name updateSelectedProperties
	 * @description This function updates the selected properties of features based on the new properties provided while keeping specified properties.
	 * @param {Object} newProperties - The new properties to update the features with.
	 * @param {Array} propertiesToKeep - An array of property names to keep while updating the features.
	 */
    this.updateSelectedProperties = function (newProperties, propertiesToKeep) {
        this.getSelectedFeatures().forEach((feature) => {
            const savedId = feature.parent || feature.properties.parent || feature.id || feature.properties.id;
            const baseProperties = {};

            propertiesToKeep.forEach((propertyName) => {
                if (feature.properties[propertyName]) baseProperties[propertyName] = feature.properties[propertyName];
            });

            feature.properties = Object.assign(baseProperties, newProperties, { id: savedId });
        });
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name updateOrientation
	 * @description Updates the orientation of the user based on the provided options.
	 * @param {Object} options - An object containing the options for updating the orientation.
	 * @returns {string} The location of the user after updating the orientation.
	 */
    this.updateOrientation = function (options) {
        if (!this.Locate) return false;
        this.Locate.update(options);
        return this.Locate.locate;
    }

    /**
	 * @function
     * @memberOf module:geoflo
     * @name updateFeatures
     * @description Updates the features of a layer based on the provided features.
     * @param {Array} features - An array of features to update the layer with.
     * @returns {Array} The updated features of the layer.
     */
    this.updateFeatures = function (features) {
        return this.Features.updateFeatures(features);
    }

    

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name saveFeatures
	 * @description This function prepares the features of a layer for export in different formats such as KMZ, GPX, and GeoJSON. It styles the features, creates necessary metadata, and generates the export files.
	 * @param {Object} layer - The layer object containing the features to be exported.
	 * @returns {void}
	 */
    this.saveFeatures = function (layer) {
        const id = this.id;
        var fc, folderName;

        if (!layer) {
            if (this.hasSelection()) {
                folderName = 'Selected Features';
                fc = turf.featureCollection(this.getSelectedFeatures());
            } else {
                folderName = folderName = 'All Features';
                fc = turf.featureCollection(this.Features.getColdFeatures());
            }
        } else {
            if (!layer.id || !layer.name) return window.alert('Layer ID and Name are required!');
            folderName = layer.name + '-' + layer.id;
            fc = turf.featureCollection(this.Features.getFeaturesByLayer(layer));
        }

        if (!fc.features.length) return window.alert('No Features to Export!');

        var features = geoflo.Utilities.cloneDeep(fc.features);

		features = features.map(function (f) {
            f.style = {};
            f.style['stroke'] = f.properties.style && f.properties.style.primaryColor ? f.properties.style.primaryColor : this.options.colors.primaryColor;
            f.style['stroke-width'] = 3;
            f.style['fill'] = f.properties.style && f.properties.style.secondaryColor ? f.properties.style.secondaryColor : this.options.colors.secondaryColor;
            f.style['fill-opacity'] = 1;
			
            f.properties.id = f.id;
            f.properties.unit = f.geometry.unit;
            f.properties.units = f.geometry.units;

            delete f.properties.style;
            delete f.geometry.unit;
            delete f.geometry.units;

			return f;
		}, this);

        fc = turf.featureCollection(features);

        var d = new Date();
        var name = id + "_export - " + (d.getMonth() + 1) + "." + d.getDate() + "." + d.getFullYear() + "_" + d.getHours() + d.getMinutes();

        const extensions = ['kmz', 'gpx', 'geojson'];
        const zip = new window.JSZip();
        const description = {
			Id: this.id,
            Version: this.version,
			Features: fc.features.length
		}

        extensions.forEach(function (t) {
            const folder = zip.folder(folderName + ' ' + t.toUpperCase());

			switch (t) {
				case 'kmz':
                    var table = document.createElement('table');
                    var tableBody = document.createElement('tbody');
                    table.appendChild(tableBody);

					Object.entries(description).forEach(function (entry) {
						var h = entry[0];
						var d = entry[1];

                        var row = document.createElement('tr');
                        var header = document.createElement('th');
                        var data = document.createElement('td');

                        header.textContent = h + ': ';
                        data.textContent = d;

                        row.appendChild(header);
                        row.appendChild(data);

						tableBody.appendChild(row);
					});

					var kml = omnivore.toKML(fc, {
						name: 'id',
                        simplestyle: true,
						description: description.Id,
						documentName: folderName,
						documentDescription: table.innerHTML
					});

					var blob = new Blob([kml], { type: "application/vnd.google-earth.kml+xml" });
					folder.file(folderName.toLowerCase() + ".kml", blob);
					break;
				case 'gpx':
					features.forEach(function (f) {
						var title = f.id;
						var feature = turf.featureCollection([f]);
						var gpx = omnivore.toGPX(feature, {
							creator: description.Id,
							featureTitle: function (p) { return p.id; }
						})

						folder.file(folderName.toLowerCase() + '_' + title + ".gpx", gpx);
					})
					break;
				case 'geojson':
					var geojson = fc;
					var blob = new Blob([JSON.stringify(geojson)], { type: "application/geojson" });
					folder.file(folderName.toLowerCase() + ".geojson", blob);
					break;
			}
		})

        zip.generateAsync({ type: "blob" }).then(function (content) {
            var blob = new Blob([content], { type: "application/zip;charset=utf-8" });

            window.geoflo.fire('features.export', { features: features, blob: blob, date: d, name: name });

            var tempLink = document.createElement("a");
            tempLink.setAttribute('href', URL.createObjectURL(blob));
            tempLink.setAttribute('download', name + ".zip");
            tempLink.click();
            URL.revokeObjectURL(tempLink.href);
        });
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name loadFeatures
	 * @description This function creates an input element of type file, allows multiple file selection, and triggers a file selection event. It then processes the selected files by calling the Utilities.processFiles function.
	 * @params {Event} event - The event object triggered by file selection.
	 * @returns {void}
	 */
    this.loadFeatures = function () {
        const input = document.createElement('input');
        input.type = 'file';
        input.setAttribute('multiple', 'multiple');
        input.addEventListener('change', handleSelection, false);
        input.click();

        function handleSelection(event) {
            const files = [];

            for (let x = 0; x < event.target.files.length; x++) {
                files.push(event.target.files[x]);
            }

            geoflo.Utilities.processFiles(files, processFiles);
        }

        function processFiles (file, name, ext) {
            var features = [];
        
            if (ext === 'geojson' || ext === 'json') {
                features = JSON.parse(file);
            } else if (omnivore[ext]) {
                omnivore[ext].parse(file, null, { addData: function (feats) { features = feats; } });
            } else {
                return alert("File type not supported: " + ext);
            }

            if (features.features) features = features.features;
            if (!Array.isArray(features)) features = [features];

            features.forEach(function (feature) {
                feature.properties.import = true;
                feature.source = feature.source || feature.properties.source || geoflo.statics.constants.sources.COLD;
            })
            
            geoflo.fire('features.import', { features: features, file: file, ext: ext, name: name })
            geoflo.addFeatures(features);
        }
    }


	/**
	 * @function
     * @memberOf module:geoflo
	 * @name moveMapAlongLine
	 * @description This function animates the movement of the map along a specified line. The camera follows the route, ensuring synchronized movement.
	 * @param {Array} line - The line representing the route on the map.
	 * @returns {void}
	 */
    this.moveMapAlongLine = function (line) {
        if (!line) return;

        const animationDuration = 80000;
        const cameraAltitude = 4000;
        // get the overall distance of each route so we can interpolate along them
        const routeDistance = turf.lineDistance(line);
        const cameraRouteDistance = turf.lineDistance(line);

        let start;

        console.log(line, routeDistance, cameraRouteDistance)

        function frame(time) {
            if (!start) start = time;
            // phase determines how far through the animation we are
            const phase = (time - start) / animationDuration;

            // phase is normalized between 0 and 1
            // when the animation is finished, reset start to loop the animation
            if (phase > 1) {
                // wait 1.5 seconds before looping
                setTimeout(() => {
                    start = 0.0;
                }, 1500);
            }

            // use the phase to get a point that is the appropriate distance along the route
            // this approach syncs the camera and route positions ensuring they move
            // at roughly equal rates even if they don't contain the same number of points
            const alongRoute = turf.along( turf.lineString(line), routeDistance * phase ).geometry.coordinates;
            const alongCamera = turf.along( turf.lineString(line), cameraRouteDistance * phase ).geometry.coordinates;
            const camera = geoflo.map.getFreeCameraOptions();

            // set the position and altitude of the camera
            camera.position = mapboxgl.MercatorCoordinate.fromLngLat({ lng: alongCamera[0], lat: alongCamera[1] }, cameraAltitude );

            // tell the camera to look at a point along the route
            camera.lookAtPoint({
                lng: alongRoute[0],
                lat: alongRoute[1]
            });

            geoflo.map.setFreeCameraOptions(camera);

            window.requestAnimationFrame(frame);
        }

        window.requestAnimationFrame(frame);
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name refreshMeshData
	 * @description This function refreshes the mesh data by triggering a 'snapping.refresh' event with the current mesh features.
	 * @params {void} - No parameters needed for this function.
	 */
    this.refreshMeshData = function () {
        if (!this.meshIndex) return;
        if (this.mapMoving) return;
        //this.deleteMeshData();
        //this.addFeaturesToMesh(this.getDrawnFeatures())
        this.fire('snapping.refresh', { features: this.meshIndex.getFeatures() })
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name deleteMeshData
	 * @description Deletes the mesh data by updating it with an empty array and triggering a 'snapping.delete' event with the features from the mesh index.
	 * @params {Array} features - The features to update the mesh data with.
	 * @params {Boolean} triggerEvent - A flag to indicate whether to trigger the 'snapping.delete' event.
	 */
    this.deleteMeshData = function () {
        this.updateMeshData([], true);
        this.fire('snapping.delete', { features: this.meshIndex.getFeatures() })
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name deleteUserData
	 * @description This function allows the user to delete selected features or all features based on confirmation prompts. It updates the map data and resets various properties.
	 * @params {void} - No parameters required.
	 * @returns {void} - No return value.
	 */
    this.deleteUserData = function () {
        var id

        if (this.hasSingleSelection()) {
            if (window.confirm('Delete Selected Feature?')) {
                var feature = this.getSelectedFeatures()[0];
                id = feature.parent || feature.properties.parent || feature.id || feature.properties.id;
                this.removeSelection(id);
                this.Features.removeFeatures(id, true);
                this.meshIndex ? this.meshIndex.removeFeature(id) : false;
                this.fire('feature.delete', { features: this.Features.getColdFeatures(), id: id, feature: feature })
            } else {
                return;
            }
        } else {
            if (window.confirm('Delete All Features?')) {
                this.Features.deleteFeatures();
                this.fire('features.delete', { features: this.Features.getColdFeatures() })
            } else {
                return;
            }
        }
        
        this.hotFeature = null;
        this.snapFeature = null;
        this.lastClick = null;
        this.firstClick = null;
        this.drawStarted = null;

        this.map.getSource(this.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
        this.map.getSource(this.statics.constants.sources.HOT).setData(turf.featureCollection([]));
        this.map.getSource(this.statics.constants.sources.HOTTEXT).setData(turf.featureCollection([]));

        if (this.editMode) {
            this.editMode = false;
            this.setMode();
        }
    }

    this.doubleClickZoom = {
        enable(map) {
            setTimeout(() => {
                if (!map || !map.doubleClickZoom) return;
                map.doubleClickZoom.enable();
            }, 0);
        },
        disable(map) {
            setTimeout(() => {
                if (!map || !map.doubleClickZoom) return;
                map.doubleClickZoom.disable();
            }, 0);
        }
    };


    

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name hideSelectedFeatures
	 * @description This function hides the selected features on the map by moving them to a hidden features array and updating the map sources.
	 * @params {Array} hiddenFeatures - Array to store the hidden features.
	 * @params {Array} selectedFeatures - Array of selected features on the map.
	 * @returns {void}
	 */
    this.hideSelectedFeatures = function () {
        if (hiddenFeatures.length > 0) {
            this.getSelectedFeatures().push(...hiddenFeatures);
            hiddenFeatures.splice(0, hiddenFeatures.length);
        } else if (this.hasSelection()) {
            hiddenFeatures.push(...this.getSelectedFeatures().splice(0, this.getSelectedFeatures().length));
        }

        this.map.getSource(this.statics.constants.sources.SELECT).setData(turf.featureCollection(this.getSelectedFeatures()));
        this.map.getSource(this.statics.constants.sources.VERTEX).setData(turf.featureCollection(this.getSelectedFeatures()));
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name combineSelectedFeatures
	 * @description Combines selected features based on their geometry type.
	 * @params {void}
	 * @returns {void}
	 */
    this.combineSelectedFeatures = function () {
        if (this.mode === this.statics.constants.modes.SELECT) {
            if (this.hasSelection()) {
                var allFeaturesType = this.getCommonGeometryType();

                if (allFeaturesType === "Polygon") {
                    var polygons = [];

                    this.forEachSelectedFeature(function(polygon) {
                        polygons.push.apply(polygons, consumableArray(polygon.geometry.coordinates));
                    });

                    if (polygons.length > 0) {
                        this.Features.addFeatures([turf.polygon(polygons, this.getSelectedPropertyValues())]);
                        this.removeSelection();
                    }
                } else if (allFeaturesType === "LineString") {
                    var coords = geoflo.Utilities.combineSameTypeFeatures(this.getSelectedFeatures());

                    if (coords.length > 0) {
                        this.Features.addFeatures([turf.lineString(coords, this.getSelectedPropertyValues())]);
                        this.removeSelection();
                    }
                } else {
                    console.error("Only objects of the same type can be combined, " + "i.e. lines with lines and polygons with polygons");
                }
            }
        } else {
            console.error("Combine can only be executed in selection mode");
        }
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name moveSelectedFeatures
	 * @description This function checks if moving is enabled and if there are selected features of LineString type. If so, it offsets the selected LineString features by the specified distance in the provided direction.
	 * @param {number} direction - The direction in which to move the selected features (1 for forward, -1 for backward).
	 * @returns {boolean} Returns false if moving is not enabled or there are no selected LineString features.
	 */
    this.moveSelectedFeatures = function (direction) {
        if (!this.options.moving || !this.options.moving.enable) { return false }
        var distance = this.options.moving.distance;

        if (this.mode === this.statics.constants.modes.SELECT) {
            if (this.hasSelection()) {
                var allFeaturesType = this.getCommonGeometryType();

                if (allFeaturesType === "LineString") {
                    var newSelectedFeatures = [];
                    this.forEachSelectedFeature(function(feature) { newSelectedFeatures.push(turf.lineOffset(feature, distance * direction)); });
                    this.setSelectedFeatures(newSelectedFeatures);
                }
            }
        }
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name moveFeature
	 * @description This function calculates the new coordinates of a feature based on the direction and distance provided. NOT WORKING YET.
	 * @param {Object} feature - The feature object to be moved.
	 * @param {number} direction - The direction in which the feature should be moved (1 for forward, -1 for backward).
	 * @returns {Array} An array of new coordinates for the feature after moving.
	 */
    this.moveFeature = function (feature, direction) {
        return;
        if (!this.options.moving || !this.options.moving.enable) return false
        
        var distance = this.options.moving.distance;
        var result = [];
        var lastDestinationPoint = null;
        var coordinates = feature.geometry.coordinates;

        for (var index = 0; index < coordinates.length; index++) {
            var moveBearing = 0;
            var startPoint = null;
            var middlePoint = coordinates[index];

            if (index === 0) {
                var endPoint = coordinates[index + 1];
                var secondBearing = turf.bearing(middlePoint, endPoint);
                moveBearing = secondBearing - 90;
                
                if (moveBearing < -180) {
                    moveBearing += 180;
                }
            } else if (index === coordinates.length - 1) {
                startPoint = coordinates[index - 1];
                var firstBearing = turf.bearing(middlePoint, startPoint);
                moveBearing = firstBearing - 90;

                if (moveBearing < -180) {
                    moveBearing += 180;
                }
            } else {
                startPoint = coordinates[index - 1];
                var _endPoint = coordinates[index + 1];

                var _firstBearing = turf.bearing(middlePoint, startPoint);
                var _secondBearing = turf.bearing(middlePoint, _endPoint);

                var angle = 0;

                if (_firstBearing < 0 && _secondBearing < 0 || _firstBearing > 0 && _secondBearing > 0) {
                    angle = Math.abs(Math.abs(_firstBearing) - Math.abs(_secondBearing));
                    moveBearing = _firstBearing < 0 ? _firstBearing - angle / 2 : _firstBearing + angle / 2;
                } else {
                    angle = Math.abs(Math.abs(_firstBearing) + Math.abs(_secondBearing));
                    moveBearing = _firstBearing < 0 ? _firstBearing - angle / 2 : (angle / 2 - _firstBearing) * -1;
                }
            }

            var destinationPoint = turf.destination(middlePoint, direction * distance, moveBearing);

            if (lastDestinationPoint && startPoint) {
                var crossingLine = turf.lineString([lastDestinationPoint.geometry.coordinates, destinationPoint.geometry.coordinates]);
                var intersectFc = turf.lineIntersect(turf.lineString([startPoint, middlePoint]), crossingLine);

                if (intersectFc.features.length > 0) {
                    destinationPoint = turf.destination(middlePoint, direction * -distance, moveBearing);
                }
            }

            result.push(destinationPoint.geometry.coordinates);
            lastDestinationPoint = destinationPoint;
        }

        return result;
    }

    

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name forEachSelectedFeature
	 * @description Iterates over each selected feature and applies a handler function to it.
	 * @param {Function} handler - The function to be applied to each selected feature.
	 * @returns {void}
	 */
    this.forEachSelectedFeature = function (handler) {
        this.getSelectedFeatures().forEach(handler);
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name zoomToFeatures
	 * @description This function zooms to the provided features on the map. If no features are provided, it zooms to the selected features, cold features, or the map extent if no other features are available.
	 * @param {Array} features - The features to zoom to on the map.
	 * @param {Object} options - Additional options for zooming (default: {}).
	 * @returns {boolean} Returns false if no features are available to zoom to.
	 */
    this.zoomToFeatures = function (features, options={}) {
        features = features || (this.hasSelection() ? this.getSelectedFeatures() : this.getDrawnFeatures());
        this.setExtent(features, false, options);
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name createPolygon
	 * @description Creates a polygon from selected LineString features and adds it to the map.
	 * @params {Array} selectedFeatures - An array of selected features to be combined into a polygon.
	 * @params {Object} selectedPropertyValues - Property values of the selected features.
	 * @returns {void}
	 */
    this.createPolygon = function () {
        if (this.mode === this.statics.constants.modes.SELECT) {
            if (this.hasSelection()) {
                var allFeaturesType = this.getCommonGeometryType();

                if (allFeaturesType === "LineString") {
                    var coords = geoflo.Utilities.combineSameTypeFeatures(this.getSelectedFeatures());

                    if (coords.length > 0) {
                        if (!geoflo.Utilities.isPointEqual(coords[0], coords[coords.length - 1])) {
                            coords.push(coords[0]);
                        }

                        this.addFeaturesToSelected([turf.polygon([coords], this.getSelectedPropertyValues())]);
                        this.removeSelection();
                    }
                } else {
                    console.error("Only objects of type LineString can be combined into a polygon");
                }
            }
        } else {
            console.error("Create polygon can only be executed in selection mode");
        }
    }


    /**
     * @function
     * @name onLoad
     * @memberOf module:geoflo
     * @description Handles the loading of a MapboxGL map object, setting up the container and event listeners, and configuring map options.
     *
     * @param {Object} event - The event object triggered on load.
     * @param {Object} event.target - The target object that triggered the event, expected to be a MapboxGL map instance.
     * @returns {Promise} A promise that resolves when the map has finished loading.
     */
    this.onLoad = function (event) {
        if (!event.target || !event.target.getContainer) throw new Error('MapboxGL map object is required!');

        this.container = event.target._container;
        this.viewport ? this.container.insertBefore(this.viewport, this.container.firstChild) : false;

        event.target.off('style.load', this.onStyleLoad.bind(this));
        event.target.on('style.load', this.onStyleLoad.bind(this));

        if (this.options.map.maxPitch) event.target.setMaxPitch(this.options.map.maxPitch);
        if (this.options.map.maxZoom) event.target.setMaxZoom(this.options.map.maxZoom);
        if (this.options.map.minPitch) event.target.setMinPitch(this.options.map.minPitch);
        if (this.options.map.minZoom) event.target.setMinZoom(this.options.map.minZoom);

        return this.load(event.target);
    }

    /**
     * @function
     * @name onStyleLoad
     * @memberOf module:geoflo
     * @description Handles the style load event and triggers a redraw after a delay.
     *
     * @param {Event} event - The event object associated with the style load.
     * @returns {void} This function does not return a value.
     */
    this.onStyleLoad = function (event) {
        setTimeout(function() { geoflo.redraw(); }, 500)
    }

    /**
     * @function
     * @name onMapMove
     * @memberOf module:geoflo
     * @description Handles the event triggered when the map is moved.
     *
     * @param {Object} event - The event object containing information about the map movement.
     * @returns {void} This function does not return a value.
     */
    this.onMapMove = function (event) {

    }

    this.initialize();
};

const geoflo = new GeoFlo();

_src_Utilities_js__WEBPACK_IMPORTED_MODULE_2__["default"].prototype.geoflo = geoflo;
_src_Features_js__WEBPACK_IMPORTED_MODULE_5__["default"].prototype.geoflo = geoflo;
_src_Layers_js__WEBPACK_IMPORTED_MODULE_4__["default"].prototype.geoflo = geoflo;
_src_Control_js__WEBPACK_IMPORTED_MODULE_16__["default"].prototype.geoflo = geoflo;
_src_Locate_js__WEBPACK_IMPORTED_MODULE_10__["default"].prototype.geoflo = geoflo;
_src_Mesh_js__WEBPACK_IMPORTED_MODULE_6__["default"].prototype.geoflo = geoflo;
_src_Draw_js__WEBPACK_IMPORTED_MODULE_9__["default"].prototype.geoflo = geoflo;
_src_Select_js__WEBPACK_IMPORTED_MODULE_8__["default"].prototype.geoflo = geoflo;
_src_Gamepad_js__WEBPACK_IMPORTED_MODULE_17__["default"].prototype.geoflo = geoflo;
_src_Styles_js__WEBPACK_IMPORTED_MODULE_3__["default"].prototype.geoflo = geoflo;
_src_Snapping_js__WEBPACK_IMPORTED_MODULE_11__["default"].prototype.geoflo = geoflo;
_src_Pinning_js__WEBPACK_IMPORTED_MODULE_12__["default"].prototype.geoflo = geoflo;
_src_Routing_js__WEBPACK_IMPORTED_MODULE_13__["default"].prototype.geoflo = geoflo;
_src_Exploring_js__WEBPACK_IMPORTED_MODULE_14__["default"].prototype.geoflo = geoflo;
_src_Painting_js__WEBPACK_IMPORTED_MODULE_15__["default"].prototype.geoflo = geoflo;


async function loadScript(url) {
    try {
        const response = await fetch(url);

        if (response.ok) {
            const scriptText = await response.text();
            const script = document.createElement('script');
            script.textContent = scriptText;
            document.head.appendChild(script);
        } else {
            console.error(`Failed to load script from ${url}. Status: ${response.status}`);
        }
    } catch (error) {
        console.error(`Error loading script: ${error.message}`);
    }
}

async function loadStylesheet(url) {
    try {
        const response = await fetch(url);

        if (response.ok) {
            const scriptText = await response.text();
            const script = document.createElement('style');
            script.textContent = scriptText;
            document.head.prepend(script);
        } else {
            console.error(`Failed to load script from ${url}. Status: ${response.status}`);
        }
    } catch (error) {
        console.error(`Error loading stylesheet: ${error.message}`);
    }
}


function isMobile() {
    const e = /(iphone|ipod|ipad|android|iemobile|blackberry|bada)/.test(window.navigator.userAgent.toLowerCase());
    return e || (navigator.userAgent.includes("Mac") && "ontouchend"in document)
}

async function ready (id) {
    var count = 0;

    return new Promise(async function (resolve, reject) {
        var ready = setInterval(function() {
            var element = document.getElementById(id);
            
            if (count === 10000) {
                clearInterval(ready);
                return reject(false);
            }

            if (!element) return count++;

            clearInterval(ready);
            return resolve(element);
        }, 1);
    })
}

async function loaded (geoflo) {
    return new Promise(async function (resolve, reject) {
        var ready = setInterval(function() {
            if (!geoflo.isLoaded) return false;
            clearInterval(ready);
            return resolve(geoflo.isLoaded);
        }, 1);
    })
}

function buildMapbox () {
    const DOM = {
        create: function create (tagName, className, container) {
            const el = window.document.createElement(tagName);
            if (className !== undefined) el.className = className;
            if (container) container.appendChild(el);
            return el;
        }
    }

    // Override to add a Top-Center
    mapboxgl.Map.prototype._setupContainer = function () {
        const container = this._container;
        container.classList.add('mapboxgl-map');

        const missingCSSCanary = this._missingCSSCanary = DOM.create('div', 'mapboxgl-canary', container);
        missingCSSCanary.style.visibility = 'hidden';
        this._detectMissingCSS();

        const canvasContainer = this._canvasContainer = DOM.create('div', 'mapboxgl-canvas-container', container);
        if (this._interactive) {
            canvasContainer.classList.add('mapboxgl-interactive');
        }

        this._canvas = DOM.create('canvas', 'mapboxgl-canvas', canvasContainer);
        // $FlowFixMe[method-unbinding]
        this._canvas.addEventListener('webglcontextlost', this._contextLost, false);
        // $FlowFixMe[method-unbinding]
        this._canvas.addEventListener('webglcontextrestored', this._contextRestored, false);
        this._canvas.setAttribute('tabindex', '0');
        this._canvas.setAttribute('aria-label', this._getUIString('Map.Title'));
        this._canvas.setAttribute('role', 'region');

        this._updateContainerDimensions();
        this._resizeCanvas(this._containerWidth, this._containerHeight);

        const controlContainer = this._controlContainer = DOM.create('div', 'mapboxgl-control-container', container);
        const positions = this._controlPositions = {};

        ['top-left', 'top-right', 'top-center', 'bottom-left', 'bottom-right'].forEach((positionName) => {
            positions[positionName] = DOM.create('div', `mapboxgl-ctrl-${positionName}`, controlContainer);
        });

        // $FlowFixMe[method-unbinding]
        this._container.addEventListener('scroll', this._onMapScroll, false);
    }
}


})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,