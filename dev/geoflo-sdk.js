/*!
 * /*!
 *  * GeoFlo SDK - Version 1.0.10
 *  * Generated on: 2025-01-27T21:16:08.944Z
 *  *
 *  * DISCLAIMER:
 *  * This software is the property of Solutegrate/GeoFlo. Unauthorized copying,
 *  * distribution, modification, or any use outside of licensed terms is strictly prohibited.
 *  * Violators may be subject to legal actions.
 *  * /
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Control.js":
/*!************************!*\
  !*** ./src/Control.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Control
 * @description This module is responsible for creating and managing the control buttons in the Geoflo application.
 * @param {Array} controls - An array of control objects to be added to the map.
 * @param {Object} options - An object containing options for the control buttons.
 * @returns {Object} Returns the Control object.
 */

const Control = function (controls, options={}) {
    const geoflo = this.geoflo;

    this.controls = controls;
    this.options = options;

    var rgba = function (hex, alpha) {
        hex = hex.trim();


        if (hex.includes('rgba')) {
            hex = this.hex(hex);
        } else {
            if (!hex || [4, 7].indexOf(hex.length) === -1) { return false }

            hex = hex.substr(1);

            if (hex.length === 3) {
                hex = hex.split('').map(function (el) { return el + el + ''; }).join('');
            }
        }

        var r = parseInt(hex.slice(0, 2), 16),
            g = parseInt(hex.slice(2, 4), 16),
            b = parseInt(hex.slice(4, 6), 16);
        
        return alpha !== undefined ? "rgba(" + r + " " + g + " " + b + " / " + alpha + "%)" : "rgb(" + r + " " + g + " " + b + ")";
    }

    var hex = function (rgba) {
        var a,
            rgb = rgba.replace(/\s/g, '').match(/^rgba?\((\d+),(\d+),(\d+),?([^,\s)]+)?/i),
            alpha = (rgb && rgb[4] || "").trim(),
            hex = rgb ? (rgb[1] | 1 << 8).toString(16).slice(1) + (rgb[2] | 1 << 8).toString(16).slice(1) + (rgb[3] | 1 << 8).toString(16).slice(1) : rgba;

        if (alpha !== "") {
            a = alpha;
        } else {
            a = 1;
        }

        a = ((a * 255) | 1 << 8).toString(16).slice(1)
        hex = hex + a;
        return hex;
    }



    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name enable
     * @description Enables the control buttons.
     * @param {Object} control - The control object to enable.
     * @returns {Object} Returns the control object.
     */
    this.enable = function (control) {
        if (!control) return null;
        this.position = control.position;
        geoflo.map.addControl(this, control.position);
    }

    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name disable
     * @description Disables the control buttons.
     * @returns {Object} Returns the control object.
     */
    this.disable = function () {
        geoflo.map.removeControl(this);
    }



    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name onAdd
     * @description Adds the control buttons to the map.
     * @param {Object} map - The map object to add the control buttons to.
     * @returns {Object} Returns the control object.
     */
    this.onAdd = function(map) {
        if (!this.options) return false;
        if (this.options.attribution) return this.setAttribution(map);
        this.setTheme(options.colors || geoflo.options.colors);
        geoflo.fire('control.add', { control: this, element: this.element });
        return this.element;
    }

    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name onRemove
     * @description Removes the control buttons from the map.
     * @returns {Object} Returns the control object.
     */
    this.onRemove = function() {
        geoflo.buttons.removeButtons();
        geoflo.fire('control.remove', { element: this.element });
        geoflo.disable();
    }



    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name setAttribution
     * @description Sets the attribution for the control buttons.
     * @returns {Object} Returns the control object.
     */
    this.setAttribution = function () {
        var attr = Attr(geoflo, this.control, options);
        Object.assign(this, attr)

        this.setTheme(options.colors || geoflo.options.colors);
        geoflo.fire('control.add', { control: this, element: this.element });
        return this.element;
    }

    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name setMode
     * @description Sets the mode for the control buttons.
     * @param {String} mode - The mode to set the control buttons to.
     * @returns {Object} Returns the control object.
     */
    this.setMode = function (mode) {
        geoflo.setActiveButton(!mode ? 'select' : mode === 'draw' ? mode : mode)
    }

    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name setTheme
     * @description Sets the theme for the control buttons.
     * @param {Object} colors - The colors to set the theme to.
     * @returns {Object} Returns the control object.
     */
    this.setTheme = function(colors) {
        if (!colors) { return console.error('Control colors not provided!') };

        colors.primaryColor ? document.documentElement.style.setProperty('--' + geoflo.id + '-primary-color', rgba(colors.primaryColor)) : false;
        colors.primaryBackground ? document.documentElement.style.setProperty('--' + geoflo.id + '-primary-background', rgba(colors.primaryBackground)) : false;
        colors.primaryText ? document.documentElement.style.setProperty('--' + geoflo.id + '-primary-text', rgba(colors.primaryText)) : false;
        colors.primaryBorder ? document.documentElement.style.setProperty('--' + geoflo.id + '-primary-border', rgba(colors.primaryBorder)) : false;

        colors.secondaryColor ? document.documentElement.style.setProperty('--' + geoflo.id + '-secondary-color', rgba(colors.secondaryColor)) : false;
        colors.secondaryBackground ? document.documentElement.style.setProperty('--' + geoflo.id + '-secondary-background', rgba(colors.secondaryBackground)) : false;
        colors.secondaryText ? document.documentElement.style.setProperty('--' + geoflo.id + '-secondary-text', rgba(colors.secondaryText)) : false;
        colors.secondaryBorder ? document.documentElement.style.setProperty('--' + geoflo.id + '-secondary-border', rgba(colors.secondaryBorder)) : false;

        geoflo.fire('theme.change', { colors: colors });
        return this.getTheme();
    }

    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name setControl
     * @description Sets the control buttons.
     * @param {Array} controls - The control buttons to set.
     * @returns {Object} Returns the control object.
     */
    this.setControl = function (controls) {
        if (!controls) return false;

        var buttons;

        this.element = document.createElement('div');
        this.element.className = geoflo.id + '-control-wrap';

        this.control = document.createElement('div');
        this.control.className = geoflo.statics.constants.classes.PREDEFINED_CONTROL_BASE + ' ' + geoflo.statics.constants.classes.PREDEFINED_CONTROL_GROUP;

        this.element.appendChild(this.control);

        if (Array.isArray(controls)) {
            buttons = Buttons(this.control, controls);
            Object.assign(this, buttons);
        }
        
        this.enable(buttons);
    }


    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name getTheme
     * @description Gets the theme for the control buttons.
     * @returns {Object} Returns the theme for the control buttons.
     */
    this.getTheme = function() {
        return geoflo.options.colors;
    }

    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name getButtons
     * @description Gets the control buttons.
     * @returns {Object} Returns the control buttons.
     */
    this.getButtons = function () {
        return this._buttons;
    }

    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name getControl
     * @description Gets the control buttons.
     * @param {String} id - The id of the control button to get.
     * @returns {Object} Returns the control button.
     */
    this.getControl = function (id) {
        var nodes = this.control.childNodes;
        if (!nodes.length) return;

        var control;

        if (id) nodes.forEach(function(n) { if (n.classList.contains(id)) control = n });
        return control;
    }


    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name showControl
     * @description Shows the control buttons.
     * @param {String} id - The id of the control button to show.
     * @returns {Object} Returns the control button.
     */
    this.showControl = function (id) {
        var control = this.getControl(id);
        if (!control) return false;
        
        control.style.display = this.position.includes('center') ?  'flex' : 'block';
        return control;
    }

    /**
	 * @function
     * @memberof module:geoflo.Control
	 * @name hideControl
     * @description Hides the control buttons.
     * @param {String} id - The id of the control button to hide.
     * @returns {Object} Returns the control button.
     */
    this.hideControl = function (id) {
        var control = this.getControl(id);
        if (!control) return false;

        control.style.display = 'none';
        return control;
    }


    this.setControl(controls);

    function Buttons (element, controls) {
        if (!controls || !element) return false;
    
        var classTypes = ['mode', 'feature', 'mouse'];
        var buttonElements = {};
        var buttonOptions = {};
        var activeButton = null;
        var currentControl;
        var position;
        
    
        var currentMapClasses = {
            mode: null,
            feature: null,
            mouse: null
        };
    
        var nextMapClasses = {
            mode: null,
            feature: null,
            mouse: null
        };
    
    
    
        const mouseleave = function (event) {
            if (!geoflo.currentMode) return false;
            geoflo.currentMode.handleOffMap ? geoflo.currentMode.handleOffMap(event) : false;
        }
    
        const mouseover = function (event) {
            if (!geoflo.currentMode) return false;
            geoflo.currentMode.handleOnMap ? geoflo.currentMode.handleOnMap(event) : false;
        }
    
        controls.forEach(function (control) {
            if (!getControlOptions(control)) control.show = false;
            setPosition(control);
            createButtons(element, control);
        })
    
        return {
            setActiveButton: setActiveButton,
            queueMapClasses: queueMapClasses,
            updateMapClasses: updateMapClasses,
            removeButtons: removeButtons,
            getButtonOptions: getButtonOptions,
            getButtonElements: getButtonElements,
            position: position
        };
        
    
        function queueMapClasses(options) {
            nextMapClasses = geoflo.Utilities.extend(nextMapClasses, options);
        }
    
        function updateMapClasses() {
            if (!geoflo.container)
                return;
    
            var classesToRemove = [];
            var classesToAdd = [];
    
            classTypes.forEach(function(type) {
                if (nextMapClasses[type] === currentMapClasses[type])
                    return;
    
                classesToRemove.push(type + '-' + currentMapClasses[type]);
                if (nextMapClasses[type] !== null) {
                    classesToAdd.push(type + '-' + nextMapClasses[type]);
                }
            });
    
            if (classesToRemove.length > 0) {
                var _geoflo$container$classL;
    
                (_geoflo$container$classL = geoflo.container.classList).remove.apply(_geoflo$container$classL, classesToRemove);
            }
    
            if (classesToAdd.length > 0) {
                var _geoflo$container$classL2;
    
                (_geoflo$container$classL2 = geoflo.container.classList).add.apply(_geoflo$container$classL2, classesToAdd);
            }
    
            currentMapClasses = geoflo.Utilities.extend(currentMapClasses, nextMapClasses);
        }
    
    
    
        function createTitle(options) {
            return '' + options.title + (options.key ? ' (' + options.key + ')' : "");
        }
    
        function createButtons (element, control) {
            var buttons = document.createElement('div');
            var group = (control.group ? control.group.toUpperCase() : control.attribution ? 'ATTR' : 'NONE') + '_GROUP';
            
            element.appendChild(buttons);
    
            buttons.className = '' + geoflo.statics.constants.classes[group] + ' ' + control.type;
            buttons.style.display = control.show ? position.includes('center') ?  'flex' : 'block' : 'none';
    
            control.show && control.divider ? element.appendChild(createDivider()) : false;
    
            buttons.addEventListener('mouseover', mouseover);
            buttons.addEventListener('mouseleave', mouseleave);
    
            addButtons(control, buttons);
    
            return buttons;
        }
    
        function createBaseButton(id, options) {
            if (!currentControl || !currentControl.buttons[id]) return false;
    
            var position = options.position;
            var button = options.button || document.createElement('button');
    
            options.key = geoflo.options.keys && geoflo.options.keys[id] ? geoflo.options.keys[id] : options.key;
    
            if (options.title) { button.setAttribute('title', createTitle(options)); }
            options.container.appendChild(button);
    
            options["id"] = id;
            options["button"] = button;
    
            options.add = function (opts={}) {
                this.button.style.display = 'flex';
                this.onAdd ? this.onAdd(opts) : this;
            }
    
            options.remove = function (opts={}) {
                this.button.style.display = 'none';
                this.onRemove ? this.onRemove(opts) : this;
            }
    
            options.activate = function () {
                this.button.classList.remove(options.inactiveClass);
                this.button.classList.add(options.activeClass);
                this.button.classList.add(geoflo.statics.constants.classes.ACTIVE_BUTTON);
            }
    
            options.deactivate = function () {
                button.classList.remove(options.activeClass);
                button.classList.remove(geoflo.statics.constants.classes.ACTIVE_BUTTON);
                button.classList.add(options.inactiveClass);
            }
    
            options.dontShow ? button.style.display = 'none' : false;
    
            buttonElements[id] = button;
            buttonOptions[id] = options;
    
            if (position) {
                position = position.includes('right') ? 'left' :
                position.includes('left') ? 'right' :
                position.includes('bottom') ? 'top' :
                position.includes('top') ? 'bottom' :
                'absolute';
            }
    
            options.container.tooltipPosition = position;
            geoflo.addTooltip(options.container, button, createTitle(options));
            return button;
        }
    
        function createControlButton(id) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    
            var button = createBaseButton(id, options);
            if (!button) return false;
    
            button.className = geoflo.statics.constants.classes.CONTROL_BUTTON + ' ' + options.className;
    
            button.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
    
                if (e.target === activeButton) {
                    deactivateButtons();
                    options.onDeactivate ? options.onDeactivate(options) : false;
                } else if (options.onActivate(options)) {
                    setActiveButton(id);
                }
            }, true);
    
            return button;
        }
    
        function createOptionButton(id) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    
            var button = createBaseButton(id, options);
            if (!button) return false;
    
            button.className = '' + geoflo.statics.constants.classes.CONTROL_BUTTON;
    
            if (geoflo.options[options.name] && geoflo.options[options.name].enable) {
                button.classList.add(options.activeClass);
                button.classList.add(geoflo.statics.constants.classes.ACTIVE_BUTTON);
            } else {
                button.classList.add(options.inactiveClass);
            }
    
            button.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                if (!geoflo.options[options.name]) { geoflo.options[options.name] = {}; }
    
                if (geoflo.options[options.name].enable) {
                    if (options.onDeactivate) options.onDeactivate(options);
                } else {
                    options.onActivate(options);
                }
            }, true);
    
            return button;
        }
    
        function createActionButton(id) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    
            var button = createBaseButton(id, options);
            if (!button) return false;
    
            button.className = geoflo.statics.constants.classes.ACTION_BUTTON + ' ' + options.className;
    
            if (id === 'locate' && geoflo.locate) if (geoflo.locate.control) geoflo.locate.control._container.remove();
    
            button.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                options.onActivate(options);
            }, true);
    
            return button;
        }
    
        function createDivider() {
            var divider = document.createElement('div');
            divider.className = '' + geoflo.statics.constants.classes.DIVIDER;
            return divider;
        }
    
    
        function setPosition (control) {
            if (!position) {
                if (!control.position) throw new Error('The first control needs to have a position')
                position = control.position;
            }
        }
    
    
        function deactivateButtons() {
            if (!activeButton) return;
            activeButton.classList.remove(geoflo.statics.constants.classes.ACTIVE_BUTTON);
            activeButton = null;
        }
    
        function setActiveButton(id) {
            deactivateButtons();
    
            var button = !id && geoflo.editMode ? buttonElements['edit'] : !id ? buttonElements['select'] : id === 'edit' ? buttonElements['select'] : buttonElements[id];
            if (!button) return;
    
            if (button && id !== 'trash') {
                if (button.title.includes('Draw ')) {
                    if (button.title.includes(geoflo.currentMode.type)) {
                        button.classList.add(geoflo.statics.constants.classes.ACTIVE_BUTTON);
                        activeButton = button;
                    }
                } else {
                    button.classList.add(geoflo.statics.constants.classes.ACTIVE_BUTTON);
                }
            }
        }
    
    
        function addButtons(control, buttons) {
            currentControl = control;
    
            if (control.type === 'modes') {
                createControlButton("select", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_SELECT,
                    key: "s",
                    title: 'Select Features',
                    onAdd: function () {
                        if ((geoflo.editMode || geoflo.drawMode)) {
                            geoflo.getButtons('edit').remove();
                            geoflo.getButtons('save').add();
                        } else if (geoflo.hasSelection()) {
                            geoflo.getButtons('save').remove();
                            geoflo.getButtons('edit').add();
                        } else {
                            geoflo.getButtons('save').remove();
                            geoflo.getButtons('edit').remove();
    
                            geoflo.getButtons('undo').remove();
                            geoflo.getButtons('cancel').remove();
                            geoflo.getButtons('redo').remove();
    
                            geoflo.getButtons('import').add();
                            geoflo.getButtons('export').add();
                            geoflo.getButtons('clear').add();
                        }
                    },
                    onActivate: function onActivate() {
                        geoflo.noSelect = false;
                        geoflo.setMode();
                        return true;
                    },
                    onDeactivate: function onDeactivate() {
                        geoflo.noSelect = true;
                    }
                });
    
                createControlButton("edit", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_EDIT,
                    key: "Enter",
                    title: 'Edit Feature',
                    dontShow: true,
                    onAdd: function () {
                        geoflo.getButtons('select').remove();
                        this.button.classList.remove(geoflo.statics.constants.classes.ACTIVE_BUTTON);
                        this.button.style.display = 'flex';
                        this.button.style['background-color'] = geoflo.options.colors.secondaryBackground;
                    },
                    onActivate: function onActivate() {
                        geoflo.editFeature();
                        geoflo.getButtons('save').add();
                    },
                    onDeactivate: function onDeactivate() {
                        geoflo.currentMode.deactivate();
                    },
                    onRemove: function (e) {
                        geoflo.getButtons('save') ? false : createSelect(e);
                    }
                });
    
                createControlButton("save", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_FINSIH,
                    key: "Enter",
                    title: 'Save Edit',
                    dontShow: true,
                    onAdd: function (e) {
                        geoflo.getButtons('select').remove();
                        geoflo.getButtons('edit').remove();
    
                        geoflo.getButtons('import').remove();
                        geoflo.getButtons('export').remove();
                        geoflo.getButtons('clear').remove();
    
                        geoflo.getButtons('undo').add();
                        geoflo.getButtons('cancel').add();
                        geoflo.getButtons('redo').add();
    
                        this.button.style['background-color'] = geoflo.options.colors.secondaryColor;
                    },
                    onActivate: function onActivate(e) {
                        geoflo.currentMode.handleClick({ finish: true })
                    }
                });
            } else if (control.type === 'options') {
                createActionButton("import", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_IMPORT,
                    key: "u",
                    title: 'Import Features',
                    onActivate: function onActivate() {
                        return geoflo.loadFeatures();
                    }
                });
        
                createActionButton("export", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_EXPORT,
                    key: "d",
                    title: 'Export Features',
                    onActivate: function onActivate() {
                        return geoflo.saveFeatures();
                    }
                });
    
                createActionButton("clear", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_CLEAR,
                    key: "Delete",
                    title: 'Delete Selected or All Features',
                    onActivate: function onActivate() {
                        geoflo.deleteMeshData();
                        geoflo.deleteUserData();
                        geoflo.getButtons('select').add();
                        return true;
                    }
                });
    
                createActionButton("undo", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_UNDO,
                    key: "u",
                    title: 'Undo Edit',
                    dontShow: true,
                    onActivate: function onActivate() {
                        return geoflo.currentMode.handleUndo()
                    }
                });
        
                createActionButton("redo", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_REDO,
                    key: "r",
                    title: 'Redo Edit',
                    dontShow: true,
                    onActivate: function onActivate() {
                        return geoflo.currentMode.handleRedo()
                    }
                });
    
                createActionButton("cancel", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_CANCEL,
                    key: "Escape",
                    title: 'Cancel Edit',
                    dontShow: true,
                    onActivate: function onActivate() {
                        return geoflo.cancelEdit();
                    }
                });
            } else if (control.type === 'actions') {
                createOptionButton("snapping", {
                    container: buttons,
                    name: "snapping",
                    title: 'Enable/Disable Snapping',
                    activeClass: geoflo.id + '-snapping-enabled',
                    inactiveClass: geoflo.id + '-snapping-disabled',
                    onActivate: function onActivate() {
                        return geoflo.activateSnapping();
                    },
                    onDeactivate: function onDeactivate() {
                        return geoflo.deactivateSnapping();
                    }
                });
        
                createOptionButton("pinning", {
                    container: buttons,
                    name: "pinning",
                    title: 'Enable/Disable Pinning',
                    activeClass: geoflo.id + '-pinning-enabled',
                    inactiveClass: geoflo.id + '-pinning-disabled',
                    onActivate: function onActivate() {
                        return geoflo.activatePinning();
                    },
                    onDeactivate: function onDeactivate() {
                        return geoflo.deactivatePinning();
                    }
                });
        
                createOptionButton("routing", {
                    container: buttons,
                    name: "routing",
                    title: 'Enable/Disable Routing',
                    activeClass: geoflo.id + '-routing-enabled',
                    inactiveClass: geoflo.id + '-routing-disabled',
                    onActivate: function onActivate() {
                        return geoflo.activateRouting();
                    },
                    onDeactivate: function onDeactivate() {
                        return geoflo.deactivateRouting();
                    }
                });
    
                createOptionButton("exploring", {
                    container: buttons,
                    name: "exploring",
                    title: `Enable/Disable Exploring`,
                    activeClass: geoflo.id + '-exploring-enabled',
                    inactiveClass: geoflo.id + '-exploring-disabled',
                    onActivate: function onActivate() {
                        return geoflo.activateExploring();
                    },
                    onDeactivate: function onDeactivate() {
                        return geoflo.deactivateExploring();
                    }
                });
        
                createOptionButton("painting", {
                    container: buttons,
                    name: "painting",
                    title: 'Enable/Disable Painting',
                    activeClass: geoflo.id + '-painting-enabled',
                    inactiveClass: geoflo.id + '-painting-disabled',
                    onActivate: function onActivate() {
                        return geoflo.activatePainting();
                    },
                    onDeactivate: function onDeactivate() {
                        return geoflo.deactivatePainting();
                    }
                });
            } else if (control.type === 'types') {
                createControlButton("polyline", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_LINE,
                    key: "l",
                    title: 'Draw Polyline',
                    onActivate: function onActivate() {
                        return geoflo.setMode({
                            mode: geoflo.statics.constants.modes.DRAW,
                            type: "Polyline"
                        });
                    },
                    onDeactivate: function onDeactivate() {
                        geoflo.currentMode.deactivate();
                        geoflo.setMode();
                    }
                });
        
                createControlButton("polygon", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_POLYGON,
                    key: "p",
                    title: 'Draw Polygon',
                    onActivate: function onActivate() {
                        return geoflo.setMode({
                            mode: geoflo.statics.constants.modes.DRAW,
                            type: "Polygon"
                        });
                    },
                    onDeactivate: function onDeactivate() {
                        geoflo.currentMode.deactivate();
                        geoflo.setMode();
                    }
                });
        
                createControlButton("rectangle", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_RECTANGLE,
                    key: "r",
                    title: 'Draw Rectangle',
                    onActivate: function onActivate() {
                        return geoflo.setMode({
                            mode: geoflo.statics.constants.modes.DRAW,
                            type: "Rectangle"
                        });
                    },
                    onDeactivate: function onDeactivate() {
                        geoflo.currentMode.deactivate();
                        geoflo.setMode();
                    }
                });
        
                createControlButton("circle", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_POINT,
                    key: "o",
                    title: 'Draw Circle',
                    onActivate: function onActivate() {
                        return geoflo.setMode({
                            mode: geoflo.statics.constants.modes.DRAW,
                            type: "Circle"
                        });
                    },
                    onDeactivate: function onDeactivate() {
                        geoflo.currentMode.deactivate();
                        geoflo.setMode();
                    }
                });
    
                createControlButton("text", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_TEXT,
                    key: "t",
                    title: 'Draw Text',
                    onActivate: function onActivate() {
                        return geoflo.setMode({
                            mode: geoflo.statics.constants.modes.DRAW,
                            type: "Text"
                        });
                    },
                    onDeactivate: function onDeactivate() {
                        geoflo.currentMode.deactivate();
                        geoflo.setMode();
                    }
                });
        
                createControlButton("icon", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_ICON,
                    key: "i",
                    title: 'Draw Icon',
                    onActivate: async function onActivate() {
                        return geoflo.setMode({
                            mode: geoflo.statics.constants.modes.DRAW,
                            type: "Icon"
                        });
                    },
                    onDeactivate: function onDeactivate() {
                        geoflo.currentMode.deactivate();
                        geoflo.setMode();
                    }
                });
            } else if (control.type === 'utils') {
                createActionButton("zoom", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_ZOOM_IN_FEATURES,
                    key: "x",
                    title: 'Zoom to Extent',
                    onActivate: function onActivate() {
                        return geoflo.zoomToFeatures();
                    }
                });
    
                /* createActionButton("locate", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_LOCATE,
                    key: "u",
                    title: 'Locate User',
                    button: geoflo.locate.getButton(),
                    onActivate: function onActivate() {
                        geoflo.locate.onControlEvent(this);
                    }
                }); */
        
                createActionButton("refresh", {
                    container: buttons,
                    className: geoflo.statics.constants.classes.CONTROL_BUTTON_REFRESH,
                    key: "q",
                    title: 'Refresh',
                    onActivate: function onActivate() {
                        return geoflo.refresh();
                    }
                });
            }
    
            /* createActionButton("delete-snap", {
                container: action2Group,
                className: geoflo.statics.constants.classes.CONTROL_BUTTON_DELETE_SNAP,
                title: 'Delete Snap Layer Features',
                onAction: function onAction() {
                    return geoflo.deleteMeshData();
                }
            }); */
    
            /* createControlButton("cut", {
                container: controlGroup,
                className: geoflo.statics.constants.classes.CONTROL_BUTTON_CUT,
                key: "a",
                title: 'Cut Features',
                onActivate: function onActivate() {
                    return geoflo.setMode(geoflo.statics.constants.modes.CUT);
                }
            }); */
    
            /* createActionButton("combine", {
                container: action2Group,
                className: geoflo.statics.constants.classes.CONTROL_BUTTON_COMBINE_FEATURES,
                title: 'Combine Features',
                key: '+',
                onAction: function onAction() {
                    return geoflo.combineFeatures();
                }
            }); */
    
            /* createActionButton("group-elements", {
                container: action2Group,
                className: geoflo.statics.constants.classes.CONTROL_BUTTON_GROUP_FEATURES,
                key: "g",
                title: 'Group Similar Features',
                onAction: function onAction() {
                    return geoflo.groupFeatures();
                }
            });
    
            createActionButton("ungroup-elements", {
                container: action2Group,
                className: geoflo.statics.constants.classes.CONTROL_BUTTON_UNGROUP_FEATURES,
                key: "G",
                title: 'Ungroup Similar Features',
                onAction: function onAction() {
                    return geoflo.ungroupFeatures();
                }
            }); */
    
            /* createActionButton("create-polygon", {
                container: action2Group,
                className: geoflo.statics.constants.classes.CONTROL_BUTTON_CREATE_POLYGON,
                key: 'p',
                title: 'Create Polygon from Selected Feature',
                onAction: function onAction() {
                    return geoflo.createPolygon();
                }
            }); */
    
            /* createActionButton("hide-selected", {
                container: action2Group,
                className: geoflo.statics.constants.classes.CONTROL_BUTTON_HIDE_SELECTED,
                title: 'Hide Selected Feature',
                onAction: function onAction() {
                    return geoflo.hideFeatures();
                }
            }); */
        }

        function removeButtons() {
            Object.keys(buttonElements).forEach(function(buttonId) {
                var button = buttonElements[buttonId];
    
                if (button.parentNode) {
                    button.parentNode.removeChild(button);
                } else if (button) {
                    button.remove();
                }
    
                delete buttonElements[buttonId];
                delete buttonOptions[buttonId];
            });
        }
    
    
        function getControlOptions (control) {
            if (!control) return false;
            var controls = geoflo.options.controls && typeof geoflo.options.controls === 'object';
            var dontShow = controls ? !geoflo.options.controls[control.type] : false
            return  dontShow || control.dontShow || !geoflo.options.controls ? false : true;
        }
    
        function getButtonOptions() {
            return buttonOptions;
        }
    
        function getButtonElements() {
            return buttonElements;
        }
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Control);

/***/ }),

/***/ "./src/Draw.js":
/*!*********************!*\
  !*** ./src/Draw.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Draw
 * @description This module provides the functionality for drawing features on the map.
 * @returns {Object} The current instance for method chaining.
 * 
 */
const Draw = function () {
    const geoflo = this.geoflo;

    this.id = 'draw';

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name canHandle
	 * @description Checks if the given modeName is equal to the constant mode DRAW.
	 * @param {string} modeName - The name of the mode to be checked.
	 * @returns {boolean} Returns true if the modeName is equal to DRAW, false otherwise.
	 */
    this.canHandle = function (modeName) {
        return geoflo.statics.constants.modes.DRAW === modeName;
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name activate
	 * @description This function activates the drawing mode with the provided options. It sets up the necessary properties and event listeners for drawing features on the map.
	 * @param {Object} options - The options for activating the drawing mode.
	 * @param {Object} [options.feature] - The feature to be edited or drawn.
	 * @param {String} [options.type] - The type of feature to be drawn.
	 * @param {Object} [options.lngLat] - The longitude and latitude coordinates for drawing.
	 * @param {String} [options.id] - The unique identifier for the feature.
	 * @returns {Object} Returns the current instance for method chaining.
	 */
    this.activate = function (options={}) {
        if (this.activated) return false;
        if (geoflo.currentMode.id !== this.id) return options.mode = this.id, geoflo.setMode(options);

        this.activated = true;
        this._handleHistory = this.handleHistory.bind(this);
        this.history = [];
        this.undo = [];

        if (options.feature) options.type = editMode(options.feature);
        geoflo.drawMode = !geoflo.editMode;
        
        var lngLat = options.lngLat;
        delete options.lngLat;

        var newType = this.type = options.type;
        var properties = options.feature ? options.feature.properties : options;
        
        this.properties = Object.assign({}, properties);
        delete this.properties.mode;
        delete this.properties.location;

        const id = options.id || properties.id || URL.createObjectURL(new Blob([])).slice(-36);

        this.properties.id = id;
        this.properties.type = newType;

        geoflo.setButtons();
        geoflo.setActiveButton(newType);
        
        if (geoflo.Utilities.isPoint(geoflo.hotFeature)) this.isPoint = true;

        geoflo.fire('draw.activate', {
            id: id,
            type: newType,
            activated: this.activated,
            editing: geoflo.editMode,
            feature: geoflo.hotFeature || options.feature,
            properties: this.properties
        })

        geoflo.on('source.hot', this._handleHistory);
        if (lngLat) this.handleMove({ lngLat: lngLat });
        geoflo.options.painting.enable || (geoflo.mobile && newType === 'Rectangle') ? geoflo.activatePainting() : false;
        this.updateHotSource();
        return this;
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name deactivate
	 * @description Deactivates the draw feature by canceling the current edit, cleaning up the draw, setting buttons, and handling events.
	 * @param {boolean} cancel - Flag to determine if the edit should be canceled.
	 * @param {boolean} standby - Flag to indicate if the feature is in standby mode.
	 * @param {object} feature - The feature to be deactivated.
	 */
    this.deactivate = function (cancel, standby, feature) {
        if (!this.activated) return false;
        if (cancel) this.cancelEdit(standby, feature);
        cleanupDraw(this);
        geoflo.setButtons();
        geoflo.off('source.hot', this._handleHistory);
        geoflo.fire('draw.deactivate', { activated: this.activated });
        setTimeout(function() { geoflo.map.getSource(geoflo.statics.constants.sources.SELECT).setData(turf.featureCollection([])); }, 300);
        !geoflo.options.repeatDraw ? geoflo.setMode() : this.activate(this.properties);
    }



	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name updateHotSource
	 * @description This function updates the hot source feature with new properties and assigns it to the geoflo.hotFeature. It then updates the data of the VERTEX and HOT sources on the map with the updated feature.
	 * @param {Object} feature - The feature object to be updated.
	 * @param {Object} properties - The new properties to be assigned to the feature.
	 * @returns {Object} The updated hot source feature.
	 */
    this.updateHotSource = function (feature, properties) {
        if (feature) geoflo.hotFeature = feature;
        if (!geoflo.hotFeature || geoflo.overpassDownloading) return;
        geoflo.hotFeature.properties = geoflo.Utilities.assignDeep(geoflo.hotFeature.properties, properties || {});
        geoflo.hotFeature.properties.style = geoflo.hotFeature.properties.style || {};
        geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([geoflo.hotFeature]));
        geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
        return geoflo.hotFeature;
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name deleteVertex
	 * @description Deletes a vertex from the current feature being edited on the map.
	 * @param {number} index - The index of the vertex to be deleted.
	 * @returns {void}
	 */
    this.deleteVertex = function (index) {
        if (geoflo.hotFeature) {
            const coords = geoflo.hotFeature.geometry.coordinates;
            index = index !== undefined ? index : coords.length - 1;

            if (coords.length > 1) {
                coords.splice(index, 1);
                geoflo.lastClick = { coords: coords[coords.length - 1] };

                if (coords.length > 0) {
                    geoflo.snapFeature = turf.point(coords[coords.length - 1]);
                } else {
                    geoflo.snapFeature = null;
                }

                if (coords.length > 1) {
                    geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
                } else {
                    geoflo.hotFeature = null;
                    geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([]));
                }

                geoflo.fire('vertex.delete', { coords: coords, index: index, feature: geoflo.hotFeature })
            }

            if (geoflo.lastMouseEvent) {
                geoflo.currentMode.handleMove ? geoflo.currentMode.handleMove(geoflo.lastMouseEvent) : false;
            }
        } else if (geoflo.snapFeature) {
            geoflo.snapFeature = null;
            geoflo.lastClick = null;
            geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
        }
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name getFeature
	 * @description Retrieves the hot feature from the context.
	 * @returns {any} The hot feature stored in the context.
	 */
    this.getFeature = function () {
        return geoflo.hotFeature;
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name selectFeature
	 * @description Selects a feature based on the provided ID.
	 * @param {string} id - The ID of the feature to be selected.
	 * @returns {boolean} Returns false if no ID is provided, otherwise returns the result of selecting the feature.
	 */
    this.selectFeature = function (id) {
        if (!id) return false;
        geoflo.setMode();
        return geoflo.currentMode.selectFeature(id);
    }

	/** 
	 * @function
     * @memberof module:geoflo.Draw
	 * @name saveEdit
	 * @description This function saves the edited feature in the map.
	 * @param {Object} feature - The feature to be saved.
	 * @returns {boolean} - Returns true if the feature is successfully saved, false otherwise.
	 */
    this.saveEdit = function (feature) {
        var hot = geoflo.hotFeature;
        if (!hot) return false;

        var type = hot.properties.type || feature.properties.type || this.type;
        feature = feature || hot;

        this.savingEdit = true;
        return finishDraw(type, feature);
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name cancelEdit
	 * @description This function cancels the current editing operation by setting the 'cancelled' flag to true. If the 'feature' parameter is not provided or does not have a 'type' property, it sets 'geoflo.hotFeature' to null and finishes the draw process. It then sets the 'standby' property, updates 'geoflo.hotFeature', fires a 'draw.cancel' event with the feature, and returns the result of 'finishDraw()'.
	 * @param {boolean} standby - The standby value to set.
	 * @param {object} feature - The feature being edited.
	 * @returns {any} The result of the 'finishDraw()' function.
	 */
    this.cancelEdit = function (standby, feature) {
        this.cancelled = true;
        if (!feature || !feature.properties.type) return geoflo.hotFeature = null, finishDraw();
        this.standby = standby;
        geoflo.hotFeature = feature;
        geoflo.fire('draw.cancel', { feature: feature });
        return finishDraw();
    }



	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleDown
	 * @description Handles the mouse or touch down event on the map. Updates the mouse/touch position, adds a vertex if allowed, and sets features for pinning.
	 * @param {Object} event - The event object containing information about the mouse or touch event.
	 * @returns {void}
	 */
    this.handleDown = function (event) {
        var point;

        geoflo.mouseIsDown = [event.lngLat.lng, event.lngLat.lat];

        if (event.touch) {
            geoflo.touchDown = true;
            point = turf.point(geoflo.mouseIsDown);
            onVertex(getVertex(point));
        }
        
        if (geoflo.canAddVertex) {
            point = addVertex(geoflo.canAddVertex, event);
            return onVertex(getVertex(point), true);
        }

        geoflo.Pinning.setFeatures(geoflo.snappedVertex);
        startIdleTime();
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleUp
	 * @description This function is responsible for handling the mouse up event during drawing and editing operations on the map. It checks various conditions and triggers corresponding actions based on the context and user interactions.
	 * @param {Event} event - The mouse up event object.
	 * @returns {void}
	 */
    this.handleUp = function (event) {
        geoflo.mouseIsDown = false;
        geoflo.touchDown = false;

        if (geoflo.Painting.enabled) return geoflo.Painting.handleUp(event);
        if (geoflo.addedVertexOnLine && !geoflo.dragMoving) return;
        if (event.touch && geoflo.touchMoving) return geoflo.dragMoving = false;

        if (geoflo.Utilities.isPoint(geoflo.hotFeature) && geoflo.snappedVertex) return geoflo.editMode ? this.saveEdit() : finishDraw(this.type);

        if (geoflo.snappedVertex && geoflo.dragMoving && !geoflo.mapMoving && this.type !== 'Rectangle') {
            geoflo.gamepadDrag = event.gamepad;

            var isLastIndex = geoflo.Utilities.isLastIndex(geoflo.dragIndex, geoflo.hotFeature);
            isLastIndex = isLastIndex ? isLastIndex : geoflo.Utilities.isPolygon(geoflo.hotFeature) && geoflo.dragIndex == 0 ? true : false;
           
            var coords = geoflo.Utilities.getLastIndexCoords(geoflo.hotFeature);

            onVertex(getVertex(turf.point(geoflo.snappedVertex)));
            this.updateHotSource();
            if (isLastIndex) setTimeout(function() { geoflo.lastClick = { coords: coords } }, 100)
        }
        
        geoflo.pinableFeatures = [];
        geoflo.mouseIsIdle = false;
        addText.call(this, this.type);
        geoflo.refreshMeshData();
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleClick
	 * @description This function processes the click event for drawing features on the map. It determines the action based on the event type and context state, such as editing mode, touch input, vertex addition, and gamepad interaction.
	 * @param {Object} event - The event object containing information about the click event.
	 * @returns {Object} The updated event object or the result of the drawing action.
	 */
    this.handleClick = function (event) {
        if (event.finish) return geoflo.editMode ? this.saveEdit() : finishDraw(this.type);
        if (event.touch && geoflo.touchMoving) return geoflo.touchMoving = false, geoflo.Snapping.setFeature(), this.updateHotSource();
        if (event.touch) geoflo.touchClick = true;

        if (geoflo.addedVertexOnLine) {
            geoflo.Snapping.setFeature();
            this.updateHotSource();
            onVertex(getVertex(geoflo.addedVertexOnLine));
            this.handleDrag(event);
            geoflo.dragMoving = false;
            geoflo.gamepadDrag = false
            geoflo.mouseIsIdle = false;
            return event;
        }

        if (geoflo.gamepadDrag) return geoflo.gamepadDrag = false;

        if (geoflo.editMode && (this.type === 'Polygon' || this.type === 'Text')) return;

        if (!this.firstClick && !geoflo.drawStarted) {
            geoflo.drawStarted = true;
            geoflo.fire('draw.start', { type: this.type, editing: geoflo.editMode, coords: [event.lngLat.lng, event.lngLat.lat] });
        } else {
            geoflo.fire('vertex.add', { type: this.type, coords: [event.lngLat.lng, event.lngLat.lat] });
        }

        var lastPoint = geoflo.closestPoint || { coords: [event.lngLat.lng, event.lngLat.lat] };
        var point = turf.point(lastPoint.coords);

        point.properties = this.properties;
        point.source = this.source;

        geoflo.lastMove = lastPoint.coords.length > 1 ? { lat: lastPoint.coords[lastPoint.coords.length-1][1], lng: lastPoint.coords[lastPoint.coords.length-1][0] } : false;        

        if (!geoflo.startPoint) {
            if (this.type === 'Rectangle') {
                geoflo.startPoint = lastPoint.coords;

                geoflo.hotFeature = turf.polygon([[
                    geoflo.startPoint,
                    [event.lngLat.lng, event.lngLat.lat],
                    [geoflo.startPoint[0], event.lngLat.lat],
                    geoflo.startPoint
                ]]);
    
                return geoflo.Utilities.setProperty(geoflo.hotFeature, 'type', this.type);
            } else if (this.type === 'Polygon') {
                geoflo.startPoint = lastPoint.coords;
            }
        }
        
        if (!geoflo.snapFeature && lastPoint) geoflo.snapFeature = lastPoint;

        if (needsToFinish(this.type, lastPoint.coords)) return finishDraw(this.type, point);
        
        this.firstClick = geoflo.firstClick ? false : { coords: lastPoint.coords };

        geoflo.lastClick = lastPoint;
        geoflo.firstClick = geoflo.firstClick ? geoflo.firstClick : { coords: lastPoint.coords };
        geoflo.Snapping.setFeature();
        addText.call(this, this.type);
        geoflo.Exploring.setFeatures(lastPoint.coords, { set: true });
        delete geoflo.touchClick;
        return this.updateHotSource();
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleMove
	 * @description This function determines the behavior based on the event type and context state. It handles various actions such as dragging, painting, snapping, routing, and snapping to points.
	 * @param {Object} event - The event object containing information about the mouse or touch event.
	 * @returns {boolean} Returns false in certain conditions to prevent default behavior.
	 */
    this.handleMove = function (event) {
        if (event.touch && geoflo.mouseIsDown) geoflo.touchMoving = true;
        if (geoflo.overpassDownloading) return false;
        if (geoflo.mouseIsDown && geoflo.canAddVertex) return false;
        if (geoflo.canDragMove && geoflo.snappedVertex && geoflo.mouseIsDown) return this.handleDrag(event);
        if (geoflo.mouseIsDown && geoflo.Painting.enabled) return this.handlePainting(event);
        if (event.touch && geoflo.touchMoving) return geoflo.snapFeature = false;

        var button = !event.originalEvent ? false : event.originalEvent.buttons !== undefined ? event.originalEvent.buttons : event.originalEvent.which;
        if (button === 1) return false;

        var calculateRoute = geoflo.Routing.enabled;
        if (event.originalEvent && event.originalEvent.altKey) calculateRoute = false;

        var snapToPoint = geoflo.Snapping.enabled;
        if (event.originalEvent && event.originalEvent.shiftKey) snapToPoint = false;

        var evtCoords = [event.lngLat.lng, event.lngLat.lat];
        var isPoint = geoflo.Utilities.isPoint(geoflo.hotFeature);
        var editPolygon = geoflo.editMode && (this.type === 'Polygon' || this.type === 'Rectangle');
        var point = turf.point(evtCoords);
        var snapFeature = null;

        if (editPolygon) {
            snapFeature = point;
        } else if (snapToPoint) {
            snapFeature = geoflo.Snapping.setClosest(evtCoords, isPoint);
        } else if (!isPoint) {
            snapFeature = geoflo.Snapping.updateFeature(evtCoords);
        } else if (isPoint) {
            snapFeature = point;
        }

        if (calculateRoute) snapFeature = geoflo.Routing.getClosest() || snapFeature;
        if (!snapFeature) snapFeature = point;

        geoflo.Snapping.addFeature(snapFeature, this.properties, editPolygon);
        onVertex(getVertex(point));
        
        if (!snapFeature && this.isPoint) delete this.isPoint;
        if (editPolygon && calculateRoute) geoflo.map.getSource(geoflo.statics.constants.sources['ROUTE']).setData(turf.featureCollection([]));

        if (this.type === 'Rectangle') return this.handleRectangle(event);
        if (this.type === 'Icon') return this.handleIcon(event, geoflo.snapFeature);
        if (this.type === 'Text') return this.handleText(event, geoflo.snapFeature);
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleDrag
	 * @description This function is responsible for handling the drag event of a vertex on the map. It updates the position of the vertex based on the user's interaction and triggers various actions accordingly.
	 * @param {Object} event - The event object containing information about the drag event.
	 * @returns {boolean} Returns false if the drag index is not valid.
	 */
    this.handleDrag = function (event) {
        var validIndex = geoflo.dragIndex > -1;
        
        if (!validIndex) {
            offVertex();
            if (geoflo.mouseIsDown && geoflo.Painting.enabled) this.handlePainting(event);
            return false;
        }

        !event.gamepad ? event.originalEvent.stopPropagation() : false;

        geoflo.dragMoving = true;
        geoflo.lastDragMove = 0;
        geoflo.snappedVertex = [event.lngLat.lng, event.lngLat.lat];
        geoflo.bypassRouting = true; //!event.gamepad ? event.originalEvent.altKey : false;
        geoflo.bypassSnapping = !event.gamepad ? event.originalEvent.shiftKey : false;
        geoflo.lastIndex = geoflo.Utilities.isLastIndex(geoflo.dragIndex, geoflo.hotFeature);

        var vertex = turf.point(geoflo.snappedVertex);

        if (geoflo.lastIndex) geoflo.lastClick = { coords: geoflo.snappedVertex };

        if (this.type === 'Circle' || this.type === 'Icon' || this.type === 'Image') {
            if (!geoflo.Painting.enabled) geoflo.hotFeature.geometry.coordinates = geoflo.snappedVertex;
        } else {
            var isLastIndex = geoflo.Utilities.isLastIndex(geoflo.dragIndex, geoflo.hotFeature);
            geoflo.hotFeature.geometry.coordinates[geoflo.dragIndex] = geoflo.snappedVertex;

            if (this.type === 'Polygon') {
                if (isLastIndex) geoflo.hotFeature.geometry.coordinates[0] = geoflo.snappedVertex;
                if (geoflo.dragIndex == 0) geoflo.hotFeature.geometry.coordinates[geoflo.hotFeature.geometry.coordinates.length -1] = geoflo.snappedVertex;
            }
        }

        geoflo.Utilities.setProperty(geoflo.hotFeature, 'type', this.type);
        geoflo.Utilities.setProperty(vertex, 'type', this.type);
        geoflo.map.getSource(geoflo.statics.constants.sources.ROUTE).setData(turf.featureCollection([]));
        geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
        geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
        geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([vertex]));
        geoflo.fire('vertex.drag', { type: this.type, coords: [event.lngLat.lng, event.lngLat.lat], feature: geoflo.hotFeature, vertex: vertex });
        geoflo.Pinning.updateFeatures();
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleTouch
	 * @description This function is responsible for handling touch events and triggering corresponding actions.
	 * @param {Event} event - The touch event object.
	 * @returns {void}
	 */
    this.handleTouch = function (event) {
        event.touch = true;

        if (event.type === 'touchstart') {
            this.handleDown(event);
        } else if (event.type === 'touchend') {
            this.handleUp(event);
            this.handleClick(event);
        } else if (event.type === 'touchmove') {
            this.handleMove(event);
        }
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleOffMap
	 * @description This function is triggered when an off-map event occurs and clears the data of a specific source on the map.
	 * @param {Event} event - The event object triggering the function.
	 */
    this.handleOffMap = function (event) {
        if (geoflo.map.getSource(geoflo.statics.constants.sources.SNAP)) geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleOnMap
	 * @description This function updates the data of the SNAP source on the map with the snapFeature.
	 * @param {Event} event - The event triggering the function.
	 */
    this.handleOnMap = function (event) {
        if (geoflo.map.getSource(geoflo.statics.constants.sources.SNAP) && geoflo.snapFeature) geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([geoflo.snapFeature]));
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handlePainting
	 * @description This function is triggered when painting on the map. It disables drag pan, sets the map class to 'painting', and updates the feature coordinates.
	 * @param {Object} event - The event object triggering the function.
	 * @returns {boolean} Returns false if mouse is not down or no coordinates are available, otherwise updates the feature coordinates.
	 */
    this.handlePainting = function (event) {
        if (!geoflo.mouseIsDown) return false;
        geoflo.map.dragPan.disable();
        geoflo.setMapClass('painting');

        var snapCoords = geoflo.snapFeature && !geoflo.Painting.feature;
        var coords = event.lngLat && event.lngLat.lng ? [event.lngLat.lng, event.lngLat.lat] : false;
        if (snapCoords) coords = geoflo.snapFeature.geometry.coordinates;

        if (!coords) return false;
        return geoflo.Painting.updateFeature(coords);
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleRectangle
	 * @description Handles the creation and manipulation of a rectangle feature on a map.
	 * @param {Object} event - The event object triggering the function.
	 * @returns {void}
	 */
    this.handleRectangle = function (event) {
        if (geoflo.editMode && geoflo.hotFeature) geoflo.startPoint = geoflo.hotFeature.geometry.coordinates[0][0];
        if (!geoflo.startPoint) return;
        if (!geoflo.dragMoving) geoflo.Utilities.setProperty(geoflo.hotFeature, 'type', this.type);
        geoflo.dragMoving = true;

        var coords = geoflo.snapFeature ? geoflo.snapFeature.geometry.coordinates : [event.lngLat.lng, event.lngLat.lat];

        if (geoflo.dragIndex > -1) {
            var startPoint = geoflo.dragIndex == 0 || geoflo.dragIndex == 4 ? 4 : geoflo.dragIndex;
            var endPoint = startPoint == 1 ? 3 : startPoint == 2 ? 4 : startPoint == 3 ? 1 : 2;
            var leftPoint = endPoint == 1 ? 4 : endPoint == 2 ? 1 : endPoint == 3 ? 2 : 3
            var rightPoint = leftPoint == 1 ? 3 : leftPoint == 2 ? 4 : leftPoint == 3 ? 1 : 2;

            updateCoordinate(geoflo.hotFeature, "0." + startPoint, coords[0], coords[1]);
            updateCoordinate(geoflo.hotFeature, "0." + leftPoint, coords[0], geoflo.startPoint[1]);
            updateCoordinate(geoflo.hotFeature, "0." + rightPoint, geoflo.startPoint[0], coords[1]);
            updateCoordinate(geoflo.hotFeature, "0." + endPoint, geoflo.startPoint[0], geoflo.startPoint[1] );
        } else {
            updateCoordinate(geoflo.hotFeature, "0.1", coords[0], geoflo.startPoint[1]);
            updateCoordinate(geoflo.hotFeature, "0.2", coords[0], coords[1]);
            updateCoordinate(geoflo.hotFeature, "0.3", geoflo.startPoint[0], coords[1]);
            updateCoordinate(geoflo.hotFeature, "0.4", geoflo.startPoint[0], geoflo.startPoint[1] );
        }

        geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
        geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([geoflo.hotFeature]));
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleText
	 * @description Handles text input events and logs relevant properties.
	 * @param {Event} event - The event object triggering the function.
	 * @param {string} feature - The feature to be handled.
	 */
    this.handleText = function (event, feature) {
        console.log('handleText', this.properties, geoflo.snapFeature);
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleIcon
	 * @description Handles the icon based on the event and feature provided.
	 * @param {Event} event - The event triggering the function.
	 * @param {Object} feature - The feature object to be handled.
	 */
    this.handleIcon = function (event, feature) {
        console.log('handleIcon', this.properties, geoflo.snapFeature);
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleContext
	 * @description Handles the context of dragging and moving a feature vertex.
	 * @param {Event} event - The event triggering the context handling.
	 * @returns {void}
	 */
    this.handleContext = function (event) {
        if (!geoflo.canDragMove || !geoflo.snappedVertex) return;
        
        var validIndex = geoflo.dragIndex > -1;
        if (!validIndex) return;

        geoflo.hotFeature.geometry.coordinates.splice(geoflo.dragIndex, 1);

        geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
        geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([geoflo.hotFeature]));
        geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleHistory
	 * @description Handles the history of features in the current mode.
	 * @param {Object} event - The event triggering the history update.
	 * @returns {void}
	 */
    this.handleHistory = function handleHistory (event) {
        if (geoflo.dragMoving) return;

        var history = geoflo.currentMode.history;
        var date = new Date();
        
        var features = event.detail.data.features;
        if (!features || !features.length) return;

        var feature = geoflo.Utilities.cloneDeep(features[0]);
        feature.historyDate = date;
        history.push(feature);

        geoflo.fire('feature.history', { type: geoflo.currentMode.type, feature: feature, history: history });
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleUndo
	 * @description This function is responsible for undoing the last action performed in the application. It retrieves the history and undo arrays from the current mode, pops the last feature from the history, sets the undo flag to true for the feature, updates the hotFeature, pushes the feature to the undo array, and updates the map source data with the hotFeature.
	 * @returns {void}
	 */
    this.handleUndo = function () {
        return alert("UNDER DEVELOPMENT");
        var history = geoflo.currentMode.history;
        var undo = geoflo.currentMode.undo;

        var feature = history.pop();

        feature.undo = true;
        geoflo.hotFeature = feature;

        undo.push(geoflo.hotFeature);
        geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
    }

	/**
	 * @function
     * @memberof module:geoflo.Draw
	 * @name handleRedo
	 * @description Handles the redo functionality (currently under development).
	 * @returns {void}
	 */
    this.handleRedo = function () {
        return alert("UNDER DEVELOPMENT");
        var redo = false
    }






    function editMode (feature) {
        var type = geoflo.Features.getType(feature);
        if (!type) return alert('No Feature Type Found');
    
        geoflo.currentMode.type = type;
        geoflo.currentMode.source = feature.source;
        geoflo.editMode = true;
        geoflo.hotFeature = feature;
    
        geoflo.Utilities.setProperty(geoflo.hotFeature, 'type', type);
        geoflo.Utilities.setProperty(geoflo.hotFeature, 'edit', true);

        geoflo.map.getSource(geoflo.statics.constants.sources.SELECT).setData(turf.featureCollection([]));
    
        if (type === 'Polygon') {
            geoflo.hotFeature = turf.polygonToLine(geoflo.hotFeature);
        } else if (type === 'Circle' || type === 'Icon' || type === 'Image') {
            geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([]));
        } else if (type === 'Text') {
            geoflo.map.getSource(geoflo.statics.constants.sources.HOTTEXT).setData(turf.featureCollection([geoflo.hotFeature]));
            addText.call(geoflo.currentMode, type, geoflo.hotFeature);
        } else {
            geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
            geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([geoflo.hotFeature]));
        }

        var coords = geoflo.Utilities.isPoint(geoflo.hotFeature) ? geoflo.hotFeature.geometry.coordinates : geoflo.hotFeature.geometry.coordinates[geoflo.hotFeature.geometry.coordinates.length - 1];
        
        geoflo.lastClick = { coords: coords };
        geoflo.Features.removeFeatures(geoflo.hotFeature.id);
        geoflo.refreshMeshData();
        
        return geoflo.currentMode.type;
    }

    function finishDraw (type, point, text) {
        var feature;
        var cancelled = geoflo.currentMode.cancelled;

        if (geoflo.editMode && !geoflo.currentMode.savingEdit && !cancelled) return geoflo.currentMode.saveEdit(point);
    
        if (cancelled || !type) {
            finishText();

            if (geoflo.hotFeature) {
                geoflo.removeSelection();
                geoflo.removeFeature(geoflo.hotFeature.id, true);
                geoflo.addFeatures([geoflo.hotFeature], true);
            }

            geoflo.Pinning.resetFeatures();

            if (!geoflo.editMode) geoflo.fire('draw.cancel', { cancel: true, feature: geoflo.hotFeature });
            return false;
        } else if (type === 'Text' && !text) {
            return addText.call(geoflo.currentMode, type, point);
        } else if (geoflo.hotFeature) {
            if (geoflo.Utilities.isPoint(geoflo.hotFeature)) {
                var coords = Array.isArray(geoflo.hotFeature.geometry.coordinates[0]) ?
                geoflo.hotFeature.geometry.coordinates[0] :
                [geoflo.hotFeature.geometry.coordinates[0], geoflo.hotFeature.geometry.coordinates[1]]
    
                point = geoflo.Painting.enabled || geoflo.currentMode.savingEdit ? point : turf.point(coords);
                feature = point;
            } else if (geoflo.Utilities.isPolygon(geoflo.hotFeature, type)) {
                geoflo.hotFeature.geometry.type = "Polygon";

                if (type === 'Rectangle') {
                    geoflo.endPoint ? updateCoordinate(geoflo.hotFeature, "0.2", geoflo.endPoint[0], geoflo.endPoint[1]) : false;
                } else {
                    geoflo.hotFeature.geometry.coordinates.push(geoflo.hotFeature.geometry.coordinates[0]);
                    geoflo.hotFeature.geometry.coordinates = [geoflo.hotFeature.geometry.coordinates];
                }
            } else if (geoflo.Utilities.isLineString(geoflo.hotFeature, type)) {
                if (type === 'Polygon') {
                    geoflo.hotFeature.geometry.type = type;
                    geoflo.hotFeature.geometry.coordinates.push(geoflo.hotFeature.geometry.coordinates[0]);
                    geoflo.hotFeature.geometry.coordinates = [geoflo.hotFeature.geometry.coordinates];
                } else if (type === 'Rectangle') {
                    geoflo.endPoint ? updateCoordinate(geoflo.hotFeature, "0.2", geoflo.endPoint[0], geoflo.endPoint[1]) : false;
                }
            } else if (point) {
                feature = point;
            }
    
            if (geoflo.Painting.enabled) {
                var tolerance = geoflo.options.painting.tolerance;
    
                geoflo.hotFeature = type === 'Circle' ? geoflo.hotFeature : turf.simplify(geoflo.hotFeature, {
                    mutate: true,
                    tolerance: typeof tolerance === 'function' ? tolerance(geoflo.map) : tolerance,
                    highQuality: true
                });

                if (geoflo.startPoint) geoflo.hotFeature.geometry.coordinates[0] = geoflo.startPoint;
            }
        } else if (point) {
            feature = point;
        }
    
        feature = geoflo.Exploring.currentFeature || feature || geoflo.hotFeature;
        if (!feature || !geoflo.currentMode.activated) return geoflo.currentMode.deactivate();

        feature = geoflo.Features.addFeature(feature, geoflo.currentMode.source, geoflo.currentMode.properties);
        geoflo.fire('draw.finish', { feature: feature, pinned: geoflo.Pinning.getFeatures(), type: type, editing: geoflo.editMode });
        return geoflo.currentMode.deactivate();
    }

    function finishText (e, type, feature) {
        var marker = geoflo.textMarker;
        if (!marker) return false;

        var element = marker.getElement();
        var text = element.value;
    
        if (!text.length || geoflo.currentMode.cancelled) return marker.remove(), geoflo.textInput = false, addText.call(this, type, feature);
    
        var coords = [element.getAttribute('lng'), element.getAttribute('lat')];
        type = type || element.getAttribute('type');

        geoflo.currentMode.properties.text = text;
        
        var feature = {
            "type": "Feature",
            "properties": {
                type: type,
                text: text
            },
            "geometry": {
              "type": "Point",
              "coordinates": coords
            }
        }
        
        marker.remove();
        finishDraw(type, feature, text);
    }

    function cleanupDraw (mode) {
        geoflo.map.getSource(geoflo.statics.constants.sources.ROUTE).setData(turf.featureCollection([]));
        geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
        geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([]));
        geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([]));
        geoflo.map.getSource(geoflo.statics.constants.sources.HOTTEXT).setData(turf.featureCollection([]));
        geoflo.map.getSource(geoflo.statics.constants.sources.SELECT).setData(turf.featureCollection([]));
    
        geoflo.deleteMeshData();
    
        mode.history = [];
        mode.undo = [];
        mode.type = null;
        mode.cancelled = false;
        mode.activated = false;
        mode.savingEdit = false;

        geoflo.editMode = false;
        geoflo.drawMode = false;

        delete geoflo.startPoint;
        delete geoflo.lastClick;
        delete geoflo.firstClick;
        delete geoflo.endPoint;
        delete geoflo.snapFeature;
        delete geoflo.hotFeature;
        delete geoflo.drawStarted;
        delete geoflo.dragMoving;
        delete geoflo.editing;
        delete geoflo.textMarker;
        delete geoflo.textInput;
        delete geoflo.touchMoving;
        delete geoflo.touchDown;
        delete geoflo.pinningFeatures;
        delete geoflo.pinnedFeatures;
        delete geoflo.canDragMove;
        delete geoflo.canAddVertex;
        delete geoflo.dragIndex;
        delete geoflo.addedVertexOnLine;
        delete geoflo.snappedVertex;
    }

    function getVertex (point) {
        var hotFeature = geoflo.hotFeature;
        var vertex;
    
        if (geoflo.dragMoving) return false;
        if (!hotFeature) return false;
    
        var closest = geoflo.Snapping.getClosest(point.geometry.coordinates);
        var coords = closest.coords;
        var type = closest.point ? closest.point.type : false;
        
        if (!type) return false;
    
        if (!coords && type === 'linepoint' && closest.point.borders) {
            var segment = turf.lineString([closest.point.border1, closest.point.border2]);
            vertex = turf.along(segment, closest.point.distance1);
            coords = vertex.geometry.coordinates;
        }
    
        if (!coords) return false;
    
        vertex = geoflo.Utilities.isLineString(hotFeature) && type === 'vertex' ? turf.booleanPointOnLine(hotFeature, turf.point(coords)) : turf.point(coords);
        vertex.properties.type = type;
    
        geoflo.fire('vertex.find', { vertex: vertex, feature: geoflo.hotFeature, closest: closest });
        return vertex;
    }
    
    function addVertex (point, event) {
        var feature;
    
        if (event && point) {
            var coords = geoflo.hotFeature.geometry.coordinates;
            var line = turf.lineString(coords);
            var start = turf.point(coords[0])
            var split = turf.lineSlice(start, point, line);
            var index = split.geometry.coordinates.length - 1;
            var vertex = split.geometry.coordinates[index];
    
            point = turf.point(vertex);
            
            line.geometry.coordinates.splice.apply(line.geometry.coordinates, [index, 0].concat([vertex]));
    
            line = turf.cleanCoords(line);
            feature = turf.truncate(line, { precision: 6, coordinates: 2, mutate: true });
            geoflo.hotFeature.geometry.coordinates = feature.geometry.coordinates;
            geoflo.hotFeature = geoflo.Utilities.cloneDeep(geoflo.hotFeature);
        } else if (point) {
            geoflo.canDragMove = true;
            geoflo.canAddVertex = point;
        }
    
        return point;
    }
    
    function onVertex (vertex, add) {
        var hotFeature = geoflo.hotFeature;
        var dragIndex = null;
    
        if (geoflo.dragMoving) return offVertex();
        if (!hotFeature || !vertex) return offVertex();
        
        geoflo.updateMeshData();
    
        var type = vertex.properties.type;
        var index = vertex.properties.index || vertex.properties.index == 0;
    
        dragIndex = index ? vertex.properties.index : geoflo.currentMode.type === 'Circle' || geoflo.currentMode.type === 'Icon' || geoflo.currentMode.type === 'Image' ? 0 : false;
    
        geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([vertex]));
        geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([geoflo.hotFeature]));
    
        if (type === 'linepoint') return addVertex(vertex);
    
        geoflo.map.dragPan.disable();
        geoflo.dragIndex = dragIndex;
        geoflo.addedVertexOnLine = add ? vertex : false;
        geoflo.canAddVertex = false;
        geoflo.canDragMove = true;
        geoflo.snappedVertex = vertex.geometry.coordinates;
        geoflo.Pinning.setFeatures(geoflo.snappedVertex);
        geoflo.fire('vertex.on', { vertex: vertex, index: dragIndex, feature: geoflo.hotFeature });
    }
    
    function offVertex () {
        if (!geoflo.hotFeature) return;    
        if (geoflo.mouseIsDown && geoflo.Painting.enabled) return false;

        if (geoflo.snappedVertex) {
            geoflo.lastIndex ? geoflo.lastClick = { coords: geoflo.snappedVertex } : false;
            geoflo.fire('vertex.off', { vertex: false, index: geoflo.dragIndex, feature: geoflo.hotFeature })
        }
    
        geoflo.map.dragPan.enable();
        geoflo.dragMoving = false;
        geoflo.canDragMove = false;
        geoflo.snappedVertex = null;
        geoflo.dragIndex = -1;
        geoflo.mouseIsDown = geoflo.touchDown || false;
        geoflo.pinableFeatures = [];
        geoflo.lastIndex = false;
        geoflo.canAddVertex = false;
        geoflo.addedVertexOnLine = false
    }

    function addText (type, feature) {
        feature = feature || geoflo.hotFeature;
        if (!feature) return false;

        type = type || feature.properties.type;
        feature.properties.type = type;

        if (type !== 'Text') return //geoflo.Features.setText(feature);
        if (geoflo.textInput) return finishText(false, type, feature);
        
        var lngLat = { lng: feature.geometry.coordinates[0], lat: feature.geometry.coordinates[1] }
        var el = geoflo.textInput = document.createElement('input');

        el.value = feature.properties.text || '';
        el.className = 'text-marker';

        el.setAttribute('contenteditable', 'true');
        el.setAttribute('autocorrect', 'off');
        el.setAttribute('spellcheck', 'false');
        el.setAttribute('placeholder', 'Press Enter or Select Button When Done...');
        el.setAttribute('type', type);
        el.setAttribute('lng', lngLat.lng);
        el.setAttribute('lat', lngLat.lat);
        
        geoflo.textMarker = new geoflo.Mapbox.Marker(el).setLngLat(lngLat).addTo(geoflo.map);
        geoflo.textMarker.setOffset([0, -25])

        el.addEventListener("submit", finishText);
        el.addEventListener("keydown", inputText);
        el.addEventListener("paste", handlePaste);
        el.focus();

        geoflo.fire('text.add', { feature: feature, marker: geoflo.textMarker, type: type });
    
        function inputText (e) {
            if ([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {
                e.stopPropagation();
            } else if(e.keyCode === 13) {
                e.preventDefault();
                finishText(e);
            }
        }

        function handlePaste (e) {
            var clipboardData, pastedData;
            e.stopImmediatePropagation();
            e.preventDefault();
            clipboardData = e.clipboardData || window.clipboardData;
            pastedData = clipboardData.getData('text/plain').slice(0, CHAR_LIMIT);
            e.target.innerText = pastedData;
        }
    }

    function updateCoordinate (f, t, e, n) {
        var o = t.split(".")
            , r = parseInt(o[0], 10)
            , i = parseInt(o[1], 10);
        void 0 === f.geometry.coordinates[r] && (f.geometry.coordinates[r] = []),
        f.geometry.coordinates[r][i] = [e, n]
    }

    function updateRectangle (event, type) {
        if (type !== 'Rectangle') return false;
        
        var geometry = geoflo.hotFeature.geometry;
        var coords = geometry.coordinates;
        const coordType = geometry.type;
        //coords = coordType === 'Linestring' ? coords : coords[0];
    
        if (geoflo.currentVertexPosition === 2) {
            const getpXY3 = calculatepXY3(geometry, event, type);
            if (getpXY3[2]) return updateCoordinate(`0.${geoflo.currentVertexPosition + 1}`, getpXY3[2][0], getpXY3[2][1]);
            return geoflo.hotFeature;
        }
    
        updateCoordinate(`0.${geoflo.currentVertexPosition}`, event.lngLat.lng, event.lngLat.lat);
        geoflo.currentVertexPosition++;
        updateCoordinate(`0.${geoflo.currentVertexPosition}`, event.lngLat.lng, event.lngLat.lat);
    
        function calculatepXY3 (geometry, event, type) {
            var coords = geometry.coordinates;
        
            const pXY0 = coords[0];
            const pXY0_3857 = geoflo.Utilities.degrees2meters(pXY0);
            const pXY1 = coords[1];
            const pXY1_3857 = geoflo.Utilities.degrees2meters(pXY1);
            let pXY2_3857 = geoflo.Utilities.degrees2meters([event.lngLat.lng, event.lngLat.lat]);
            const mouse_3857 = geoflo.Utilities.degrees2meters([event.lngLat.lng, event.lngLat.lat]);
        
            if (pXY0_3857[0] === pXY1_3857[0]) {
                pXY2_3857 = [mouse_3857[0], pXY1_3857[1]];
            } else if (pXY0_3857[1] === pXY1_3857[1]) {
                pXY2_3857 = [pXY1_3857[0], mouse_3857[1]];
            } else {
                const vector1_3857 = (pXY1_3857[1] - pXY0_3857[1]) / (pXY1_3857[0] - pXY0_3857[0]);
                const vector2_3857 = -1.0 / vector1_3857;
        
                if (Math.abs(vector2_3857) < 1) {
                    pXY2_3857[1] = vector2_3857 * (mouse_3857[0] - pXY1_3857[0]) + pXY1_3857[1];
                } else {
                    pXY2_3857[0] = pXY1_3857[0] + (pXY2_3857[1] - pXY1_3857[1]) / vector2_3857;
                }
            }
        
            const vector_3857 = [pXY1_3857[0] - pXY0_3857[0], pXY1_3857[1] - pXY0_3857[1]];
            const pXY3_3857 = [pXY2_3857[0] - vector_3857[0], pXY2_3857[1] - vector_3857[1]];
            const pXY2G = geoflo.Utilities.meters2degrees(pXY2_3857);
            const pXY3G = geoflo.Utilities.meters2degrees(pXY3_3857);
        
            return [coords, pXY2G, pXY3G];
        }
    
        return false;
    }

    function startIdleTime () {
        var ready = setInterval(function() {
            if (geoflo.mouseIsDown) {
                geoflo.lastDragMove += 1;
                checkIdleMove();
            } else {
                geoflo.lastDragMove = 0;
                geoflo.mouseIsIdle = false;
                clearInterval(ready);
            }
        }, 1);
    }
    
    function checkIdleMove () {
        if (geoflo.lastDragMove < geoflo.options.pinning.idle) return geoflo.mouseIsIdle = false, false;
        geoflo.mouseIsIdle = true;
        geoflo.Snapping.setVertex();
        geoflo.Pinning.updateFeatures();
        return true;
    }

    function needsToFinish (type, coords) {
        var types = ['Circle', 'Icon', 'Text', 'Image'];
        if (!type) return true;
        if (types.includes(type)) return true;
        if (type === 'Rectangle' && geoflo.startPoint) return geoflo.endPoint = coords, true;
        if (type === 'Polygon' && geoflo.snappedVertex && geoflo.startPoint && geoflo.Utilities.isPointEqual(geoflo.startPoint, geoflo.snappedVertex)) return true;
        if (geoflo.snappedVertex && geoflo.Utilities.isLastIndex(geoflo.dragIndex, geoflo.hotFeature)) return true
        if (geoflo.lastClick && geoflo.Utilities.isPointEqual(geoflo.lastClick.coords, coords)) return true;
        return false;
    }

    function constrainFeatureMovement (geojsonFeatures, delta) {
        // "inner edge" = a feature's latitude closest to the equator
        let northInnerEdge = geoflo.statics.constants.LAT_MIN;
        let southInnerEdge = geoflo.statics.constants.LAT_MAX;
        // "outer edge" = a feature's latitude furthest from the equator
        let northOuterEdge = geoflo.statics.constants.LAT_MIN;
        let southOuterEdge = geoflo.statics.constants.LAT_MAX;
    
        let westEdge = geoflo.statics.constants.LNG_MAX;
        let eastEdge = geoflo.statics.constants.LNG_MIN;
    
        geojsonFeatures.forEach((feature) => {
            //const bounds = extent(feature); Need to add Turf bounds here
            const featureSouthEdge = bounds[1];
            const featureNorthEdge = bounds[3];
            const featureWestEdge = bounds[0];
            const featureEastEdge = bounds[2];
            if (featureSouthEdge > northInnerEdge) northInnerEdge = featureSouthEdge;
            if (featureNorthEdge < southInnerEdge) southInnerEdge = featureNorthEdge;
            if (featureNorthEdge > northOuterEdge) northOuterEdge = featureNorthEdge;
            if (featureSouthEdge < southOuterEdge) southOuterEdge = featureSouthEdge;
            if (featureWestEdge < westEdge) westEdge = featureWestEdge;
            if (featureEastEdge > eastEdge) eastEdge = featureEastEdge;
        });
    
    
        // These changes are not mutually exclusive: we might hit the inner
        // edge but also have hit the outer edge and therefore need
        // another readjustment
        const constrainedDelta = delta;
    
        if (northInnerEdge + constrainedDelta.lat > geoflo.statics.constants.LAT_RENDERED_MAX) {
            constrainedDelta.lat = geoflo.statics.constants.LAT_RENDERED_MAX - northInnerEdge;
        }
        if (northOuterEdge + constrainedDelta.lat > geoflo.statics.constants.LAT_MAX) {
            constrainedDelta.lat = geoflo.statics.constants.LAT_MAX - northOuterEdge;
        }
        if (southInnerEdge + constrainedDelta.lat < geoflo.statics.constants.LAT_RENDERED_MIN) {
            constrainedDelta.lat = geoflo.statics.constants.LAT_RENDERED_MIN - southInnerEdge;
        }
        if (southOuterEdge + constrainedDelta.lat < geoflo.statics.constants.LAT_MIN) {
            constrainedDelta.lat = geoflo.statics.constants.LAT_MIN - southOuterEdge;
        }
        if (westEdge + constrainedDelta.lng <= geoflo.statics.constants.LNG_MIN) {
            constrainedDelta.lng += Math.ceil(Math.abs(constrainedDelta.lng) / 360) * 360;
        }
        if (eastEdge + constrainedDelta.lng >= geoflo.statics.constants.LNG_MAX) {
            constrainedDelta.lng -= Math.ceil(Math.abs(constrainedDelta.lng) / 360) * 360;
        }
    
        return constrainedDelta;
    }

    function calculateOrientedAnglePolygon (feature) {
        var geometry = feature.geometry;
        var coords = geometry.coordinates;
        const coordType = geometry.type;
        coords = coordType === 'Linestring' ? coords : coords[0];
    
        const pXY0 = coords[0];
        const pXY0_3857 = geoflo.Utilities.degrees2meters(pXY0);
        const pXY1 = coords[1];
        const pXY1_3857 = geoflo.Utilities.degrees2meters(pXY1);
        const angleStdGraus = Math.atan2(pXY1_3857[1] - pXY0_3857[1], pXY1_3857[0] - pXY0_3857[0]) * 180 / Math.PI;
    
        let angleSudGraus = -1.0 * (angleStdGraus + 90);
        const angle = angleSudGraus < 0 ? angleSudGraus + 360 : angleSudGraus;
        return parseFloat((angle).toFixed(2));
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Draw);

/***/ }),

/***/ "./src/Events.js":
/*!***********************!*\
  !*** ./src/Events.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const events = [
    'map.enable',
    'map.disable',
    'map.ready',
    'map.redraw',
    'map.refresh',
    'mode.change',
    'theme.change',
    'sources.add',
    'source.add',
    'source.hot',
    'layers.add',
    'layers.remove',
    'layer.add',
    'control.add',
    'control.remove',
    'features.zoom',
    'features.add',
    'features.delete',
    'features.update',
    'features.import',
    'features.export',
    'features.offset',
    'feature.add',
    'feature.delete',
    'feature.select',
    'feature.deselect',
    'feature.update',
    'feature.history',
    'select.load',
    'select.add',
    'select.remove',
    'select.activate',
    'select.deactivate',
    'draw.activate',
    'draw.deactivate',
    'draw.start',
    'draw.finish',
    'draw.cancel',
    'mesh.load',
    'text.add',
    'icon.add',
    'vertex.find',
    'vertex.on',
    'vertex.off',
    'vertex.add',
    'vertex.drag',
    'vertex.dragsnap',
    'vertex.delete',
    'overpass.add',
    'snapping.activate',
    'snapping.deactivate',
    'snapping.add',
    'snapping.refresh',
    'snapping.delete',
    'pinning.activate',
    'pinning.deactivate',
    'pinning.add',
    'pinning.update',
    'routing.activate',
    'routing.deactivate',
    'routing.add',
    'painting.activate',
    'painting.deactivate',
    'painting.start',
    'painting.update',
    'gamepad.init',
    'gamepad.add',
    'gamepad.remove',
    'gamepad.hold',
    'gamepad.press',
    'gamepad.release',
    'gamepad.connect',
    'gamepad.disconnect',
    'locate.on',
    'locate.off',
    'locate.update'
]

const Events = function (geoflo) {
    const mapMoveStart = function (event) {
        geoflo.mapMoving = event;
        if (geoflo.settingExtent) return;
        if (geoflo.locate) geoflo.locate.onMapMove(event);
        geoflo.setIcon(event);
    };

    const mapMoving = function (event) {
        geoflo.mapMoving = event;
        if (geoflo.settingExtent) return;
        geoflo.setIcon(event);
        geoflo.setCenterMarker();
        geoflo.locate && geoflo.locate.following ? geoflo.setMapClass('disable') : false;
    };

    const mapMoveEnd = function (event) {
        geoflo.mapMoving = false;
        if (geoflo.settingExtent) return;
        geoflo.onMapMove(event);
        if (geoflo.locate) geoflo.locate.onMapMove(event);
        geoflo.setIcon(event);
    };

    const mouseMove = function (event) {
        var painting = geoflo.options.painting && geoflo.options.painting.enable;
        painting = painting && geoflo.currentMode && geoflo.currentMode.id === 'draw';
        
        geoflo.locate && geoflo.locate.following ? geoflo.setMapClass('disable') :
        geoflo.dragMoving ? geoflo.setMapClass('grabbing') :
        geoflo.addingVertexOnLine || geoflo.canAddVertex ? geoflo.setMapClass('pointer') :
        geoflo.canDragMove ? geoflo.setMapClass('grab') :
        painting? geoflo.setMapClass('painting') :
        geoflo.setMapClass('pointer');

        geoflo.lastMouseEvent = event;
        geoflo.currentMode.handleMove ? geoflo.currentMode.handleMove(event) : false;
    };

    const mouseDown = function (event) {
        var painting = geoflo.options.painting && geoflo.options.painting.enable;
        painting = painting && geoflo.currentMode && geoflo.currentMode.id === 'draw';
        
        geoflo.locate && geoflo.locate.following ? geoflo.setMapClass('disable') :
        painting? geoflo.setMapClass('painting') :
        geoflo.dragMoving ? geoflo.setMapClass('grabbing') :
        geoflo.addingVertexOnLine ? geoflo.setMapClass('grabbing') :
        geoflo.canDragMove ? geoflo.setMapClass('grab') :
        geoflo.lastClick ? geoflo.setMapClass('grabbing') :
        geoflo.setMapClass('pointer');
        
        geoflo.mouseIsDown = [event.lngLat.lng, event.lngLat.lat];
        geoflo.currentMode.handleDown ? geoflo.currentMode.handleDown(event) : false;
    };

    const mouseUp = function (event) {
        geoflo.mouseIsDown = false;
        geoflo.locate && geoflo.locate.following ? geoflo.setMapClass('disable') : geoflo.setMapClass('pointer');
        geoflo.currentMode.handleUp ? geoflo.currentMode.handleUp(event) : false;
    };

    const mouseClick = async function (event) {
        if (event.type.includes('preclick')) return geoflo.currentMode.handlePreclick ? geoflo.currentMode.handlePreclick(event) : false;
        geoflo.currentMode.handleClick ? geoflo.currentMode.handleClick(event) : false;
    };

    const mouseDrag = function (event) {
        geoflo.locate && geoflo.locate.following ? geoflo.setMapClass('disable') :
        geoflo.dragMoving ? geoflo.setMapClass('grabbing') :
        geoflo.canDragMove ? geoflo.setMapClass('grab') :
        geoflo.setMapClass('move');

        geoflo.currentMode.handleDrag ? geoflo.currentMode.handleDrag(event) : false;
    };

    const mouseleave = function (event) {
        geoflo.currentMode.handleOffMap ? geoflo.currentMode.handleOffMap(event) : false;
    };

    const mouseover = function (event) {
        geoflo.currentMode.handleOnMap ? geoflo.currentMode.handleOnMap(event) : false;
    };

    const keypress = function (event) {
        if (geoflo.textMarker) return;
        
        console.log("keycode: ", event.keyCode, " =>", event.key, " | Code:", event.code, " Event:", event);
        const buttonOptions = geoflo.getButtons();

        let keyHandled = false;

        Object.keys(buttonOptions).forEach((buttonId) => {
            const option = buttonOptions[buttonId];
            const key = geoflo.options.keys[buttonId];

            if (key === event.key) {
                option.button.click();
                keyHandled = true;
            } else if (key === event.keyCode) {
                option.button.click();
                keyHandled = true;
            } else if (option.keycode && option.keycode === event.keyCode) {
                option.button.click();
                keyHandled = true;
            }
        });

        if (geoflo.options.commands) {
            geoflo.options.commands.forEach(function (c) {
                if (c.key === event.keyCode || c.key === event.key || c.key === event.code) {
                    if (!c.command || typeof c.command !== 'function') return;
                    c.command(event, geoflo, c);
                    keyHandled = true;
                }
            })
        }

        if (keyHandled) { return keyHandled }

        if (event.key.includes('Arrow')) {
            
        }

        switch (event.code) {
            case "Enter": {
                geoflo.setMode();
                break;
            }
            case "NumpadEnter": {
                geoflo.setMode();
                break;
            }
            case "Escape": {
                geoflo.hotFeature = null;
                geoflo.setMode();
                break;
            }
            case "Home": {
                geoflo.moveSelectedFeatures(1);
                break;
            }
            case "End": {
                geoflo.moveSelectedFeatures(-1);
                break;
            }
            case "Delete": {
                if (geoflo.mode === geoflo.statics.constants.modes.SELECT) {
                    if (geoflo.hasSelection()) { geoflo.removeSelection(); }
                } else if (geoflo.mode === geoflo.statics.constants.modes.DRAW) {
                    geoflo.currentMode.deleteVertex();
                }
                break;
            }
        }
    };

    const touchstart = function (event) {
        geoflo.currentMode.handleTouch ? geoflo.currentMode.handleTouch(event) : false;
    };

    const touchend = function (event) {
        geoflo.currentMode.handleTouch ? geoflo.currentMode.handleTouch(event) : false;
    };

    const touchmove = function (event) {
        geoflo.currentMode.handleTouch ? geoflo.currentMode.handleTouch(event) : false;
    };

    const touchcancel = function (event) {
        geoflo.currentMode.handleTouch ? geoflo.currentMode.handleTouch(event) : false;
    };

    const gamepadconnected = function (event) {
        geoflo.addGamepad(event.gamepad || event.detail.gamepad);
    };

    const gamepaddisconnected = function (event) {
        geoflo.removeGamepad(event.gamepad || event.detail.gamepad);
    };

    const handleOrientation = function (event) {
        geoflo.updateOrientation({
            alpha: event.alpha,
            beta: event.beta,
            gamma: event.gamma
        })
    };

    const dragStart = function (event) {
        //if (geoflo.locate && geoflo.locate.following) return event.originalEvent.preventDefault();
    };

    const rotatePitch = function (event) {
        geoflo.setMapClass('grabbing');
        geoflo.setIcon(event);
        geoflo.setCenterMarker({ transform: true });
    };



    const fireEvent = function fireEvent (event) {
        const name = event.type.split(':')[1];
        
        const detail = {
            data: event.detail,
            type: name.split('.')[0],
            action: name.split('.')[1],
            target: geoflo,
        }

        const details = { name: name, detail: detail };
        geoflo.map.fire(geoflo.id, details);
    }

    const contextMenu = function (event) {
        geoflo.currentMode.handleContext ? geoflo.currentMode.handleContext(event) : false;
    }

    const sourceData = function (event) {
        if (!event.sourceDataType || !event.sourceDataType === 'content' || !event.sourceId) return false;
        const id = event.sourceId;

        const detail = {
            id: id,
            data: event.source.data,
            type: event.type,
            target: geoflo,
        }

        id === geoflo.statics.constants.sources.HOT ? geoflo.fire('source.hot', detail) : false;
    }

    

    function addEventListeners () {
        geoflo.map.on("movestart", mapMoveStart);
        geoflo.map.on("move", mapMoving);
        geoflo.map.on("moveend", mapMoveEnd);
        geoflo.map.on("mousemove", mouseMove);

        geoflo.map.on('preclick', mouseClick);
        geoflo.map.on('click', mouseClick);
        geoflo.map.on('tap', mouseClick);

        geoflo.map.on('dragstart', dragStart);
        geoflo.map.on('drag', mouseDrag);
        geoflo.map.on('mousedown', mouseDown);
        geoflo.map.on('mouseup', mouseUp);

        geoflo.map.on('rotatestart', rotatePitch);
        geoflo.map.on('pitchstart', rotatePitch);
        geoflo.map.on('rotate', rotatePitch);
        geoflo.map.on('pitch', rotatePitch);

        geoflo.map.on('touchstart', touchstart);
        geoflo.map.on('touchend', touchend);
        geoflo.map.on('touchmove', touchmove);
        geoflo.map.on('touchcancel', touchcancel);

        geoflo.map.on('contextmenu', contextMenu);
        geoflo.map.on('sourcedata', sourceData);

        events.forEach(function(event) { geoflo.map.on(geoflo.id + ':' + event, fireEvent); })

        geoflo.container.addEventListener('keydown', keypress);
        geoflo.container.addEventListener('mouseover', mouseover);
        geoflo.container.addEventListener('mouseleave', mouseleave);

        window.addEventListener("gamepadconnected", gamepadconnected);
        window.addEventListener("gamepaddisconnected", gamepaddisconnected);
        window.addEventListener("deviceorientation", handleOrientation, true);
    }

    function removeEventListeners () {
        geoflo.map.off("movestart", mapMoveStart);
        geoflo.map.off("move", mapMoving);
        geoflo.map.off("moveend", mapMoveEnd);
        geoflo.map.off("mousemove", mouseMove);

        geoflo.map.off('preclick', mouseClick);
        geoflo.map.off('click', mouseClick);
        geoflo.map.off('tap', mouseClick);

        geoflo.map.off('dragstart', dragStart);
        geoflo.map.off('drag', mouseDrag);
        geoflo.map.off('mousedown', mouseDown);
        geoflo.map.off('mouseup', mouseUp);

        geoflo.map.off('rotatestart', rotatePitch);
        geoflo.map.off('pitchstart', rotatePitch);

        geoflo.map.off('touchstart', touchstart);
        geoflo.map.off('touchend', touchend);
        geoflo.map.off('touchmove', touchmove);
        geoflo.map.off('touchcancel', touchcancel);
        
        geoflo.map.off('contextmenu', contextMenu);
        geoflo.map.off('sourcedata', sourceData);

        events.forEach(function(event) { geoflo.map.off(geoflo.id + ':' + event, fireEvent); })

        geoflo.container.removeEventListener('keydown', keypress);
        geoflo.container.removeEventListener('mouseover', mouseover);
        geoflo.container.removeEventListener('mouseleave', mouseleave);

        window.removeEventListener("gamepadconnected", gamepadconnected);
        window.removeEventListener("gamepaddisconnected", gamepaddisconnected);
        window.removeEventListener("deviceorientation", handleOrientation, true);
    }

    return {
        addEventListeners,
        removeEventListeners
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Events);

/***/ }),

/***/ "./src/Exploring.js":
/*!**************************!*\
  !*** ./src/Exploring.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Exploring
 * @description This mixin provides the exploring functionality for the GeoFlo application. It allows users to explore features on the map by creating a buffer around the feature and snapping to nearby features.
 * @param {Object} mode - The mode object containing the type of mode.
 * @returns {Object} The Exploring object.
 */
const Exploring = function (mode) {
    const geoflo = this.geoflo;
    this.type = mode.type;

	/**
     * Activates the exploring functionality by enabling the 'exploring' option.
     * @function
     * @name activate
     * @memberof module:geoflo.Exploring
     * @description Activates by setting the 'enabled' property to true and enabling the 'exploring' option.
     * @returns {void}
     */
    this.activate = function () {
        this.enabled = true;
        geoflo.options['exploring'].enable = true;
    }

	/**
	 * @function
     * @memberof module:geoflo.Exploring
	 * @name deactivate
	 * @description This function sets the 'enabled' and 'currentMatch' properties to false, and disables the 'exploring' option in the context.
	 */
    this.deactivate = function () {
        this.enabled = false;
        this.currentMatch = false;
        geoflo.options['exploring'].enable = false;
    }


	/**
	 * @function
     * @memberof module:geoflo.Exploring
	 * @name setFeatures
	 * @description This function sets features on the map based on the provided coordinates and options. It calculates the buffer based on the map zoom level and retrieves features within the buffer area. If routing is enabled, it calculates the route between two points.
	 * @param {Array<number>} coords - The coordinates to set features around.
	 * @param {Object} [options={}] - Additional options for setting features.
	 * @returns {boolean} Returns false if the function is not executed successfully.
	 */
    this.setFeatures = function (coords, options={}) {
        if (geoflo.mapMoving || !this.enabled || geoflo.currentMode.id !== 'draw') return false;
        
        if (!geoflo.Routing.enabled) {
            if (geoflo.hotFeature) geoflo.hotFeature.geometry.coordinates.pop();
            var fromPoint = geoflo.currentMode.firstClick || !geoflo.hotFeature ? geoflo.firstClick.coords : geoflo.hotFeature.geometry.coordinates[geoflo.hotFeature.geometry.coordinates.length - 1];
            var coords = [fromPoint, coords];
            if (geoflo.Utilities.isPointEqual(coords[0], coords[1])) return false;
            return this.getRoute(coords, options);
        }

        if (geoflo.map.getZoom() < geoflo.options.exploring.minZoom) return alert(`Zoom must be lower than ${geoflo.options.exploring.minZoom}`);

        var buffer = options.buffer || ((geoflo.options.exploring.buffer * Math.pow(2, Math.max(1, 19 - geoflo.map.getZoom()))) / 100);
        var polygon = turf.bboxPolygon([ geoflo.map.getBounds().getWest(), geoflo.map.getBounds().getSouth(), geoflo.map.getBounds().getEast(), geoflo.map.getBounds().getNorth() ]);

        if (coords) polygon = turf.polygon(turf.buffer(turf.point(coords), buffer).geometry.coordinates);

        geoflo.map.getSource(geoflo.statics.constants.sources['SNAP']).setData(turf.featureCollection([]));
        geoflo.map.getSource(geoflo.statics.constants.sources['ROUTE']).setData(turf.featureCollection([]));
        geoflo.map.getSource(geoflo.statics.constants.sources['VERTEX']).setData(turf.featureCollection([polygon]));

        this.getFeatures(turf.bbox(polygon)).then(features => { setFeatures(features, options); });
    }

	/**
	 * @function
     * @memberof module:geoflo.Exploring
	 * @name setFeature
	 * @description This function creates a line feature using the given coordinates and updates the current match based on the options. It also triggers an event and updates the source data on the map.
	 * @param {Array} coords - The coordinates to create the line feature. Default is an empty array.
	 * @param {Object} options - Additional options for setting the feature, such as the starting point. Default is an empty object.
	 * @returns {Object} The updated feature based on the provided coordinates and options.
	 */
    this.setFeature = function (coords=[], options={}) {
        if (!geoflo.hotFeature) return false;
        if (!coords.length) return geoflo.hotFeature;

        var feature = turf.lineString(coords);
        feature.geometry.coordinates[0] = options.start || feature.geometry.coordinates[0];

        if (this.currentMatch) feature = turf.lineString(geoflo.Utilities.combineSameTypeFeatures([this.currentMatch, feature]));
        this.currentMatch = feature;

        geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
        geoflo.fire('exploring.match', { route: this.currentMatch });
        return mode.updateHotSource(this.currentMatch);
    }


	/**
	 * @function
     * @memberof module:geoflo.Exploring
	 * @name getFeatures
	 * @description Retrieves features based on the provided bounds using Overpass API.
	 * @param {Array} bounds - An array containing the bounding box coordinates [minLon, minLat, maxLon, maxLat].
	 * @returns {Promise<Array>} An array of GeoJSON features within the specified bounds.
	 */
    this.getFeatures = async function (bounds) {
        if (!bounds || !bounds.length || bounds.length != 4) return false;

        var tag = `way["highway"](${bounds[1]} , ${bounds[0]} , ${bounds[3]} , ${bounds[2]});`;

        if (geoflo.map.getZoom() < 12) {
            tag = `way["highway"="motorway"](${bounds[1]} , ${bounds[0]} , ${bounds[3]} , ${bounds[2]});`
            /* way["highway"="primary"](${bounds[1]} , ${bounds[0]} , ${bounds[3]} , ${bounds[2]});
            way["highway"="secondary"](${bounds[1]} , ${bounds[0]} , ${bounds[3]} , ${bounds[2]});` */
        }

        geoflo.overpassDownloading = true;

        const query = '[out:json][timeout:25];(' + tag + ');out body;>;out skel qt;';
        const data = await fetch("//overpass-api.de/api/interpreter?data=" + query, { method: 'GET' } );
        const response = await data.json();
        const geojson = convertFromOverpassToGeojson(response);
        return geojson && geojson.features ? geojson.features : [];
    }

	/**
	 * @function
     * @memberof module:geoflo.Exploring
	 * @name getMatch
	 * @description This function takes an array of coordinates and optional options to fetch a matched route from the OSRM API.
	 * @param {Array} coords - An array of coordinates to match the route against.
	 * @param {Object} options - Optional parameters for customization.
	 * @param {Object} options.feature - Optional feature to match against.
	 * @param {Number|Function} options.radius - Optional radius for matching or a function to calculate it.
	 * @param {String} options.profile - Optional profile for routing (default: 'driving').
	 * @param {Boolean} options.set - Optional flag to set the feature if matching is successful.
	 * @returns {Promise<Array|Boolean>} The matched route response object or false if no coordinates are provided or matching fails.
	 */
    this.getMatch = async function (coords=[], options={}) {
        if (!coords.length) return false;

        var tolerance = geoflo.options.exploring.tolerance;
        var feature = options.feature || turf.cleanCoords(turf.lineString(coords));
        feature = turf.simplify(feature, { mutate: true, tolerance: typeof tolerance === 'function' ? tolerance(geoflo.map) : tolerance, highQuality: true });

        var coordinates = feature.geometry.coordinates;
        if (coordinates.length < 2) return false;

        geoflo.overpassDownloading = true;

        options.radius = options.radius || 50;
        options.profile = options.profile || 'driving';
        coords = coordinates.join(';');

        const radiuses = coordinates.map(() => options.radius).join(';');

        const query = 'https://router.project-osrm.org/match/v1/' + options.profile + '/' + coords +
            '?overview=simplified' +
            '&radiuses=' + radiuses +
            '&generate_hints=false' +
            '&skip_waypoints=true' +
            '&gaps=ignore' +
            '&annotations=nodes' +
            '&tidy=true' +
            '&geometries=geojson';

        const match = await fetch(query, { method: 'GET' } );
        const response = await match.json();

        geoflo.overpassDownloading = false;
        if (response.code !== 'Ok') alert(`${response.code} - ${response.message}.`);
        return !options.set ? response : !response.matchings || !response.matchings.length ? feature : this.setFeature(response.matchings[0].geometry.coordinates, options);
    }

	/**
	 * @function
     * @memberof module:geoflo.Exploring
	 * @name getRoute
	 * @description Retrieves a route based on the provided coordinates using the OSRM routing service.
	 * @param {Array} coords - Array of coordinates representing the route.
	 * @param {Object} options - Additional options for the route calculation.
	 * @param {Object} options.feature - Feature object to use for the route calculation.
	 * @param {String} options.profile - Profile type for the route calculation (default: 'driving').
	 * @param {Boolean} options.set - Flag to indicate whether to set the route as a feature.
	 * @returns {Promise<Array|Boolean>} The route response object or false if no coordinates are provided or the route calculation fails.
	 */
    this.getRoute = async function (coords=[], options={}) {
        var feature = options.feature ? options.feature : !coords.length ? false : turf.cleanCoords(turf.lineString(coords));
        if (!feature) return false;
        
        var coordinates = feature.geometry.coordinates;
        if (coordinates.length < 2) return false;

        geoflo.overpassDownloading = true;
        options.profile = options.profile || 'driving';
        coords = coordinates.join(';');

        const query = 'https://router.project-osrm.org/route/v1/' + options.profile + '/' + coords +
            '?overview=simplified' +
            '&continue_straight=true' +
            '&annotations=nodes' +
            '&geometries=geojson';

        const match = await fetch(query, { method: 'GET' } );
        const response = await match.json();

        geoflo.overpassDownloading = false;
        if (response.code !== 'Ok') alert(`${response.code} - ${response.message}.`);
        return !options.set ? response : !response.routes || !response.routes.length ? feature : this.setFeature(response.routes[0].geometry.coordinates, options);
    }
    


    if (geoflo.options['exploring'].enable) this.activate();



    function convertFromOverpassToGeojson(op) {
        const elementsById = {};

        op.elements.forEach((element) => {
            const key = `${element.type}-${element.id}`;
            elementsById[key] = element;
        });

        const wayToPoints = function (way) {
            const line = [];
            way.nodes.forEach((nodeId) => {
                const key = `node-${nodeId}`;
                const nodeElement = elementsById[key];
                if (nodeElement) {
                    line.push([nodeElement.lon, nodeElement.lat]);
                } else {
                    console.error("Node ", key, " missing");
                }
            });
            return line;
        };

        const lineStrings = [];

        op.elements.forEach((element) => {
            if (element.type === "way") {
                const line = wayToPoints(element);
                if (line.length > 1) {
                    lineStrings.push(turf.lineString(line, element.tags));
                }
            } else if (element.type === "relation") {
                element.members.forEach((member) => {
                    const memberType = member.type;
                    if (memberType === "way") {
                        const key = `way-${member.ref}`;
                        const way = elementsById[key];
                        const line = wayToPoints(way);
                        if (line.length > 1) {
                            lineStrings.push(turf.lineString(line, element.tags));
                        }
                    }
                });
            }
        });

        return geoflo.turf.featureCollection(lineStrings);
    }

    function setFeatures(features=[]) {
        geoflo.overpassDownloading = false;
        if (geoflo.mapMoving || !geoflo.Exploring.enabled || geoflo.currentMode.id !== 'draw') return geoflo.updateMeshData([], true);
        geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([]));
        geoflo.Snapping.addFeature(geoflo.snapFeature);
        geoflo.setMeshFeatures(features);
        geoflo.currentMode.updateHotSource();
        geoflo.fire('overpass.add', { features: features });
        if (!geoflo.currentMode.firstClick) return features;
        var points = turf.explode(turf.featureCollection(features))
        var closestPoint = turf.nearestPoint(turf.point(geoflo.currentMode.firstClick.coords), points);
        geoflo.lastClick = { coords: closestPoint.geometry.coordinates };
        return features;
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Exploring);

/***/ }),

/***/ "./src/Features.js":
/*!*************************!*\
  !*** ./src/Features.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Features
 * @description This module provides the features functionality for the Geoflo application. It allows users to add, remove, update, and retrieve features from the map.
 * @returns {Object} Returns the Features object.
 * @throws {Error} Throws an error if no map object is provided.
 */
const Features = function () {
    const geoflo = this.geoflo;
    if (!geoflo.map) { throw new Error('No map object provided!') }

    const coldFeatures = [];
    this.offsetLines = false;

    
	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name getColdFeatures
	 * @description This function returns an array of cold features.
	 * @return {Array} An array of cold features.
	 */
    this.getColdFeatures = function () {
        return coldFeatures;
    };

	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name getFeatureById
	 * @description Retrieves a feature by its ID from a given source. If the ID is an array with multiple IDs, it retrieves multiple features. If the ID is an object, it tries to extract the ID from the object's parent, properties, or id fields.
	 * @param {string|number|Array} id - The ID or array of IDs of the feature(s) to retrieve.
	 * @returns {Object|Array} The feature or array of features corresponding to the provided ID(s).
	 */
    this.getFeatureById = function (id) {
        if (Array.isArray(id) && id.length > 1) return this.getFeaturesById(id);
        if (typeof id === 'object') id = id.parent || id.properties.parent || id.id || id.properties.id;
        return getFeatureById(id);
    };

	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name getFeaturesById
	 * @description Retrieves features by their IDs.
	 * @param {Array} ids - An array of feature IDs to retrieve.
	 * @returns {Array} - An array of features corresponding to the provided IDs.
	 */
    this.getFeaturesById = function (ids) {
        const addedIds = [];
        const result = [];

        ids.forEach((id) => {
            const feature = this.getFeatureById(id);
            if (feature && !addedIds.includes(id)) addedIds.push(id), result.push(feature);
        }, this);

        return result;
    };

	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name getType
	 * @description This function returns the type of the input feature.
	 * @param {any} feature - The feature whose type needs to be determined.
	 * @returns {string} The type of the input feature.
	 */
    this.getType = function (feature) {
        return getType(feature);
    }

	/**
	 * @function
     * @memberof module:geoflo.Features getUnit
	 * @name getUnit
	 * @description Retrieves the unit associated with a given feature type from the context options.
	 * @param {Object} feature - The feature object for which the unit needs to be retrieved.
	 * @returns {string|boolean} The unit associated with the feature type if found, otherwise false.
	 */
    this.getUnit = function (feature) {
        if (!feature) return false;

        var type = feature.properties.type;
        if (!type) return false;

        if (!geoflo.options.units || !geoflo.options.units[type]) return false;

        return geoflo.options.units[type];
    };

	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name getUnits
	 * @param {Object} feature - The feature for which units need to be calculated.
	 * @returns {number} - The calculated units (length or area) of the feature.
	 */
    this.getUnits = function (feature) {
        var unit = this.getUnit(feature);
        if (!unit || !feature) return false;

        var units = 1;
        var type = feature.properties.type;

        if (type === "Polyline") {
            units = turf.length(feature, { units: 'meters' });
        } else if (type === 'Polygon') {
            units = turf.area(feature);
        } else if (type === 'Rectangle') {
            units = turf.area(feature);
        }

        return units;
    };



	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name setFeaturesState
	 * @description Sets the state of multiple features in a map.
	 * @param {Array} features - An array of features to set the state for.
	 * @param {boolean} state - The state to set for the features.
	 * @returns {Array} - The updated array of features with the new state.
	 */
    this.setFeaturesState = function (features=[], state) {
        if (!state || !features.length) return [];
        
        features.forEach(function(feature) {
            var id = feature.id || feature.properties.id;
            if (geoflo.hotFeature && geoflo.hotFeature.id === id) return;
            this.setFeatureState(id, state);
        }, this)

        return features;
    };

	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name setFeatureState
	 * @description This function sets the state of a feature and its children in the map by updating their feature state.
	 * @param {string} id - The ID of the parent feature.
	 * @param {object} state - The state object to set for the features.
	 * @returns {array} - An array of features whose state was updated.
	 */
    this.setFeatureState = function (id, state) {
        if (!state || !id) return false;

        var features = getFeaturesByParent(id);
        
        features.forEach(function(feature) {
            var id = feature.id || feature.properties.id;
            geoflo.map.setFeatureState({ source: feature.source, id: id }, state);
        })

        return features;
    };

	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name setText
	 * @description Sets text features on the map based on the provided features.
	 * @param {Object} features - The features to set text on.
	 * @returns {boolean} Returns false if no features are provided or if the features array is empty.
	 */
    this.setText = function (features=[]) {
        if (!geoflo.options.showFeatureText) return false;

        var source = geoflo.statics.constants.sources.HOTTEXT;

        this.textFeatures = [];

        if (features.features) features = features.features;
        if (!Array.isArray(features)) features = [features];

        features.forEach(function (feature) {
            var type = feature.properties.type;
            if (!type) return;

            this.currentType = type;

            if (type === 'Polyline' && geoflo.Utilities.isValidLineString(feature) && geoflo.options.showLineUnits) {
                turf.segmentEach(feature, setLineText.bind(this));
            } else {
                source = geoflo.statics.constants.sources.SELECT;
                var feat = geoflo.Utilities.cloneDeep(feature);
                
                feat.properties = {
                    type: 'Text',
                    text: feature.properties.text,
                    style: feature.properties.style
                }
                
                this.textFeatures.push(feat);
            }
        }, this)
        
        geoflo.map.getSource(source).setData(turf.featureCollection(this.textFeatures));

        delete this.textFeatures;
        delete this.currentType;
    }



	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name addFeature
	 * @description This function adds a feature to the map with the given properties. It cleans the coordinates, truncates them, assigns deep properties, sets the source, and removes unnecessary properties before adding the feature to the map.
	 * @param {Object} feature - The feature object to be added to the map.
	 * @param {Object} [properties={}] - Additional properties to be assigned to the feature.
	 * @returns {Object} The feature object that was added to the map.
	 */
    this.addFeature = function (feature, source, properties={}) {
        if (!feature || !feature.properties) return false;
        
        feature = turf.cleanCoords(feature);
        feature = turf.truncate(feature, { precision: 6, coordinates: 3, mutate: true });

        feature.properties = geoflo.Utilities.assignDeep(properties, feature.properties);
        feature.source = source || feature.source || feature.properties.source || geoflo.statics.constants.sources.COLD;
        
        delete feature.properties.source;
        delete feature.properties.painting;
        delete feature.properties.edit;
        delete feature.properties.new;
        delete feature.properties.selected;
        delete feature.properties.hidden;
        delete feature.properties.offset;
        
        feature.properties.style = feature.properties.style || {};

        this.addUnits(feature);
        this.addFeatures([feature]);
        return feature;
    };

	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name addFeatures
	 * @description This function takes an array of features and adds them to the map. It also updates the source if any changes are made.
	 * @param {Array} features - An array of features to be added to the map.
	 * @param {boolean} unselect - A flag indicating whether to unselect the features.
	 * @returns {Array} The array of features that were added to the map.
	 */
    this.addFeatures = function (features, unselect, id) {
        var update;
        var sources = [];

        features.forEach((feature) => {
            feature.id = feature.id || feature.properties.id || URL.createObjectURL(new Blob([])).slice(-36);
            if (id && feature.id !== id) return false;

            feature.source = feature.source || feature.properties.source || geoflo.statics.constants.sources.COLD;
            feature.properties.id = feature.id;
            feature.properties.type = this.getType(feature);

            var index = coldFeatures.findIndex(function(f) { if (f.id === feature.id || f.properties.id === feature.id) return f; });

            if (index > -1) {
                this.setFeatureState(feature.id, { hidden: !unselect });
                coldFeatures[index] = feature;
                update = !unselect;
            } else {
                update = !this.updatingFeatures;
                coldFeatures.push(feature);
            }

            if (unselect) delete feature.properties._selected;
            if (update && !sources.includes(feature.source)) sources.push(feature.source);
        }, this);

        if (update) this.updateSource(sources);
        return features;
    };

	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name addUnits
	 * @description Adds units to a feature's geometry based on the specified conversion or default unit.
	 * @param {Object} feature - The feature object to which units will be added.
	 * @param {String} convertTo - The unit to which the feature's units will be converted. If not provided, the default unit will be used.
	 * @returns {Object} The feature object with added units.
	 */
    this.addUnits = function (feature, convertTo) {
        var unit = convertTo || this.getUnit(feature);
        if (!unit) return false;

        var units = this.convertUnits(feature, null, convertTo);

        feature.geometry.units = units;
        feature.geometry.unit = unit;
        return feature;
    };


    this.selectFeatures = function (features) {
        if (!features || !features.length) return false;

        var selected = geoflo.getSelectedFeatures();

        features.forEach(function (feature) {
            var id = feature.id || feature.properties.id;
            var index = selected.findIndex((f) => { return f.id === id || f.properties.id === id });

            if (index > -1) return false;

            feature.properties._selected = true;
            selected.push(feature);
        })

        return selected;
    }



	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name updateFeatures
	 * @description This function updates the coordinates of features in a map based on the provided coordinates. It iterates through the features array, retrieves the original feature by ID, and updates its geometry coordinates based on the feature type. It then adds units to the updated feature and updates the source of the map.
	 * @param {Array} features - An array of features to update.
	 * @param {Array} coords - The new coordinates to set for the features.
	 */
    this.updateFeatures = function(features, options={}) {
        features = features || geoflo.getFeatures();

        var sources = [];
        var selectedFeatures = geoflo.getSelectedFeatures();

        this.updatingFeatures = true;

        features.forEach(function(feature) {
            var id = feature.id || feature.properties.id;
            if (!id) return false;

            var originalFeature = this.getFeatureById(id);
            if (!originalFeature || originalFeature === undefined) return this.addFeature(feature);

            var selected = feature.properties._selected || selectedFeatures.find((feature) => { return feature.id === id || feature.properties.id === id });

            if (selected && !geoflo.noSelect) {
                selected.geometry.coordinates = feature.geometry.coordinates;
                selected.properties = feature.properties;
                selected.properties._selected = true;
                /* geoflo.Layers.getLayer(geoflo.statics.constants.sources.SELECT).forEachLayer(function (layer) { }) */
                return geoflo.map.getSource(geoflo.statics.constants.sources.SELECT).setData(turf.featureCollection(selectedFeatures));
            } else if (!sources.includes(originalFeature.source)) {
                sources.push(originalFeature.source);
            }
            
            if (options.type === 'pinning') {
                if (!options.coords) return false;

                originalFeature.geometry.type === 'Point' ? originalFeature.geometry.coordinates = coords :
                originalFeature.geometry.type === 'Polygon' && coords ? originalFeature.geometry.coordinates[0][feature.index] = coords :
                originalFeature.geometry.type === 'LineString' && coords ? originalFeature.geometry.coordinates[feature.index] = coords :
                false;
            } else {
                originalFeature.geometry.coordinates = feature.geometry.coordinates;
                originalFeature.properties = feature.properties;
            }

            options.addUnits ? this.addUnits(originalFeature) : false;
        }, this);

        this.updatingFeatures = false;

        if (!sources.length) return false;
        return this.updateSource(sources);
    };

    

	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name updateSource
	 * @description Updates the source of the current object with the provided sources.
	 * @param {Array} sources - An array of sources to update the current object with.
	 * @returns {any} The result of calling the updateSource function with the provided sources.
	 */
    this.updateSource = function (sources) {
        return updateSource.call(this, sources);
    };



	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name removeFeatures
	 * @description This function removes features from the map based on the provided ID or array of IDs. It updates the map source after removing the features.
	 * @param {string|string[]} id - The ID or array of IDs of the features to be removed.
	 * @param {boolean} remove - A flag indicating whether to remove the features or not.
	 * @returns {Object[]} An array containing the removed features.
	 */
    this.removeFeatures = function (id, remove) {
        const removedFeatures = [];

        var feature;
        var sources;

        if (Array.isArray(id) && remove) {
            sources = id.map(function(layer) { return layer.details ? layer.details.id : layer.id ? layer.id : layer });

            coldFeatures.forEach((feature) => {
                if (!sources.includes(feature.source)) return;
                var index = coldFeatures.findIndex((f) => { return feature.id === f.id || feature.properties.id === f.id });
                if (index > -1) removedFeatures.push(...coldFeatures.splice(index, 1));
            })

            this.updateSource(sources);
        } else {
            feature = remove ? coldFeatures.findIndex((feature) => { return feature.id === id || feature.properties.id === id }) :
            coldFeatures.find((feature) => { return feature.id === id || feature.properties.id === id });

            if (remove) {
                if (feature > -1) {
                    removedFeatures.push(...coldFeatures.splice(feature, 1));
                    sources = removedFeatures.map((feature) => { return feature.source });
                }
                
                this.updateSource(sources);
            } else {
                removedFeatures.push(feature);
                this.setFeatureState(id, { hidden: true });
            }
        }

        return removedFeatures;
    };

	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name deleteFeatures
	 * @description Deletes all features from the coldFeatures array and updates the source.
	 * @params {Array} coldFeatures - The array of features to be deleted.
	 * @returns {void}
	 */
    this.deleteFeatures = function () {
        coldFeatures.splice(0, coldFeatures.length);
        this.updateSource();
    };
    


	/**
	 * @function
     * @memberof module:geoflo.Features
	 * @name convertUnits
	 * @description Converts the given units of a feature to the specified target units based on the feature type (Polyline, Polygon, or Rectangle).
	 * @param {Object} feature - The feature object containing properties like type.
	 * @param {number} units - The units to be converted.
	 * @param {string} convertTo - The target units to convert to (optional).
	 * @returns {number} The converted units in the target unit format.
	 */
    this.convertUnits = function (feature, units, convertTo) {
        var type = feature.properties.type;
        var unit = convertTo || this.getUnit(feature);

        units = units || this.getUnits(feature);
        
        if (type === "Polyline") {
            units = Math.round(turf.convertLength(units, 'meters', unit));
        } else if (type === 'Polygon') {
            units = Math.round(turf.convertArea(units, 'meters', unit));
        } else if (type === 'Rectangle') {
            units = Math.round(turf.convertArea(units, 'meters', unit));
        }

        units = units ? Number(units.toFixed(2)) : 0;
        return units;
    };

    


    function getFeatureById(id) {
        var feature = coldFeatures.find((feature) => { return feature.id === id || feature.properties.id === id });
        feature = feature || geoflo.getSelectedFeatures().find((feature) => { return feature.id === id || feature.properties.id === id });
        return feature;
    };

    function getFeaturesByParent (id) {
        var feature = typeof id === 'object' && id.id ? id : getFeatureById(id);
        if (!feature || !feature.source || !geoflo.map.getSource(feature.source) || !geoflo.map.getSource(feature.source)._data) return [];
        var field = geoflo.options.offsetOverlappingLines ? 'parent' : 'id';
        var features = geoflo.map.getSource(feature.source)._data.features.filter(function(f) { return f[field] === id || f.properties[field] === id });
        return features;
    };

    function createTextFeatures (feature) {
        var isLine = geoflo.Utilities.isValidLineString(feature);
        var segments = [];

        if (isLine) {
            turf.segmentEach(feature, function (currentSegment) {
                var segment = geoflo.Utilities.cloneDeep(currentSegment);
                var footage = Math.round(turf.length(segment, { units: 'miles' }) * 5280);
                var mileage = Number(turf.length(segment, { units: 'miles' }).toFixed(3));
                footage = Number(footage.toFixed(2));
                mileage = Number(mileage.toFixed(2));

                segment.properties.footage = footage;
                segment.properties.mileage = mileage;
                segment.properties.text = `${mileage} miles`;;
                segments.push(segment);
            });
        }

        return segments;
    };

    function updateSource (sources=[]) {
        var sourceFeatures = {};
        var unsourceFeatures = [];
        var textSource = geoflo.map.getSource(geoflo.statics.constants.sources.COLDTEXT);
        var coldSource = geoflo.map.getSource(geoflo.statics.constants.sources.COLD);

        geoflo.updatingSource = true;

        textSource ? textSource.setData(turf.featureCollection([])) : false;
        coldSource ? coldSource.setData(turf.featureCollection([])) : false;

        geoflo.map.getSource(geoflo.statics.constants.sources.SELECT).setData(turf.featureCollection([]));

        coldFeatures.forEach((feature) => {
            delete feature.properties.new;
            delete feature.properties.offset;

            var source = feature.source;
            if (sources.length && !sources.includes(source)) return;
            if (!source) return unsourceFeatures.push(feature);
            if (!sourceFeatures[source]) sourceFeatures[source] = [];
            sourceFeatures[source].push(feature);
        })

        if (!coldFeatures.length) {
            geoflo.Layers.getCustomLayers().forEach((layer) => {
                if (!layer.details || !layer.details.source) return;
                var source = layer.details.source;
                if (!geoflo.map.getSource(source)) return false;
                geoflo.map.getSource(source).setData(turf.featureCollection([]));
            })
        }

        Object.entries(sourceFeatures).forEach((entry) => {
            var source = entry[0];
            var features = entry[1];
            if (!geoflo.map.getSource(source)) return unsourceFeatures.push(features);
            setLineOffset(features, source);
        })

        setLineOffset(unsourceFeatures.flat(), geoflo.statics.constants.sources.COLD);
        setTimeout(() => {this.setFeaturesState(coldFeatures, { hidden: false }); }, 100);
        geoflo.fire('features.update', { features: coldFeatures });
        sourceFeatures = null;
        unsourceFeatures = null;
        geoflo.updatingSource = false;
        return coldFeatures;
    };

    function setLineText (segment) {
        segment = geoflo.Utilities.cloneDeep(segment);
        segment.properties.type = this.currentType;
        
        var text = turf.point(segment.geometry.coordinates[1]);
        var units = this.getUnits(segment);
        var unit = 'feet';

        units = this.convertUnits(segment, units, unit);

        text.properties.units = units;
        text.properties.unit = unit;
        text.properties.text = `${units} ${unit}`;
        text.properties.transform = 'uppercase';
        text.properties.anchor = 'bottom-left';

        this.textFeatures.push(text);
        return text;
    }

    function setLineOffset (features, source) {
        if (!features || !features.length || !source || !geoflo.map.getSource(source)) return false;
        if (!geoflo.options.offsetOverlappingLines) return geoflo.map.getSource(source).setData(turf.featureCollection(features));

        var mesh = new geoflo.Mesh(features, true);
        var offset = mesh.getFeatures();

        offset.forEach(function (feature) {
            var f = features.find(function (fe) { return fe.id === feature.parent });
            if (!f) return;
            feature.source = source;
            feature.properties.style = f.properties.style || feature.properties.style;
            setOverlapOffset(offset, feature)
        });

        geoflo.map.getSource(source).setData(turf.featureCollection(offset));
        geoflo.fire('features.offset', { features: features, offset: offset, source: source });

        mesh = null;
        offset = null;
    };

    function setOverlapOffset (features, feature) {
        if (!geoflo.options.offsetOverlappingLines) return false;
        if (!isPolyline(feature)) return false;
        if (feature.properties.offset) return false;

        var offset = 6;
        var overlaps = [];

        features.forEach(function (f) {
            if (!isPolyline(f)) return false;
            if (f.parent === feature.parent) return false;
            if (f.properties.offset) return false;

            var overlap = turf.booleanOverlap(f, feature) || turf.booleanWithin(f, feature);
            if (!overlap) return false;

            overlaps.push(f)
        }, this)

        overlaps.forEach(function (f) {
            f.properties.offset = offset;
            offset = offset * 2;
        }, this)
    };

    function setWithinOffset (features) {
        if (!geoflo.options.offsetOverlappingLines) return false;

        const adder = 4;
        const miles = 0.00189394; // 10 Feet
        const explode = turf.explode(turf.featureCollection(features))
        
        if (!explode || !explode.features.length) return;

        explode.features.forEach(function(feature) {
            if (feature.properties.offset) return false;

            var buffer = turf.buffer(feature, miles, {units: 'miles'});
            var within = turf.pointsWithinPolygon(explode, buffer);

            if (!within || !within.features.length) return;

            var offset = adder;

            within.features.forEach(function (f) {
                if (f.properties.id === feature.properties.id || f.properties.offset) return;
                f.properties.offset = offset;
                offset = offset + adder;
            })            
        })
    };

    function isPolyline (feature) {
        if (!feature) return false;
        let type = geoflo.Layers.getLayerType(feature.source);
        return turf.getType(feature) === 'LineString';
    };

    function isPolygon (feature) {
        if (!feature) return false;
        let type = geoflo.Layers.getLayerType(feature.source);
        return turf.getType(feature) === 'Polygon' || feature.properties.type === 'Polygon' || type === 'Polygon';
    };

    function isRectangle (feature) {
        if (!feature) return false;
        let type = geoflo.Layers.getLayerType(feature.source);
        return turf.getType(feature) === 'Polygon' && feature.properties.type === 'Rectangle' || type === '';
    };

    function isPoint (feature) {
        if (!feature) return false;
        let type = geoflo.Layers.getLayerType(feature.source);
        if (turf.getType(feature) === 'Point' && (!feature.properties.type || feature.properties.type === 'Circle')) return true;
        if (turf.getType(feature) === 'Point' && (type === 'Point' || type === 'Circle')) return true;
        return turf.getType(feature) === 'Point' && (feature.properties.type !== 'Text' && feature.properties.type !== 'Icon' && feature.properties.type !== 'Image');
    };

    function isText (feature) {
        if (!feature) return false;
        let type = geoflo.Layers.getLayerType(feature.source);
        if (type === 'Text') return true;
        return turf.getType(feature) === 'Point' && feature.properties.type === 'Text';
    };

    function isIcon (feature) {
        if (!feature) return false;
        let type = geoflo.Layers.getLayerType(feature.source);
        if (type === 'Icon') return true;
        return turf.getType(feature) === 'Point' && feature.properties.type === 'Icon';
    };

    function isImage (feature) {
        if (!feature) return false;
        let type = geoflo.Layers.getLayerType(feature.source);
        if (type === 'Image') return true;
        return turf.getType(feature) === 'Point' && feature.properties.type === 'Image';
    };

    function getType (feature) {
        if (!feature) return null;
        
        return isRectangle(feature) ? 'Rectangle' :
        isPolygon(feature) ? 'Polygon' :
        isPolyline(feature) ? 'Polyline' :
        isText(feature) ? 'Text' :
        isIcon(feature) ? 'Icon' :
        isImage(feature) ? 'Image' :
        isPoint(feature) ? 'Circle' :
        null;
    };
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Features);

/***/ }),

/***/ "./src/Gamepad.js":
/*!************************!*\
  !*** ./src/Gamepad.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Gamepad
 * @description This module provides the gamepad functionality for the Geoflo application. It allows users to interact with the map using a gamepad controller.
 * @param {Object} gamepad - The gamepad object to be initialized.
 * @param {Object} options - The options for gamepad initialization. Comes from geoFlo.options.gamepad.
 * @returns {Object} The current object instance.
 */
const Gamepad = function (gamepad) {
    const geoflo = this.geoflo;

    if (!supported()) throw new Error('Gamepads are not supported on your browser!');
    
    const control = this;

    this.options = geoflo.options.gamepad;

    const layout = {
        "select": 'Select',
        "start": 'Start',
        "power": 'Power',
        "button0": 'B',
        "button1": 'A',
        "button2": 'Y',
        "button3": 'X',
        "button4": 'BumpLeft',
        "button5": 'BumpRight',
        "button6": 'TrigLeft',
        "button7": 'TrigRight',
        "button8": 'Select',
        "button9": 'Start',
        "button10": 'JoyLeftClick',
        "button11": 'JoyRightClick',
        "button12": 'DpadUp',
        "button13": 'DpadDown',
        "button14": 'DpadLeft',
        "button15": 'DpadRight',
        "button16": 'Power',
        "button17": 'Misc',
        "up0": 'JoyLeftUp',
        "down0": 'JoyLeftDown',
        "right0": 'JoyLeftRight',
        "left0": 'JoyLeftLeft',
        "up1": 'JoyRightUp',
        "down1": 'JoyRightDown',
        "right1": 'JoyRightRight',
        "left1": 'JoyRightLeft',
        "l1": 'BumpLeft',
        "r1": 'BumpRight',
        "l2": 'TrigLeft',
        "r2": 'TrigRight'
    }


    function clamp(x, y) {
        let m = Math.sqrt(x*x + y*y); // Magnitude (length) of vector

        // If the length greater than 1, normalize it (set it to 1)
        if (m > 1) {
            x /= m;
            y /= m;
        }

        return [x, y];
    }

    function deadzone(x, y, deadzone=0.2) {
        let m = Math.sqrt(x*x + y*y);

        if (m < deadzone)
            return [0, 0];

        let over = m - deadzone;  // 0 -> 1 - DEADZONE
        let nover = over / (1 - deadzone);  // 0 -> 1

        let nx = x / m;
        let ny = y / m;

        return [nx * nover, ny * nover];
        
    }

    function request() {
        control.refresh();
        requestAnimationFrame(request);
    }

    function supported() {
        return (window.navigator.getGamepads && typeof window.navigator.getGamepads === 'function') ||
            (window.navigator.getGamepads && typeof window.navigator.webkitGetGamepads === 'function') ||
            false;
    }

    function qs(s, p) {
        if (p) {
            return p.querySelector(s);
        }
        return document.querySelector(s);
    }

    function on(eventName, callback) {
        return control.associateEvent(eventName, callback, 'action');
    }

    function after(eventName, callback) {
        return control.associateEvent(eventName, callback, 'after');
    }

    function before(eventName, callback) {
        return control.associateEvent(eventName, callback, 'before');
    }

    function addEventListeners(_this, gamepad) {
        if (!gamepad || !layout) return false;

        Object.entries(layout).forEach(function (entry) {
            var key = entry[0];
            var val = entry[1];

            before(key, function (value) { return _this.onEvent('press', key, val, value); });
            on(key, function (value) { return _this.onEvent('hold', key, val, value); });
            after(key, function (value) { return _this.onEvent('release', key, val, value); });
        })
    }

    function deepAssign(target, source, {isMutatingOk = false, isStrictlySafe = false} = {}) {
        target = isMutatingOk ? target : clone(target, isStrictlySafe);

        for (const [key, val] of Object.entries(source)) {
            if (val !== null && typeof val === `object`) {
                if (target[key] === undefined) {
                    target[key] = {};
                }
    
                target[key] = deepAssign(target[key], val, {isMutatingOk: true, isStrictlySafe});
            } else {
                target[key] = val;
            }
        }

        function clone(obj, isStrictlySafe = false) {
            try {
                return JSON.parse(JSON.stringify(obj));
            } catch(err) {
                if (isStrictlySafe) { throw new Error() }
                console.warn(`Unsafe clone of object`, obj);
                return {...obj};
            }
        }

        return target;
    }

    function calculateIntermediatePoint(point1, point2, perc) {
        var lat1 = degreesToRadians(point1[1]);
        var lng1 = degreesToRadians(point1[0]);
        var lat2 = degreesToRadians(point2[1]);
        var lng2 = degreesToRadians(point2[0]);

        var deltaLat = lat2 - lat1;
        var deltaLng = lng2 - lng1;
        
        var calcA = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(deltaLng / 2) * Math.sin(deltaLng / 2);
        var calcB = 2 * Math.atan2(Math.sqrt(calcA), Math.sqrt(1 - calcA));
        
        var A = Math.sin((1 - perc) * calcB) / Math.sin(calcB);
        var B = Math.sin(perc * calcB) / Math.sin(calcB);
        
        var x = A * Math.cos(lat1) * Math.cos(lng1) + B * Math.cos(lat2) * Math.cos(lng2);
        var y = A * Math.cos(lat1) * Math.sin(lng1) + B * Math.cos(lat2) * Math.sin(lng2);
        var z = A * Math.sin(lat1) + B * Math.sin(lat2);
        
        var lat3 = Math.atan2(z, Math.sqrt(x * x + y * y));
        var lng3 = Math.atan2(y, x);
        
        return [radiansToDegrees(lng3), radiansToDegrees(lat3)]
    }

    function pointAtPercent(p0, p1, percent) {
        var x;
        if (p0.x !== p1.x)
            x = p0.x + percent * (p1.x - p0.x);
        else
            x = p0.x;
    
        var y;
        if (p0.y !== p1.y)
            y = p0.y + percent * (p1.y - p0.y);
        else
            y = p0.y;
    
        var p = {
            x: x,
            y: y
        };
    
        return p;
    }

    function degreesToRadians(degrees) {
        return degrees * (Math.PI / 180);
    }
        
    function radiansToDegrees(radians) {
        return radians * (180 / Math.PI );
    }

    





	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name init
	 * @description This function initializes the gamepad with the specified options. It fires an event to notify the gamepad initialization, sets the gamepad, adds event listeners, and requests animation frame.
	 * @param {Object} gamepad - The gamepad object to be initialized.
	 * @param {Object} options - The options for gamepad initialization.
	 * @returns {Object} The current object instance.
	 */
    this.init = function (gamepad, options) {
        if (!gamepad) return false;
        if (!this.options.enable) return console.error('Gamepad option is not enabled!')
        geoflo.map.fire(geoflo.id + ':gamepad.init', { detail: { gamepad: gamepad } });
        this.setGamepad(gamepad);
        addEventListeners(this, this.gamepad);
        requestAnimationFrame(request);
        return this;
    }

	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name refresh
	 * @description Refreshes the gamepad state by checking button presses, axes values, and triggers.
	 * @params {void}
	 * @returns {void}
	 */
    this.refresh = function () {
        var gamepads = window.navigator.getGamepads();

        for (var i = 0; i < gamepads.length; i++) {
            var gamepad = gamepads[this.gamepad.id];
            var j;

            if (!gamepad || !gamepad.connected) { continue; }

            for (j = 0; j < gamepad.buttons.length; j++) {
                var button = gamepad.buttons[j];
                var value = button.value;
                var name = this.gamepad.layout[`button${j}`]

                if (button.pressed) {
                    if (!this.gamepad.pressed[name]) {
                        this.gamepad.pressed[name] = true;
                        this.gamepad.buttonActions[j].before ? this.gamepad.buttonActions[j].before(value) : false;
                    }

                    this.gamepad.buttonActions[j].action ? this.gamepad.buttonActions[j].action(value) : false;
                } else if (this.gamepad.pressed[name]) {
                    delete this.gamepad.pressed[name];
                    this.gamepad.buttonActions[j].after ? this.gamepad.buttonActions[j].after(value) : false;
                }
            }

            var axesBoxCount = ((gamepad.axes.length + 1) / 2)|0;
                
            for (j = 0; j < axesBoxCount; j++) {
                var valueX, valueY, value;
                var last_odd_axis = j == axesBoxCount - 1 && gamepad.axes.length % 2 == 1;

                valueX = gamepad.axes[j*2];
                valueY = last_odd_axis ? 0 : gamepad.axes[j*2 + 1];
                [valueX, valueY] = deadzone(valueX, valueY);    
                [valueX, valueY] = clamp(valueX, valueY);
                value = [Number(valueX.toFixed(2)), Number(valueY.toFixed(2))];

                const val = gamepad.axes[j + axesBoxCount].toFixed(4);
                const axe = Math.floor(j / 2);
                this.gamepad.axeValues[axe][j % 2] = val;

                var rightTrigger = value[0] >= this.options.joystick.min;
                var leftTrigger = value[0] <= -this.options.joystick.min;
                var upTrigger = value[1] <= -this.options.joystick.min;
                var downTrigger = value[1] >= this.options.joystick.min;

                this.trigger('right', rightTrigger, j, value);
                this.trigger('left', leftTrigger, j, value);
                this.trigger('down', downTrigger, j, value);
                this.trigger('up', upTrigger, j, value);
            }
        }
    }

	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name trigger
	 * @description This function handles triggering actions based on gamepad input. It checks if a specific button or axis is triggered and performs corresponding actions.
	 * @param {string} id - The identifier of the gamepad input.
	 * @param {boolean} triggered - Indicates if the input is triggered.
	 * @param {number} index - The index of the input.
	 * @param {number[]} value - The value of the input.
	 */
    this.trigger = function (id, triggered, index, value) {
        var actions = this.gamepad.axesActions;
        var name = this.gamepad.layout[`${id}${index}`];
        var pressed = this.gamepad.pressed

        if (triggered) {
            if (!pressed[name]) {
                pressed[name] = true;
                actions[index][id].before ? actions[index][id].before(value) : false
            }

            value = [this.options.joystick.max * value[0], this.options.joystick.max * value[1]]
            actions[index][id].action ? actions[index][id].action(value) : false;
        } else if (pressed[name]) {
            delete pressed[name];

            if (!pressed['JoyLeftUp'] && !pressed['JoyLeftDown'] && !pressed['JoyLeftLeft'] && !pressed['JoyLeftRight']) {
                actions[0][id].after ? actions[0][id].after(value) : false;
            }

            if (!pressed['JoyRightUp'] && !pressed['JoyRightDown'] && !pressed['JoyRightLeft'] && !pressed['JoyRightRight']) {
                actions[1][id].after ? actions[1][id].after(value) : false;
            }
        }
    }

    /**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name remove
	 * @description Disconnects and removes the gamepad object.
	 * @param {Object} gamepad - The gamepad object to be disconnected and removed.
	 * @returns {void}
	 */
    this.remove = function() {
        this.gamepad.disconnect ? this.gamepad.disconnect() : false;
        this.gamepad.remove ? this.gamepad.remove() : false;
        this.gamepad = null;
    }




	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name setMap
	 * @description This function updates the map properties using the handleMove function and sets the center, zoom, pitch, and bearing accordingly.
	 * @param {Function} handleMove - The function used to handle map movement.
	 * @returns {Object} The updated map object with new properties.
	 */
    this.setMap = function (handleMove) {
        const map = geoflo.map;
        const transform = map.transform;
        
        this.map = this.map || {
            center: map.getCenter(),
            zoom: map.getZoom(),
            pitch: map.getPitch(),
            bearing: map.getBearing()
        }
        
        var center = this.map.center.x ? this.map.center : this.map.center.lat ? this.map.center : new mapboxgl.LngLat(this.map.center[0], this.map.center[1])
        center = center.x ? transform.pointLocation(center) : center;

        transform.center = center;
        transform.bearing = this.map.bearing;
        transform.zoom = this.map.zoom;
        transform.pitch = this.map.pitch;

        map._update();

        if (this.options.crosshairs && geoflo.centerMarker) this.setMarker();
        if (handleMove) geoflo.currentMode.handleMove({ lngLat: !this.options.camera.free ? this.map.center : map.getCenter(), gamepad: this })
        return this.map;
    }

	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name setContainer
	 * @description Creates a new HTML element with the specified tag name and class name, appends it to a container if provided, and sets it as the container property of the current object.
	 * @param {string} tagName - The tag name of the HTML element to create.
	 * @param {string} className - The class name to assign to the created element (optional).
	 * @param {HTMLElement} container - The container element to append the created element to (optional).
	 * @returns {HTMLElement} The created HTML element.
	 */
	
    this.setContainer = function (tagName, className, container) {
        const el = window.document.createElement(tagName);
        if (className !== undefined) el.className = className;
        if (container) container.appendChild(el);
        this.container = el;
        return el;
    }

	/**
	 * @function
     * @memberof module:geoflo.Gamepad 
	 * @name setLocation
	 * @description This function updates the visibility, left, and top properties of the container element based on the provided value.
	 * @param {Array<number>} value - An array containing the x and y coordinates for the new location.
	 * @returns {DOMRect} The bounding rectangle of the container element after the location is set.
	 */
    this.setLocation = function (value) {
        this.container.style.visibility = this.options.debug ? 'visible' : 'hidden';
        this.container.style.left = (value[0] + 1) / 2 * 100 + '%';
        this.container.style.top = (value[1] + 1) / 2 * 100 + '%';
        return this.container.getBoundingClientRect();
    }

	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name setMarker
	 * @description Sets a marker on the map using the center coordinates provided by the context.
	 * @return {Object} Returns the marker object created on the map.
	 */
    this.setMarker = function () {
        return geoflo.setCenterMarker({ gamepad: true });
    }

	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name setGamepad
	 * @description Initializes a gamepad object with specific properties based on the provided gamepad input.
	 * @param {Object} gamepad - The gamepad object to be processed.
	 * @returns {Object} - The processed gamepad object with defined properties.
	 */
    this.setGamepad = function (gamepad) {
        var options = {
            type: gamepad.id,
            connected: gamepad.connected,
            id: gamepad.index,
            buttons: gamepad.buttons.length,
            layout: layout,
            axes: Math.floor(gamepad.axes.length / 2),
            axeValues: [],
            hapticActuator: null,
            vibrationMode: -1,
            vibration: false,
            mapping: gamepad.mapping,
            buttonActions: {},
            axesActions: {},
            pressed: {}
        }

        for (let x = 0; x < options.buttons; x++) {
            options.buttonActions[x] = () => ({ action: () => { }, after: () => { }, before: () => { } });
        }

        for (let x = 0; x < options.axes; x++) {
            options.axesActions[x] = {
                down: () => ({ action: () => { }, after: () => { }, before: () => { } }),
                left: () => ({ action: () => { }, after: () => { }, before: () => { } }),
                right: () => ({ action: () => { }, after: () => { }, before: () => { } }),
                up: () => ({ action: () => { }, after: () => { }, before: () => { } })
            };

            options.axeValues[x] = [0, 0];
        }

        if (gamepad.hapticActuators) {
            if (typeof gamepad.hapticActuators.pulse === 'function') {
                options.haptic = gamepad.hapticActuators;
                options.vibrationMode = 0;
                options.vibration = true;
            } else if (gamepad.hapticActuators[0] && typeof gamepad.hapticActuators[0].pulse === 'function') {
                options.haptic = gamepad.hapticActuators[0];
                options.vibrationMode = 0;
                options.vibration = true;
            }
        }
        
        if (gamepad.vibrationActuator) {
            if (typeof gamepad.vibrationActuator.playEffect === 'function') {
                options.haptic = gamepad.vibrationActuator;
                options.vibrationMode = 1;
                options.vibration = true;
            }
        }

        this.gamepad = options;
        this.hasJoysticks = options.axes > 0 && Object.values(this.gamepad.layout).map(function(m) { return m.includes('Joy') }).filter(function (b) { return b }).length > 0;
        return this.gamepad;
    }

	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name setCenter
	 * @description This function calculates the new center of the map based on the input values and gamepad controls. It handles both joystick and D-pad inputs to adjust the map center accordingly.
	 * @param {Object} value - The value used to calculate the new center of the map.
	 * @param {boolean} free - A boolean flag indicating if the map center should be set freely.
	 * @param {boolean} dpad - A boolean flag indicating if the D-pad controls are used for setting the map center.
	 * @returns {boolean} Returns true after setting the map center.
	 */
	
    this.setCenter = function (value, free, dpad) {
        var center = geoflo.map.getCenter();
        var pressed = this.gamepad.pressed;
        var type = this.hasJoysticks ? 'Joy' : 'Dpad';
        var diag = Object.keys(pressed).filter(function(p) { return p.includes(type) }).length > 1;
        
        var start = free || dpad ? center : false;
        start = geoflo.hotFeature && !start ? geoflo.lastMove || center : false;
        start = !start ? center : start;

        var end;
    
        if (dpad) {
            var bearing = this.map.bearing;
            bearing = pressed['Up'] ? bearing :
            pressed['Down'] ? bearing + 180 :
            pressed['Left'] ? bearing - 90 :
            pressed['Right'] ? bearing + 90 :
            bearing;

            var dest = turf.destination(turf.point(start), distance, bearing).geometry.coordinates;

            lngLats = free ? { lng: dest[1], lat: dest[0] } : dest;
        } else if (value) {
            var location = this.setLocation(value);
            var coords = location && location.x ? [location.x, location.y] : false;
            
            end = geoflo.map.unproject(coords);
            
            var percent = diag ? this.options.pan.speed / 2 : this.options.pan.speed;
            var mid = calculateIntermediatePoint([start.lng, start.lat], [end.lng, end.lat], percent)
            mid = geoflo.map.getPitch() > 60 ? calculateIntermediatePoint([start.lng, start.lat], [mid[0], mid[1]], 0.4) : mid;

            end = mid;
            geoflo.lastMove = end;
        } else {
            var coords = geoflo.hotFeature ? geoflo.hotFeature.geometry.coordinates : false;
            end = free ? geoflo.map.getCenter() :
            coords ? { lat: coords[coords.length-1][1], lng: coords[coords.length-1][0] } : geoflo.map.getCenter();
            geoflo.lastMove = false;
            this.setLocation([0, 0]);
        }

        this.map.center = end;
        return this.setMap(true);
    }
    
	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name setBearing
	 * @description This function updates the bearing of the map by adjusting it with the specified value and direction.
	 * @param {number | Array<number>} value - The value to adjust the bearing by. If dpad is false, it should be an array of numbers, otherwise a single number.
	 * @param {boolean} left - Indicates the direction of adjustment. If true, the bearing is decreased; otherwise, it is increased.
	 * @param {boolean} dpad - Specifies whether the value is coming from a dpad input.
	 * @returns {boolean} Returns the result of calling the setMap function after updating the bearing.
	 */
    this.setBearing = function (value, left, dpad) {
        var bearing = this.map.bearing;
        var bearingMulti = !dpad ? Math.abs(value[0]) : value;
    
        if (left) {
            bearing = bearing - (this.options.bearing.speed * bearingMulti)
        } else {
            bearing = bearing + (this.options.bearing.speed * bearingMulti)
        }

        this.map.bearing = bearing;
        return this.setMap();
    }
    
	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name setPitch
	 * @description This function adjusts the pitch of the map by a specified amount in the given direction.
	 * @param {number|Array<number>} value - The value or array of values to adjust the pitch by.
	 * @param {boolean} up - A boolean indicating whether the pitch should be increased (true) or decreased (false).
	 * @param {boolean} dpad - A boolean flag to determine if the value is coming from a D-pad input.
	 * @returns {boolean} Returns true if the map is successfully updated with the new pitch.
	 */
    this.setPitch = function (value, up, dpad) {
        var pitch = this.map.pitch;
        var pitchMulti = !dpad ? Math.abs(value[1]) : value;

        if (pitch < 0) pitch = 0;
        if (pitch > this.options.pitch.max) pitch = this.options.pitch.max;
    
        if (up) {
            pitch = pitch + (this.options.pitch.speed * pitchMulti);
        } else {
            pitch = pitch - (this.options.pitch.speed * pitchMulti);
        }
        
        this.map.pitch = pitch;
        return this.setMap();
    }
    
	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name setZoom
	 * @description This function adjusts the zoom level of a map based on the provided value and direction.
	 * @param {number} value - The amount by which to change the zoom level.
	 * @param {boolean} out - A flag indicating whether to zoom out (true) or zoom in (false).
	 * @param {boolean} dpad - A flag indicating the direction of the zoom change.
	 * @returns {boolean} - Returns the result of setting the map with the new zoom level.
	 */
    this.setZoom = function (value, out, dpad) {
        var zoom = this.map.zoom;
    
        if (out) {
            zoom = zoom - ( this.options.zoom.speed * Math.abs(value) )
        } else {
            zoom = zoom + ( this.options.zoom.speed * Math.abs(value) )
        }
        
        this.map.zoom = zoom;
        return this.setMap();
    }

	/**
	 * @function
     * @memberof module:geoflo.Gamepad
	 * @name setSpeed
	 * @description This function calculates the speed of panning based on the provided value and direction. It ensures that the speed falls within the specified minimum and maximum values.
	 * @param {number} value - The value that influences the speed of panning.
	 * @param {boolean} down - A boolean flag indicating the direction of panning (true for down, false for up).
	 * @returns {number} The updated speed of panning after applying the calculations.
	 */
    this.setSpeed = function (value, down) {
        var speed = this.options.pan.speed > this.options.pan.min ?
            this.options.pan.speed :
            this.options.pan.max && this.options.pan.speed > this.options.pan.max ?
            this.options.pan.min :
            this.options.pan.min;

        speed = down ? speed - this.options.pan.min : speed + this.options.pan.min;

        speed = speed < this.options.pan.min ? this.options.pan.min :
        this.options.pan.max && speed > this.options.pan.max ? this.options.pan.max :
        speed;

        return this.options.pan.speed = speed * Math.abs(value);
    }


	/**
	 * @function
     * @memberof module:geoflo.Gamepad associateEvent
	 * @name associateEvent
	 * @description This function allows the user to associate an event with a callback function for a specific button or axis on the gamepad.
	 * @param {string} eventName - The name of the event to associate with the callback function.
	 * @param {function} callback - The callback function to be executed when the event occurs.
	 * @param {string} type - The type of event (e.g., 'press', 'release') to associate with the callback function.
	 * @returns {object} The updated gamepad object with the associated event and callback function.
	 */
    this.associateEvent = function(eventName, callback, type) {
        if (eventName.match(/^button\d+$/)) {
            const buttonId = parseInt(eventName.match(/^button(\d+)$/)[1]);

            if (buttonId >= 0 && buttonId < this.gamepad.buttons) {
                this.gamepad.buttonActions[buttonId][type] = callback;
            } else {
                console.log(buttonId, 'This button is not on gamepad')
            }

        } else if (eventName === 'start') {
            this.gamepad.buttonActions[9][type] = callback;
        } else if (eventName === 'select') {
            this.gamepad.buttonActions[8][type] = callback;
        } else if (eventName === 'r1') {
            this.gamepad.buttonActions[5][type] = callback;
        } else if (eventName === 'r2') {
            this.gamepad.buttonActions[7][type] = callback;
        } else if (eventName === 'l1') {
            this.gamepad.buttonActions[4][type] = callback;
        } else if (eventName === 'l2') {
            this.gamepad.buttonActions[6][type] = callback;
        } else if (eventName === 'power') {
            if (this.gamepad.buttons >= 17) {
                this.gamepad.buttonActions[16][type] = callback;
            } else {
                error(MESSAGES.INVALID_BUTTON);
            }
        } else if (eventName.match(/^(up|down|left|right)(\d+)$/)) {
            const matches = eventName.match(/^(up|down|left|right)(\d+)$/);
            const direction = matches[1];
            const axe = parseInt(matches[2]);

            if (axe >= 0 && axe < this.gamepad.axes) {
                this.gamepad.axesActions[axe][direction][type] = callback;
            } else {
                error(MESSAGES.INVALID_BUTTON);
            }
        } else if (eventName.match(/^(up|down|left|right)$/)) {
            const direction = eventName.match(/^(up|down|left|right)$/)[1];
            this.gamepad.axesActions[0][direction][type] = callback;
        }

        return this.gamepad;
    }

    this.onInit = function (options) {
        this.initiated = true;
        this.setContainer('div', 'gamepad', geoflo.map.getContainer());
        this.setMarker();
        this.setMap();
    }

    this.onEvent = function (type, key, action, value) {
        var pressed = {[action]: true};
        var lngLat = this.options.camera.free ? geoflo.map.getCenter() : geoflo.lastMove ? geoflo.lastMove : geoflo.map.getCenter();

        var options = {
            name: action,
            type: type,
            key: key,
            value: value,
            mode: geoflo.currentMode,
            gamepad: this,
            lngLat: lngLat,
            geoflo: geoflo,
            originalEvent: {}
        }

        if (!this.initiated) this.onInit(options);

        geoflo.map.fire(geoflo.id + ':gamepad.' + type, { detail: options });

        if (pressed['JoyLeftUp'] || pressed['JoyLeftDown'] || pressed['JoyLeftLeft'] || pressed['JoyLeftRight']) this.options.mapping['JoyLeftMove'](options);
        if (pressed['JoyRightUp'] || pressed['JoyRightDown'] || pressed['JoyRightLeft'] || pressed['JoyRightRight']) this.options.mapping['JoyRightMove'](options);

        if (pressed['JoyLeftClick']) this.options.mapping['JoyLeftClick'](options);
        if (pressed['JoyRightClick']) this.options.mapping['JoyRightClick'](options);

        if (pressed['BumpLeft']) this.options.mapping['BumpLeft'](options);
        if (pressed['BumpRight']) this.options.mapping['BumpRight'](options);

        if (pressed['TrigLeft']) this.options.mapping['TrigLeft'](options);
        if (pressed['TrigRight']) this.options.mapping['TrigRight'](options);

        if (pressed['A']) this.options.mapping['A'](options);
        if (pressed['B']) this.options.mapping['B'](options);
        if (pressed['X']) this.options.mapping['X'](options);
        if (pressed['Y']) this.options.mapping['Y'](options);

        if (pressed['Start']) this.options.mapping['Start'](options);
        if (pressed['Select']) this.options.mapping['Select'](options);
        if (pressed['Power']) this.options.mapping['Power'](options);
        if (pressed['Home']) this.options.mapping['Home'](options);
        if (pressed['Misc']) this.options.mapping['Misc'](options);

        if (pressed['DpadUp']) this.options.mapping['DpadUp'](options);
        if (pressed['DpadDown']) this.options.mapping['DpadDown'](options);
        if (pressed['DpadLeft']) this.options.mapping['DpadLeft'](options);
        if (pressed['DpadRight']) this.options.mapping['DpadRight'](options);
    }

    this.onDisconnect = function (gamepad) {
        if (!gamepad || !this.gamepad) return false;
        if (this.gamepad.id !== gamepad.id) throw new Error('Gamepad id does not match!');
        this.gamepad.remove();
        this.gamepad = null;
    }


    this.init(gamepad);
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Gamepad);

/***/ }),

/***/ "./src/Layers.js":
/*!***********************!*\
  !*** ./src/Layers.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Layers
 * @description This module provides the layer functionality for the Geoflo application. It allows users to add, remove, and manipulate layers on the map.
 * @param {Object} options - The options object to configure the object.
 * @returns {Object} Returns the Layers object.
 */
const Layers = function () {
    const geoflo = this.geoflo;
    if (!geoflo.map) throw new Error('No map object provided!');

    const Layers = this;
    const map = geoflo.map;
    const id = geoflo.id;

    const layerTypes = {
        Polygon: ['-fill', '-border'],
        Polyline: ['-line', '-dash', '-buffer'],
        Point: ['-circle', '-icon', '-cluster-circle', '-cluster-icon', '-count-icon', '-count-text'],
        Image: ['-image']
    }

    this.options = {};
    this.sources = [];
    this.layers = [];
    this._layers = [];
    this._sources = [];

	/** 
	 * @function
     * @memberof module:geoflo.Layers
	 * @name init
	 * @description Initializes the object with the provided options and refreshes it.
	 * @param {Object} options - The options object to configure the object.
	 * @returns {Object} The refreshed object with the updated options.
	 */
    this.init = function (options={}) {
        this.options = Object.assign(this.options, options);
        
        this.defaultLayers = [
            {
                'source': geoflo.statics.constants.sources.COLD,
                'id': id + '-fill-cold',
                'type': 'fill',
                'layout': {},
                'filter': ["==", "$type", "Polygon"],
                'paint': {
                    'fill-color': geoflo.options.colors.secondaryCold,
                    'fill-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 0.3]
                }
            },
            {
                'source': geoflo.statics.constants.sources.COLD,
                'id': id + '-line-cold',
                'type': 'line',
                'layout': {
                    'line-cap': 'round',
                    'line-join': 'miter'
                },
                'paint': {
                    'line-color': geoflo.options.colors.primaryCold,
                    'line-width': 4,
                    'line-gap-width': ["match", ["get", "type"], "Polygon", 0, 0],
                    'line-offset': ['case', ["boolean", ["has", "offset"], true], ["get", "offset"], 0],
                    'line-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 1]
                }
            },
            {
                'source': geoflo.statics.constants.sources.COLD,
                'id': id + '-circle-cold',
                'filter': ['all', ['==', ['get', 'type'], 'Circle'], ["!=", ["geometry-type"], "Polygon"] ],
                'type': 'circle',
                'paint': {
                    'circle-radius': {
                        'base': 6,
                        'stops': [[10, 6], [14, 10]]
                    },
                    'circle-stroke-width': 1,
                    'circle-color': geoflo.options.colors.primaryCold,
                    'circle-stroke-color': geoflo.options.colors.secondaryCold,
                    'circle-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 1],
                    'circle-stroke-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 1]
                }
            },
            {
                source: geoflo.statics.constants.sources.COLD,
                id: id + '-icon-cold',
                type: 'symbol',
                filter: ['==', ['get', 'type'], 'Icon'],
                layout: {
                    'visibility': 'visible',
                    'icon-optional': true,
                    'text-field': ['get', 'primaryIcon', ['get','style', ['properties']]],
                    'text-size': {
                        'base': 16,
                        'stops': [[10, 16], [14, 12]]
                    },
                    'text-line-height': 1,
                    'text-padding': 0,
                    'text-offset': [0, 0.2],
                    'text-justify': 'auto',
                    'text-anchor': 'center',
                    'text-allow-overlap': true,
                    'text-font': ['Font Awesome 6 Pro Solid'],
                    'text-ignore-placement': true
                },
                paint: {
                    'text-translate-anchor': 'viewport',
                    'text-halo-width': 0,
                    'text-halo-color': geoflo.options.colors.primaryCold,
                    'text-color': geoflo.options.colors.secondaryBackground,
                    'text-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 1]
                }
            },
            {
                'source': geoflo.statics.constants.sources.COLD,
                'id': id + '-text-cold',
                'type': 'symbol',
                'filter': ["==", "$type", "Point"],
                'layout': {
                    "symbol-placement": "point",
                    'text-field': ['get', 'text'],
                    'text-font': ['DIN Pro Regular', 'DIN Pro Italic', 'Arial Unicode MS Regular', 'DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                    'text-keep-upright': true,
                    'text-size': 18,
                    'text-justify': ['get', 'justify'],
                    'text-letter-spacing': 0.05,
                    'text-line-height': 1.2,
                    'text-max-angle': 10,
                    'text-offset': [0,0],
                    'text-padding': 2,
                    'text-rotate': 0,
                    'text-transform': ['get', 'transform']
                },
                'paint': {
                    'text-color': geoflo.options.colors.primaryCold,
                    'text-halo-color': geoflo.options.colors.primaryText,
                    'text-halo-width': 0.5,
                    'text-opacity': 1,
                    'text-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 1]
                }
            },
            {
                id: geoflo.statics.constants.layers.MESH + '-line',
                source: geoflo.statics.constants.sources.MESH,
                type: "line",
                paint: {
                    "line-color": geoflo.options.colors.primaryBase,
                    "line-width": 2,
                    "line-opacity": 0.3
                }
            },
            {
                id: geoflo.statics.constants.layers.MESH + '-circle',
                source: geoflo.statics.constants.sources.MESH,
                'type': 'circle',
                'paint': {
                    'circle-radius': 2,
                    'circle-color': geoflo.options.colors.primaryBase,
                    'circle-opacity': 0.3
                }
            },
            {
                'source': geoflo.statics.constants.sources.HOT,
                'id': id + '-fill-hot',
                'type': 'fill',
                'layout': {},
                'filter': ["==", "$type", "Polygon"],
                'paint': {
                    'fill-color': geoflo.options.colors.secondaryHot,
                    'fill-opacity': ['case', ["boolean", ["has", "new"], true], 0.5, 0.1],
                }
            },
            {
                'source': geoflo.statics.constants.sources.HOT,
                'id': id + '-line-hot',
                'type': 'line',
                'layout': {
                    'line-cap': 'round',
                    'line-join': 'round'
                },
                'paint': {
                    'line-color': geoflo.options.colors.primaryHot,
                    'line-width': 4,
                    'line-dasharray': [1,2],
                }
            },
            {
                'source': geoflo.statics.constants.sources.HOT,
                'id': id + '-point-hot',
                'filter': ['==', '$type', 'Point'],
                'type': 'circle',
                //'filter': ["==", 0, ['number', ['get', 'painting']]],
                'paint': {
                    'circle-radius': ["match", ["get", "type"], "Circle", 8, 4],
                    'circle-stroke-width': 1,
                    'circle-color': geoflo.options.colors.primaryHot,
                    'circle-stroke-color': geoflo.options.colors.secondaryHot
                }
            },
            {
                source: geoflo.statics.constants.sources.HOT,
                id: id + '-icon-hot',
                filter: ['==', ['get', 'type'], 'Icon'],
                type: 'symbol',
                layout: {
                    'visibility': 'visible',
                    'icon-optional': true,
                    'text-field': ['get', 'primaryIcon', ['get','style', ['properties']]],
                    'text-size': {
                        'base': 16,
                        'stops': [[10, 16], [14, 12]]
                    },
                    'text-line-height': 1,
                    'text-padding': 0,
                    'text-offset': [0, 0.2],
                    'text-justify': 'auto',
                    'text-anchor': 'center',
                    'text-allow-overlap': true,
                    'text-font': ['Font Awesome 6 Pro Solid'],
                    'text-ignore-placement': true
                },
                paint: {
                    'text-translate-anchor': 'viewport',
                    'text-halo-color': geoflo.options.colors.primaryHot,
                    'text-halo-width': 0, //[ 'case', ['boolean', ['feature-state', 'hover'], false], 0.5, 0 ],
                    'text-color': geoflo.options.colors.secondaryHot
                }
            },
            {
                source: geoflo.statics.constants.sources.HOT,
                id: id + '-image-hot',
                filter: ['==', ['get', 'type'], 'Image'],
                type: 'symbol',
                layout: {
                    'visibility': 'visible',
                    'icon-image': ['get', 'primaryImage', ['get','style', ['properties']]],
                    'icon-size': ['interpolate', ['linear'], ['zoom'], 1, 0.4, 15, 1],
                    'icon-allow-overlap': true,
                    'icon-anchor': 'bottom'
                }
            },
            {
                'source': geoflo.statics.constants.sources.HOTTEXT,
                'id': id + '-text-hot',
                'type': 'symbol',
                'layout': {
                    'symbol-placement': 'point',
                    'text-field': ['get', 'text'],
                    'text-font': ['Arial Unicode MS Regular', 'DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                    'text-keep-upright': true,
                    'text-anchor': ['get','anchor'],
                    'text-size': 18,
                    'text-justify': ['get','justify'],
                    'text-letter-spacing': 0.1,
                    'text-line-height': 1.2,
                    'text-max-angle': 10,
                    'text-offset': [0, 1.5],
                    'text-padding': 2,
                    'text-rotate': 0,
                    'text-transform': ['get', 'transform']
                },
                'paint': {
                    'text-color': geoflo.options.colors.primaryText,
                    'text-halo-color': geoflo.options.colors.primaryBackground,
                    'text-halo-width': 1,
                    'text-opacity': 1,
                }
            },
            {
                'source': geoflo.statics.constants.sources.SNAP,
                'id': id + '-point-snap',
                'type': 'circle',
                'filter': ['==', '$type', 'Point'],
                'paint': {
                    'circle-radius': ["match", ["get", "type"], "Circle", 6, "Icon", 0, 6],
                    'circle-stroke-width': 2,
                    'circle-color': geoflo.options.colors.primarySnap,
                    'circle-stroke-color': geoflo.options.colors.secondarySnap
                }
            },
            {
                source: geoflo.statics.constants.sources.SNAP,
                id: id + '-icon-snap',
                type: 'symbol',
                filter: ['==', ['get', 'type'], 'Icon'],
                layout: {
                    'visibility': 'visible',
                    'icon-optional': true,
                    'text-field': ['get', 'primaryIcon', ['get','style', ['properties']]],
                    'text-size': {
                        'base': 18,
                        'stops': [[10, 18], [14, 16]]
                    },
                    'text-line-height': 1,
                    'text-padding': 0,
                    'text-offset': [0,0.2],
                    'text-justify': 'auto',
                    'text-anchor': 'center',
                    'text-allow-overlap': true,
                    'text-font': ['Font Awesome 6 Pro Solid'],
                    'text-ignore-placement': true
                },
                paint: {
                    'text-translate-anchor': 'viewport',
                    'text-halo-color': geoflo.options.colors.primarySnap,
                    'text-halo-width': 0, //[ 'case', ['boolean', ['feature-state', 'hover'], false], 0.5, 0 ],
                    'text-color': geoflo.options.colors.secondarySnap
                }
            },
            {
                source: geoflo.statics.constants.sources.SNAP,
                id: id + '-image-snap',
                filter: ['==', ['get', 'type'], 'Image'],
                type: 'symbol',
                layout: {
                    'visibility': 'visible',
                    'icon-image': ['get', 'primaryImage', ['get','style', ['properties']]],
                    'icon-size': ['interpolate', ['linear'], ['zoom'], 1, 0.4, 15, 1],
                    'icon-allow-overlap': true,
                    'icon-anchor': 'bottom'
                }
            },
            {
                'source': geoflo.statics.constants.sources.SNAP,
                'id': id + '-line-snap',
                'type': 'line',
                //'filter': ["==", "$type", "LineString"],
                'layout': {
                    'visibility': 'visible',
                    'line-cap': 'round',
                    'line-join': 'round'
                },
                'paint': {
                    'line-color': geoflo.options.colors.secondarySnap,
                    'line-width': 4,
                    'line-dasharray':[1,2]
                }
            },
            {
                'source': geoflo.statics.constants.sources.ROUTE,
                'id': id + '-line-route',
                'type': 'line',
                'filter': ["==", "$type", "LineString"],
                'layout': {
                    'visibility': 'visible',
                    'line-cap': 'round',
                    'line-join': 'round'
                },
                'paint': {
                    'line-color': geoflo.options.colors.error,
                    'line-width': 4,
                    'line-dasharray':[]
                }
            },
            {
                'source': geoflo.statics.constants.sources.VERTEX,
                'id': id + '-point-vertex',
                'type': 'circle',
                'filter': ['==', "$type", 'LineString'],
                'paint': {
                    'circle-radius': 4,
                    'circle-stroke-width': 3,
                    'circle-color': geoflo.options.colors.primaryVertex,
                    'circle-stroke-color': geoflo.options.colors.secondaryVertex
                }
            },
            {
                'source': geoflo.statics.constants.sources.GAMEPAD,
                'id': id + '-gamepad',
                'type': 'symbol',
                'layout': {
                    'visibility': 'visible',
                    'icon-image': 'gamepad',
                    'icon-size': 0.25
                }
            }
        ]
    
        this.selectLayers = [{
            'source': geoflo.statics.constants.sources.SELECT,
            'id': id + '-line-select',
            'type': 'line',
            'slot': 'top',
            'layout': {
                'visibility': 'visible',
                'line-cap': 'round',
                'line-join': 'round'
            },
            'paint': {
                'line-color': geoflo.options.colors.secondarySelect,
                'line-width': 4,
            },
            'metadata': { types: ['Polyline', 'Polygon', 'Rectangle'] }
        },
        {
            'source': geoflo.statics.constants.sources.SELECT,
            'id': id + '-fill-select',
            'type': 'fill',
            'layout': {},
            'slot': 'top',
            'filter': ["==", "$type", "Polygon"],
            'paint': {
                'fill-color': geoflo.options.colors.primarySelect,
                'fill-opacity': 0.4
            },
            'metadata': { types: ['Polygon', 'Rectangle'] }
        },
        {
            'source': geoflo.statics.constants.sources.SELECT,
            'id': id + '-point-select',
            'filter': ['all', ['!=', ['get', 'type'], 'Text'], ["==", ["geometry-type"], "Point"] ],
            'type': 'circle',
            'slot': 'top',
            'layout': {
                'visibility': 'visible',
            },
            'paint': {
                'circle-radius': 12,
                'circle-stroke-width': 2,
                'circle-color': geoflo.options.colors.primarySelect,
                'circle-stroke-color': geoflo.options.colors.secondarySelect,
            },
            'metadata': { types: ['Point', 'Circle', 'Marker', 'Icon'] }
        },
        {
            'source': geoflo.statics.constants.sources.SELECT,
            'id': id + '-symbol-select',
            'filter': ['==', ['get', 'type'], 'Icon'],
            'type': 'symbol',
            'slot': 'top',
            'layout': {
                'visibility': 'visible',
                'icon-optional': true,
                'symbol-placement': 'point',
                'text-rotation-alignment': 'viewport',
                'text-field': ['get', 'primaryIcon', ['get','style', ['properties']]],
                'text-rotate': ['get', 'rotate', ['get','style', ['properties']]],
                'text-size': 14,
                'text-line-height': 1,
                'text-padding': 0,
                'text-offset': [0, 0.2],
                'text-justify': 'auto',
                'text-anchor': 'center',
                'text-allow-overlap': true,
                'text-font': ['Font Awesome 6 Pro Solid'],
                'text-ignore-placement': true
            },
            'paint': {
                'text-translate-anchor': 'viewport',
                'text-halo-color': geoflo.options.colors.secondarySelect,
                'text-halo-width': 2,
                'text-color': geoflo.options.colors.primaryBackground,
            },
            'metadata': { types: ['Icon'] }
        },
        {
            'source': geoflo.statics.constants.sources.SELECT,
            'id': id + '-text-select',
            'filter': ['==', ['get', 'type'], 'Text'],
            'type': 'symbol',
            'slot': 'top',
            'layout': {
                'visibility': 'visible',
                "symbol-placement": "point",
                'text-rotation-alignment': 'viewport',
                'text-field': ['get', 'text'],
                'text-font': ['DIN Pro Regular', 'DIN Pro Italic', 'Arial Unicode MS Regular', 'DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                'text-keep-upright': true,
                'text-allow-overlap': true,
                'text-size': 18,
                'text-justify': ['get', 'justify'],
                'text-letter-spacing': 0.12,
                'text-line-height': 1.2,
                'text-max-angle': 10,
                'text-offset': [0,1.5],
                'text-padding': 2,
                'text-rotate': 0,
                'text-transform': ['get', 'transform']
            },
            'paint': {
                'text-color': geoflo.options.colors.primaryBackground,
                'text-halo-color': geoflo.options.colors.primaryColor,
                'text-halo-width': 2,
                'text-opacity': 1,
            },
            'metadata': { types: ['Text'] }
        },
        {
            'source': geoflo.statics.constants.sources.SELECT,
            'id': id + '-image-select',
            'filter': ['==', ['get', 'type'], 'Image'],
            'type': 'symbol',
            'slot': 'top',
            'layout': {
                'visibility': 'visible',
                'icon-image': ['get', 'primaryImage', ['get','style', ['properties']]],
                'icon-size': ['interpolate', ['linear'], ['zoom'], 1, 0.4, 15, 1],
                'icon-allow-overlap': true,
                'icon-anchor': 'bottom'
            },
            'metadata': { types: ['Image'] }
        }]

        return this.refresh({ init: true});
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name refresh
	 * @description This function refreshes the map by removing existing layers and sources, adding default layers and sources, and rebuilding the layers.
	 * @param {Object} options - Optional parameter for additional options.
	 * @returns {Array} - An array of layers after the refresh operation.
	 */
    this.refresh = async function (options={}) {
        if (!options.init) return this.init(options);
        
        var layers = geoflo.Utilities.cloneDeep(this._layers);

        this._layers = [];
        this._sources = [];

        this.removeEventListeners();
        this.removeLayers(this.defaultLayers);
        this.removeLayers(this.selectLayers);
        this.removeSources(Object.values(geoflo.statics.constants.sources));

        this.addEventListeners();
        this.addSources(Object.values(geoflo.statics.constants.sources));
        this.addLayers(this.defaultLayers, this.options);
        await buildLayers.call(this, layers);
        this.addLayers(this.selectLayers, this.options);

        setTimeout(function() { geoflo.Layers.moveLayers(); }, 250);
        //setTimeout(function() { geoflo.zoomToFeatures(geoflo.getRenderedDrawnFeatures()); }, 350);
        return this.getLayers();
    }




	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name setCustomLayers
	 * @description This function takes an array of custom layers and options, builds the layers using the buildLayers function, and returns the resulting layers.
	 * @param {Array} layers - An array of custom layers to be processed.
	 * @param {Object} options - Additional options for building the layers.
	 * @returns {Promise<Array>} The processed custom layers.
	 */
    this.setCustomLayers = async function (layers, options) {
        if (!layers) return [];
        return await buildLayers.call(this, layers, options);
    }


	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name getCustomLayers
	 * @description Retrieves the custom layers stored in the object.
	 * @returns {Array} An array containing the custom layers.
	 */
    this.getCustomLayers = function () {
        return this._layers;
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name hasCustomLayers
	 * @description This function determines if there are any custom layers present in the application.
	 * @returns {number} The number of custom layers available.
	 */
    this.hasCustomLayers = function () {
        return this.getCustomLayers().length;
    }

    


	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name getFeatures
	 * @description Retrieves the features from a source based on the provided ID.
	 * @param {string} id - The ID of the source to retrieve features from.
	 * @returns {Array} An array of features from the specified source, or an empty array if the source or features are not found.
	 */
    this.getFeatures = function (id) {
        var source = this.getSource(id);
        if (!source || !source._data) return [];
        return source._data.features;
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name getSelection
	 * @description This function determines the selected feature based on the provided features array and coordinates.
	 * @param {Array} features - An array of features to select from.
	 * @param {Object} coords - The coordinates of the selected feature.
	 * @returns {boolean} Returns true if a feature is selected, false otherwise.
	 */
    this.getSelection = function (features=[], coords) {
        var feature = features && features.length ? features[0] : false;
        if (!feature) return false;
        if (feature.properties.cluster) return Layers.onClusterClick(feature, coords), false;
        return true;
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name getType
	 * @description This function takes a geometry type as input and returns the corresponding general type (Polygon, Polyline, or Point).
	 * @param {string} type - The type of geometry to be evaluated.
	 * @returns {string|boolean} Returns the general type of the geometry (Polygon, Polyline, Point) or false if the type is not recognized.
	 */
    this.getType = function (type) {
        return type === 'Polygon' || type === 'Rectangle' ? 'Polygon' :
        type === 'Polyline' || type === 'LineString' || type === 'Line' ? 'Polyline' :
        type === 'Point' || type === 'Circle' || type === 'Marker' || type === 'Icon' || type === 'Text' ? 'Point' :
        type === 'Image' ? 'Image' :
        false;
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name getSources
	 * @description Retrieves the sources stored in the object.
	 * @returns {Array} An array containing the sources.
	 */
    this.getSources = function () {
        return this.sources;
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name getSource
	 * @description Retrieves a specific source object by its ID from the list of sources.
	 * @param {string} id - The ID of the source to retrieve.
	 * @returns {object|boolean} The source object with the specified ID if found, otherwise false.
	 */
    this.getSource = function (id) {
        if (!id) return false;
        var sources = this.getSources();
        return sources.find(function(source) { return source.id === id })
    }

	/** 
	 * @function
     * @memberof module:geoflo.Layers
	 * @name getSourceIds
	 * @description Retrieves the IDs of all sources.
	 * @returns {Array} An array of source IDs.
	 */
    this.getSourceIds = function () {
        return this.getSources().map(function (s) { return s.id });
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name getLayers
	 * @description Retrieves the layers array from the object.
	 * @returns {Array} The layers array.
	 */
    this.getLayers = function () {
        return this.layers;
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name getLayer
	 * @description Retrieves a layer based on the provided ID or source ID.
	 * @param {string} id - The ID of the layer to retrieve.
	 * @returns {object|boolean} The layer object if found, or false if not found.
	 */
    this.getLayer = function (id, custom) {
        if (!id) return false;
        var layers = custom ? this.getCustomLayers() : this.getLayers();
        var layer = layers.find(function(layer) { return layer.id === id });
        if (!layer) layer = layers.filter(function(layer) { return layer.source === id });
        return layer;
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name getLayerIds
	 * @description Retrieves the IDs of the layers provided or the default layers if none are provided.
	 * @param {Array} layers - An array of layer objects.
	 * @returns {Array} An array of layer IDs.
	 */
    this.getLayerIds = function (layers) {
        var _layers = layers || this.getCustomLayers();
        return _layers.map(function (l) { return l.id });
    }

    this.getLayerType = function (id) {
        let type = '';
        const layer = this.getLayer(id, true);
        if (layer && layer.details) type = layer.details.type;
        return type;
    }



    

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name addSources
	 * @description Adds multiple sources to the context with the given options.
	 * @param {Array} sources - An array of sources to be added.
	 * @param {Object} options - Additional options for adding the sources.
	 * @returns {Array} - An array of all the added sources.
	 */
    this.addSources = function (sources=[], options={}) {
        sources.forEach(function(source) { this.addSource(source, false, options) }, this);
        geoflo.fire('sources.add', { sources: this.getSources() });
        return this.getSources();
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name addSource
	 * @description This function adds a new source to the map using the provided ID and type. It also accepts optional configuration options for the source.
	 * @param {string} id - The unique identifier for the source.
	 * @param {string} type - The type of the source (e.g., 'geojson', 'vector', 'raster', etc.).
	 * @param {Object} [options={}] - Additional configuration options for the source (e.g., features, promoteId, clusterMaxZoom, clusterRadius).
	 * @returns {Object} The newly added source object.
	 */
    this.addSource = function (id, type, options={}) {
        if (!id) throw new Error('No source was provided!');
        
        var opts = { type: options.type || "geojson", data: turf.featureCollection(options.features || []), promoteId: options.promoteId || 'id' };
        if (type && type === 'Point' && !options.noCluster) { opts = Object.assign(opts, { cluster: true, clusterMaxZoom: options.clusterMaxZoom || 14, clusterRadius: options.clusterRadius || 50 }) }

        map.addSource(id, opts);
        this.sources.push(map.getSource(id));
        geoflo.fire('source.add', { id: id, source: this.getSource(id) })
        return this.getSource(id);
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name addLayers
	 * @description Adds multiple layers to the map.
	 * @param {Array} layers - An array of layers to be added to the map.
	 * @param {Object} options - Additional options for adding the layers.
	 * @returns {Array} - An array of layers that have been added to the map.
	 */
    this.addLayers = function (layers=[], options={}) {
        layers.forEach(function(layer, index) { this.addLayer(layer, options, index) }, this);
        geoflo.fire('layers.add', { layers: this.getLayers() });
        buildEvents.call(this);
        return this.getLayers();
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name addLayer
	 * @description This function adds a layer to the map with the provided options. It also updates the layer's metadata, adds the layer to the map, and pushes the layer to the layers array. It triggers a 'layer.add' event and returns the added layer.
	 * @param {Object} layer - The layer object to be added to the map.
	 * @param {Object} [options={}] - Additional options for the layer.
	 * @returns {Object} The added layer.
	 */
    this.addLayer = function (layer, options={}, index) {
        if (!layer || !layer.id) return false;        
        layer.metadata = layer.metadata || options;

        map.addLayer(layer);

        layer = map.getLayer(layer.id);
        if (!layer) return console.error(id, 'Layer Not Added!');

        this.layers.push(layer);
        geoflo.fire('layer.add', { id: layer.id, layer: this.getLayer(layer.id) });
        return this.getLayer(layer.id);
    }

    this.addTextLayer = function (options={}) {
        var layers = options.select ? geoflo.Layers.getLayer(geoflo.statics.constants.sources.SELECT) : this.getCustomLayers();
        var field = options.field || 'text';

        this.removeTextLayer(options);

        layers.forEach(function(layer) {
            var id = layer.id + '-Text';

            var filter = ['all', ['==', ["geometry-type"], 'Point'], ["has", field] ];
            if (options.filter) filter = options.filter;
            if (!options.select && options.ids) filter = ['in', 'id', ...options.ids];

            var layout = Object.assign({}, {
                'visibility': 'visible',
                'symbol-placement': 'point',
                'text-rotation-alignment': 'viewport',
                'text-field': ['get', field],
                'text-keep-upright': true,
                'text-allow-overlap': true,
                'text-anchor': 'top',
                'text-size': 12,
                'text-justify': 'center',
                'text-letter-spacing': 0.25,
                'text-line-height': 1.2,
                'text-max-angle': 10,
                'text-offset': [0, 0.5],
                'text-padding': 2,
                'text-rotate': 0,
                'text-transform': 'none',
                'text-font': ['Arial Unicode MS Regular', 'DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                'text-ignore-placement': false,
                'text-max-width': 15
            }, layer.text ? layer.text.layout || {} : {}, options.layout);

            var paint = Object.assign({}, {
                'text-translate-anchor': 'viewport',
                'text-halo-color': ['get', 'primaryColor', ['get','style', ['properties']]],
                'text-halo-width': 1.2,
                'text-color': ['get', 'secondaryColor', ['get','style', ['properties']]],
                'text-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['get', 'opacity', ['get','style', ['properties']]]]
            }, layer.text ? layer.text.paint || {} : {}, options.paint);

            var style = {
                id: id,
                type: 'symbol',
                source: layer.source || layer.details.source || id,
                slot: 'top',
                filter: filter,
                layout: layout,
                paint: paint,
                metadata: { text: true, name: id }
            }
            
            if (!map.getLayer(id)) map.addLayer(style);
        }, this);

        this.showTextLayers = true;
    }





	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name removeSources
	 * @description Removes sources from the map.
	 * @param {Array} sources - An array of source IDs to be removed. If not provided, it defaults to all source IDs.
	 * @returns {void}
	 */
    this.removeSources = function (sources) {
        sources = sources || this.getSourceIds();
        sources.forEach(function(id) { this.removeSource(id) }, this);
        geoflo.fire('sources.remove', { removed: true })
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name removeSource
	 * @description This function removes a source from the map and the internal sources array based on the provided id.
	 * @param {string} id - The id of the source to be removed.
	 * @returns {string} The id of the removed source.
	 */
    this.removeSource = function (id) {
        if (!id) return false;
        if (map.getSource(id)) map.removeSource(id);

        var index = -1;
        index = this.sources.findIndex(function(l) { return l.id === id });
        if (index > -1) this.sources.splice(index, 1);
        
        geoflo.fire('source.remove', { removed: id });
        return id;
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name removeLayers
	 * @description Removes multiple layers from the context.
	 * @param {Array} layers - An array of layer objects to be removed.
	 * @returns {Array} - An array of IDs of the removed layers.
	 */
    this.removeLayers = function (layers) {
        var ids = this.getLayerIds(layers);
        this.removeTextLayer();
        ids.forEach(function(id) { this.removeLayer(id) }, this);
        geoflo.fire('layers.remove', { removed: ids });
        return ids;
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name removeLayer
	 * @description This function removes a layer from the map and the layers array based on the provided id.
	 * @param {string} id - The id of the layer to be removed.
	 * @returns {string} The id of the removed layer.
	 */
    this.removeLayer = function (id) {
        if (!id) return false;
        console.log('Removing Layer:', id);
        if (map.getLayer(id)) map.removeLayer(id);

        var index = -1;
        index = this.layers.findIndex(function(l) { return l.id === id });
        if (index > -1) this.layers.splice(index, 1);

        geoflo.fire('layer.remove', { removed: id });
        return id;
    }

    this.removeTextLayer = function (options={}) {
        var layers = this.getLayers();
        layers.forEach(function(layer) { if (layer.metadata.text && map.getLayer(layer.id)) map.removeLayer(layer.id) }, this);
        this.showTextLayers = false;
    }



	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name moveLayers
	 * @description Moves the specified layers on the map.
	 * @param {Array} layers - An array of layer objects to be moved on the map.
	 * @returns {void}
	 */
    this.moveLayers = function (layers) {
        layers = !layers ? this.defaultLayers : layers;
        layers.forEach(function (layer) { if (geoflo.map.getLayer(layer.id)) geoflo.map.moveLayer(layer.id) })
    }



	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name addEventListeners
	 * @description Attaches event listeners based on the provided options.
	 * @param {Object} options - An object containing configuration options for event listeners.
	 * @returns {Object} - The result of the buildEvents function with the provided options.
	 */
    this.addEventListeners = function (options={}) {
        return buildEvents.call(this, { on: true })
    }

	/**
	 * @function
     * @memberof module:geoflo.Layers
	 * @name removeEventListeners
	 * @description Removes event listeners from the element.
	 * @param {Object} options - An object containing options for removing event listeners.
	 * @param {boolean} options.off - A boolean flag to indicate whether to turn off event listeners.
	 * @returns {void}
	 */
    this.removeEventListeners = function (options={}) {
        return buildEvents.call(this, { off: true })
    }

    this.onClusterClick = function (feature) {
        if (!feature.source) return false;

        var source = map.getSource(feature.source);

        source.getClusterExpansionZoom(feature.properties.cluster_id, function(err,zoom) {
            if (!err) map.easeTo({ center: feature.geometry.coordinates, zoom: zoom + 2 });
        });
    }

    this.onLayerMouseover = function(event) {
        return 

        var Map = app.Map;
        if (Map.getActions().editing || Map.getActions().drawing || Map.getActions().viewing) { return false };
        if (app[app.ns('layer')]._importing) { return false }
        if (!event.features.length) { return false }

        Map.setHighlight({ clear: true, features: event.features});
    }

    this.onLayerMouseout = function(event) {
        return 

        var Map = app.Map;
        if (Map.getActions().editing || Map.getActions().drawing || Map.getActions().viewing) { return false };
        if (app[app.ns('layer')]._importing) { return false }
        
        Map._removeHighlight();
    }


    this.init(options);


    async function buildLayers (layers=[], options={}) {
        await buildText.call(this);
        if (!layers.length) return false;
        for (const layer of layers) await buildLayer.call(this, layer, options);
        this.moveLayers();
        if (this.showTextLayers) this.addTextLayer();
        return this.getLayers();
    }

    async function buildLayer (layer, opts) {
        var details = layer.details || {};
        var options = layer.options || {};
        var layers = layer.layers || [];
        var features = layer.features || [];
        var hasFeatures = features && features.length;
        var error;

        if (!details.id || !details.type) error = true;

        const type = this.getType(details.type);
        if (!type) error = true;

        var metadata = { type: details.type} ;
        details.default ? metadata.default = true : metadata.custom = true;
        details.name ? metadata.name = details.name : false;

        var source = details.source || details.id;
        metadata.source = source;

        var settings = {
            type: type,
            source: source,
            id: details.id,
            types: layerTypes[type],
            style: layer.style || {},
            filter: layer.filter,
            images: layer.images,
            details: details,
            options: options,
            layers: layers
        }
        
        layers = type === 'Image' ? await buildImage.call(this, settings, options) :
        type === 'Polygon' ? await buildPolygon.call(this, settings, options) :
        type === 'Polyline' ? await buildPolyline.call(this, settings, options) :
        type === 'Point' ? await buildPoint.call(this, settings, options) : [];

        this.removeLayers(layers);
        this.removeSource(source);
        this.addSource(source, type, options);
        this.addLayers(layers, metadata);

        removeLayer.call(this, { layer: details.id, source: source });

        settings.metadata = metadata;
        this._layers.push(settings);
        this._sources.push({ id: source, type: type, options: options });

        if (hasFeatures) geoflo.Features.addFeatures(features);
        
        return new Promise(async function (resolve, reject) {
            if (error) return resolve(error);

            var ready = setInterval(function() {
                var feats = geoflo.Layers.getFeatures(source);
                if (hasFeatures && !feats.length) return; 
                clearInterval(ready);
                return resolve({ layer: layer, features: feats });
            }, 1);
        })
    }

    async function buildText () {
        const map = geoflo.map;

        return new Promise(async function (resolve, reject) {
            const url = 'https://docs.mapbox.com/mapbox-gl-js/assets/popup.png';

            if (map.hasImage('text-marker')) return resolve(true);

            map.loadImage(url, async function(error, image) {
                if (error) return reject(error);
                if (map.hasImage('text-marker')) return resolve(image);
                
                map.addImage('text-marker', image, {
                    content: [25, 25, 115, 100],
                    stretchX: [[25, 115]],
                    stretchY: [[25, 100]],
                    pixelRatio: 2,
                    sdf: false
                });
                
                return resolve(image);
            });
        });
    }

    async function buildImage (settings={}, options={}) {
        if (!settings.source) return [];

        var layers = [];
        var source = settings.source;

        for (var i = 0; i < settings.types.length; i++) {
            var type = settings.types[i];
            var style = settings.style;
            var id = settings.id + type;
            var layout, paint;

            if (!settings.images || !settings.images.length) continue;

            for (var j = 0; j < settings.images.length; j++) {
                var image = settings.images[j];
                if (!image) continue;

                var img = await loadImage(image);
                if (!img) continue;
                
                map.hasImage(image.id) ?
                map.updateImage(image.id, img, {pixelRatio: 2}) :
                map.addImage(image.id, img, {pixelRatio: 2});
            }

            layout = Object.assign({}, {
                'visibility': options.visibility || 'visible',
                'icon-image': ['get', 'primaryImage', ['get','style', ['properties']]],
                'icon-size': ['interpolate', ['linear'], ['zoom'], 1, 0.6, 10, 0.8, 15, 1],
                'icon-allow-overlap': true,
                'icon-anchor': 'bottom'
            }, style.image ? style.image.layout || {} : {});

            paint = Object.assign({}, {
                'icon-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0,
                    ['case', ["boolean", ["feature-state", "hidden"], true], 0,
                    ['get', 'opacity', ['get','style', ['properties']]]]]
            }, style.image ? style.image.paint || {} : {});

            style = {
                id: id,
                type: 'symbol',
                source: source,
                slot: style.slot || 'top',
                filter: settings.filter || ['==', "$type", "Point"],
                layout: layout,
                paint: paint
            }

            if (!style) continue;
            layers.push(style)
        }

        return layers;
    }

    async function buildPolygon (settings={}, options={}) {
        if (!settings.source) return [];

        var layers = [];
        var source = settings.source;

        for (var i = 0; i < settings.types.length; i++) {
            var type = settings.types[i];
            var style = settings.style;
            var id = settings.id + type;
            var layout, paint;

            if (type.includes('border')) {
                layout = Object.assign({}, {
                    'visibility': options.visibility || 'visible',
                }, style.border ? style.border.layout || {} : {});

                paint = Object.assign({}, {
                    'line-color': ['get', 'primaryColor', ['get','style', ['properties']]],
                    'line-width': ['case', ["boolean", ['has', 'width', ['get','style', ['properties']]], true], ['get', 'width', ['get','style', ['properties']]], 2],
                    'line-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 0.8]
                }, style.border ? style.border.paint || {} : {});

                style = {
                    id: id,
                    type: 'line',
                    source: source,
                    slot: style.slot || 'bottom',
                    filter: style.border ? style.border.filter || ['==', "$type", "Polygon"] : ['==', '$type', 'Polygon'],
                    layout: layout,
                    paint: paint
                }
            } else if (type.includes('fill')) {
                layout = Object.assign({}, {
                    'visibility': options.visibility || 'visible',
                }, style.fill ? style.fill.layout || {} : {});

                paint = Object.assign({}, {
                    'fill-color': ['get', 'secondaryColor', ['get','style', ['properties']]],
                    'fill-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 0.5]
                }, style.fill ? style.fill.paint || {} : {});

                style = {
                    id: id,
                    type: 'fill',
                    source: source,
                    slot: style.slot || 'bottom',
                    filter: style.fill ? style.fill.filter || ['==', "$type", "Polygon"] : ['==', '$type', 'Polygon'],
                    layout: layout,
                    paint: paint
                }
            }

            if (!style) continue;
            layers.push(style)
        }

        return layers;
    }

    async function buildPolyline (settings={}, options={}) {
        if (!settings.source) return [];

        var layers = [];
        var source = settings.source;

        for (var i = 0; i < settings.types.length; i++) {
            var type = settings.types[i];
            var style = settings.style;
            var id = settings.id + type;
            var layout, paint;

            if (type.includes('line')) {
                layout = Object.assign({}, {
                    'visibility': options.visibility || 'visible',
                    'line-miter-limit': 2,
                    'line-join': 'round',
                    'line-cap': 'round'
                }, style.line ? style.line.layout || {} : {});

                paint = Object.assign({}, {
                    'line-color': ['get', 'primaryColor', ['get','style', ['properties']]],
                    'line-width': ['case', ["boolean", ['has', 'width', ['get','style', ['properties']]], true], ['get', 'width', ['get','style', ['properties']]], 4],
                    'line-offset': ['case', ["boolean", ["has", "offset"], true], ["get", "offset"], 0],
                    'line-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 1]
                }, style.line ? style.line.paint || {} : {});

                style = {
                    id: id,
                    type: 'line',
                    source: source,
                    slot: style.slot || 'middle',
                    filter: style.line ? style.line.filter || ['==', "$type", "LineString"] : ['==', '$type', 'LineString'],
                    layout: layout,
                    paint: paint
                }
            }

            if (!style) continue;
            layers.push(style)
        }

        return layers;
    }

    async function buildPoint (settings={}, options={}) {
        if (!settings.source) return [];

        var layers = [];
        var source = settings.source;
        var dontRender = map.getStyle().imports && map.getStyle().imports.length;

        for (var i = 0; i < settings.types.length; i++) {
            var type = settings.types[i];
            var style = settings.style;
            var id = settings.id + type;
            var layout, paint;

            if (type.includes('circle')) {
                if (options.noCircle) continue;

                layout = Object.assign({}, {
                    'visibility': options.visibility || 'visible',
                }, style.circle ? style.circle.layout || {} : {});

                paint = Object.assign({}, {
                    'circle-radius': 10,
                    'circle-stroke-width': 2,
                    'circle-color': ['get', 'secondaryColor', ['get','style', ['properties']]],
                    'circle-stroke-color': ['get', 'primaryColor', ['get','style', ['properties']]],
                    'circle-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['get', 'opacity', ['get','style', ['properties']]]]],
                    'circle-stroke-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['get', 'opacity', ['get','style', ['properties']]]]]
                }, style.circle ? style.circle.paint || {} : {});

                style = {
                    id: id,
                    type: 'circle',
                    source: source,
                    slot: style.slot || 'top',
                    filter: style.circle ? style.circle.filter || ['==', "$type", "Point"] : ['==', "$type", "Point"],
                    layout: layout,
                    paint: paint
                }

                if (type.includes('cluster')) {
                    if (options.noCluster) continue;
                    style.filter = ['has', 'point_count'];
                    style.paint['circle-color'] = options.secondaryColor || geoflo.options.colors.secondaryColor;
                    style.paint['circle-stroke-color'] = options.primaryColor || geoflo.options.colors.primaryColor;
                }
            } else if (type.includes('icon')) {
                if (dontRender) continue;

                layout = Object.assign({}, {
                    'visibility': options.visibility || 'visible',
                    'icon-optional': true,
                    'text-field': ['get', 'primaryIcon', ['get','style', ['properties']]],
                    'text-rotate': ['get', 'rotate', ['get','style', ['properties']]],
                    'text-rotation-alignment': 'viewport',
                    'text-size': 14,
                    'text-line-height': 1,
                    'text-padding': 0,
                    'text-offset': [0, 0.2],
                    'text-justify': 'auto',
                    'text-anchor': 'center',
                    'text-allow-overlap': true,
                    'text-font': ['Font Awesome 6 Pro Solid'],
                    'text-ignore-placement': true
                }, style.icon ? style.icon.layout || {} : {});

                paint = Object.assign({}, {
                    'text-translate-anchor': 'viewport',
                    'text-halo-color': ['get', 'primaryColor', ['get','style', ['properties']]],
                    'text-halo-width': 0,
                    'text-color': ['get', 'primaryColor', ['get','style', ['properties']]],
                    'text-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['get', 'opacity', ['get','style', ['properties']]]]]
                }, style.icon ? style.icon.paint || {} : {});

                style = {
                    id: id,
                    type: 'symbol',
                    source: source,
                    slot: style.slot || 'top',
                    filter: style.icon ? style.icon.filter || ['==', "$type", "Point"] : ['==', "$type", "Point"],
                    layout: layout,
                    paint: paint
                }

                if (type.includes('cluster')) {
                    if (options.noCluster) continue;
                    style.filter = ['has', 'point_count'];
                    style.layout['text-field'] = options.primaryIcon || '';
                    style.paint['text-halo-color'] = options.secondaryColor || geoflo.options.colors.secondaryCold;
                    style.paint['text-color'] = options.primaryColor || geoflo.options.colors.secondaryText;
                } else if (type.includes('count')) {
                    if (options.noCluster) continue;
                    style.filter = ['has', 'point_count'];

                    style.layout = {
                        'visibility': options.visibility || 'visible',
                        'icon-optional': true,
                        'text-field': options.countIcon || '',
                        'text-size': {
                            'base': 14,
                            'stops': [[10, 16], [14, 14]]
                        },
                        'text-line-height': 1,
                        'text-padding': 0,
                        'text-offset': [0.5, -0.6],
                        'text-justify': 'auto',
                        'text-anchor': 'center',
                        'text-allow-overlap': true,
                        'text-font': ['Font Awesome 6 Pro Solid'],
                        'text-ignore-placement': true
                    }

                    style.paint = {
                        'text-translate-anchor': 'viewport',
                        'text-color': options.countIconColor || geoflo.options.colors.primaryText,
                        'text-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['get', 'opacity', ['get','style', ['properties']]]]
                    }
                }
            } else if (type.includes('text')) {
                if (dontRender) continue;

                if (type.includes('count')) {
                    if (options.noCluster) continue;

                    layout = Object.assign({}, {
                        'text-field': ['get', 'point_count_abbreviated'],
                        'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                        'text-size': {
                            'base': 14,
                            'stops': [[10, 14], [14, 12]]
                        },
                        'text-offset': [0.55, -0.9],
                    }, style.text ? style.text.layout || {} : {});
    
                    paint = Object.assign({}, {
                        'text-color': options.countTextColor || geoflo.options.colors.secondaryText,
                        'text-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['get', 'opacity', ['get','style', ['properties']]]]
                    }, style.text ? style.text.paint || {} : {});
    
                    style = {
                        id: id,
                        type: 'symbol',
                        source: source,
                        slot: style.slot || 'top',
                        filter: ['has', 'point_count'],
                        layout: layout,
                        paint: paint
                    }
                }
            }

            if (!style) continue;
            layers.push(style)
        }

        return layers;
    }

    function buildEvents (options={}) {
        var ids = this.getLayerIds();
        if (!ids.length) return;

        if (options.off) {
            map.off('mousemove', ids, this.onLayerMouseover);
            map.off('mouseleave', ids, this.onLayerMouseout);
        } else if (options.on) {
            map.on('mousemove', ids, this.onLayerMouseover);
            map.on('mouseleave', ids, this.onLayerMouseout);
        } else if (!options) {
            buildEvents({ off: true });
            buildEvents({ on: true })
        }
    }

    function removeLayer (options) {
        if (!options) return false;
        var layer = this._layers.findIndex((e) => { return e.id === options.layer });
        var source = this._sources.findIndex((e) => { return e.id === options.source });
        if (layer !== -1) this._layers.splice(layer, 1);
        if (source !== -1) this._sources.splice(source, 1);
    }

    async function loadImage (options={}) {
        if (!options.url || !options.id) return false;
        return new Promise(async function (resolve, reject) {
            const url = options.url + '?' + new Date().getTime();
            map.loadImage(url, function(error, image) { return error ? reject(error) : resolve(image); });
        });
    }

    function loadImageAsDataURL(imageUrl, callback) {
        /* loadImageAsDataURL(options.url, (data) => {
            options.data = data;
            const svgMarker = createSVGMarker(options);
            svgToImage(svgMarker, (img) => resolve(img) );
        }); */
        
        const img = new Image();
        img.setAttribute('crossOrigin', 'anonymous');
        img.onload = () => {
            const canvas = document.createElement("canvas");
            canvas.width = img.width;
            canvas.height = img.height;
            const ctx = canvas.getContext("2d");
            ctx.drawImage(img, 0, 0);
            const dataURL = canvas.toDataURL("image/png");
            callback(dataURL);
        };
        img.src = imageUrl + '?' + new Date().getTime();
    }

    function createSVGMarker(options={}) {
        const svgNS = "http://www.w3.org/2000/svg";

        const data = options.data;
        const width = options.width;
        const height = options.height;
        const borderWidth = options["stroke-width"] || 5;

        const svg = document.createElementNS(svgNS, "svg");
        svg.setAttribute("width", width);
        svg.setAttribute("height", height);
        svg.setAttribute("viewBox", `0 0 ${width + 2 * borderWidth} ${height + 2 * borderWidth}`);
    
        const marker = document.createElementNS(svgNS, "ellipse");
        marker.setAttribute("cx", (width + 2 * borderWidth) / 2);
        marker.setAttribute("cy", (height + 2 * borderWidth) / 2);
        marker.setAttribute("rx", width / 2);
        marker.setAttribute("ry", height / 2);
        marker.setAttribute("fill", 'transparent');
        marker.setAttribute("stroke", options.stroke || geoflo.getColors().secondaryBackground);
        marker.setAttribute("stroke-width", borderWidth);
    
        const image = document.createElementNS(svgNS, "image");
        image.setAttributeNS("http://www.w3.org/1999/xlink", "href", data);
        image.setAttribute("x", borderWidth);
        image.setAttribute("y", borderWidth);
        image.setAttribute("width", width);
        image.setAttribute("height", height);
        image.setAttribute("preserveAspectRatio", "xMidYMid slice");
        image.setAttribute("clip-path", "ellipse()");
    
        svg.appendChild(marker);
        svg.appendChild(image);
    
        return svg;
    }
    
    function svgToImage(svgElement, callback) {
        const svgData = new XMLSerializer().serializeToString(svgElement);
        const svgBlob = new Blob([svgData], { type: "image/svg+xml;charset=utf-8" });
        const url = URL.createObjectURL(svgBlob);
        const img = new Image();

        img.onload = () => { URL.revokeObjectURL(url), callback(img); };
        img.src = url;
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Layers);

/***/ }),

/***/ "./src/Locate.js":
/*!***********************!*\
  !*** ./src/Locate.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Locate
 * @description This module provides the geolocation functionality for the Geoflo application. It allows users to locate their current position on the map and track their location.
 * @returns {Object} Returns the Locate object.
 */
const Locate = function () {
    const geoflo = this.geoflo;

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name init
	 * @description This function initializes the geolocation control on the map with the specified options.
	 * @param {Object} options - The options for configuring the geolocation control.
	 * @param {boolean} [options.enableHighAccuracy=true] - Whether to enable high accuracy for geolocation.
	 * @param {boolean} [options.trackUserLocation=true] - Whether to track the user's location.
	 * @param {boolean} [options.showUserHeading=true] - Whether to show the user's heading.
	 * @param {boolean} [options.showAccuracyCircle=false] - Whether to show the accuracy circle.
	 * @returns {Object} The current instance of the map with the geolocation control added.
	 */
    this.init = function (options={}) {
        this.options = geoflo.Utilities.extend({}, options);

        this.control = new mapboxgl.GeolocateControl({
            positionOptions: { enableHighAccuracy: true },
            trackUserLocation: true,
            showUserHeading: true,
            showAccuracyCircle: false
        });

        this.control.on('geolocate', this.onControlEvent.bind(this))
        geoflo.map.addControl(this.control, 'top-right');
        //this.ready();
        return this;
    }

    this.hide = function () {
        this.control._container.style.display = 'none';
    }

    this.show = function () {
        this.control._container.style.display = 'block';
    }

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name ready
	 * @description This function checks if the geolocate button is available in the control and then calls the build function.
	 * @params {Object} control - The control object containing the geolocate button.
	 * @returns {void}
	 */
    this.ready = function () {
        var _this = this;
        var control = this.control;

        var ready = setInterval(function() {
            if (!control._geolocateButton) return;
            _this.build();
            return clearInterval(ready);
        }, 1);
    }

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name build
	 * @description This function hides the user location dot marker and the associated button.
	 * @params {void} None
	 * @returns {void}
	 */
    this.build = function () {
        this.button = this.control._geolocateButton;
        this.marker = this.control._userLocationDotMarker;
        this.button.addEventListener('click', this.onControlEvent.bind(this));
        //this.getButton().style.display = 'none';
    }

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name update
	 * @description This function updates the map bearing and center based on the provided options.
	 * @param {Object} options - The options object.
	 * @param {number} options.alpha - The alpha value.
	 * @returns {void}
	 */
    this.update = function (options={}) {
        const alpha = options.alpha;
        const heading = this.heading();
        const bearing = this.bearing();
        const following = this.following;
        if (!heading || !following || geoflo.mapMoving) return;
        geoflo.map.setBearing(heading - 1);
        geoflo.map.setCenter(this.marker._lngLat);
    }

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name heading
	 * @description Retrieves the heading value from the control object.
	 * @returns {string} The heading value from the control object.
	 */
    this.heading = function () {
        return this.control._heading;
    }

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name bearing
	 * @description This function retrieves the current bearing of the map.
	 * @returns {number} The bearing of the map.
	 */
    this.bearing = function () {
        return geoflo.map.getBearing();
    }

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name locate
	 * @description Initiates the process of locating the user's current position on the map.
	 * @returns {void}
	 */
    this.locate = function () {
        this.locating = true;
        this.unlocated = false;
        this.control._follow = this.following = false;
        addClasses(this.button, ['mapboxgl-ctrl-geolocate-waiting']);
        geoflo.fire('locate.on', { state: this.state() });
        return this.control.trigger();
    }

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name relocate
	 * @description Relocates the geolocation control to the user's current location. If the control is set to follow the user's location, it changes the state to 'ACTIVE_LOCK'. Adds the 'mapboxgl-ctrl-geolocate-active' class to the button element. Triggers the control
	 * @params {void}
	 * @returns {void}
	 */
    this.relocate = function () {
        if (this.following) this.state('ACTIVE_LOCK');
        addClasses(this.button, ['mapboxgl-ctrl-geolocate-active']);
        return this.control.trigger();
    }

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name unlocate
	 * @description Sets the state to 'ACTIVE_LOCK', disables following, enables drag pan on the map, and triggers the control.
	 * @returns {Object} The result of triggering the control.
	 */
    this.unlocate = function () {
        this.state('ACTIVE_LOCK');
        this.control._follow = this.following = false;
        geoflo.map.dragPan.enable();
        this.unlocated = true;
        geoflo.fire('locate.off', { state: this.state() });
        return this.control.trigger();
    }

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name follow
	 * @description Enables the follow functionality for the geolocate control. When activated, adds a specific class to the button, disables drag panning on the map, and sets the follow state to true.
	 * @params {Object} geoflo - The context object containing the map and control references.
	 * @returns {boolean} - Returns true to indicate that the follow functionality has been enabled.
	 */
    this.follow = function () {
        addClasses(this.button, ['mapboxgl-ctrl-geolocate-follow']);
        geoflo.map.dragPan.disable();
        return this.control._follow = this.following = true;
    }

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name state
	 * @description This function is used to get or set the state of the control. If a state parameter is provided, it sets the control's watch state to that value. If no state parameter is provided, it returns the current watch state of the control.
	 * @param {boolean} state - The state to set for the control.
	 * @returns {boolean} - The current watch state of the control.
	 */
    this.state = function (state) {
        return state ? this.control._watchState = state : this.control._watchState;
    }



	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name getButton
	 * @description Returns the geolocate button element from the control.
	 * @returns {Element} The geolocate button element.
	 */
    this.getButton = function () {
        return this.control._geolocateButton;
    }


    

	/**
	 * @function
     * @memberof module:geoflo.Locate
	 * @name removeClasses
	 * @description This function removes classes related to geolocation control from a button element.
	 * @params {Element} button - The button element from which classes will be removed.
	 */
    this.removeClasses = function () {
        var button = this.button;
        if (!button) return;
        button.classList.remove('mapboxgl-ctrl-geolocate-waiting');
        button.classList.remove('mapboxgl-ctrl-geolocate-active');
        button.classList.remove('mapboxgl-ctrl-geolocate-active-error');
        button.classList.remove('mapboxgl-ctrl-geolocate-background');
        button.classList.remove('mapboxgl-ctrl-geolocate-background-error');
        button.classList.remove('mapboxgl-ctrl-geolocate-follow');
    }


    this.onAdd = function (event) {
        console.log(event)
    }


    this.onControlEvent = function (event) {
        //this.button = this.button || event.button;
        this.marker = this.control._userLocationDotMarker;

        this.removeClasses();

        if (event.coords) {
            this.onLocate(event)
        } else if (event.target === this.button) {
            console.error('Locate: ', this.state(), event, this.button);
            geoflo.map.dragPan.enable();
            if (this.state() === 'OFF') return this.locate();
            if (this.state() === 'BACKGROUND' && !this.following) return this.relocate();
            if (this.state() === 'ACTIVE_LOCK' && !this.following) return this.follow();
            this.unlocate();
        } 
    }

    this.onLocate = function (event) {
        if (this.state() === 'ACTIVE_LOCK' && this.locating) {
            this.locating = false;
            this.currentLocation = event.coords;
            addClasses(this.button, ['mapboxgl-ctrl-geolocate-active']);
        }

        geoflo.fire('locate.update', { locating: this.locating, coords: event.coords, state: this.state() });
    }

    this.onMapMove = function (event) {
        if (!this.button || this.following || this.unlocated) return;
        if (this.state() === 'ACTIVE_LOCK') return addClasses(this.button, ['mapboxgl-ctrl-geolocate-active']);
        addClasses(this.button, ['mapboxgl-ctrl-geolocate-background']);
    }

    this.init();

    function addClasses (button, classes=[]) {
        if (!button) return;
        classes.forEach(function(c) { c ? button.classList.add(c) : false })
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Locate);

/***/ }),

/***/ "./src/Mesh.js":
/*!*********************!*\
  !*** ./src/Mesh.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Mesh
 * @description This module provides the mesh functionality for the Geoflo application. It allows users to create a mesh of features by splitting them into segments and checking for intersections.
 * @param {Array} originalFeatures - An array of features to be added to the mesh.
 * @param {boolean} linesOnly - A flag indicating whether only lines should be added to the mesh.
 * @returns {Object} Returns the Mesh object.
 */
const Mesh = function (originalFeatures, linesOnly) {
    var segmentId = 1;
    var allSegments = [];
    var featureIndex = {};

    const geoflo = this.geoflo;

	/**
	 * @function
     * @memberof module:geoflo.Mesh
	 * @name addNewFeatures
	 * @description This function takes new features, splits them into segments, checks for intersections, and updates the existing segments accordingly.
	 * @param {Array} features - An array of new features to be added.
	 * @return {Array} Returns an array containing all mesh segments.
	 */
    this.addNewFeatures = function(features) {
        var allNewFeatures = splitAndCheckForIntersections(features);
        var newSegments = splitIntoTwoPointSegmentsAndAddIds(allNewFeatures);
        var segmentsWithCutPoints = checkForIntersections(newSegments, allSegments);
        allSegments = [].concat(geoflo.Utilities.consumableArray(cutSegments(allSegments, segmentsWithCutPoints)), geoflo.Utilities.consumableArray(cutSegments(newSegments, segmentsWithCutPoints)));
        return this.getFeatures();
    };

	/**
	 * @function
     * @memberof module:geoflo.Mesh
	 * @name getFeatures
	 * @description Returns all of the features in the mesh.
	 * @return {Array} Returns an array containing all feature segments.
	 */
    this.getFeatures = function() {
        return allSegments;
    };

	/**
	 * @function
     * @memberof module:geoflo.Mesh
	 * @name splitSegmentAtPoint
	 * @description This function takes a segment ID and coordinates of a point to split the segment. It creates two new segments by splitting the original segment at the specified point and updates the feature index.
	 * @param {string} segmentId - The ID of the segment to be split.
	 * @param {Array<number>} pointCoords - The coordinates of the point where the segment should be split.
	 */
    this.splitSegmentAtPoint = function(segmentId, pointCoords) {
        var feature = featureIndex[segmentId];
        if (feature !== undefined) {
            var pos = allSegments.indexOf(feature);
            allSegments.splice(pos, 1);
            var line1 = geoflo.Utilities.createLineWithLength([pointCoords, feature.geometry.coordinates[0]]);
            var line2 = geoflo.Utilities.createLineWithLength([pointCoords, feature.geometry.coordinates[1]]);
            addFeatureToIndex(line1);
            addFeatureToIndex(line2);
            allSegments.push(line1, line2);
        } else {
            console.error("splitSegmentAtPoint: no original feature for id ", segmentId);
        }
    };

	/**
	 * @function
     * @memberof module:geoflo.Mesh
	 * @name getFeaturesFromIndex
	 * @description This function takes an array of features and retrieves the corresponding features from an index based on their IDs.
	 * @param {Array} features - The array of features to retrieve from the index.
	 * @returns {Array} The array of features retrieved from the index.
	 */
    this.getFeaturesFromIndex = function(features) {
        var result = [];
        features.forEach(function(feature) {
            var id = feature.id || feature.properties.id;
            var originalFeature = featureIndex[id];
            if (originalFeature !== undefined) {
                result.push(originalFeature);
            }
        });
        return result;
    };

	/**
	 * @function
     * @memberof module:geoflo.Mesh
	 * @name getFeatureById
	 * @description Retrieves a feature by its ID.
	 * @param {number} id - The ID of the feature to retrieve.
	 * @returns {object} The feature object corresponding to the provided ID.
	 */
    this.getFeatureById = function(id) {
        return getFeatureById(id);
    };

	/**
	 * @function
     * @memberof module:geoflo.Mesh
	 * @name getFeaturesByParentId
	 * @description Retrieves features based on the parent ID. The parent ID is used to retrieve cold features associated with the segment.
	 * @param {number} id - The parent ID to retrieve features for.
	 * @returns {Array} - An array of features associated with the parent ID.
	 */
    this.getFeaturesByParentId = function(id) {
        return getFeaturesByParentId(id);
    };

	/**
	 * @function
     * @memberof module:geoflo.Mesh
	 * @name removeFeature
	 * @description Removes a feature with the specified ID.
	 * @param {number} id - The ID of the feature to be removed.
	 * @returns {boolean} - Returns true if the feature was successfully removed, false otherwise.
	 */
    this.removeFeature = function (id) {
        return removeFeature(id);
    };


    if (originalFeatures) allSegments = splitAndCheckForIntersections(originalFeatures);


    function addFeatureToIndex(feature, parent) {
        if (featureIndex[segmentId] || getFeatureById(segmentId)) return false;

        featureIndex[segmentId] = feature;
        feature.id = segmentId;
        feature.parent = parent;

        geoflo.Utilities.setProperty(feature, 'id', segmentId);
        geoflo.Utilities.setProperty(feature, 'parent', parent);

        segmentId++;
        return true;
    }

    function addClickSegementsToMesh() {
        if (!geoflo.options.snapping.enable) return false;
    
        var meshFeatures = [];
    
        if (geoflo.closestPoint && geoflo.closestPoint.borders && geoflo.closestPoint.id !== undefined) {
            geoflo.meshIndex.splitSegmentAtPoint(geoflo.closestPoint.id, geoflo.closestPoint.coords);
            geoflo.updateMeshData();
        }
    
        if (geoflo.snapFeature) {
            if (geoflo.snapFeature.geometry.type === "LineString") {
                if (!geoflo.Utilities.isEmptyLineString(geoflo.snapFeature)) {
                    meshFeatures.push(geoflo.snapFeature);
                }
            } else if (geoflo.snapFeature.geometry.type === "Point") {
                geoflo.Utilities.setProperty(geoflo.snapFeature, 'startPoint', true);
                geoflo.startPoint = geoflo.Utilities.cloneDeep(geoflo.snapFeature);
                meshFeatures.push(geoflo.snapFeature);
            }
        }
    
        if (meshFeatures.length > 0) geoflo.addFeaturesToMesh(meshFeatures);
    }

    function coordinatesToLineStrings(coords, result, parent) {
        var firstPoint = turf.truncate(turf.point(coords[0]), { precision: 7, coordinates: 2, mutate: true });
        var secondPoint = null;

        for (var index = 1; index < coords.length; index++) {
            secondPoint = turf.truncate(turf.point(coords[index]), { precision: 7, coordinates: 2, mutate: true });
            
            if (!geoflo.Utilities.isPointEqual(firstPoint.geometry.coordinates, secondPoint.geometry.coordinates)) {
                var line = turf.lineString([firstPoint.geometry.coordinates, secondPoint.geometry.coordinates]);
                var added = addFeatureToIndex(line, parent);
                added ? result.push(line) : false;
            }

            firstPoint = secondPoint;
        }
    }

    function splitIntoTwoPointSegmentsAndAddIds(features) {
        var result = [];
        if (!features || !features.length) return result;

        features.forEach(function(feature) {
            var type = feature.geometry.type;
            var id = feature.parent || feature.properties.parent || feature.id || feature.properties.id;
            var added;

            if (linesOnly && type !== "LineString" && !feature.properties.unfill) {
                feature = geoflo.Utilities.cloneDeep(feature);
                added = addFeatureToIndex(feature, id);
                return added ? result.push(feature) : false;
            }

            if (type === "MultiPolygon") {
                feature.geometry.coordinates.forEach(function(coords) {
                    coords.forEach(function(subCoords) {
                        coordinatesToLineStrings(subCoords, result, id);
                    });
                });
            } else if (type === "Polygon") {
                feature.geometry.coordinates.forEach(function(coords) {
                    coordinatesToLineStrings(coords, result, id);
                });
            } else if (type === "MultiLineString") {
                feature.geometry.coordinates.forEach(function(coords) {
                    coordinatesToLineStrings(coords, result, id);
                });
            } else if (type === "LineString") {
                coordinatesToLineStrings(feature.geometry.coordinates, result, id);
            } else if (type === "Point") {
                feature = geoflo.Utilities.cloneDeep(feature);
                added = addFeatureToIndex(feature, id);
                added ? result.push(feature) : false;
            }
        });

        return result;
    }

    function appendCutFeatures(segmentsWithCutPoints, feature, cutPointFeatures) {
        var id = feature.id || feature.properties.id;
        var segCutPoints = segmentsWithCutPoints[id];
    
        if (segCutPoints === undefined) {
            segCutPoints = [];
            segmentsWithCutPoints[id] = segCutPoints;
        }
    
        cutPointFeatures.forEach(function(feature) {
            var newCutPoint = geoflo.Utilities.reducePrecision(feature.geometry.coordinates);
            var cutPoint = segCutPoints.findIndex(function(element) { return element[0] === newCutPoint[0] && element[1] === newCutPoint[1]; });
            if (cutPoint === -1) { segCutPoints.push(newCutPoint); }
        });
    };

    function checkForIntersections(knownSegments, newSegments) {
        var segmentsWithCutPoints = {};

        var processIntersectionPoint = function processIntersectionPoint(point, feature1, feature2) {
            var pointCoords = point.geometry.coordinates;
            var seg1Coords = feature1.geometry.coordinates;
            var seg2Coords = feature2.geometry.coordinates;
            var addFeature1Point = false;
            var addFeature2Point = false;
            var closestPointAdded = false;

            if (!geoflo.Utilities.isPointEqual(pointCoords, seg1Coords[0]) && !geoflo.Utilities.isPointEqual(pointCoords, seg1Coords[1])) {
                var endpoint1 = turf.point(seg1Coords[0]);
                var endpoint2 = turf.point(seg1Coords[1]);
                var distanceEndpoint1 = turf.distance(point, endpoint1);
                var distanceEndpoint2 = turf.distance(point, endpoint2);

                var closestEndpoint = distanceEndpoint1 < distanceEndpoint2 ? endpoint1 : endpoint2;

                var pointOnLine = turf.pointOnLine(feature2, closestEndpoint);
                if (pointOnLine.properties.dist < geoflo.statics.constants.MIN_DISTANCE) {
                    appendCutFeatures(segmentsWithCutPoints, feature2, [closestEndpoint]);
                    closestPointAdded = true;
                } else {
                    addFeature1Point = true;
                }
            }
            if (!geoflo.Utilities.isPointEqual(pointCoords, seg2Coords[0]) && !geoflo.Utilities.isPointEqual(pointCoords, seg2Coords[1])) {
                var _endpoint = turf.point(seg2Coords[0]);
                var _endpoint2 = turf.point(seg2Coords[1]);
                var _distanceEndpoint = turf.distance(point, _endpoint);
                var _distanceEndpoint2 = turf.distance(point, _endpoint2);

                var _closestEndpoint = _distanceEndpoint < _distanceEndpoint2 ? _endpoint : _endpoint2;

                var _pointOnLine = turf.pointOnLine(feature1, _closestEndpoint);
                if (_pointOnLine.properties.dist < geoflo.statics.constants.MIN_DISTANCE) {
                    appendCutFeatures(segmentsWithCutPoints, feature1, [_closestEndpoint]);
                    closestPointAdded = true;
                } else {
                    addFeature2Point = true;
                }
            }

            if (!closestPointAdded) {
                if (addFeature1Point) {
                    appendCutFeatures(segmentsWithCutPoints, feature1, [point]);
                }
                if (addFeature2Point) {
                    appendCutFeatures(segmentsWithCutPoints, feature2, [point]);
                }
            }
        };

        var checkIfPointInCloseRange = function checkIfPointInCloseRange(feature, coords) {
            var pointOnline = turf.pointOnLine(feature, turf.point(coords));
            if (pointOnline.properties.dist < geoflo.statics.constants.MIN_DISTANCE) {
                if (!geoflo.Utilities.isPointAtVertex(feature.geometry.coordinates, coords)) {
                    appendCutFeatures(segmentsWithCutPoints, feature, [pointOnline]);
                    return true;
                }
            }
            return false;
        };

        var sameSegments = knownSegments === newSegments;

        for (var knownIndex = 0; knownIndex < knownSegments.length; knownIndex++) {
            var segmentFeature1 = knownSegments[knownIndex];
            var feature1Type = segmentFeature1.geometry.type;

            for (var newIndex = sameSegments ? knownIndex + 1 : 0; newIndex < newSegments.length; newIndex++) {
                var segmentFeature2 = newSegments[newIndex];
                var feature2Type = segmentFeature2.geometry.type;
                var id = segmentFeature2.id || segmentFeature2.properties.id;

                if (feature1Type === "LineString" && feature2Type === "LineString") {
                    if (geoflo.Utilities.isOverlapping(segmentFeature1, segmentFeature2)) {
                        var intersectionPoints = turf.lineIntersect(segmentFeature1, segmentFeature2).features;

                        if (intersectionPoints.length > 0) {
                            if (intersectionPoints.length > 1) console.error(intersectionPoints.length + " intersection points received");
                            var point = intersectionPoints[0];
                            processIntersectionPoint(point, segmentFeature1, segmentFeature2);
                        } else {
                            var seg1Coords = segmentFeature1.geometry.coordinates;
                            var seg2Coords = segmentFeature2.geometry.coordinates;
                            checkIfPointInCloseRange(segmentFeature1, seg2Coords[0]);
                            checkIfPointInCloseRange(segmentFeature1, seg2Coords[1]);
                            checkIfPointInCloseRange(segmentFeature2, seg1Coords[0]);
                            checkIfPointInCloseRange(segmentFeature2, seg1Coords[1]);
                        }

                        if (getFeatureById(id)) {
                            console.log('Existing Line: ', segmentFeature2)
                            var pos = allSegments.indexOf(getFeatureById(id));
                            allSegments.splice(pos, 1);
                        }
                    }
                } else if (feature1Type === "Point" || feature2Type === "Point") {
                    if (feature2Type === "Point" && feature2Type === "Point") {
                        console.log("Point & Point");
                    } else {
                        console.log("Point & LineString");
                        var _point = feature1Type === "Point" ? segmentFeature1 : segmentFeature2;
                        var line = feature1Type === "LineString" ? segmentFeature1 : segmentFeature2;

                        id = _point.id || _point.properties.id;

                        if (checkIfPointInCloseRange(line, _point.geometry.coordinates)) {
                            segmentsWithCutPoints[id] = [];
                        }
                    }

                    if (getFeatureById(id)) {
                        console.log('Existing Point: ', segmentFeature2)
                        var pos = allSegments.indexOf(getFeatureById(id));
                        allSegments.splice(pos, 1);
                    }
                }
            }
        }

        return segmentsWithCutPoints;
    }

    function cutSegments(newSegments, segmentsWithCutPoints) {
        var result = [];

        newSegments.forEach(function(segment) {
            var id = segment.id || segment.properties.id;

            if (segment.geometry.type === "LineString") {
                var cutPoints = segmentsWithCutPoints[id];

                if (cutPoints !== undefined) {
                    var fc = turf.lineSplit(segment, turf.multiPoint(cutPoints));
                    turf.featureEach(fc, function(feature) {
                        var length = turf.lineDistance(feature);
                        if (length > geoflo.statics.constants.MIN_SEGMENT_LENGTH) {
                            geoflo.Utilities.setProperties(feature, { length: length });
                            addFeatureToIndex(feature);
                            result.push(feature);
                        } else {
                            console.error("0 length feature (", length, ") after line split: ", JSON.stringify(feature));
                        }
                    });
                } else {
                    var length = turf.lineDistance(segment);
                    if (length > geoflo.statics.constants.MIN_SEGMENT_LENGTH) {
                        geoflo.Utilities.setProperties(segment, { length: length });
                        result.push(segment);
                    } else {
                        console.error("0 length feature (", length, ") existing segment: ", JSON.stringify(segment));
                    }
                }
            } else {
                var _cutPoints = segmentsWithCutPoints[id];

                if (_cutPoints === undefined) {
                    result.push(segment);
                }
            }
        });

        return result;
    }

    function splitAndCheckForIntersections(newFeatures) {
        var newFeaturesSegments = splitIntoTwoPointSegmentsAndAddIds(newFeatures);
        if (linesOnly) return newFeaturesSegments;
        var newFeaturesWithCutPoints = checkForIntersections(newFeaturesSegments, newFeaturesSegments);
        return cutSegments(newFeaturesSegments, newFeaturesWithCutPoints);
    }

    function getFeatureById(id) {
        return allSegments.find(function(f) { return f.id === id || f.properties.id === id }) 
    }

    function getFeaturesByParentId(id) {
        return allSegments.filter(function(f) { return f.parent === id || f.properties.parent === id })
    }

    function removeFeature(id) {
        var features = getFeaturesByParentId(id);
        
        if (features && features.length) {
            features.forEach(function(feature) {
                var pos = allSegments.indexOf(feature);
                allSegments.splice(pos, 1);
            })
            
            geoflo.updateMeshData();
        }

        return allSegments;
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Mesh);

/***/ }),

/***/ "./src/Options.js":
/*!************************!*\
  !*** ./src/Options.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const Options = {
    theme: 'dark',
    showLineUnits: false,
    showFeatureText: true,
    controls: {
        options: true,
        modes: true,
        utils: true,
        types: true,
        actions: true
    },
    map: {
        container: 'map',
        center: [-95.52816680236892, 39.56431143986035],
        zoom: 3.5,
        maxPitch: 50,
        projection: 'mercator',
        style: 'mapbox://styles/mapbox/dark-v11',
        hash: true,
        extent: [[[-127.3638459,49.6212752],[-73.7295136,49.6212752],[-73.7295136,24.7473201],[-127.3638459,24.7473201],[-127.3638459,49.6212752]]],
    },
    keys: {
        import: 'u',
        export: 'd',
        delete: 'Delete',
        cancel: 'Escape',
        select: 'Escape',
        edit: 'Enter',
        refresh: 'q',
        zoom: 'z',
        locate: 'l',
        snapping: '!',
        pinning: '@',
        routing: '#',
        exploring: '$',
        painting: '%',
        LineString: '1',
        Polygon: '2',
        Rectangle: '3',
        Circle: '4',
        Text: '5',
        Icon: '6'
    },
    commands: [{
        key: '.',
        modifier: false,
        command: function (event, geoflo, command) {
            var options = { lngLat: geoflo.map.getCenter() }
            
            if (geoflo.currentMode.id === 'draw') {
                geoflo.currentMode.handleUp(options); 
                geoflo.currentMode.handleClick(options);
            } else {
                geoflo.currentMode.handleClick(options);
            }
        }
    }],
    units: {
        Polyline: 'feet',
        Polygon: 'acres',
        Rectangle: 'acres',
        Icon: 'feature',
        Circle: 'feature',
        Marker: 'feature'
    },
    colors: {
        error: '#ff7676',

        primaryColor: "#d7ef7e",
        primaryBackground: "#5a5a5a",
        primaryText: "#c5c5c5",
        primaryBorder: "#6fafdb",
        
        secondaryColor: "#6fafdb",
        secondaryBackground: "#333333",
        secondaryText: "#333333",
        secondaryBorder: "#404040",


        primarySelect: "#333333",
        primaryEdit: "#d7ef7e",
        primaryHot: "#d7ef7e",
        primaryCold: "#6fafdb",
        primarySnap: "#c5c5c5",
        primaryBase: "#c5c5c5",
        primaryDebug: "#ff7676",
        primaryVertex: "#c5c5c5",

        secondarySelect: "#d7ef7e",
        secondaryEdit: "#c5c5c5",
        secondaryHot: "#333333",
        secondaryCold: "#c5c5c5",
        secondarySnap: "#d7ef7e",
        secondaryBase: "#242424",
        secondaryDebug: "#d7ef7e",
        secondaryVertex: "#333333"
    },
    select: {
        popup: false,
        multiple: false
    },
    snapping: {
        enable: false, // Enables snapping to features
        pixels: false, // still working on this
        distance: 200 * 1.609344, // 200 miles to kilometers. Calculated by zoom level: (distance * Math.pow(2, Math.max(1, 19 - map.getZoom()))) / 100000
        tolerance: 0.002 // kilometers. Distance from the last click to hide/show mouse line
    },
    routing: {
        enable: false, // find shortest path
        precision: 0.0000015 // rounding coords to create topology. Higher the number will close gaps in lines and allow to find path
    },
    pinning: {
        enable: false, // Enables pinning (glueing) features together at vertices/points. When editing/dragging a point, all pinned points will move together.
        buffer: (50 / 5280) * 1.609344, // 50 feet to miles to kilometer. Pin features within a 50 foot radius. False for exact point location.
        idle: 20 // milliseconds of how long to idle after updating pinned features before checking for nearby features to snap to (helps with editing performance)
    },
    exploring: {
        enable: false,
        minZoom: 12,
        buffer: (5000 / 5280) * 1.609344, // 300 feet to miles to kilometer. Download roadways within a 300 foot radius.
        tolerance: 0.00001 // How much tolerance to simplify coordinates. Can be a function with map argument.
    },
    moving: {
        enable: false, // Enables moving feature
        distance: (3 / 5280) * 1.609344 // 3 feet to miles to kilometer. The distance in which to move the feature
    },
    painting: {
        enable: false, // Enables painting drawing for linestrings and polygons
        tolerance: 0.000005 // How much tolerance to simplify coordinates. Can be a function with map argument.
    },
    gamepad: {
        enable: true,
        debug: false,
        crosshairs: true,
        joystick: {
            min: 0.2,
            max: 0.7
        },
        camera: {
            free: true
        },
        pan: {
            speed: 0.001,
            min: 0.001,
            max: 0.05
        },
        bearing: {
            speed: 0.8
        },
        pitch: {
            speed: 1.5,
            max: 70
        },
        zoom: {
            speed: 0.008
        },
        rumble: {
            startDelay: 0,
            duration: 200,
            weakMagnitude: 1.0,
            strongMagnitude: 1.0
        },
        mapping: {
            'Select': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    event.ctx.getButtons('clear').button.click();
                }
            },
            'Start': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    if (event.gamepad.hasJoysticks) {
                        var button = event.mode.id === 'select' ? 'edit' : 'select';
                        event.ctx.getButtons(button).button.click();
                    }
                }
            },
            'Power': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    event.ctx.getButtons('save').button.click();
                }
            },
            'Menu': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    
                }
            },
            'Misc': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    if (event.gamepad.hasJoysticks) {
                        event.ctx.getButtons('zoom').button.click();
    
                        var ready = setInterval(function() {
                            if (!ctx.mapMoving) {
                                clearInterval(ready);
                                event.gamepad.map.center = event.ctx.map.getCenter();
                                event.gamepad.map.zoom = event.ctx.map.getZoom();
                            }
                        }, 1);
                    }
                }
            },
            'A': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    if (!event.gamepad.hasJoysticks) {
                        if (!event.gamepad.pressed['BumpLeft'] && !event.gamepad.pressed['BumpRight']) {
                            return this['JoyLeftClick'](event);
                        }
                    } else {
                        event.ctx.getButtons('routing').button.click();
                    }
                }
            },
            'B': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    if (!event.gamepad.hasJoysticks) {
                        if (!event.gamepad.pressed['BumpLeft'] && !event.gamepad.pressed['BumpRight']) {
                            return this['JoyRightClick'](event);
                        }
                    } else {
                        event.ctx.getButtons('painting').button.click();
                    }
                }
            },
            'Y': function (event) {
                if (event.type === 'press') {
                    if (!event.gamepad.hasJoysticks) {
                        if ((event.gamepad.pressed['BumpLeft'] || event.gamepad.pressed['BumpRight'])) event.gamepad.setSpeed(event.value, false);
                    }
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    if (event.gamepad.hasJoysticks) {
                        event.ctx.getButtons('snapping').button.click();
                    }
                }
            },
            'X': function (event) {
                if (event.type === 'press') {
                    if (!event.gamepad.hasJoysticks) {
                        if ((event.gamepad.pressed['BumpLeft'] || event.gamepad.pressed['BumpRight'])) event.gamepad.setSpeed(event.value, true);
                    }
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    if (event.gamepad.hasJoysticks) {
                        event.ctx.getButtons('pinning').button.click();
                    }
                }
            },
            'JoyLeftMove': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    event.gamepad.setCenter(event.value, event.gamepad.options.camera.free) // Pan map
                } else if (event.type === 'release') {
                    event.gamepad.setCenter(false, event.gamepad.options.camera.free) // Reset map center
                }
            },
            'JoyRightMove': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    if (event.name.includes('Up') || event.name.includes('Down')) {
                        event.gamepad.setPitch(event.value, event.name.includes('Up')); // Pitch map
                    } else if (event.name.includes('Left') || event.name.includes('Right')) {
                        event.gamepad.setBearing(event.value, event.name.includes('Left')); // Rotate map
                    }
                } else if (event.type === 'release') {
                    
                }
            },
            'JoyLeftClick': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    if (event.mode.id === 'draw') {
                        event.mode.deleteVertex();
                    }
                }
            },
            'JoyRightClick': function (event) {
                if (event.type === 'press') {
                    if (event.mode.id === 'draw') {
                        if (!event.lngLat) return false;
                        return event.mode.handleDown(event);
                    }
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    if (!event.lngLat) return false;
    
                    if (event.mode.id === 'draw') {
                        event.mode.handleUp(event); 
                        event.mode.handleClick(event);
                    } else {
                        event.mode.handleClick(event);
                    }
                }
            },
            'BumpLeft': function (event) {
                if (event.type === 'press') {
                    if (!event.gamepad.hasJoysticks) {
                        if (event.gamepad.pressed['BumpRight']) return false
                    } else {
                        return event.gamepad.setSpeed(event.value, true); // Pan speed down
                    }
                } else if (event.type === 'hold') {
                    if (!event.gamepad.hasJoysticks) {
    
                    }
                } else if (event.type === 'release') {
                    
                }
            },
            'BumpRight': function (event) {
                if (event.type === 'press') {
                    if (!event.gamepad.hasJoysticks) {
                        if (event.gamepad.pressed['BumpLeft']) return false
                    } else {
                        return event.gamepad.setSpeed(event.value, false); // Pan speed down
                    }
                } else if (event.type === 'hold') {
                    
                } else if (event.type === 'release') {
                    
                }
            },
            'TrigLeft': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    event.gamepad.setZoom(event.value, true);
                } else if (event.type === 'release') {
                    
                }
            },
            'TrigRight': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    event.gamepad.setZoom(event.value, false);
                } else if (event.type === 'release') {
                    
                }
            },
            'DpadUp': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    if (!event.gamepad.hasJoysticks) {
                        if (event.gamepad.pressed['BumpLeft'] && event.gamepad.pressed['BumpRight']) {
                            event.gamepad.setPitch(event.value, true); // Pitch map
                        } else {
                            event.gamepad.setCenter(event.value, event.gamepad.options.camera.free) // Pan map
                        }
                    }
                } else if (event.type === 'release') {
                    if (event.gamepad.hasJoysticks) {
                        event.ctx.getButtons('Polygon').button.click();
                    }
                }
            },
            'DpadDown': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    if (!event.gamepad.hasJoysticks) {
                        if (event.gamepad.pressed['BumpLeft'] && event.gamepad.pressed['BumpRight']) {
                            event.gamepad.setPitch(event.value, false); // Pitch map
                        } else {
                            event.gamepad.setCenter(event.value, event.gamepad.options.camera.free) // Pan map
                        }
                    }
                } else if (event.type === 'release') {
                    if (event.gamepad.hasJoysticks) {
                        event.ctx.getButtons('Circle').button.click();
                    }
                }
            },
            'DpadLeft': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    if (!event.gamepad.hasJoysticks) {
                        if (event.gamepad.pressed['BumpLeft'] && event.gamepad.pressed['BumpRight']) {
                            event.gamepad.setBearing(event.value, true); // Rotate map
                        } else {
                            event.gamepad.setCenter(event.value, event.gamepad.options.camera.free) // Pan map
                        }
                    }
                } else if (event.type === 'release') {
                    if (event.gamepad.hasJoysticks) {
                        event.ctx.getButtons('Polyline').button.click();
                    }
                }
            },
            'DpadRight': function (event) {
                if (event.type === 'press') {
                    
                } else if (event.type === 'hold') {
                    if (!event.gamepad.hasJoysticks) {
                        if (event.gamepad.pressed['BumpLeft'] && event.gamepad.pressed['BumpRight']) {
                            event.gamepad.setBearing(event.value, false); // Rotate map
                        } else {
                            event.gamepad.setCenter(event.value, event.gamepad.options.camera.free) // Pan map
                        }
                    }
                } else if (event.type === 'release') {
                    if (event.gamepad.hasJoysticks) {
                        event.ctx.getButtons('Rectangle').button.click();
                    }
                }
            }
        }
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Options);

/***/ }),

/***/ "./src/Painting.js":
/*!*************************!*\
  !*** ./src/Painting.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Painting
 * @description This module provides the painting functionality for the Geoflo application. It allows users to paint features on the map by creating a buffer around the feature and snapping to nearby features.
 * @param {Object} mode - The mode object containing the type of mode.
 * @returns {Object} Returns the Painting object.
 */
const Painting = function (mode) {
    const geoflo = this.geoflo;

    this.type = mode.type;
    this.feature = false;
    this.currentCoords = [];

	/**
	 * @function
     * @memberof module:geoflo.Painting
	 * @name activate
	 * @description Activates the painting functionality by enabling painting mode and clearing the source data.
	 * @returns {void}
	 */
    this.activate = function () {
        this.deactivate();
        this.enabled = true;
        geoflo.options['painting'].enable = true;
        geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
    }

	/**
	 * @function
     * @memberof module:geoflo.Painting
	 * @name deactivate
	 * @description This function deactivates the current feature by setting the 'enabled' property to false, disabling the painting tool, enabling drag pan on the map, and deleting the feature.
	 * @returns {void}
	 */
    this.deactivate = function () {
        this.enabled = false;
        geoflo.options['painting'].enable = false;
        geoflo.map.dragPan.enable();
        delete this.feature;
    }

	/**
	 * @function
     * @memberof module:geoflo.Painting getFeature
	 * @name getFeature
	 * @description This function retrieves the current painted feature.
	 * @returns {any} The painted feature.
	 */
    this.getFeature = function () {
        return this.feature;
    }

	/**
	 * @function
     * @memberof module:geoflo.Painting
	 * @name setFeature
	 * @description This function creates a feature based on the given type and coordinates. It updates the currentCoords array, sets the feature, and triggers a 'painting.start' event.
	 * @param {Array} coords - The coordinates to set the feature at.
	 * @returns {Object} The created feature.
	 */
    this.setFeature = function (coords) {
        if (!this.type || !coords) return false;
        if (!geoflo.mouseIsDown) return geoflo.hotFeature;
        
        var type = this.type;
        var feature = setFeature(type, coords);

        if (!this.feature) {
            this.currentCoords = [];
            geoflo.startPoint = coords;
            geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([feature]));
            geoflo.fire('painting.start', { type: type, coords: coords, feature: feature });
        }

        this.currentCoords.push(coords);
        this.feature = feature;
        return this.feature;
    }

	/**
	 * @function
     * @memberof module:geoflo.Painting
	 * @name updateFeature
	 * @description This function updates the feature based on the provided coordinates. It handles different types of features like Rectangle, Circle, and others.
	 * @param {Array} coords - The coordinates to update the feature with.
	 * @returns {Object} The updated feature object.
	 */
    this.updateFeature = function (coords) {
        if (!this.enabled) return geoflo.hotFeature;
        if (!this.feature) return this.setFeature(coords);

        var feature = this.feature;
        var type = this.type;

        this.currentCoords.push(coords);

        if (type === 'Rectangle') {
            updateCoordinate(feature, "0.1", coords[0], geoflo.mouseIsDown[1]);
            updateCoordinate(feature, "0.2", coords[0], coords[1]);
            updateCoordinate(feature, "0.3", geoflo.mouseIsDown[0], coords[1]);
            updateCoordinate(feature, "0.4", geoflo.mouseIsDown[0], geoflo.mouseIsDown[1] );
        } else if (type === 'Circle') {
            var center = feature.properties.center;
            if (!center || !center.length) return feature;

            const distanceInKm = turf.distance(turf.point(center), turf.point(coords), { units : 'kilometers'});
            const circleFeature = turf.circle(center, distanceInKm);

            feature.geometry.coordinates = circleFeature.geometry.coordinates;
            geoflo.Utilities.setProperty(feature, 'radiusInKm', distanceInKm);
        } else {
            feature.geometry.coordinates.push(coords);
        }

        geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([this.feature]));
        geoflo.fire('painting.update', { type: type, coords: coords, feature: feature });
        return feature;
    }

	/**
	 * @function
     * @memberof module:geoflo.Painting
	 * @name handleUp
	 * @description This function updates the feature based on the 'mouse up' event. It retrieves the current feature, updates the hot source, clones the updated feature, and sets the last click coordinates.
	 * @param {Event} event - The event triggering the function.
	 * @returns {Promise<Object>} The updated feature object.
	 */
	
    this.handleUp = async function (event) {
        if (!this.feature) return false;

        var feature;

        if (geoflo.Exploring.enabled) this.feature = await geoflo.Exploring.getMatch(this.currentCoords, { set: true, start: geoflo.startPoint });

        feature = mode.updateHotSource(this.feature);
        feature = geoflo.Utilities.cloneDeep(feature);

        geoflo.lastClick = { coords: feature.geometry.coordinates[feature.geometry.coordinates.length - 1] };
        this.currentCoords = [];
        this.feature = feature;
        return feature;
    }



    if (geoflo.options['painting'].enable) this.activate();



    function setFeature (type, coords) {
        var feature;

        if (type === 'Rectangle') {
            feature = turf.polygon([[
                geoflo.mouseIsDown,
                coords,
                coords,
                geoflo.mouseIsDown
            ]]);
        } else if (type === 'Circle') {
            feature = turf.polygon([[
                geoflo.mouseIsDown,
                coords,
                coords,
                geoflo.mouseIsDown
            ]]);

            geoflo.Utilities.setProperty(feature, 'center', geoflo.mouseIsDown);
        } else {
            feature = turf.lineString([geoflo.mouseIsDown, coords]);
        }

        geoflo.Utilities.setProperty(feature, 'type', type);
        geoflo.Utilities.setProperty(feature, 'painting', 1);
        return feature;
    }

    function updateCoordinate (f, t, e, n) {
        var o = t.split(".")
            , r = parseInt(o[0], 10)
            , i = parseInt(o[1], 10);
        void 0 === f.geometry.coordinates[r] && (f.geometry.coordinates[r] = []),
        f.geometry.coordinates[r][i] = [e, n]
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Painting);

/***/ }),

/***/ "./src/Pinning.js":
/*!************************!*\
  !*** ./src/Pinning.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Pinning
 * @description This module provides the pinning functionality for the Geoflo application. It allows users to pin features to the map by creating a buffer around the feature and snapping to nearby features.
 * @param {Object} mode - The mode object containing the type of mode.
 * @returns {Object} Returns the Pinning object.
 */
const Pinning = function (mode) {
    const geoflo = this.geoflo;

    this.type = mode.type;
    this.updatedFeatures = [];

	/**
	 * @function
     * @memberof module:geoflo.Pinning
	 * @name activate
	 * @description Activates the feature by setting the enabled flag to true and enabling pinning in the options.
	 * @params {void} None
	 * @returns {void}
	 */
    this.activate = function () {
        this.updatedFeatures = [];
        this.enabled = true;
        geoflo.options['pinning'].enable = true;
    }

	/**
	 * @function
     * @memberof module:geoflo.Pinning
	 * @name deactivate
	 * @description This function deactivates the pinning feature by setting enabled to false, disabling pinning in options, clearing buffer, pinableFeatures, and pinningFeatures, and resetting updatedFeatures.
	 */
    this.deactivate = function () {
        this.enabled = false;
        geoflo.options['pinning'].enable = false;
        this.resetFeatures();
        delete this.buffer;
        delete geoflo.pinableFeatures;
        delete geoflo.pinningFeatures;
        this.updatedFeatures = [];
    }

	/**
	 * @function
     * @memberof module:geoflo.Pinning
	 * @name getFeatures
	 * @description Retrieves the features from the pinnedFeatures array in the context object.
	 * @returns {Array} An array of features extracted from the pinnedFeatures array.
	 */
    this.getFeatures = function () {
        var features = geoflo.pinnedFeatures && geoflo.pinnedFeatures.length ? geoflo.pinnedFeatures.map(function (feature) { return feature.feature }) : [];
        return features;
    }

	/**
	 * @function
     * @memberof module:geoflo.Pinning
	 * @name setBuffer
	 * @description This function creates a buffer around the provided coordinates based on the pinning buffer option.
	 * @param {Array<number>} coords - The coordinates [longitude, latitude] to create the buffer around.
	 * @returns {Object|boolean} Returns the buffer object containing the feature, radius, and coordinates if successful, otherwise false.
	 */
    this.setBuffer = function (coords) {
        delete this.buffer;

        if (!this.enabled) return false;
        if (!coords || !geoflo.options.pinning.buffer) return false;

        var buffer = turf.buffer(turf.point(coords), geoflo.options.pinning.buffer);
        var radius = turf.polygon(buffer.geometry.coordinates);

        this.buffer = {
            feature: buffer,
            radius: radius,
            coords: coords
        }

        return this.buffer;
    }

	/**
	 * @function
     * @memberof module:geoflo.Pinning
	 * @name setFeatures
	 * @description Sets the pinable features based on the provided coordinates and fires an event.
	 * @param {Object} coords - The coordinates to determine nearby features.
	 * @returns {Array} - An array of pinable features.
	 */
    this.setFeatures = function (coords) {
        geoflo.pinableFeatures = [];
        if (!this.enabled || !coords) return false;
        geoflo.pinableFeatures = this.getNearByFeatures(coords);
        geoflo.fire('pinning.add', { features: geoflo.pinableFeatures, buffer: this.buffer });
        return geoflo.pinableFeatures;
    }

	/**
	 * @function
     * @memberof module:geoflo.Pinning
	 * @name resetFeatures
	 * @description Resets the updated features by adding them to the canvas context.
	 * @returns {boolean} Returns false if there are no updated features to reset.
	 */
    this.resetFeatures = function () {
        if (!this.updatedFeatures.length) return false;
        geoflo.addFeatures(this.updatedFeatures, true);
    }

	/**
	 * @function
     * @memberof module:geoflo.Pinning
	 * @name updateFeatures
	 * @description This function updates the features if the pinning functionality is enabled. It updates the pinable features, pinned features, and triggers events accordingly.
	 * @returns {boolean} Returns false if the pinning functionality is not enabled, otherwise returns the updated pinning features.
	 */
    this.updateFeatures = function () {
        if (!this.enabled) return false;
        if (!geoflo.pinableFeatures || !geoflo.pinableFeatures.length) return delete geoflo.pinningFeatures, false;
        updateFeatures.call(this, geoflo.pinableFeatures);
        geoflo.Features.updateFeatures(geoflo.pinableFeatures, { type: 'pinning', coords: geoflo.snappedVertex, addUnits: true });
        geoflo.pinnedFeatures = geoflo.Utilities.cloneDeep(geoflo.pinableFeatures);
        geoflo.fire('pinning.update', { feature: geoflo.hotFeature, vertex: turf.point(geoflo.snappedVertex), features: geoflo.pinnedFeatures });
        return geoflo.pinningFeatures;
    }

	/**
	 * @function
     * @memberof module:geoflo.Pinning
	 * @name getNearByFeatures
	 * @description This function calculates the radius based on the map zoom level and retrieves nearby features within that radius.
	 * @param {Array<number>} coords - The coordinates [longitude, latitude] to find nearby features.
	 * @returns {Array<Object>} An array of nearby features with their IDs, types, indices, and feature objects.
	 */
    this.getNearByFeatures = function (coords) {
        if (!this.enabled || !coords) return false;

        var hotFeature = geoflo.hotFeature;
        var calculatedRadius = geoflo.options.snapping.distance * Math.pow(2, Math.max(1, 19 - geoflo.map.getZoom()));
        var radiusInKm = calculatedRadius / 100000;
        var buffer = this.setBuffer(coords);
        var features = geoflo.getRenderedDrawnFeatures({lng: coords[0], lat: coords[1]}, radiusInKm);
        var nearby = [];

        features.forEach(function (feature) {
            turf.coordEach(feature, function (coord, index) {
                var isNearby = false;
    
                if (buffer.radius && turf.booleanWithin(turf.point(coord), buffer.radius)) isNearby = true;
                if (!isNearby && buffer.coords && geoflo.Utilities.isPointEqual(coord, buffer.coords)) isNearby = true;
                if (!isNearby) return;
                if (hotFeature && hotFeature.id === feature.id) return;
                    
                nearby.push({
                    id: feature.id || feature.properties.id,
                    type: feature.properties.type,
                    index: index,
                    feature: feature
                })
            });
        });

        return nearby;
    }
    
    if (geoflo.options['pinning'].enable) this.activate();


    function updateFeatures(features) {
        if (!features || !features.length) return false;

        features.forEach(function (feature) {
            var pinned = this.updatedFeatures.find(function (f) { return f.id === feature.id });
            if (pinned) return;
            this.updatedFeatures.push(geoflo.Utilities.cloneDeep(feature.feature));
        }, this);
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Pinning);

/***/ }),

/***/ "./src/Routing.js":
/*!************************!*\
  !*** ./src/Routing.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Routing
 * @description This module provides the routing functionality for the Geoflo application. It allows users to calculate routes between two points on the map using a PathFinder object.
 * @param {Object} mode - The mode object containing the type of mode.
 * @returns {Object} Returns the Routing object.
 */
const Routing = function (mode) {
    const geoflo = this.geoflo;

    this.type = mode.type;
    this.graphData = {};
    this.features = geoflo.Features.getColdFeatures();

	/**
	 * @function
     * @memberof module:geoflo.Routing
	 * @name activate
	 * @description Activates the functionality by setting the 'enabled' property to true and enabling routing in the options.
	 * @params {void} None
	 * @returns {void}
	 */
    this.activate = function () {
        this.enabled = true;
        geoflo.options['routing'].enable = true;
    };

	/**
	 * @function
     * @memberof module:geoflo.Routing
	 * @name deactivate
	 * @description This function deactivates the routing feature by setting the enabled flag to false, disabling routing in the options, and clearing the route data on the map.
	 * @returns {void}
	 */
    this.deactivate = function () {
        this.enabled = false;
        geoflo.options['routing'].enable = false;
        geoflo.map.getSource(geoflo.statics.constants.sources['ROUTE']).setData(turf.featureCollection([]));
    };

	/**
	 * @function
     * @memberof module:geoflo.Routing
	 * @name getRoute
	 * @description This function calculates a route between two points on a map using a PathFinder object. It checks if the routing feature is enabled and if the map is not currently moving. It then creates a feature collection from the existing features, initializes a PathFinder object, and finds a path between the two points. The path is validated and then added to the map with a 'routing.add' event.
	 * @param {Object} fromPoint - The starting point for the route.
	 * @param {Object} toPoint - The destination point for the route.
	 * @returns {Array|boolean} The calculated route path as an array of points, or false if the route could not be calculated.
	 */
    this.getRoute = function (fromPoint, toPoint) {
        if (!this.enabled || geoflo.mapMoving) return false;
        var features = turf.featureCollection(this.getFeatures());
        var pathfinder = new PathFinder(features, geoflo.options.routing);
        var path = pathfinder.findPath ? pathfinder.findPath(fromPoint, toPoint) : false;
        path = validatePath(fromPoint, toPoint, path);
        geoflo.fire('routing.add', { from: fromPoint, to: toPoint, path: path });
        return path;
    };

	/**
	 * @function
     * @memberof module:geoflo.Routing
	 * @name getMatch
	 * @description Retrieves a match for the given coordinates using the Exploring service. Sets the match as a starting point for routing.
	 * @param {Object} coords - The coordinates for which to find a match.
	 * @returns {Promise<Object>} The matched feature with routing property set to true.
	 */
    this.getMatch = async function (coords) {
        var feature = await geoflo.Exploring.getMatch(coords, { set: true, start: geoflo.startPoint });
        feature.properties.routing = true;
        return feature;
    }

	/**
	 * @function
     * @memberof module:geoflo.Routing
	 * @name getClosest
	 * @description Calculates the closest point on a route based on the last click and the closest point to it.
	 * @returns {Object|boolean} Returns a GeoJSON LineString feature with routing property set to true if successful, otherwise false.
	 */
    this.getClosest = function () {
        if (!geoflo.closestPoint || !geoflo.lastClick) return false;
        var route = this.getRoute(geoflo.lastClick, geoflo.closestPoint);
        if (!route || !route.path) return false;
        var feature = turf.lineString(route.path);
        feature.properties.routing = true;
        return feature;
    };

	/**
	 * @function
     * @memberof module:geoflo.Routing
	 * @name getFeatures
	 * @description Retrieves features of type 'LineString' from the mesh index.
	 * @returns {Array} An array of features of type 'LineString'.
	 */
    this.getFeatures = function () {
        var mesh = geoflo.meshIndex.getFeatures();
        var features = [mesh, this.features].flat();
        return features.filter(function(feature) { return feature.geometry.type === 'LineString' });
    };

    
    if (geoflo.options['routing'].enable) this.activate();


    function PathFinder(features, options) {
        options = options || {};
        
        if (!features.compactedVertices) { features = preprocess(features, options); }

        this._graph = features;
        this._keyFn = options.keyFn || function(c) { return c.join(','); };
        this._precision = options.precision || 1e-5;
        this._options = options;
    
        if (Object.keys(this._graph.compactedVertices).filter(function(k) { return k !== 'edgeData'; }).length === 0) {
            return null;
        }

        this.findPath = function(a, b) {
            var start = this._keyFn(roundCoord(a.coords, this._precision)),
                finish = this._keyFn(roundCoord(b.coords, this._precision));
    
            if (!this._graph.vertices[start] || !this._graph.vertices[finish]) {
                return null;
            }
    
            var phantomStart = this._createPhantom(start);
            var phantomEnd = this._createPhantom(finish);
    
            var path = findPath(this._graph.compactedVertices, start, finish);
    
            if (path) {
                var weight = path[0];
                path = path[1];
                return {
                    fullPath: path,
                    path: path.reduce(function buildPath(cs, v, i, vs) {
                        if (i > 0) {
                            cs = cs.concat(this._graph.compactedCoordinates[vs[i - 1]][v]);
                        }
    
                        return cs;
                    }.bind(this), []).concat([this._graph.sourceVertices[finish]]),
                    weight: weight,
                    edgeDatas: this._graph.compactedEdges 
                        ? path.reduce(function buildEdgeData(eds, v, i, vs) {
                            if (i > 0) {
                                eds.push({
                                    reducedEdge: this._graph.compactedEdges[vs[i - 1]][v]
                                });
                            }
    
                            return eds;
                        }.bind(this), [])
                        : undefined
                };
            } else {
                return null;
            }
    
            this._removePhantom(phantomStart);
            this._removePhantom(phantomEnd);
        }

        this.serialize = function() {
            return this._graph;
        }

        this._createPhantom = function(n) {
            if (this._graph.compactedVertices[n]) return null;
    
            var phantom = compactNode(n, this._graph.vertices, this._graph.compactedVertices, this._graph.sourceVertices, this._graph.edgeData, true, this._options);
            this._graph.compactedVertices[n] = phantom.edges;
            this._graph.compactedCoordinates[n] = phantom.coordinates;
    
            if (this._graph.compactedEdges) {
                this._graph.compactedEdges[n] = phantom.reducedEdges;
            }
    
            Object.keys(phantom.incomingEdges).forEach(function(neighbor) {
                this._graph.compactedVertices[neighbor][n] = phantom.incomingEdges[neighbor];
                this._graph.compactedCoordinates[neighbor][n] = [this._graph.sourceVertices[neighbor]].concat(phantom.incomingCoordinates[neighbor].slice(0, -1));
                if (this._graph.compactedEdges) {
                    this._graph.compactedEdges[neighbor][n] = phantom.reducedEdges[neighbor];
                }
            }.bind(this))
    
            return n;
        }

        this._removePhantom = function(n) {
            if (!n) return;
    
            Object.keys(this._graph.compactedVertices[n]).forEach(function(neighbor) {
                delete this._graph.compactedVertices[neighbor][n];
            }.bind(this));
            Object.keys(this._graph.compactedCoordinates[n]).forEach(function(neighbor) {
                delete this._graph.compactedCoordinates[neighbor][n];
            }.bind(this));
            if (this._graph.compactedEdges) {
                Object.keys(this._graph.compactedEdges[n]).forEach(function(neighbor) {
                    delete this._graph.compactedEdges[neighbor][n];
                }.bind(this));
            }
    
            delete this._graph.compactedVertices[n];
            delete this._graph.compactedCoordinates[n];
    
            if (this._graph.compactedEdges) {
                delete this._graph.compactedEdges[n];
            }
        }
    };

    function ShortestPath () {
        var INFINITY = 1 / 0;
        this.vertices = {};
    
        this.addVertex = function (name, edges) {
            this.vertices[name] = edges;
        };
    
        this.setVertices = function (graph) {
            this.vertices = graph;
        };
    
        this.shortestPath = function (start, finish) {
            var nodes = new PriorityQueue(),
                distances = {},
                previous = {},
                path = [],
                smallest, vertex, neighbor, alt;
        
            for (vertex in this.vertices) {
                if (vertex === start) {
                    distances[vertex] = 0;
                    nodes.enqueue(0, vertex);
                } else {
                    distances[vertex] = INFINITY;
                    nodes.enqueue(INFINITY, vertex);
                }
        
                previous[vertex] = null;
            }
        
            while (!nodes.isEmpty()) {
                smallest = nodes.dequeue();
        
                if (smallest === finish) {
                    path = [];
            
                    while (previous[smallest]) {
                        path.push(smallest);
                        smallest = previous[smallest];
                    }
            
                    break;
                }
        
                if (!smallest || distances[smallest] === INFINITY) {
                    continue;
                }
        
                for (neighbor in this.vertices[smallest]) {
                    alt = distances[smallest] + this.vertices[smallest][neighbor];
        
                    if (alt < distances[neighbor]) {
                        distances[neighbor] = alt;
                        previous[neighbor] = smallest;
            
                        nodes.enqueue(alt, neighbor);
                    }
                }
            }
        
            return path;
        };
    };
    
    function PriorityQueue() {
        this._nodes = [];
    
        this.enqueue = function (priority, key) {
            this._nodes.push({key: key, priority: priority});
            this.sort();
        };
    
        this.dequeue = function () {
            return this._nodes.shift().key;
        };
    
        this.sort = function () {
            this._nodes.sort((a, b) => {
                return a.priority - b.priority;
            });
        };
    
        this.isEmpty = function () {
            return !this._nodes.length;
        };
    };

    function TinyQueue(data, compare) {
        if ( data === void 0 ) data = [];
        if ( compare === void 0 ) compare = function (a, b) {
            return a < b ? -1 : a > b ? 1 : 0;
        };
    
        this.data = data;
        this.length = this.data.length;
        this.compare = compare;
    
        if (this.length > 0) {
            for (var i = (this.length >> 1) - 1; i >= 0; i--) { this._down(i); }
        }
    
        this.push = function push (item) {
            this.data.push(item);
            this.length++;
            this._up(this.length - 1);
        };
        
        this.pop = function pop () {
            if (this.length === 0) { return undefined; }
        
            var top = this.data[0];
            var bottom = this.data.pop();
            this.length--;
        
            if (this.length > 0) {
                this.data[0] = bottom;
                this._down(0);
            }
        
            return top;
        };
        
        this.peek = function peek () {
            return this.data[0];
        };
        
        this._up = function _up (pos) {
            var ref = this;
                var data = ref.data;
                var compare = ref.compare;
            var item = data[pos];
        
            while (pos > 0) {
                var parent = (pos - 1) >> 1;
                var current = data[parent];
                if (compare(item, current) >= 0) { break; }
                data[pos] = current;
                pos = parent;
            }
        
            data[pos] = item;
        };
        
        this._down = function _down (pos) {
            var ref = this;
                var data = ref.data;
                var compare = ref.compare;
            var halfLength = this.length >> 1;
            var item = data[pos];
        
            while (pos < halfLength) {
                var left = (pos << 1) + 1;
                var best = data[left];
                var right = left + 1;
        
                if (right < this.length && compare(data[right], best) < 0) {
                    left = right;
                    best = data[right];
                }
                if (compare(best, item) >= 0) { break; }
        
                data[pos] = best;
                pos = left;
            }
        
            data[pos] = item;
        };
    };

    function findNextEnd(prev, v, vertices, ends, vertexCoords, edgeData, trackIncoming, options) {
        var weight = vertices[prev][v],
            reverseWeight = vertices[v][prev],
            coordinates = [],
            path = [],
            reducedEdge = options.edgeDataSeed;
            
        if (options.edgeDataReduceFn) {
            reducedEdge = options.edgeDataReduceFn(reducedEdge, edgeData[v][prev]);
        }
    
        while (!ends[v]) {
            var edges = vertices[v];
    
            if (!edges) { break; }
    
            var next = Object.keys(edges).filter(function notPrevious(k) { return k !== prev; })[0];
            weight += edges[next];
    
            if (trackIncoming) {
                reverseWeight += vertices[next][v];
    
                if (path.indexOf(v) >= 0) {
                    ends[v] = vertices[v];
                    break;
                }
                path.push(v);
            }
    
            if (options.edgeDataReduceFn) {
                reducedEdge = options.edgeDataReduceFn(reducedEdge, edgeData[v][next]);
            }
    
            coordinates.push(vertexCoords[v]);
            prev = v;
            v = next;
        }
    
        return {
            vertex: v,
            weight: weight,
            reverseWeight: reverseWeight,
            coordinates: coordinates,
            reducedEdge: reducedEdge
        };
    };
    
    function compactNode(k, vertices, ends, vertexCoords, edgeData, trackIncoming, options) {
        options = options || {};
        var neighbors = vertices[k];
        return Object.keys(neighbors).reduce(function compactEdge(result, j) {
            var neighbor = findNextEnd(k, j, vertices, ends, vertexCoords, edgeData, trackIncoming, options);
            var weight = neighbor.weight;
            var reverseWeight = neighbor.reverseWeight;
            if (neighbor.vertex !== k) {
                if (!result.edges[neighbor.vertex] || result.edges[neighbor.vertex] > weight) {
                    result.edges[neighbor.vertex] = weight;
                    result.coordinates[neighbor.vertex] = [vertexCoords[k]].concat(neighbor.coordinates);
                    result.reducedEdges[neighbor.vertex] = neighbor.reducedEdge;
                }
                if (trackIncoming && 
                    !isNaN(reverseWeight) && (!result.incomingEdges[neighbor.vertex] || result.incomingEdges[neighbor.vertex] > reverseWeight)) {
                    result.incomingEdges[neighbor.vertex] = reverseWeight;
                    var coordinates = [vertexCoords[k]].concat(neighbor.coordinates);
                    coordinates.reverse();
                    result.incomingCoordinates[neighbor.vertex] = coordinates;
                }
            }
            return result;
        }, {edges: {}, incomingEdges: {}, coordinates: {}, incomingCoordinates: {}, reducedEdges: {}});
    };
    
    function compactGraph(vertices, vertexCoords, edgeData, options) {
        options = options || {};
        var progress = options.progress;
        var ends = Object.keys(vertices).reduce(function findEnds(es, k, i, vs) {
            var vertex = vertices[k];
            var edges = Object.keys(vertex);
            var numberEdges = edges.length;
            var remove;
    
            if(options.compact === false)  {
                remove = false;
            } else if (numberEdges === 1) {
                var other = vertices[edges[0]];
                remove = !other[k];
            } else if (numberEdges === 2) {
                remove = edges.filter(function(n) {
                    return vertices[n][k];
                }).length === numberEdges;
            } else {
                remove = false;
            }
            
            if (!remove) {
                es[k] = vertex;
            }
    
            if (i % 1000 === 0 && progress) {
                progress('compact:ends', i, vs.length);
            }
    
            return es;
        }, {});
    
        return Object.keys(ends).reduce(function compactEnd(result, k, i, es) {
            var compacted = compactNode(k, vertices, ends, vertexCoords, edgeData, false, options);
            result.graph[k] = compacted.edges;
            result.coordinates[k] = compacted.coordinates;
    
            if (options.edgeDataReduceFn) {
                result.reducedEdges[k] = compacted.reducedEdges;
            }
    
            if (i % 1000 === 0 && progress) {
                progress('compact:nodes', i, es.length);
            }
    
            return result;
        }, {graph: {}, coordinates: {}, reducedEdges: {}});
    };
    
    function findPath(graph, start, end) {
        var costs = {};
        costs[start] = 0;
        var initialState = [0, [start], start];
        var queue = new TinyQueue([initialState], function(a, b) { return a[0] - b[0]; });
        var explored = {};
    
        while (queue.length) {
            var state = queue.pop();
            var cost = state[0];
            var node = state[2];
            if (node === end) {
                return state.slice(0, 2);
            }
    
            var neighbours = graph[node];
            Object.keys(neighbours).forEach(function(n) {
                var newCost = cost + neighbours[n];
                if (!(n in costs) || newCost < costs[n]) {
                    costs[n] = newCost;
                    var newState = [newCost, state[1].concat([n]), n];
                    queue.push(newState);
                }
            });
        }
    
        return null;
    };
    
    function preprocess(graph, options) {
        options = options || {};

        var topo;

        var weightFn = options.weightFn || function defaultWeightFn(a, b) {
            return turf.distance(turf.point(a), turf.point(b));
        }
    
        if (graph.type === 'FeatureCollection') {
            // Graph is GeoJSON data, create a topology from it
            topo = topology(graph, options);
        } else if (graph.edges) {
            // Graph is a preprocessed topology
            topo = graph;
        }
    
        var graph = topo.edges.reduce(function buildGraph(g, edge, i, es) {
            var a = edge[0],
                b = edge[1],
                props = edge[2],
                w = weightFn(topo.vertices[a], topo.vertices[b], props),
                makeEdgeList = function makeEdgeList(node) {
                    if (!g.vertices[node]) {
                        g.vertices[node] = {};
                        if (options.edgeDataReduceFn) {
                            g.edgeData[node] = {};
                        }
                    }
                },
                concatEdge = function concatEdge(startNode, endNode, weight) {
                    var v = g.vertices[startNode];
                    v[endNode] = weight;
                    if (options.edgeDataReduceFn) {
                        g.edgeData[startNode][endNode] = options.edgeDataReduceFn(options.edgeDataSeed, props);
                    }
                };
    
            if (w) {
                makeEdgeList(a);
                makeEdgeList(b);
                if (w instanceof Object) {
                    if (w.forward) {
                        concatEdge(a, b, w.forward);
                    }
                    if (w.backward) {
                        concatEdge(b, a, w.backward);
                    }
                } else {
                    concatEdge(a, b, w);
                    concatEdge(b, a, w);
                }
            }
    
            if (i % 1000 === 0 && options.progress) {
                options.progress('edgeweights', i,es.length);
            }
    
            return g;
        }, {edgeData: {}, vertices: {}});
    
        var compact = compactGraph(graph.vertices, topo.vertices, graph.edgeData, options);
    
        return {
            vertices: graph.vertices,
            edgeData: graph.edgeData,
            sourceVertices: topo.vertices,
            compactedVertices: compact.graph,
            compactedCoordinates: compact.coordinates,
            compactedEdges: options.edgeDataReduceFn ? compact.reducedEdges : null
        };
    };
    
    function roundCoord(c, precision) {
        return [
            Math.round(c[0] / precision) * precision,
            Math.round(c[1] / precision) * precision,
        ];
    };
    
    function geoJsonReduce(geojson, fn, seed) {
        if (geojson.type === 'FeatureCollection') {
            return geojson.features.reduce(function reduceFeatures(a, f) {
                return geoJsonReduce(f, fn, a);
            }, seed);
        } else {
            return fn(seed, geojson);
        }
    };
    
    function geoJsonFilterFeatures(geojson, fn) {
        var features = [];
        if (geojson.type === 'FeatureCollection') {
            features = features.concat(geojson.features.filter(fn));
        }
    
        return {
            type: 'FeatureCollection',
            features: features
        };
    };
    
    function isLineString(f) {
        return f.geometry.type === 'LineString';
    };
    
    function topology(geojson, options) {
        options = options || {};
        var keyFn = options.keyFn || function defaultKeyFn(c) {
                return c.join(',');
            },
            precision = options.precision || 1e-5;
    
        var lineStrings = geoJsonFilterFeatures(geojson, isLineString);
        var explodedLineStrings = turf.explode(lineStrings);
        var vertices = explodedLineStrings.features.reduce(function buildTopologyVertices(cs, f, i, fs) {
                var rc = roundCoord(f.geometry.coordinates, precision);
                cs[keyFn(rc)] = f.geometry.coordinates;
    
                if (i % 1000 === 0 && options.progress) {
                    options.progress('topo:vertices', i, fs.length);
                }
    
                return cs;
            }, {}),
            edges = geoJsonReduce(lineStrings, function buildTopologyEdges(es, f, i, fs) {
                f.geometry.coordinates.forEach(function buildLineStringEdges(c, i, cs) {
                    if (i > 0) {
                        var k1 = keyFn(roundCoord(cs[i - 1], precision)),
                            k2 = keyFn(roundCoord(c, precision));
                        es.push([k1, k2, f.properties]);
                    }
                });
    
                if (i % 1000 === 0 && options.progress) {
                    options.progress('topo:edges', i, fs.length);
                }
    
                return es;
            }, []);
        return {
            vertices: vertices,
            edges: edges
        };
    };

    function validatePath(fromPoint, toPoint, path) {
        if (toPoint && toPoint.type === 'linepoint') return false;
        //if (precision > 0.0005) return false;
        if (!path || !path.path || !path.path.length || path.path.length < 2) return false;
        return path;

        precision = Number((Number(precision) + 0.000002).toFixed(7));
        var pathfinder = new PathFinder(features, { precision: precision });
        var newPath = pathfinder.findPath(fromPoint, toPoint);
        return validatePath(fromPoint, toPoint, features, newPath);
    };
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Routing);

/***/ }),

/***/ "./src/Select.js":
/*!***********************!*\
  !*** ./src/Select.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Select
 * @description This module provides the select functionality for the Geoflo application. It allows users to select features on the map by clicking on them.
 * @returns {Object} Returns the Select object.
 */
const Select = function () {
    const geoflo = this.geoflo;

    var lastKnownSelectIds = [];
    var removedFeatures = [];
    var nearFeatures = [];
    var clickCoords;
    var multipleSelect;
    var selectedId;

    this.id = 'select';

    /**
	 * @function
     * @memberof module:geoflo.Select
	 * @name activate
	 * @description This function activates the select feature functionality by enabling drag pan, setting buttons, and setting the active button to 'select'. It also triggers a 'select.activate' event with the provided options.
	 * @param {Object} options - The options object for activation.
	 * @param {string} [options.id] - The ID of the feature to select.
	 * @param {Object} [options.feature] - The feature object to select.
	 * @returns {boolean} Returns false if already activated.
	 */
    this.activate = function (options={}) {
        if (this.activated) return false;
        if (geoflo.currentMode.id !== this.id) return options.mode = this.id, geoflo.setMode(options);

        this.activated = true;
        geoflo.map.dragPan.enable();
        geoflo.setButtons();
        geoflo.setActiveButton('select');
        geoflo.fire('select.activate', { activated: true, options: options })
        if (this.gamepad) {}
        geoflo.map.getSource(geoflo.statics.constants.sources.SELECT).setData(turf.featureCollection([]));
        setTimeout(function(e) { e.selectFeature(options.id ? options.id : options.feature ? options.feature.id : false) }, 5, this)
    };

	/**
	 * @function
     * @memberof module:geoflo.Select
	 * @name deactivate
	 * @description This function deactivates the current feature by setting the 'activated' flag to false and triggering necessary actions.
	 * @returns {boolean} Returns false if the feature is not activated.
	 */
    this.deactivate = function () {
        if (!this.activated) return false;

        this.activated = false;
        this.deselectCurrentFeature();
        
        geoflo.setButtons();
        geoflo.fire('select.deactivate', { activated: true });
    };

	/**
	 * @function
     * @memberof module:geoflo.Select
	 * @name canHandle
	 * @description This function determines if the given mode name is equal to the SELECT mode.
	 * @param {string} modeName - The mode name to be checked.
	 * @returns {boolean} Returns true if the mode name is SELECT, false otherwise.
	 */
    this.canHandle = function (modeName) {
        return geoflo.statics.constants.modes.SELECT === modeName;
    };

	/**
	 * @function
     * @memberof module:geoflo.Select
	 * @name selectFeature
	 * @description Selects a feature by its ID, adds it to the selected features list, and optionally adds a popup.
	 * @param {string} id - The ID of the feature to be selected.
	 * @returns {Array} - An array of removed features if wantingToEdit is false, otherwise returns the removed feature.
	 */
    this.selectFeature = function (id, options={}) {
        const popup = geoflo.options.select.popup;
        
        geoflo.map.getSource(geoflo.statics.constants.sources.SELECT).setData(turf.featureCollection([]));
        
        if (!id) return false;
        if (lastKnownSelectIds.indexOf(id) === -1) lastKnownSelectIds.push(id);
        //if (geoflo.hasSelection()) geoflo.forEachSelectedFeature((feature) => { });

        removedFeatures = geoflo.Features.removeFeatures(id, true);
        geoflo.addFeaturesToSelected(removedFeatures, options);
        popup ? this.addPopup(removedFeatures) : false;

        geoflo.fire('feature.select', { ids: geoflo.getSelectedFeatureIds(), features: geoflo.getSelectedFeatures() });
        if (!geoflo.wantingToEdit) return removedFeatures;
        if (removedFeatures.length == 1 && id === removedFeatures[0].id) editFeature(removedFeatures[0]);
        return removedFeatures;
    };

	/**
	 * @function
     * @memberof module:geoflo.Select
	 * @name deselectCurrentFeature
	 * @description Deselects the current feature by removing its selection.
	 */
    this.deselectCurrentFeature = function () {
        geoflo.fire('feature.deselect', { ids: geoflo.getSelectedFeatureIds(), features: geoflo.getSelectedFeatures() });
        geoflo.removeSelection();
    };

	/**
	 * @function
     * @memberof module:geoflo.Select
	 * @name addPopup
	 * @description This function creates a popup element with the specified features and adds it to the map at the click coordinates.
	 * @param {Object} features - The features to be displayed in the popup.
	 * @param {string} features.title - The title of the popup.
	 * @param {string} features.description - The description of the popup.
	 * @param {number} features.latitude - The latitude coordinate for the popup location.
	 * @param {number} features.longitude - The longitude coordinate for the popup location.
	 */
    this.addPopup = function (features) {
        this.popupElement = buildPopup(features);

        this.popup = new mapboxgl.Popup({ closeOnClick: false })
            .setLngLat(clickCoords)
            .setDOMContent(this.popupElement)
            .addTo(geoflo.map)
            .setOffset(12);

        this.popup._container.style['margin-bottom'] = '10px'
    };

	/**
	 * @function
     * @memberof module:geoflo.Select
	 * @name removePopup
	 * @description Removes the popup element from the DOM if it exists.
	 * @return {boolean} Returns true if the popup element was successfully removed, otherwise false.
	 */
    this.removePopup = function () {
        return this.popup && this.popup.remove ? this.popup.remove() : false;
    };

	/**
	 * @function
     * @memberof module:geoflo.Select
	 * @name handleMove
	 * @description Handles the mouse move event.
	 * @param {Event} event - The event object representing the mouse move event.
	 */
    this.handleMove = function (event) {
        //geoflo.setMapClass('pointer');
    };

	/**
	 * @function
     * @memberof module:geoflo.Select
	 * @name handleClick
	 * @description Handles the click event on the map and selects features based on the event.
	 * @param {Object} event - The event object containing information about the click event.
	 * @returns {boolean} Returns false if geoflo.noSelect is true, otherwise selects features based on the event.
	 */
    this.handleClick = function (event) {
        var features = geoflo.getRenderedDrawnFeatures(event.lngLat);

        clickCoords = [event.lngLat.lng, event.lngLat.lat];
        multipleSelect = event.originalEvent && event.originalEvent.shiftKey && geoflo.options.select.multiple;

        if (features.length > 0) {
            if (!geoflo.Layers.getSelection(features, clickCoords)) return;
            selectFeature.call(this, features);
        } else if (!multipleSelect) {
            lastKnownSelectIds = [];
            nearFeatures = [];
            clickCoords = false;
            selectedId = false;
            this.deselectCurrentFeature();
        }
    };

	/**
	 * @function
     * @memberof module:geoflo.Select
	 * @name handleDrag
	 * @description Handles the drag event triggered by a user interaction. It sets the map class to 'grabbing' to indicate dragging.
	 * @param {Event} event - The event object representing the drag event.
	 */
    this.handleDrag = function (event) {
        //geoflo.setMapClass('grabbing');
    }


    function buildPopup (features) {
        const element = document.createElement('div');
        element.classList.add('popup-table-holder');

        const table = buildTable(features);

        element.appendChild(table);

        if (nearFeatures.length > 1) {
            var button = document.createElement('div');
            button.classList.add('popup-table-button');
            button.innerHTML = `<button> Next </button>`;
            button.addEventListener('click', selectFeature.bind(this));
            element.appendChild(button);
        }

        return element;
        
        /* const button = document.createElement('div');
        button.innerHTML = `<button class="btn btn-success btn-simple text-white" > Assign</button>`;
        element.appendChild(button);
        button.addEventListener('click', (e) => { console.log('Button clicked' + name); }); */
    };

    function buildTable (features) {
        var table = document.createElement('table');
        var properties = ['id', 'type'];

        table.style.width = '100%';
        table.style.height = '100%';
        table.setAttribute('border', '1');
        table.classList.add('popup-table');

        var tableBody = document.createElement('tbody');

        features.forEach(function(feature, index) {
            var type = feature.properties.type;

            properties.forEach(function(prop) {
                tableBody.appendChild(buildRow(prop, feature.properties[prop]));
            })

            tableBody.appendChild(buildRow('geometry', feature.geometry.type));

            if (feature.geometry.type === 'LineString') {
                geoflo.Features.addUnits(feature, 'feet');
                tableBody.appendChild(buildRow('unit', feature.geometry.unit));
                tableBody.appendChild(buildRow('units', feature.geometry.units));
            } else if (type === 'Text') {
                tableBody.appendChild(buildRow('content', feature.properties.text));
            } else if (feature.geometry.type === 'Polygon') {
                geoflo.Features.addUnits(feature, 'acres');
                tableBody.appendChild(buildRow('unit', feature.geometry.unit));
                tableBody.appendChild(buildRow('units', feature.geometry.units));
            }
        })

        table.appendChild(tableBody);
        return table;
    };

    function buildRow (header, data) {
        var tr = document.createElement('tr');
        tr.classList.add('popup-table-row');

        if (header) {
            var th = document.createElement('th');
            th.classList.add('popup-table-header');
            th.appendChild(document.createTextNode(header));
            tr.appendChild(th);
        }
        
        var td = document.createElement('td');
        td.classList.add('popup-table-data');
        td.classList.add(header);
        td.appendChild(document.createTextNode(data));
        tr.appendChild(td);

        return tr;
    }

    function selectFeature (features) {
        multipleSelect = geoflo.options.select.multiple;
        nearFeatures = features;
        lastKnownSelectIds = lastKnownSelectIds === undefined ? [] : lastKnownSelectIds;

        if (features.length >= lastKnownSelectIds.length) {
            lastKnownSelectIds.splice(0, features.length - lastKnownSelectIds.length + 1);
        }

        var feat = features[0];
        selectedId = feat.id || feat.properties['id'];

        if (features.length > 1) {
            features.forEach((feature) => {
                const id = feature.id || feature.properties['id'];
                if (lastKnownSelectIds.indexOf(id) === -1) {
                    selectedId = id;
                    feat = feature;
                }
            });
        }

        if (!multipleSelect) geoflo.currentMode.deselectCurrentFeature();
        geoflo.currentMode.selectFeature(selectedId);
    }

    function editFeature (feature) {
        geoflo.wantingToEdit = false;
        geoflo.setMode('edit', feature.properties.type, feature);
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Select);

/***/ }),

/***/ "./src/Snapping.js":
/*!*************************!*\
  !*** ./src/Snapping.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Snapping
 * @description This module provides the snapping functionality for the Geoflo application. It allows users to snap features to the map by creating a buffer around the feature and snapping to nearby features.
 * @param {Object} mode - The mode object containing the type of mode.
 * @returns {Object} Returns the Snapping object.
 */
const Snapping = function (mode) {
    const geoflo = this.geoflo;
    this.type = mode.type;

	/**
	 * @function
     * @memberof module:geoflo.Snapping
	 * @name activate
	 * @description This function enables the object and sets the snapping option to true.
	 */
    this.activate = function () {
        this.enabled = true;
        geoflo.options['snapping'].enable = true;
    }

	/**
	 * @function
     * @memberof module:geoflo.Snapping
	 * @name deactivate
	 * @description This function sets the 'enabled' property to false, disables snapping, and updates the mesh data.
	 * @returns {void}
	 */
    this.deactivate = function () {
        this.enabled = false;
        geoflo.options['snapping'].enable = false;
        geoflo.updateMeshData([], true);
    }


	/**
	 * @function
     * @memberof module:geoflo.Snapping
	 * @name getClosest
	 * @description Finds the closest point to the given coordinates within a specified radius or pixel distance.
	 * @param {Array<number>} coords - The coordinates [longitude, latitude] to find the closest point to.
	 * @param {Array<Object>} features - An array of features to search for the closest point within.
	 * @returns {Object} An object containing the closest point and its coordinates.
	 */
    this.getClosest = function (coords, features) {
        var calculatedRadius = geoflo.options.snapping.distance * Math.pow(2, Math.max(1, 19 - geoflo.map.getZoom()));
        var radiusInKm = calculatedRadius / 100000;
        var pixelDistance = geoflo.options.snapping.pixels ? geoflo.options.snapping.pixels * metersPerPixel(coords[1], geoflo.map.getZoom()) : false;
        
        features = features ? geoflo.getRenderedSnapFeatures({ lng: coords[0], lat: coords[1] }, radiusInKm) : [geoflo.hotFeature];

        var closestPoint = findClosestPoint(features, coords, radiusInKm, pixelDistance);

        var coords = !closestPoint ? false :
            pixelDistance ? closestPoint.coords :
            closestPoint.type === 'vertex' && closestPoint.dist <= radiusInKm ? closestPoint.coords :
            false;
        
        return {
            point: closestPoint,
            coords: coords
        };
    }

	/**
	 * @function
     * @memberof module:geoflo.Snapping
	 * @name setClosest
	 * @description This function calculates the closest feature to the given coordinates within a specified radius and snapping parameters. It determines if the closest feature is a point or a vertex and returns the snapped feature accordingly.
	 * @param {Array<number>} coords - The coordinates [longitude, latitude] to find the closest feature to.
	 * @param {boolean} isPoint - Indicates if the feature is a point.
	 * @param {boolean} isVertex - Indicates if the feature is a vertex.
	 * @returns {Object} The snapped feature based on the calculated closest point or line.
	 */
    this.setClosest = function (coords, isPoint, isVertex) {
        var snapFeature = null;
        var calculatedRadius = geoflo.options.snapping.distance * Math.pow(2, Math.max(1, 19 - geoflo.map.getZoom()));
        var radiusInKm = calculatedRadius / 100000;
        var pixelDistance = geoflo.options.snapping.pixels ? geoflo.options.snapping.pixels * metersPerPixel(coords[1], geoflo.map.getZoom()) : false;
        var filter = geoflo.pinableFeatures && geoflo.pinableFeatures.length ? ['case', ['any', ...geoflo.pinableFeatures.map(e => ["==", ["get", "id"], e.id || e.properties.id])], false, true] : false;
        var nearFeatures = geoflo.getRenderedFeatures({ lng: coords[0], lat: coords[1] }, radiusInKm, filter);
        var closestPoint = nearFeatures && nearFeatures.length ? findClosestPoint(nearFeatures, coords, radiusInKm, pixelDistance) : false;
        var lastClickDistance, lastClickArray, lastClickEqual;

        geoflo.closestPoint = closestPoint;

        if ((!nearFeatures && !isPoint) || (!closestPoint && !isPoint)) return this.updateFeature(coords);
        if (!closestPoint || !closestPoint.coords) return snapFeature;

        if (isVertex || !geoflo.lastClick) {
            snapFeature = turf.point(closestPoint.coords);
        } else {
            lastClickArray = Array.isArray(geoflo.lastClick.coords) && Array.isArray(geoflo.lastClick.coords[0]);
            if (lastClickArray) geoflo.lastClick.coords = geoflo.lastClick.coords[0];

            lastClickDistance = turf.distance(turf.point(coords), turf.point(geoflo.lastClick.coords));
            lastClickEqual = geoflo.Utilities.isPointEqual(geoflo.lastClick.coords, closestPoint.coords);

            if (lastClickEqual && lastClickDistance > geoflo.options.snapping.tolerance) return this.updateFeature(coords);

            snapFeature = turf.lineString([geoflo.lastClick.coords, closestPoint.coords]);
        }

        geoflo.fire('snapping.add', { closest: closestPoint, snapped: snapFeature });
        return snapFeature;
    }


	/**
	 * @function
     * @memberof module:geoflo.Snapping
	 * @name setFeature
	 * @description This function sets a feature on the map using the provided feature and coordinates. It handles different scenarios such as creating a point, line, or polygon feature based on the input parameters.
	 * @param {Object} feature - The feature to be set on the map.
	 * @param {Array} coords - The coordinates for the feature.
	 * @returns {Object} The feature that was set on the map.
	 */
    this.setFeature = function (feature, coords) {
        if (geoflo.touchClick) return null;

        feature = feature || geoflo.snapFeature;
        
        if (!feature && coords) return setFeature(turf.point(coords));
        if (!feature) return geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([])), null;

        var snapCoords = feature.geometry.coordinates;
        var lastClick = coords || geoflo.lastClick.coords;
        var firstClick = geoflo.firstClick.coords;
        var isPolygon = this.type === 'Polygon';
        var isPolyline = feature.geometry.type === "LineString";

        if (!isPolyline || snapCoords.length < 2) {
            feature = setFeature(isPolygon ? turf.lineString([firstClick, lastClick]) : turf.point(lastClick));
        } else if (geoflo.hotFeature) {
            var hotCoords = geoflo.hotFeature.geometry.coordinates;
            if (isPolygon) snapCoords.pop();
            hotCoords.splice.apply(hotCoords, [-1, 1].concat(geoflo.Utilities.consumableArray(snapCoords)));
        } else {
            geoflo.hotFeature = turf.lineString(snapCoords);
        }

        geoflo.Utilities.setProperty(geoflo.hotFeature, 'type', this.type);
        geoflo.Utilities.setProperty(geoflo.hotFeature, 'style', { primaryColor: geoflo.options.colors.primaryHot, secondaryColor: geoflo.options.colors.secondaryHot });

        feature = setFeature(isPolygon ? turf.lineString([firstClick, lastClick]) : turf.point(lastClick));
        geoflo.snapFeature = feature;
        return geoflo.snapFeature;
    }

	/**
	 * @function
     * @memberof module:geoflo.Snapping
	 * @name setVertex
	 * @description This function determines the vertex based on snapping and routing settings. It sets the closest feature when snapping is enabled and calculates the route if routing is enabled. It updates the map sources accordingly and triggers events related to vertex dragging and snapping.
	 * @param {Object} geoflo - The context object containing various settings and data.
	 * @returns {boolean} Returns false if snapping is disabled or no snapped vertex is available.
	 */
    this.setVertex = function () {
        var snapToFeature = geoflo.Snapping.enabled;
        if (geoflo.bypassSnapping) snapToFeature = false;

        var calculateRoute = geoflo.Routing.enabled;
        if (geoflo.bypassRouting) calculateRoute = false;

        if (!snapToFeature || !geoflo.snappedVertex) return false;

        geoflo.snapFeature = this.setClosest(geoflo.snappedVertex, true, true);

        if (calculateRoute) geoflo.snapFeature = geoflo.Routing.getClosest() || geoflo.snapFeature;
        if (!geoflo.snapFeature) return geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));

        geoflo.Utilities.setProperty(geoflo.snapFeature, 'type', geoflo.currentMode.type);
        geoflo.map.getSource(geoflo.statics.constants.sources[calculateRoute ? 'ROUTE' : 'SNAP']).setData(turf.featureCollection([geoflo.snapFeature]));

        geoflo.hotFeature.geometry.coordinates[geoflo.dragIndex] = geoflo.snapFeature.geometry.coordinates;
        geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
        geoflo.fire('vertex.dragsnap', { feature: geoflo.hotFeature, vertex: turf.point(geoflo.snappedVertex) });
    }


	/**
	 * @function
     * @memberof module:geoflo.Snapping
	 * @name addFeature
	 * @description This function adds a feature to the map by setting the data of the specified source with the provided feature. It also updates the properties of the feature if properties are provided.
	 * @param {Object} feature - The feature to be added to the map.
	 * @param {Object} [properties={}] - Additional properties to be assigned to the feature.
	 * @param {boolean} [dontAdd] - Flag to prevent adding the feature if set to true.
	 * @returns {boolean} Returns false if the feature is not provided or if dontAdd flag is set.
	 */
    this.addFeature = function (feature, properties={}, dontAdd) {
        geoflo.map.getSource(geoflo.statics.constants.sources['SNAP']).setData(turf.featureCollection([]));
        geoflo.map.getSource(geoflo.statics.constants.sources['ROUTE']).setData(turf.featureCollection([]));
        if (!feature || dontAdd) return false;
        if (properties) feature.properties = geoflo.Utilities.assignDeep(geoflo.Utilities.cloneDeep(properties), feature.properties);
        geoflo.snapFeature = feature;
        geoflo.map.getSource(geoflo.statics.constants.sources[feature.properties.routing ? 'ROUTE' : 'SNAP']).setData(turf.featureCollection([geoflo.snapFeature]));
    }

	/**
	 * @function
     * @memberof module:geoflo.Snapping
	 * @name updateFeature
	 * @description This function updates a feature based on the event coordinates provided. It determines the type of feature, calculates the necessary coordinates, creates a line feature with hint properties, and converts units if needed.
	 * @param {Array} evtCoords - The event coordinates to update the feature.
	 * @returns {Object} The updated feature based on the event coordinates.
	 */
    this.updateFeature = function (evtCoords) {
        geoflo.closestPoint = null;
        if (!geoflo.lastClick) return null;
        if (!geoflo.firstClick || geoflo.mouseIsDown) return null;
    
        var type = geoflo.Features.getType(geoflo.hotFeature) || geoflo.currentMode.type;
        var coords = geoflo.hotFeature ? geoflo.Utilities.getLastIndexCoords(geoflo.hotFeature) : geoflo.lastClick.coords;
        var vertex = turf.point(evtCoords);
        var hintCoords = type && type === "Polygon" && geoflo.hotFeature ? [coords, evtCoords, geoflo.firstClick.coords] : [coords, evtCoords];
        var feature = turf.lineString(hintCoords);

        feature.properties.type = type;
        feature.properties.hint = true;
        feature.properties.style = {
            primaryColor: geoflo.options.colors.primarySnap,
            secondaryColor: geoflo.options.colors.secondarySnap
        }
        
        var unit = 'feet';
        var units = geoflo.Features.getUnits(feature);

        units = geoflo.Features.convertUnits(feature, units, unit);
        vertex = updateVertex(vertex, { units: units, unit: unit });
        return feature;
    }




    if (geoflo.options['snapping'].enable) this.activate();




    function cheapRuler (lat, units) {
        function cheapruler(lat, units) {
            return new CheapRuler(lat,units);
        }
        
        cheapruler.fromTile = function(y, z, units) {
            var n = Math.PI * (1 - 2 * (y + 0.5) / Math.pow(2, z));
            var lat = Math.atan(0.5 * (Math.exp(n) - Math.exp(-n))) * 180 / Math.PI;
            return new CheapRuler(lat,units);
        };
        
        cheapruler.units = {
            kilometers: 1,
            miles: 1000 / 1609.344,
            nauticalmiles: 1000 / 1852,
            meters: 1000,
            metres: 1000,
            yards: 1000 / 0.9144,
            feet: 1000 / 0.3048,
            inches: 1000 / 0.0254
        };
        
        function CheapRuler(lat, units) {
            var factors = {
                kilometers: 1,
                miles: 1000 / 1609.344,
                nauticalmiles: 1000 / 1852,
                meters: 1000,
                metres: 1000,
                yards: 1000 / 0.9144,
                feet: 1000 / 0.3048,
                inches: 1000 / 0.0254
            }
        
            if (lat === undefined)
                throw new Error('No latitude given.');
            if (units && !factors[units])
                throw new Error('Unknown unit ' + units + '. Use one of: ' + Object.keys(factors));
        
            var m = units ? factors[units] : 1;
        
            var cos = Math.cos(lat * Math.PI / 180);
            var cos2 = 2 * cos * cos - 1;
            var cos3 = 2 * cos * cos2 - cos;
            var cos4 = 2 * cos * cos3 - cos2;
            var cos5 = 2 * cos * cos4 - cos3;
        
            this.kx = m * (111.41513 * cos - 0.09455 * cos3 + 0.00012 * cos5);
            this.ky = m * (111.13209 - 0.56605 * cos2 + 0.0012 * cos4);
        }
        
        CheapRuler.prototype = {
            equals: function (a, b) {
                return a[0] === b[0] && a[1] === b[1];
            },
      
            interpolate: function (a, b, t) {
                var dx = b[0] - a[0];
                var dy = b[1] - a[1];
                return [a[0] + dx * t, a[1] + dy * t];
            },
      
            distance: function(a, b) {
                var dx = (a[0] - b[0]) * this.kx;
                var dy = (a[1] - b[1]) * this.ky;
                return Math.sqrt(dx * dx + dy * dy);
            },
        
            bearing: function(a, b) {
                var dx = (b[0] - a[0]) * this.kx;
                var dy = (b[1] - a[1]) * this.ky;
                if (!dx && !dy)
                    return 0;
                var bearing = Math.atan2(-dy, dx) * 180 / Math.PI + 90;
                if (bearing > 180)
                    bearing -= 360;
                return bearing;
            },
        
            destination: function(p, dist, bearing) {
                var a = (90 - bearing) * Math.PI / 180;
                return this.offset(p, Math.cos(a) * dist, Math.sin(a) * dist);
            },
        
            offset: function(p, dx, dy) {
                return [p[0] + dx / this.kx, p[1] + dy / this.ky];
            },
        
            lineDistance: function(points) {
                var total = 0;
                for (var i = 0; i < points.length - 1; i++) {
                    total += this.distance(points[i], points[i + 1]);
                }
                return total;
            },
        
            area: function(polygon) {
                var sum = 0;
        
                for (var i = 0; i < polygon.length; i++) {
                    var ring = polygon[i];
        
                    for (var j = 0, len = ring.length, k = len - 1; j < len; k = j++) {
                        sum += (ring[j][0] - ring[k][0]) * (ring[j][1] + ring[k][1]) * (i ? -1 : 1);
                    }
                }
        
                return (Math.abs(sum) / 2) * this.kx * this.ky;
            },
        
            along: function(line, dist) {
                var sum = 0;
        
                if (dist <= 0)
                    return line[0];
        
                for (var i = 0; i < line.length - 1; i++) {
                    var p0 = line[i];
                    var p1 = line[i + 1];
                    var d = this.distance(p0, p1);
                    sum += d;
                    if (sum > dist)
                        return this.interpolate(p0, p1, (dist - (sum - d)) / d);
                }
        
                return line[line.length - 1];
            },
        
            pointOnLine: function(line, p) {
                var minDist = Infinity;
                var minX, minY, minI, minT;
        
                for (var i = 0; i < line.length - 1; i++) {
        
                    var x = line[i][0];
                    var y = line[i][1];
                    var dx = (line[i + 1][0] - x) * this.kx;
                    var dy = (line[i + 1][1] - y) * this.ky;
        
                    if (dx !== 0 || dy !== 0) {
        
                        var t = ((p[0] - x) * this.kx * dx + (p[1] - y) * this.ky * dy) / (dx * dx + dy * dy);
        
                        if (t > 1) {
                            x = line[i + 1][0];
                            y = line[i + 1][1];
        
                        } else if (t > 0) {
                            x += (dx / this.kx) * t;
                            y += (dy / this.ky) * t;
                        }
                    }
        
                    dx = (p[0] - x) * this.kx;
                    dy = (p[1] - y) * this.ky;
        
                    var sqDist = dx * dx + dy * dy;
                    if (sqDist < minDist) {
                        minDist = sqDist;
                        minX = x;
                        minY = y;
                        minI = i;
                        minT = t;
                    }
                }
        
                return {
                    point: [minX, minY],
                    index: minI,
                    t: minT
                };
            },
        
            lineSlice: function(start, stop, line) {
                var p1 = this.pointOnLine(line, start);
                var p2 = this.pointOnLine(line, stop);
        
                if (p1.index > p2.index || (p1.index === p2.index && p1.t > p2.t)) {
                    var tmp = p1;
                    p1 = p2;
                    p2 = tmp;
                }
        
                var slice = [p1.point];
        
                var l = p1.index + 1;
                var r = p2.index;
        
                if (!this.equals(line[l], slice[0]) && l <= r)
                    slice.push(line[l]);
        
                for (var i = l + 1; i <= r; i++) {
                    slice.push(line[i]);
                }
        
                if (!this.equals(line[r], p2.point))
                    slice.push(p2.point);
        
                return slice;
            },
        
            lineSliceAlong: function(start, stop, line) {
                var sum = 0;
                var slice = [];
        
                for (var i = 0; i < line.length - 1; i++) {
                    var p0 = line[i];
                    var p1 = line[i + 1];
                    var d = this.distance(p0, p1);
        
                    sum += d;
        
                    if (sum > start && slice.length === 0) {
                        slice.push(this.interpolate(p0, p1, (start - (sum - d)) / d));
                    }
        
                    if (sum >= stop) {
                        slice.push(this.interpolate(p0, p1, (stop - (sum - d)) / d));
                        return slice;
                    }
        
                    if (sum > start)
                        slice.push(p1);
                }
        
                return slice;
            },
        
            bufferPoint: function(p, buffer) {
                var v = buffer / this.ky;
                var h = buffer / this.kx;
                return [p[0] - h, p[1] - v, p[0] + h, p[1] + v];
            },
        
            bufferBBox: function(bbox, buffer) {
                var v = buffer / this.ky;
                var h = buffer / this.kx;
                return [bbox[0] - h, bbox[1] - v, bbox[2] + h, bbox[3] + v];
            },
        
            insideBBox: function(p, bbox) {
                return p[0] >= bbox[0] && p[0] <= bbox[2] && p[1] >= bbox[1] && p[1] <= bbox[3];
            }
        }
      
        return cheapruler(lat, units);
    }

    function findClosestPoint (uniqueFeatures, evtCoords, radiusInKm, pixelDistance) {
        const coords = calculatePointsOnLine(uniqueFeatures, evtCoords);
  
        let closestVertex = null;
        let closestLinepoint = null;
        let borders;
        let id = geoflo.id || 'id';
  
        coords.forEach((pointType) => {
            const dist = pointType.dist;
  
            if (dist !== null) {
                if (pointType.type === "vertex") {
                    if (closestVertex === null) {
                        closestVertex = pointType;
                    } else if (pixelDistance !== undefined) {
                        if (dist * 1000 < pixelDistance) {
                            if (closestVertex && closestVertex.lineEdge) {
                                closestVertex = pointType;
                            }
                        }
                    } else if (dist <= closestVertex.dist) {
                        if (dist === closestVertex.dist) {
                            if (closestVertex.lineEdge) {
                                closestVertex = pointType;
                            }
                        } else {
                            closestVertex = pointType;
                        }
                    }
                } else if (dist < radiusInKm) {
                    if (closestLinepoint !== null && dist === closestLinepoint.dist && closestLinepoint[id] !== pointType[id]) {
                        if (closestLinepoint.type === "linepoint") {
                            if ((pointType.distance1 <= closestLinepoint.distance1 && pointType.distance2 <= closestLinepoint.distance2) ||
                                (pointType.distance2 <= closestLinepoint.distance1 && pointType.distance1 <= closestLinepoint.distance2)) {
                                console.log("switch closest points");
                                closestLinepoint = pointType;
                            }
                        }
                    }
  
                    if (closestLinepoint === null || dist < closestLinepoint.dist) {
                        closestLinepoint = pointType;
  
                        if (pointType.border1 && pointType.border2) {
                            borders = {
                                border1: pointType.border1,
                                border2: pointType.border2,
                                distance1: pointType.distance1,
                                distance2: pointType.distance2
                            };
                        } else {
                            borders = null;
                        }
                    }
                }
            }
        });
  
        if (closestVertex !== null) {
            if (closestLinepoint !== null) {
                if (closestVertex.dist < radiusInKm) {
                    return Object.assign({ borders: null }, closestVertex);
                } else {
                    return Object.assign({ borders: borders }, closestLinepoint);
                }
            } else {
                return Object.assign({ borders: null }, closestVertex);
            }
        } else if (closestLinepoint !== null) {
            return Object.assign({ borders: borders }, closestLinepoint);
        } else {
            return null;
        }
    }

    function closestPoints (ruler, coordinates, evtCoords) {
        const result = [];
        const pointOnLine = ruler.pointOnLine(coordinates, evtCoords);
        const pointCoords = pointOnLine.point;
        const pointIndex = pointOnLine.index;
        const linePoint = { type: "linepoint", coords: pointCoords };
        const p1 = coordinates[pointIndex];
        const p2 = coordinates[pointIndex + 1];
        const distance1 = ruler.distance(p1, evtCoords);
        const distance2 = ruler.distance(p2, evtCoords);

        let lineEdge = false;
        let vertex = null;
    
        if (distance1 < distance2) {
            lineEdge = pointIndex === 0;
            vertex = p1;
        } else {
            lineEdge = pointIndex + 1 === coordinates.length - 1;
            vertex = p2;
        }
    
        linePoint.border1 = p1;
        linePoint.distance1 = distance1;
        linePoint.border2 = p2;
        linePoint.distance2 = distance2;
    
        result.push(linePoint);
        result.push({ type: "vertex", coords: vertex, lineEdge: lineEdge });
        return result;
    }

    function calculatePointsOnLine (uniqueFeatures, evtCoords) {
        const coords = [];
        const knownIds = {};
        const ruler = cheapRuler(evtCoords[1]);
    
        uniqueFeatures.forEach((feature) => {
            const id = feature.id || feature.properties.id;
            var closest = [];
    
            if (knownIds[id] === undefined) {
                knownIds[id] = true;
                const type = feature.geometry.type;
    
                if (type === "LineString") {
                    if (feature.geometry.coordinates) {
                        closest = closestPoints(ruler, feature.geometry.coordinates, evtCoords);
  
                        closest.forEach((pointType) => {
                            pointType.id = id;
                            pointType.dist = ruler.distance(pointType.coords, evtCoords);
                            coords.push(pointType);
                        });
                    } else {
                        console.log("no coordinates: ", feature);
                    }
                } else if (type === "Point") {
                    const pointType = { id: id, type: "vertex", coords: feature.geometry.coordinates, lineEdge: true };
                    pointType.dist = ruler.distance(pointType.coords, evtCoords);
                    coords.push(pointType);
                } else if (type === "Polygon") {
                    if (turf.booleanWithin(turf.point(evtCoords), feature)) return;
                    
                    feature.geometry.coordinates.forEach((featureCoords, index) => {
                        closest = closestPoints(ruler, featureCoords, evtCoords);
  
                        closest.forEach((pointType) => {
                            pointType.id = id;
                            pointType.polygonCoordsArray = index;
                            pointType.dist = ruler.distance(pointType.coords, evtCoords);
                            coords.push(pointType);
                        });
                    });
                }
            }
        });
    
        return coords;
    }

    function addVertex (startPoint, endPoint, length, data) {
        var startData = data[startPoint];
    
        if (!startData) {
            startData = {};
            data[startPoint] = startData;
        }
    
        if (!startData[endPoint]) {
            startData[endPoint] = length;
        }
    }

    function addVertexPointTwoWay (startCoord, endCoords, length, data) {
        var startPoint = startCoord.join("#");
        var endPoint = endCoords.join("#");
        addVertex(startPoint, endPoint, length, data);
        addVertex(endPoint, startPoint, length, data);
    }
    
    function metersPerPixel (latitude, zoomLevel) {
        return ((geoflo.statics.constants.CIRCUM * Math.cos((latitude * (Math.PI / 180)))) / Math.pow(2, zoomLevel + 8));
    }
    
    function setFeature (feature) {
        if (!feature) return geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([])), geoflo.snapFeature;
        geoflo.Utilities.setProperty(feature, 'type', geoflo.currentMode.type);
        geoflo.Utilities.setProperty(feature, 'style', { primaryColor: geoflo.options.colors.primarySnap, secondaryColor: geoflo.options.colors.secondarySnap });
        geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([feature]));
        return feature;
    }

    function updateVertex (vertex, options={}) {
        var features = geoflo.map.getSource(geoflo.statics.constants.sources.HOTTEXT)._data.features;
        if (features.length && features[features.length - 1].properties.mouseLine) features.pop();

        vertex.properties.units = options.units;
        vertex.properties.unit = options.unit;
        vertex.properties.text = `${options.units} ${options.unit}`;
        vertex.properties.transform = 'uppercase';
        vertex.properties.anchor = 'bottom-left';
        vertex.properties.mouseLine = true;
    
        features.push(vertex);
        geoflo.map.getSource(geoflo.statics.constants.sources.HOTTEXT).setData(turf.featureCollection(features));
        return vertex;
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Snapping);

/***/ }),

/***/ "./src/Statics.js":
/*!************************!*\
  !*** ./src/Statics.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const Dev = 'solutegrate';
const Id = 'geoflo';

const Statics = {
    developer: Dev,
    id: Id,
    logo: {
        full: `https://${Id}.s3.amazonaws.com/logos/logo_full_white.png`,
        icon: `https://${Id}.s3.amazonaws.com/logos/logo_icon_white.svg`,
        fullClass: Id + '-logo',
        iconClass: Id + '-icon'
    },
    controls: [
        // TOP //
        [{
            type: 'utils',
            enable: true,
            position: 'top-center',
            group: 'action',
            divider: true,
            show: true,
            buttons: {
                zoom: true,
                refresh: true,
                locate: true
            }
        },
        {
            type: 'modes',
            enable: true,
            group: 'control',
            divider: true,
            show: true,
            buttons: {
                select: true,
                edit: true,
                save: true
            }
        },
        {
            type: 'options',
            enable: true,
            group: 'action',
            divider: false,
            show: true,
            buttons: {
                import: true,
                export: true,
                clear: true,
                undo: true,
                redo: true,
                cancel: true
            }
        }],

        // BOTTOM //
        [{
            type: 'types',
            enable: true,
            position: 'top-center',
            group: 'control',
            divider: true,
            show: true,
            buttons: {
                polyline: true,
                polygon: true,
                rectangle: true,
                circle: true,
                text: true
            }
        },
        {
            type: 'actions',
            enable: true,
            group: 'control',
            divider: false,
            show: true,
            buttons: {
                snapping: true,
                pinning: true,
                routing: true,
                exploring: true,
                painting: true
            }
        }]
    ],
    constants: {
        classes: {
            PREDEFINED_CONTROL_BASE: "mapboxgl-ctrl",
            PREDEFINED_CONTROL_GROUP: "mapboxgl-ctrl-group",
            CONTROL_PREFIX: "mapboxgl-ctrl-",
            ACTION_BUTTON: Id + "-action-btn",
            CONTROL_BUTTON: "mapbox-gl-draw_ctrl-draw-btn",
            CONTROL_BUTTON_LINE: "mapbox-gl-draw_line",
            CONTROL_BUTTON_POLYGON: "mapbox-gl-draw_polygon",
            CONTROL_BUTTON_RECTANGLE: "mapbox-gl-draw_rectangle",
            CONTROL_BUTTON_POINT: "mapbox-gl-draw_point",
            CONTROL_BUTTON_TEXT: "mapbox-gl-draw_text",
            CONTROL_BUTTON_ICON: "mapbox-gl-draw_icon",
            CONTROL_BUTTON_CLEAR: Id + "-delete-data",
            CONTROL_BUTTON_DELETE_SNAP: Id + "-delete-snap-data",
            CONTROL_BUTTON_LOCATE: Id + "-locate",
            CONTROL_BUTTON_ZOOM_IN_FEATURES: Id + "-zoom-in-features",
            CONTROL_BUTTON_HIDE_SELECTED: Id + "-hide-selected",
            CONTROL_BUTTON_ADD_FEATURE_TO_GRID: Id + "-add-feature-to-grid",
            CONTROL_BUTTON_CREATE_POLYGON: Id + "-create-polygon",
            CONTROL_BUTTON_COMBINE_FEATURES: "mapbox-gl-draw_combine",
            CONTROL_BUTTON_UNCOMBINE_FEATURES: "mapbox-gl-draw_uncombine",
            CONTROL_BUTTON_GROUP_FEATURES: Id + "-group-features",
            CONTROL_BUTTON_UNGROUP_FEATURES: Id + "-ungroup-features",
            CONTROL_BUTTON_DOWNLOAD_WAYS: Id + "-download-ways",
            CONTROL_BUTTON_DOWNLOAD_BUILDINGS: Id + "-download-buildings",
            CONTROL_BUTTON_REFRESH: Id + "-refresh",
            CONTROL_BUTTON_EDIT: Id + "-edit",
            CONTROL_BUTTON_CUT: Id + "-cut",
            CONTROL_BUTTON_SELECT: Id + "-select",
            CONTROL_BUTTON_DOWNLOAD_DATA: Id + "-download-data",
            CONTROL_BUTTON_EXPORT: Id + "-export",
            CONTROL_BUTTON_SAVE_AS_GIST: Id + "-save-as-gist",
            CONTROL_BUTTON_SAVE_AS_GEOJSON: Id + "-save-as-geojson",
            CONTROL_BUTTON_SAVE_AS_KML: Id + "-save-as-kml",
            CONTROL_BUTTON_EXPAND_EDITOR: Id + "-expand-editor",
            CONTROL_BUTTON_IMPORT: Id + "-import",
            CONTROL_BUTTON_FINSIH: Id + "-finish",
            CONTROL_BUTTON_CANCEL: Id + "-cancel",
            CONTROL_BUTTON_UNDO: Id + "-undo",
            CONTROL_BUTTON_REDO: Id + "-redo",
            CONTROL_GROUP: Id + "-ctrl-group",
            DROPDOWN_GROUP: Id + "-dropdown-group",
            DIVIDER: Id + "-divider",
            ACTION_GROUP: Id + "-action-group",
            ATTRIBUTION: "mapboxgl-ctrl-attrib",
            ACTIVE_BUTTON: "active",
            BOX_SELECT: "mapbox-gl-draw_boxselect",
        },
        sources: {
            SELECT: Id + "-select",
            SNAP: Id + "-snap",
            ROUTE: Id + "-route",
            HOT: Id + "-hot",
            COLD: Id + "-cold",
            MESH: Id + "-mesh",
            VERTEX: Id + "-vertex",
            HOTTEXT: Id + "-text",
            COLDTEXT: Id + "-coldtext",
            GAMEPAD: Id + "-gamepad"
        },
        layers: {
            MESH: Id + "-mesh"
        },
        cursors: {
            ADD: "add",
            MOVE: "move",
            DRAG: "drag",
            POINTER: "pointer",
            NONE: "none",
        },
        types: {
            POLYGON: "polygon",
            LINE: "line_string",
            POINT: "point",
        },
        geojsonTypes: {
            FEATURE: "Feature",
            POLYGON: "Polygon",
            LINE_STRING: "LineString",
            POINT: "Point",
            FEATURE_COLLECTION: "FeatureCollection",
            MULTI_PREFIX: "Multi",
            MULTI_POINT: "MultiPoint",
            MULTI_LINE_STRING: "MultiLineString",
            MULTI_POLYGON: "MultiPolygon",
        },
        modes: {
            DRAW: "draw",
            CUT: "cut",
            SELECT: "select",
            DELETE: "delete",
            EDIT: "edit"
        },
        events: {
            CREATE: "draw.create",
            DELETE: "draw.delete",
            UPDATE: "draw.update",
            SELECTION_CHANGE: "draw.selectionchange",
            MODE_CHANGE: "draw.modechange",
            ACTIONABLE: "draw.actionable",
            RENDER: "draw.render",
            COMBINE_FEATURES: "draw.combine",
            UNCOMBINE_FEATURES: "draw.uncombine",
        },
        updateActions: {
            MOVE: "move",
            CHANGE_COORDINATES: "change_coordinates",
        },
        meta: {
            FEATURE: "feature",
            MIDPOINT: "midpoint",
            VERTEX: "vertex",
        },
        activeStates: {
            ACTIVE: "true",
            INACTIVE: "false",
        },
        LAT_MIN: -90,
        LAT_RENDERED_MIN: -85,
        LAT_MAX: 90,
        LAT_RENDERED_MAX: 85,
        LNG_MIN: -270,
        LNG_MAX: 270,
        MIN_SEGMENT_LENGTH: 0.000001,
        MIN_DISTANCE: 0.00001, // 0.000001
        CIRCUM: 40075017
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Statics);

/***/ }),

/***/ "./src/Styles.js":
/*!***********************!*\
  !*** ./src/Styles.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Styles
 * @description This module provides the styling functionality for the Geoflo application. It allows users to change the map style by selecting from a list of predefined styles.
 * @param {Object} options - The options object containing the styles and selected style.
 * @returns {Object} Returns the Styles object.
 */
const Styles = function (options={}) {
    const geoflo = this.geoflo;
    this.options = options;
    
    /**
	 * @function
     * @memberof module:geoflo.Styles
     * @name init
     * @description Initializes the Styles object by extending the options object with the provided options, setting the styles, defaultStyle, and event listeners.
     * @param {Object} options - The options object containing the styles and selected style.
     * @returns {Object} Returns the Styles object.
     */
    this.init = function (options={}) {
        geoflo.Utilities.extend(this.options, options);

        this.styles = this.options.styles || [
            { title: "Standard", uri: "mapbox://styles/solutegrate/clxdoec8x006901qj7wjf8uxo" },
            { title: "Satellite", uri: "mapbox://styles/mapbox/satellite-streets-v11" },
            { title: "Standard", uri: "mapbox://styles/mapbox/standard" },
            { title: "Dark", uri: "mapbox://styles/mapbox/dark-v11" },
            { title: "Light", uri: "mapbox://styles/mapbox/light-v11" },
            { title: "Outdoors", uri: "mapbox://styles/mapbox/outdoors-v11" }
        ];
    
        this.defaultStyle = this.options.selected || "Standard";
        this.onDocumentClick = this.onDocumentClick.bind(this);
        this.events = this.options.eventListeners;
        return this;
    }

    /**
	 * @function
     * @memberof module:geoflo.Styles
     * @name select
     * @description Selects the style with the provided name by setting the map style to the style's uri.
     * @param {String} name - The name of the style to select.
     * @returns {void}
     */
    this.select = function (name) {
        if (!this.mapStyleContainer || !this.mapStyleContainer.checkVisibility()) {
            var style = this.styles.find(style => style.title === name);
            if (style) this.map.setStyle(style.uri);
            if (this.events && this.events.onChange && this.events.onChange({ style: style }, style))
            return;
        }

        const elms = this.mapStyleContainer.getElementsByClassName(name);
        if (elms.length > 0) elms[0].click();
    }

    /**
	 * @function
     * @memberof module:geoflo.Styles
     * @name hide
     * @description Hides the style control container.
     * @returns {void}
     */
    this.hide = function () {
        if (this.controlContainer) this.controlContainer.style.display = "none";
    }

    /**
     * @function
     * @memberof module:geoflo.Styles
     * @name show
     * @description Shows the style control container.
     * @returns {void}
     */
    this.show = function () {
        if (this.controlContainer) this.controlContainer.style.display = "block";
    }

    /**
	 * @function
     * @memberof module:geoflo.Styles
     * @name getDefaultPosition
     * @description Returns the default position for the style control container.
     * @returns {String} The default position for the style control container.
     */
    this.getDefaultPosition = function () {
        const defaultPosition = "top-right";
        return defaultPosition;
    }

    /**
	 * @function
     * @memberof module:geoflo.Styles
     * @name onAdd
     * @description Adds the style control container to the map.
     * @param {Object} map - The map object to add the style control container to.
     * @returns {Object} The style control container.
     * @throws {Error} Throws an error if the map object is not provided.
     */
    this.onAdd = function (map) {
        this.map = map;
        this.controlContainer = document.createElement("div");
        this.controlContainer.classList.add("mapboxgl-ctrl");
        this.controlContainer.classList.add("mapboxgl-ctrl-group");
        this.mapStyleContainer = document.createElement("div");
        this.styleButton = document.createElement("button");
        this.styleButton.type = "button";
        this.mapStyleContainer.classList.add("mapboxgl-style-list");

        for (const style of this.styles) {
            const styleElement = document.createElement("button");

            styleElement.type = "button";
            styleElement.classList.add(style.title.replace(/[^a-z0-9-]/gi, '_'));
            styleElement.dataset.uri = JSON.stringify(style.uri);

            styleElement.addEventListener("click", event => {
                const srcElement = event.target || event.srcElement;
                this.closeModal();
                if (srcElement.classList.contains("active")) return;
                if (this.events && this.events.onOpen && this.events.onOpen(event)) return;
                const style = JSON.parse(srcElement.dataset.uri);
                this.map.setStyle(style);
                const elms = this.mapStyleContainer.getElementsByClassName("active");
                while (elms[0]) elms[0].classList.remove("active");
                srcElement.classList.add("active");
                if (this.events && this.events.onChange && this.events.onChange(event, style)) return;
            });

            if (style.title === this.defaultStyle) {
                styleElement.classList.add("active");
            }

            this.mapStyleContainer.appendChild(styleElement);
        }

        this.styleButton.classList.add("mapboxgl-ctrl-icon");
        this.styleButton.classList.add("mapboxgl-style-switcher");

        this.styleButton.addEventListener("click", event => {
            if (this.events && this.events.onSelect && this.events.onSelect(event)) return;
            this.openModal();
        });

        document.addEventListener("click", this.onDocumentClick);

        this.controlContainer.appendChild(this.styleButton);
        this.controlContainer.appendChild(this.mapStyleContainer);
        
        this.closeModal();
        return this.controlContainer;
    }

    /**
	 * @function
     * @memberof module:geoflo.Styles
     * @name onRemove
     * @description Removes the style control container from the map.
     * @returns {void}
     * @throws {Error} Throws an error if the control container, control container parent node, map, or style button is not provided.
     * @throws {Error} Throws an error if the style button event listener is not removed.
     * @throws {Error} Throws an error if the document event listener is not removed.
     */
    this.onRemove = function () {
        if (!this.controlContainer || !this.controlContainer.parentNode || !this.map || !this.styleButton) {
            return;
        }
        this.styleButton.removeEventListener("click", this.onDocumentClick);
        this.controlContainer.parentNode.removeChild(this.controlContainer);
        document.removeEventListener("click", this.onDocumentClick);
        this.map = undefined;
    }

    /**
	 * @function
     * @memberof module:geoflo.Styles
     * @name closeModal
     * @description Closes the style control container.
     * @returns {void}
     */
    this.closeModal = function () {
        if (this.mapStyleContainer && this.styleButton) {
            this.mapStyleContainer.style.display = "none";
            this.styleButton.style.display = "block";
        }
    }

    /**
     * @function
     * @memberof module:geoflo.Styles
     * @name openModal
     * @description Opens the style control container.
     * @returns {void}
     */
    this.openModal = function () {
        if (this.mapStyleContainer && this.styleButton) {
            this.mapStyleContainer.style.display = "block";
            this.styleButton.style.display = "none";
        }
    }

    this.onDocumentClick = function (event) {
        if (this.controlContainer && !this.controlContainer.contains(event.target)) this.closeModal();
    }

    this.init();
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Styles);

/***/ }),

/***/ "./src/Utilities.js":
/*!**************************!*\
  !*** ./src/Utilities.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Utilities
 * @description This module provides utility functions for the Geoflo application.
 * @returns {Object} Returns the Utilities object.
 */
const Utilities = function () {
    const geoflo = this.geoflo;

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name pointInCoordinates
	 * @description This function takes a line string and a point's coordinates as input and returns an array of indices where the point is found in the line string's coordinates.
	 * @param {Object} lineString - The line string object containing geometry coordinates.
	 * @param {Array} pointCoords - The coordinates of the point to search for in the line string.
	 * @returns {Array} An array containing the indices of the point in the line string's coordinates.
	 */
    this.pointInCoordinates = function (lineString, pointCoords) {
        var result = [];

        lineString.geometry.coordinates.forEach(function(coords, index) {
            if (index !== 0 && index !== lineString.geometry.coordinates.length - 1) {
                if (coords[0] === pointCoords[0] && coords[1] === pointCoords[1]) {
                    result.push(index);
                }
            }
        });

        return result;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name sameBorders
	 * @description This function compares two sets of borders to determine if they are the same.
	 * @param {Object} fromBorders - The first set of borders to compare.
	 * @param {Object} toBorders - The second set of borders to compare.
	 * @returns {boolean} Returns true if the borders are the same, false otherwise.
	 */
    this.sameBorders = function (fromBorders, toBorders) {
        if (fromBorders && toBorders) {
            return fromBorders.border1[0] === toBorders.border1[0] && fromBorders.border1[1] === toBorders.border1[1] && fromBorders.border2[0] === toBorders.border2[0] && fromBorders.border2[1] === toBorders.border2[1] || fromBorders.border1[0] === toBorders.border2[0] && fromBorders.border1[1] === toBorders.border2[1] && fromBorders.border2[0] === toBorders.border1[0] && fromBorders.border2[1] === toBorders.border1[1];
        } else {
            return false;
        }
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name getRandomColor
	 * @description This function generates a random color by randomly selecting hexadecimal values for each digit of the color code.
	 * @returns {string} A random color in hexadecimal format.
	 */
    this.getRandomColor = function () {
        var letters = '0123456789ABCDEF';
        var color = '#';
        for (var i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name createRandomStroke
	 * @description Generates a random stroke color for a shape.
	 * @returns {Object} An object containing the randomly generated stroke color.
	 */
    this.createRandomStroke = function () {
        return {
            stroke: this.getRandomColor()
        };
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name createLineAndSaveLength
	 * @description This function takes an array of line coordinates and properties, creates a line string with random stroke properties, calculates the length of the line, and saves it in the properties.
	 * @param {Array} lineCoords - Array of coordinates for the line string.
	 * @param {Object} props - Properties object for the line string.
	 * @returns {Object} - The created line string with saved length in properties.
	 */
    this.createLineAndSaveLength = function (lineCoords, props) {
        var copyProps = Object.assign({}, props, this.createRandomStroke());
        var line = turf.lineString(lineCoords, copyProps);
        copyProps.length = turf.lineDistance(line);
        return line;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name lineSplit
	 * @description Splits a line string based on the provided point indexes and returns an array of split line strings.
	 * @param {Object} lineString - The line string object to split.
	 * @param {Array} pointIndexes - An array of indexes where the line string should be split.
	 * @returns {Array} - An array of split line strings.
	 */
    this.lineSplit = function (lineString, pointIndexes) {
        var props = lineString.properties;
        var lineCoords = [].concat(_toConsumableArray(lineString.geometry.coordinates));
        var result = [];
        var delta = 0;

        pointIndexes.forEach(function(pointIndex) {
            pointIndex -= delta;
            if (pointIndex < lineCoords.length - 1) {
                var secondPart = lineCoords.splice(pointIndex, lineCoords.length - pointIndex);
                
                if (lineCoords.length > 0) {
                    lineCoords.push(secondPart[0]);
                    result.push(this.createLineAndSaveLength(lineCoords, props));
                }

                lineCoords = secondPart;
                delta += pointIndex;
            }
        }, this);

        if (lineCoords.length > 0) {
            result.push(this.createLineAndSaveLength(lineCoords, props));
        }

        return result;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name splitLines
	 * @description This function takes two line strings and splits them at their intersection points.
	 * @param {Object} lineString1 - The first line string object.
	 * @param {Object} lineString2 - The second line string object.
	 * @returns {Array|null} - An array containing the split line strings or null if no intersection points are found.
	 */
    this.splitLines = function (lineString1, lineString2) {
        var line1CutPoints = [];
        var line2CutPoints = [];

        lineString1.geometry.coordinates.forEach(function(coords, index) {
            var points = this.pointInCoordinates(lineString2, coords);
            if (points.length > 0) {
                line2CutPoints.push.apply(line2CutPoints, _toConsumableArray(points));
                line1CutPoints.push(index);
            }
        }, this);

        if (line1CutPoints.length === 0 && line2CutPoints.length === 0) {
            return null;
        } else {
            var result = [];
            result.push.apply(result, _toConsumableArray(this.lineSplit(lineString1, line1CutPoints)));
            result.push.apply(result, _toConsumableArray(this.lineSplit(lineString2, line2CutPoints)));
            return result;
        }
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name createSimpleMesh
	 * @description Creates a simple mesh by processing a list of features containing line strings.
	 * @param {Array} features - An array of line string features to be processed.
	 * @returns {Array} - An array of processed line segments forming the mesh.
	 */
    this.createSimpleMesh = function (features) {
        var result = [];

        features.forEach(function(lineString) {
            var props = lineString.properties;
            var coords = lineString.geometry.coordinates;
            var firstPoint = coords[0];
            var secondPoint = null;

            for (var index = 1; index < coords.length; index++) {
                secondPoint = coords[index];
                result.push(this.createLineAndSaveLength([firstPoint, secondPoint], props));
                firstPoint = secondPoint;
            }
        }, this);

        return result;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name createMesh
	 * @description This function takes an array of line string features and splits them at intersection points to create a mesh.
	 * @param {Array} features - An array of line string features to create the mesh from.
	 * @returns {Array} - An array representing the mesh created by splitting the line strings at intersection points.
	 */
    this.createMesh = function (features) {
        var mesh = [];

        features.forEach(function(lineString1) {
            var line1CutPoints = lineString1.properties.cutPoints;

            if (!line1CutPoints) {
                line1CutPoints = [];
                lineString1.properties.cutPoints = line1CutPoints;
            }

            features.forEach(function(lineString2) {
                if (lineString1 !== lineString2) {
                    var line2CutPoints = lineString2.properties.cutPoints;

                    if (!line2CutPoints) {
                        line2CutPoints = [];
                        lineString2.properties.cutPoints = line2CutPoints;
                    }

                    lineString1.geometry.coordinates.forEach(function(coords, index) {
                        var points = this.pointInCoordinates(lineString2, coords);

                        if (points.length > 0) {
                            points.forEach(function(cutPoint) {
                                if (line2CutPoints.indexOf(cutPoint) === -1) {
                                    line2CutPoints.push(cutPoint);
                                }
                            });

                            if (index !== 0 && index !== lineString1.geometry.coordinates.length - 1) {
                                if (line1CutPoints.indexOf(index) === -1) {
                                    line1CutPoints.push(index);
                                }
                            }
                        }
                    }, this);
                }
            }, this);
        }, this);

        features.forEach(function(lineString) {
            lineString.properties.cutPoints.sort(function(a, b) { return a - b; });
            mesh.push.apply(mesh, _toConsumableArray(this.lineSplit(lineString, lineString.properties.cutPoints)));
        }, this);

        return mesh;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name setProperty
	 * @description This function sets a property value for a given feature. If the feature does not have properties, it creates a new properties object. If the property name includes a dot (.), it creates nested objects to set the value.
	 * @param {Object} feature - The feature object to set the property for.
	 * @param {string} name - The name of the property to set.
	 * @param {any} value - The value to set for the property.
	 */
    this.setProperty = function (feature, name, value) {
        if (!feature) return false;
        
        var props = feature.properties;
        
        if (!props) {
            props = {};
            feature.properties = props;
        }

        if (name.includes('.')) {
            name = name.split('.');
            if (!props[name[0]]) props[name[0]] = {};
            props[name[0]][name[1]] = value;
        } else {
            props[name] = value;
        }
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name setProperties
	 * @description Updates the properties of a given feature object with new properties.
	 * @param {Object} feature - The feature object whose properties will be updated.
	 * @param {Object} newProps - The new properties to be merged with the existing properties of the feature.
	 */
    this.setProperties = function (feature, newProps) {
        feature.properties = Object.assign(feature.properties || {}, newProps);
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name findClosestFeatures
	 * @description This function takes an indexData object, a point object, and a radius value as parameters. It then retrieves the feature IDs within the specified radius from the point index in the indexData object. It ensures unique features are included in the result and returns an array of closest features.
	 * @param {Object} indexData - The index data object containing pointIndex, pointFeatureMap, and featureById.
	 * @param {Object} point - The point object with lng (longitude) and lat (latitude) properties.
	 * @param {number} radius - The radius within which to search for features.
	 * @returns {Array} An array of closest features to the given point within the specified radius.
	 */
    this.findClosestFeatures = function (indexData, point, radius) {
        var featureIdsWithin = indexData.pointIndex.within(point.lng, point.lat, radius);
        var assertUniqueFeatures = {};
        var featureResult = [];

        featureIdsWithin.forEach(function(pointId) {
            var featureId = indexData.pointFeatureMap[pointId];
            if (!assertUniqueFeatures[featureId]) {
                featureResult.push(indexData.featureById[featureId]);
                assertUniqueFeatures[featureId] = true;
            }
        });
        
        return featureResult;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name isPointEqual
	 * @description Checks if two points are equal based on their coordinates.
	 * @param {Array} coords1 - The coordinates of the first point [x, y].
	 * @param {Array} coords2 - The coordinates of the second point [x, y].
	 * @returns {boolean} Returns true if the points have the same coordinates, false otherwise.
	 */
    this.isPointEqual = function (coords1, coords2) {
        return coords1[0] === coords2[0] && coords1[1] === coords2[1];
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name isPoint
	 * @description This function takes a feature object and determines if it represents a Point geometry.
	 * @param {Object} f - The feature object to be checked.
	 * @returns {boolean} Returns true if the feature is a Point geometry, false otherwise.
	 */
    this.isPoint = function (f) {
        return !f ? false : f.geometry.type === 'Point';
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name isPolygon
	 * @description This function determines if a feature represents a polygon by comparing its first and last coordinates.
	 * @param {Object} feature - The feature object to be checked.
	 * @returns {boolean} Returns true if the feature is a polygon, false otherwise.
	 */
    this.isPolygon = function (feature) {
        var coords = feature.geometry.coordinates;
        var firstCoords = coords[0];
        var lastCoords = coords[coords.length - 1];
        return this.isPointEqual(firstCoords, lastCoords);
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name isLineString
	 * @description This function takes a GeoJSON feature object and determines if it represents a LineString geometry.
	 * @param {Object} f - The GeoJSON feature object to be checked.
	 * @returns {boolean} Returns true if the feature is a LineString, false otherwise.
	 */
    this.isLineString = function (f) {
        return !f ? false : f.geometry.type === 'LineString';
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name isValidLineString
	 * @description Checks if the input feature is a valid LineString by verifying its geometry coordinates.
	 * @param {Object} f - The input feature to be validated.
	 * @returns {boolean} Returns true if the input feature is a valid LineString, false otherwise.
	 */
    this.isValidLineString = function (f) {
        if (!this.isLineString(f)) return false;
        var coords = f.geometry.coordinates;
        if (coords.length < 2) return false;
        return true;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name isLastIndex
	 * @description This function determines if the provided index is the last index in the coordinates array of a feature.
	 * @param {number} i - The index to check.
	 * @param {object} f - The feature object containing the coordinates array.
	 * @returns {boolean} Returns true if the index is the last index, false otherwise.
	 */
    this.isLastIndex = function (i, f) {
        return !f ? false :
        this.isLineString(f) ? i == f.geometry.coordinates.length - 1 :
        this.isPolygon(f) ? i == f.geometry.coordinates[0].length - 1 :
        i == 0 ? true :
        false;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name getLastIndexCoords
	 * @description This function returns the last coordinates of a given geometry object.
	 * @param {Object} f - The geometry object to extract the last coordinates from.
	 * @returns {Array} The last coordinates of the geometry object.
	 */
    this.getLastIndexCoords = function (f) {
        return this.isLineString(f) ? f.geometry.coordinates[f.geometry.coordinates.length - 1] :
        this.isPolygon(f) ? f.geometry.coordinates[0][f.geometry.coordinates.length - 1] :
        f.geometry.coordinates;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name isEmptyLineString
	 * @description This function determines if the provided feature is a LineString with only two identical points, making it an empty LineString.
	 * @param {Object} feature - The feature object to be checked.
	 * @returns {boolean} Returns true if the feature is an empty LineString, otherwise false.
	 */
    this.isEmptyLineString = function (feature) {
        if (feature.geometry.type === "LineString") {
            var coords = feature.geometry.coordinates;

            if (coords.length === 2) {
                var firstCoords = coords[0];
                var lastCoords = coords[coords.length - 1];
                return this.isPointEqual(firstCoords, lastCoords);
            }
        }

        return false;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name isPointAtVertex
	 * @description This function determines if a point is at the first or last vertex of a geometry by comparing it with the first and last coordinates.
	 * @param {Array} geometryCoords - The array of coordinates representing the geometry.
	 * @param {Array} pointCoords - The coordinates of the point to check.
	 * @returns {boolean} Returns true if the point is at the first or last vertex, false otherwise.
	 */
    this.isPointAtVertex = function (geometryCoords, pointCoords) {
        var firstPoint = geometryCoords[0];
        var lastPoint = geometryCoords[geometryCoords.length - 1];
        return this.isPointEqual(firstPoint, pointCoords) || this.isPointEqual(lastPoint, pointCoords);
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name isPointNotTooClose
	 * @description This function calculates the distance between two points and checks if it exceeds a minimum distance threshold.
	 * @param {Array<number>} coords1 - The coordinates of the first point [x, y].
	 * @param {Array<number>} coords2 - The coordinates of the second point [x, y].
	 * @returns {boolean} Returns true if the distance between the points is greater than or equal to the minimum distance threshold, false otherwise.
	 */
    this.isPointNotTooClose = function (coords1, coords2) {
        var line = turf.lineString([coords1, coords2]);
        var length = turf.lineDistance(line);

        if (length >= statics.constants.MIN_DISTANCE) {
            return !(coords1[0] === coords2[0] && coords1[1] === coords2[1]);
        } else {
            return false;
        }
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name isOverlapping
	 * @description This function takes two features and determines if they overlap by comparing their bounding boxes.
	 * @param {Object} feature1 - The first feature object with geometry.coordinates.
	 * @param {Object} feature2 - The second feature object with geometry.coordinates.
	 * @returns {boolean} Returns true if the features overlap, false otherwise.
	 */
    this.isOverlapping = function (feature1, feature2) {
        var coords1 = feature1.geometry.coordinates;
        var coords2 = feature2.geometry.coordinates;

        if (coords1.length === 2 && coords2.length === 2) {
            var bbox1 = this.createBbox(coords1);
            var bbox2 = this.createBbox(coords2);
            if (bbox1.east < bbox2.west || bbox1.west > bbox2.east) {
                return false;
            } else if (bbox1.north < bbox2.south || bbox1.south > bbox2.north) {
                return false;
            }
            return true;
        } else {
            throw new Error("wrong number of coordinates, expected 2");
        }
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name createLineWithLength
	 * @description This function takes an array of coordinates and creates a line string using Turf.js. It then calculates the length of the line and sets it as a property of the line.
	 * @param {Array} coords - An array of coordinates [ [x1, y1], [x2, y2], ... ].
	 * @returns {Object} - A Turf.js line string with the calculated length property.
	 */
    this.createLineWithLength = function (coords) {
        var line = turf.lineString(coords);
        var length = turf.lineDistance(line);
        this.setProperties(line, { length: length });
        return line;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name reducePrecision
	 * @description This function reduces the precision of the coordinates to 7 decimal places.
	 * @param {Array} coords - An array containing the coordinates to be processed.
	 * @returns {Array} The coordinates with reduced precision to 7 decimal places.
	 */
    this.reducePrecision = function (coords) {
        coords[0] = Number(Number(coords[0]).toFixed(7));
        coords[1] = Number(Number(coords[1]).toFixed(7));
        return coords;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name createBbox
	 * @description This function takes an array of two coordinates and constructs a bounding box object with west, east, south, and north properties.
	 * @param {Array} coords - An array of two coordinates in the format [[lon1, lat1], [lon2, lat2]].
	 * @returns {Object} Returns a bounding box object with west, east, south, and north properties.
	 */
    this.createBbox = function (coords) {
        var bbox1 = {};
        if (coords[0][0] < coords[1][0]) {
            bbox1.west = coords[0][0];
            bbox1.east = coords[1][0];
        } else {
            bbox1.west = coords[1][0];
            bbox1.east = coords[0][0];
        }
        if (coords[0][1] < coords[1][1]) {
            bbox1.south = coords[0][1];
            bbox1.north = coords[1][1];
        } else {
            bbox1.south = coords[1][1];
            bbox1.north = coords[0][1];
        }
        return bbox1;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name stringToDOM
	 * @description Converts a string to a DOM object using DOMParser.
	 * @param {string} str - The input string to be converted to a DOM object.
	 * @returns {Document} - The DOM object created from the input string.
	 */
    this.stringToDOM = function (str) {
        var parser = new DOMParser();
        return parser.parseFromString(str, "text/xml");
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name processFiles
	 * @description This function reads each file in the input array, extracts the file name and extension, and then reads the file content using FileReader. The content is passed to the handler function along with the file name and extension.
	 * @param {File[]} files - An array of File objects to be processed.
	 * @param {function} handler - A function that will be called for each file with the file content, name, and extension as parameters.
	 */
    this.processFiles = function (files, handler) {
        files.forEach(function(file) {
            var name = file.name;
            var ext = name.substring(name.lastIndexOf('.') + 1, name.length).toLowerCase();
            var fileReader = new FileReader();

            fileReader.onloadend = function() {
                if (fileReader.readyState === FileReader.DONE) {
                    try {
                        handler(fileReader.result, name, ext);
                    } catch (e) {
                        console.log(e);
                        console.error("Invalid JSON data");
                    }
                }
            }
            
            fileReader.readAsText(file);
        });
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name combineSameTypeFeatures
	 * @description This function takes an array of line features and combines them by connecting them based on their coordinates. It checks the endpoints of each line feature and connects them accordingly to form a continuous line.
	 * @param {Array} features - An array of line features to be combined.
	 * @returns {Array} - An array of coordinates representing the combined line features.
	 */
    this.combineSameTypeFeatures = function (features) {
        var coords = [];

        features.forEach(function(lineString) {
            if (coords.length === 0) {
                coords.push.apply(coords, _toConsumableArray(lineString.geometry.coordinates));
            } else {
                var firstPoint = coords[0];
                var lastPoint = coords[coords.length - 1];
                var currentFirstPoint = lineString.geometry.coordinates[0];
                var currentLastPoint = lineString.geometry.coordinates[lineString.geometry.coordinates.length - 1];

                if (this.isPointEqual(lastPoint, currentFirstPoint)) {
                    coords.push.apply(coords, _toConsumableArray(lineString.geometry.coordinates.slice(1, lineString.geometry.coordinates.length)));
                } else if (this.isPointEqual(lastPoint, currentLastPoint)) {
                    coords.push.apply(coords, _toConsumableArray(lineString.geometry.coordinates.slice(0, lineString.geometry.coordinates.length - 1).reverse()));
                } else if (this.isPointEqual(firstPoint, currentLastPoint)) {
                    coords.splice.apply(coords, [0, 0].concat(_toConsumableArray(lineString.geometry.coordinates.slice(0, lineString.geometry.coordinates.length - 1))));
                } else if (this.isPointEqual(firstPoint, currentFirstPoint)) {
                    coords.splice.apply(coords, [0, 1].concat(_toConsumableArray(lineString.geometry.coordinates.reverse())));
                } else {
                    var distanceToFirstPoint = turf.distance(lastPoint, currentFirstPoint);
                    var distanceToLastPoint = turf.distance(lastPoint, currentLastPoint);

                    if (distanceToFirstPoint < distanceToLastPoint) {
                        coords.push.apply(coords, _toConsumableArray(lineString.geometry.coordinates));
                    } else {
                        coords.push.apply(coords, _toConsumableArray([].concat(_toConsumableArray(lineString.geometry.coordinates)).reverse()));
                    }
                }
            }
        }, this);

        return coords;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name degrees2meters
	 * @description This function takes an array of latitude and longitude in degrees and converts it to meters using the Mercator projection formula.
	 * @param {Array<number>} px - An array containing latitude and longitude in degrees [longitude, latitude].
	 * @returns {Array<number>} An array containing the converted x and y coordinates in meters.
	 */
    this.degrees2meters = function (px) {
        const x = px[0] * 20037508.34 / 180;
        let y = Math.log(Math.tan((90 + px[1]) * Math.PI / 360)) / (Math.PI / 180);
        y = y * 20037508.34 / 180;
        return [x, y]
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name meters2degrees
	 * @description This function takes a pixel value and converts it to longitude and latitude in degrees.
	 * @param {Array} px - The pixel value to be converted, in the format [x, y].
	 * @returns {Array} An array containing the longitude and latitude in degrees, [lon, lat].
	 */
    this.meters2degrees = function (px) {
        const lon = px[0] * 180 / 20037508.34;
        const lat = Math.atan(Math.exp(px[1] * Math.PI / 20037508.34)) * 360 / Math.PI - 90;
        return [lon, lat]
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name extend
	 * @description Extends the properties of the first object with the properties of the subsequent objects.
	 * @param {Object} target - The object to be extended.
	 * @param {...Object} sources - The objects whose properties will be added to the target object.
	 * @return {Object} The extended object.
	 */
    this.extend = function () {
        for(var i=1; i<arguments.length; i++)
            for(var key in arguments[i])
                if(arguments[i].hasOwnProperty(key))
                    arguments[0][key] = arguments[i][key];
        return arguments[0];
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name clone
	 * @description This function recursively clones the input object or array, preserving the structure and types of the elements.
	 * @param {Object|Array|Date|RegExp|Function|Symbol} thing - The object or array to be cloned.
	 * @param {Object} opts - Optional settings for cloning functions and symbols.
	 * @returns {Object|Array|Date|RegExp|Function|Symbol} - A deep clone of the input object or array.
	 */
    this.clone = function(thing, opts) {
        var newObject = {};

        if (thing instanceof Array) {
            return thing.map(function (i) { return this.clone(i, opts); }, this);
        } else if (thing instanceof Date) {
            return new Date(thing);
        } else if (thing instanceof RegExp) {
            return new RegExp(thing);
        } else if (thing instanceof Function) {
            return opts && opts.newFns ?
            new Function('return ' + thing.toString())() :
            thing;
        } else if (thing instanceof Object) {
            Object.keys(thing).forEach(function (key) { newObject[key] = this.clone(thing[key], opts); }, this);
            return newObject;
        } else if ([ undefined, null ].indexOf(thing) > -1) {
            return thing;
        } else {
            if (thing.constructor.name === 'Symbol') {
                return Symbol(thing.toString().replace(/^Symbol\(/, '').slice(0, -1));
            }

            return thing.__proto__.constructor(thing);
        }
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name cloneDeep
	 * @description Recursively clones a value, including objects and arrays, preserving the original structure deeply.
	 * @param {any} value - The value to be cloned.
	 * @param {Function} instance - A function that can be used to clone custom instances.
	 * @returns {any} - The deeply cloned value.
	 */
    this.cloneDeep = function(value, instance) {
        var hasOwn = Object.prototype.hasOwnProperty;
        var toString = Object.prototype.toString;
    
        function _cloneDeep(val, instanceClone) {
            switch (kindOf(val)) {
            case 'object':
                return cloneObjectDeep(val, instanceClone);
            case 'array':
                return cloneArrayDeep(val, instanceClone);
            default:
                {
                    return clone(val);
                }
            }
        }
    
        function cloneObjectDeep(obj, instanceClone) {
            if (isObject(obj)) {
                var res = {};
                forOwn(obj, function(obj, key) {
                    this[key] = _cloneDeep(obj, instanceClone);
                }, res);
                return res;
            } else if (instanceClone) {
                return instanceClone(obj);
            } else {
                return obj;
            }
        }
    
        function cloneArrayDeep(arr, instanceClone) {
            var len = arr.length
            , res = [];
            var i = -1;
            while (++i < len) {
                res[i] = _cloneDeep(arr[i], instanceClone);
            }
            return res;
        }
    
        function isObject(val) {
            return val != null && typeof val === 'object' && Array.isArray(val) === false;
        }
    
        function isObjectObject(o) {
            return isObject(o) === true && Object.prototype.toString.call(o) === '[object Object]';
        }
    
        function isPlainObject(o) {
            var ctor, prot;
    
            if (isObjectObject(o) === false)
                return false;
    
            // If has modified constructor
            ctor = o.constructor;
            if (typeof ctor !== 'function')
                return false;
    
            // If has modified prototype
            prot = ctor.prototype;
            if (isObjectObject(prot) === false)
                return false;
    
            // If constructor does not have an Object-specific method
            if (prot.hasOwnProperty('isPrototypeOf') === false) {
                return false;
            }
    
            // Most likely a plain Object
            return true;
        }
    
        function forIn(obj, fn, thisArg) {
            for (var key in obj) {
                if (fn.call(thisArg, obj[key], key, obj) === false) {
                    break;
                }
            }
        }
    
        function forOwn(obj, fn, thisArg) {
            forIn(obj, function(val, key) {
                if (hasOwn.call(obj, key)) {
                    return fn.call(thisArg, obj[key], key, obj);
                }
            });
        }
    
        function kindOf(val) {
            // primitivies
            if (typeof val === 'undefined') {
                return 'undefined';
            }
            if (val === null) {
                return 'null';
            }
            if (val === true || val === false || val instanceof Boolean) {
                return 'boolean';
            }
            if (typeof val === 'string' || val instanceof String) {
                return 'string';
            }
            if (typeof val === 'number' || val instanceof Number) {
                return 'number';
            }
    
            // functions
            if (typeof val === 'function' || val instanceof Function) {
                return 'function';
            }
    
            // array
            if (typeof Array.isArray !== 'undefined' && Array.isArray(val)) {
                return 'array';
            }
    
            // check for instances of RegExp and Date before calling `toString`
            if (val instanceof RegExp) {
                return 'regexp';
            }
            if (val instanceof Date) {
                return 'date';
            }
    
            // other objects
            var type = toString.call(val);
    
            if (type === '[object RegExp]') {
                return 'regexp';
            }
            if (type === '[object Date]') {
                return 'date';
            }
            if (type === '[object Arguments]') {
                return 'arguments';
            }
            if (type === '[object Error]') {
                return 'error';
            }
    
            // buffer
            if (isBuffer(val)) {
                return 'buffer';
            }
    
            // es6: Map, WeakMap, Set, WeakSet
            if (type === '[object Set]') {
                return 'set';
            }
            if (type === '[object WeakSet]') {
                return 'weakset';
            }
            if (type === '[object Map]') {
                return 'map';
            }
            if (type === '[object WeakMap]') {
                return 'weakmap';
            }
            if (type === '[object Symbol]') {
                return 'symbol';
            }
    
            // typed arrays
            if (type === '[object Int8Array]') {
                return 'int8array';
            }
            if (type === '[object Uint8Array]') {
                return 'uint8array';
            }
            if (type === '[object Uint8ClampedArray]') {
                return 'uint8clampedarray';
            }
            if (type === '[object Int16Array]') {
                return 'int16array';
            }
            if (type === '[object Uint16Array]') {
                return 'uint16array';
            }
            if (type === '[object Int32Array]') {
                return 'int32array';
            }
            if (type === '[object Uint32Array]') {
                return 'uint32array';
            }
            if (type === '[object Float32Array]') {
                return 'float32array';
            }
            if (type === '[object Float64Array]') {
                return 'float64array';
            }
    
            // must be a plain object
            return 'object';
        }
    
        function isBuffer(obj) {
            return obj != null && (_isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
        }
    
        function _isBuffer(obj) {
            return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
        }
    
        function isSlowBuffer(obj) {
            return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
        }
    
        function isExtendable(val) {
            return typeof val !== 'undefined' && val !== null && (typeof val === 'object' || typeof val === 'function');
        }
    
        function mixin(target, objects) {
            if (!isExtendable(target)) {
                throw new TypeError('mixin-object expects the first argument to be an object.');
            }
            var len = arguments.length
            , i = 0;
            while (++i < len) {
                var obj = arguments[i];
                if (isExtendable(obj)) {
                    forIn(obj, copy, target);
                }
            }
            return target;
        }
    
        function clone(val) {
            var type = kindOf(val);
    
            if (clone.hasOwnProperty(type)) {
                return clone[type](val);
            }
            return val;
        }
    
        clone.array = function cloneArray(arr) {
            return arr.slice();
        }
    
        clone.date = function cloneDate(date) {
            return new Date(+date);
        }
    
        clone.object = function cloneObject(obj) {
            if (isExtendable(obj)) {
                return mixin({}, obj);
            } else {
                return obj;
            }
        }
    
        clone.regexp = function cloneRegExp(re) {
            var flags = '';
            flags += re.multiline ? 'm' : '';
            flags += re.global ? 'g' : '';
            flags += re.ignorecase ? 'i' : '';
            return new RegExp(re.source,flags);
        }
    
        return _cloneDeep(value, instance);
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name assignDeep
	 * @description Recursively assigns properties of source object to target object deeply.
	 * @param {Object} target - The target object to which properties will be assigned.
	 * @param {Object} source - The source object whose properties will be assigned to the target.
	 * @param {Object} options - Optional parameters for the assignment process.
	 * @param {boolean} [options.isMutatingOk=false] - Flag to allow mutating the target object.
	 * @param {boolean} [options.isStrictlySafe=false] - Flag to enforce strict safety checks during assignment.
	 * @returns {Object} The target object with assigned properties from the source object.
	 */
    this.assignDeep = function (target, source, {isMutatingOk = false, isStrictlySafe = false} = {}) {
        target = isMutatingOk ? target : this.cloneDeep(target);

        for (const [key, val] of Object.entries(source)) {
            if (val !== null && typeof val === `object`) {
                if (target[key] === undefined) target[key] = {};    
                target[key] = this.assignDeep(target[key], val, {isMutatingOk: true});
            } else {
                target[key] = val;
            }
        }

        return target;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name compareDeep
	 * @description Recursively compares two objects deeply to check if they are equal.
	 * @param {Object} x - The first object to compare.
	 * @param {Object} y - The second object to compare.
	 * @returns {boolean} Returns true if the objects are deeply equal, false otherwise.
	 */
    this.compareDeep = function() {
        var i, l, leftChain, rightChain;
      
        function compare2Objects (x, y) {
          var p;
      
          // remember that NaN === NaN returns false
          // and isNaN(undefined) returns true
          if (isNaN(x) && isNaN(y) && typeof x === 'number' && typeof y === 'number') {
               return true;
          }
      
          // Compare primitives and functions.     
          // Check if both arguments link to the same object.
          // Especially useful on the step where we compare prototypes
          if (x === y) {
              return true;
          }
      
          // Works in case when functions are created in constructor.
          // Comparing dates is a common scenario. Another built-ins?
          // We can even handle functions passed across iframes
          if ((typeof x === 'function' && typeof y === 'function') ||
             (x instanceof Date && y instanceof Date) ||
             (x instanceof RegExp && y instanceof RegExp) ||
             (x instanceof String && y instanceof String) ||
             (x instanceof Number && y instanceof Number)) {
              return x.toString() === y.toString();
          }
      
          // At last checking prototypes as good as we can
          if (!(x instanceof Object && y instanceof Object)) {
              return false;
          }
      
          if (x.isPrototypeOf(y) || y.isPrototypeOf(x)) {
              return false;
          }
      
          if (x.constructor !== y.constructor) {
              return false;
          }
      
          if (x.prototype !== y.prototype) {
              return false;
          }
      
          // Check for infinitive linking loops
          if (leftChain.indexOf(x) > -1 || rightChain.indexOf(y) > -1) {
               return false;
          }
      
          // Quick checking of one object being a subset of another.
          // todo: cache the structure of arguments[0] for performance
          for (p in y) {
              if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
                  return false;
              }
              else if (typeof y[p] !== typeof x[p]) {
                  return false;
              }
          }
      
          for (p in x) {
              if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
                  return false;
              }
              else if (typeof y[p] !== typeof x[p]) {
                  return false;
              }
      
              switch (typeof (x[p])) {
                  case 'object':
                  case 'function':
      
                      leftChain.push(x);
                      rightChain.push(y);
      
                      if (!compare2Objects (x[p], y[p])) {
                          return false;
                      }
      
                      leftChain.pop();
                      rightChain.pop();
                      break;
      
                  default:
                      if (x[p] !== y[p]) {
                          return false;
                      }
                      break;
              }
          }
      
          return true;
        }
      
        if (arguments.length < 1) return true;
      
        for (i = 1, l = arguments.length; i < l; i++) {
      
            leftChain = []; //Todo: this can be cached
            rightChain = [];
      
            if (!compare2Objects(arguments[0], arguments[i])) return false;
        }
      
        return true;
    }

	/**
	 * @function
     * @memberof module:geoflo.Utilities
	 * @name consumableArray
	 * @description Creates a consumable copy of an array or array-like object.
	 * @param {Array|Array-like} arr - The input array or array-like object to be copied.
	 * @returns {Array} A consumable copy of the input array or array-like object.
	 */
    this.consumableArray = function (arr) {
        if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                arr2[i] = arr[i];
            }
            return arr2;
        } else {
            return Array.from(arr);
        }
    }
}

function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
        }
        return arr2;
    } else {
        return Array.from(arr);
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Utilities);

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be isolated against other modules in the chunk.
(() => {
/*!******************!*\
  !*** ./index.js ***!
  \******************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ geoflo)
/* harmony export */ });
/* harmony import */ var _src_Statics_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/Statics.js */ "./src/Statics.js");
/* harmony import */ var _src_Options_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/Options.js */ "./src/Options.js");
/* harmony import */ var _src_Utilities_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/Utilities.js */ "./src/Utilities.js");
/* harmony import */ var _src_Styles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/Styles.js */ "./src/Styles.js");
/* harmony import */ var _src_Layers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src/Layers.js */ "./src/Layers.js");
/* harmony import */ var _src_Features_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./src/Features.js */ "./src/Features.js");
/* harmony import */ var _src_Mesh_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./src/Mesh.js */ "./src/Mesh.js");
/* harmony import */ var _src_Events_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./src/Events.js */ "./src/Events.js");
/* harmony import */ var _src_Select_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./src/Select.js */ "./src/Select.js");
/* harmony import */ var _src_Draw_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./src/Draw.js */ "./src/Draw.js");
/* harmony import */ var _src_Locate_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./src/Locate.js */ "./src/Locate.js");
/* harmony import */ var _src_Snapping_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./src/Snapping.js */ "./src/Snapping.js");
/* harmony import */ var _src_Pinning_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./src/Pinning.js */ "./src/Pinning.js");
/* harmony import */ var _src_Routing_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./src/Routing.js */ "./src/Routing.js");
/* harmony import */ var _src_Exploring_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./src/Exploring.js */ "./src/Exploring.js");
/* harmony import */ var _src_Painting_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./src/Painting.js */ "./src/Painting.js");
/* harmony import */ var _src_Control_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/Control.js */ "./src/Control.js");
/* harmony import */ var _src_Gamepad_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./src/Gamepad.js */ "./src/Gamepad.js");



















/**
 * @module geoflo
 * @name geoflo
 * @description Represents the GeoFlo object that manages all modules.
 * @returns {Object} The GeoFlo object with various methods for managing the entire app.
 */
const GeoFlo = function () {
    const geoflo = this;
    
    this.statics = _src_Statics_js__WEBPACK_IMPORTED_MODULE_0__["default"];
    this.options = _src_Options_js__WEBPACK_IMPORTED_MODULE_1__["default"];
    this.dev = this.statics.developer;
    this.id = this.statics.id;

    this.modes = [];
    this.plugins = {};
    this.gamepads = {};
    this.enabled = false;
    this.mobile = isMobile();

    var selectedFeatures = [];
    var hiddenFeatures = [];

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name initialize
	 * @description Initializes the object and optionally assigns it to the global window object.
	 * @returns {Object} The initialized object.
	 */
    this.initialize = function () {
        if (this.initialized) return this;
        window[this.id] = this;
        this.initialized = true;
        return this;
    }
    
	/**
	 * @function
     * @memberOf module:geoflo
	 * @name init
	 * @description Initializes the map component with the provided options and a callback function when ready.
	 * @param {Object} [options={}] - The options object for configuring the map component.
	 * @param {Function} onReady - The callback function to be executed when the map is ready.
	 * @returns {Object} Returns the map component instance.
	 */
    this.init = async function (accessToken, options={}, onReady) {
        var onReadyReturn;

        this.Utilities = new _src_Utilities_js__WEBPACK_IMPORTED_MODULE_2__["default"]();

        if (!accessToken) throw new Error('No Mapbox Access Token Provided!');
        if (this.isReady) return this.setOptions(options);

        const id = options.container || this.options.map.container;
        if (!id) throw new Error('Element id is required in the DOM for the map!');

        await loadStylesheet("https://api.mapbox.com/mapbox-gl-js/v3.4.0/mapbox-gl.css");
        await loadScript("https://api.mapbox.com/mapbox-gl-js/v3.4.0/mapbox-gl.js");
        await loadScript("https://unpkg.com/@turf/turf@7/turf.min.js");
        await loadScript("https://api.tiles.mapbox.com/mapbox.js/plugins/leaflet-omnivore/v0.3.1/leaflet-omnivore.min.js");
        await loadScript("https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js");
        await loadScript("https://api.mapbox.com/search-js/v1.0.0-beta.18/core.js");

        this.styles = [
            { title: "Standard", uri: "mapbox://styles/solutegrate/clxdoec8x006901qj7wjf8uxo" },
            { title: "Satellite", uri: "mapbox://styles/solutegrate/clqb11d15005901pdbyb13b5i" },
            { title: "Dark", uri: "mapbox://styles/solutegrate/clq8l159v003q01qu274z8e8p" },
            { title: "Light", uri: "mapbox://styles/solutegrate/clq8l4ylp003m01qbapvf6yqn" },
            { title: "Outdoors", uri: "mapbox://styles/solutegrate/clqb11yad005801nv6p2ke412" },
            { title: "Streets", uri: "mapbox://styles/solutegrate/clqb0y4iz005901nt0u4h62qd" }         
        ];

        this.options.map.style = "Dark";
        this.setOptions(options);
        
        var container = await ready(id);
        var style = this.styles.find(style => style.title === this.options.map.style).uri;

        this.isReady = container ? true : false;
        if (!this.isReady) throw new Error('Element id is required in the DOM for the map!');

        container.classList.add(this.statics.id);

        buildMapbox.call(this);

        this.mapbox = new mapboxgl.Map({
            accessToken: accessToken,
            container: container,
            style: style,
            center: this.options.map.center,
            zoom: this.options.map.zoom,
            hash: true,
            projection: 'mercator',
            extent: this.options.map.extent
        });

        this.viewport = document.createElement('div');
        this.viewportHeightOffset = 110;
        this.viewportWidthOffset = 20;
        this.viewportLeft = '10px';
        this.viewportBottom = '5%';
        this.noSelect = options.noSelect || false;
        this.mapbox.on('load', this.onLoad.bind(this));

        await loaded(this);
        await this.redraw();

        this.setViewport();
        this.setExtent(false, true);

        this.fire('sdk.ready', { enabled: this.enabled, map: this.map, ready: this.isLoaded });

        if (onReady && typeof onReady === 'function') {
            if (onReady.constructor.name === 'AsyncFunction') {
                onReadyReturn = await onReady.call(this, this);
            } else {
                onReadyReturn = onReady.call(this, this);
            }
        }

        if (onReadyReturn) {
            if (!onReadyReturn.disable) {
                this.enable();
            }
        } else {
            this.enable();
        }
        return this;
    }

    /**
	 * @function
     * @memberOf module:geoflo
	 * @name load
	 * @description This function loads the MapboxGL SDK with the given MapboxGL map object and sets up necessary components for interaction. Loads the User, Layers, and Features components, and initializes event listeners. Calls the onReady callback if provided.
	 * @param {Object} map - The MapboxGL map object to be used by the SDK.
	 * @returns {Object} - Returns the SDK instance after loading and initialization.
	 */
    this.load = function (map) {
        if (this.isLoaded || !this.isReady) return this;

        this.map = map;

        this.locate = new _src_Locate_js__WEBPACK_IMPORTED_MODULE_10__["default"]();

        this.navigation = new mapboxgl.NavigationControl({ visualizePitch: true, showZoom: true, showCompass: true });
        this.navigation.hide = function () { this._container.style.display = 'none' }.bind(this.navigation);
        this.navigation.show = function () { this._container.style.display = 'block' }.bind(this.navigation);
        this.map.addControl(this.navigation, 'top-right');

        if (!this.mobile) {
            this.fullscreen = new mapboxgl.FullscreenControl({ container: document.querySelector('body') });
            this.fullscreen.hide = function () { this._controlContainer.style.display = 'none' }.bind(this.fullscreen);
            this.fullscreen.show = function () { this._controlContainer.style.display = 'block' }.bind(this.fullscreen);
            this.map.addControl(this.fullscreen, 'top-right');
        }
    
        this.styles = new _src_Styles_js__WEBPACK_IMPORTED_MODULE_3__["default"](this, { styles: this.styles, selected: this.options.map.style });
        this.Layers = new _src_Layers_js__WEBPACK_IMPORTED_MODULE_4__["default"](this);
        this.Features = new _src_Features_js__WEBPACK_IMPORTED_MODULE_5__["default"](this);

        this.map.addControl(this.styles);
        
        this.Events = (0,_src_Events_js__WEBPACK_IMPORTED_MODULE_7__["default"])(this);
        this.Events.removeEventListeners();
        this.Events.addEventListeners();

        this.isLoaded = true;
        return this;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name enable
	 * @description This function enables the map interaction mode based on the provided type and options. It sets the mode to 'select' or 'draw' depending on the type parameter, initializes options, controls, modes, and triggers events.
	 * @param {string} type - The type of interaction mode to enable ('select' or 'draw').
	 * @param {Object} options - Additional options for the interaction mode (default: {}).
	 * @returns {Object} - The current instance of the map with the enabled interaction mode.
	 */
    this.enable = function (type, options={}) {
        if (this.enabled) return this;
        
        this.mode = !type || type === 'select' ? 'select' : 'draw';
        this.type = type;

        this.setOptions(options);
        this.setControls();

        this.Select = new _src_Select_js__WEBPACK_IMPORTED_MODULE_8__["default"](this);
        this.Draw = new _src_Draw_js__WEBPACK_IMPORTED_MODULE_9__["default"](this);

        this.modes = [ this.Select, this.Draw ];
        this.enabled = true;

        this.setMode({ mode: this.mode, type: this.type});
        this.fire('map.enable', { enabled: this.enabled, mode: this.mode, type: this.type });
        return this;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name disable
	 * @description This function disables the map by clearing modes, setting enabled to false, resetting mode to null, resetting options to default, firing a 'map.disable' event, enabling double click zoom, removing event listeners, layers, and controls.
	 * @returns {Object} Returns the current instance of the map object.
	 */
    this.disable = function () {
        if (!this.enabled) return this;

        this.modes = [];
        this.enabled = false;
        this.mode = null;
        this.options = _src_Options_js__WEBPACK_IMPORTED_MODULE_1__["default"];
        this.doubleClickZoom.enable(this.map);
        this.Layers.removeEventListeners();
        this.Events.removeEventListeners();
        this.Layers.removeLayers();
        this.removeControls();
        this.fire('map.disable', { enabled: this.enabled, mode: this.mode });
        return this;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name redraw
	 * @description Redraws the map by refreshing layers, updating event listeners, and disabling double click zoom.
	 * @returns {Promise<boolean>} Returns a promise that resolves to true if the map is successfully redrawn, false otherwise.
	 */
    this.redraw = async function () {
        if (!this.Events) return false;
        await this.Layers.refresh();
        this.Events.removeEventListeners();
        this.Events.addEventListeners();
        this.Features.updateSource();
        this.doubleClickZoom.disable(this.map);
        this.setViewport();
        this.map.style.glyphManager.urls[""] = `mapbox://fonts/${this.dev}/{fontstack}/{range}.pbf`
        this.fire('map.redraw', { enabled: this.enabled, mode: this.mode })
        if (this.onReady) await this.onReady(this), delete this.onReady;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name refresh
	 * @description Refreshes the content by redrawing it asynchronously.
	 * @returns {Promise<boolean>} Returns a Promise that resolves to a boolean value.
	 */
    this.refresh = async function () {
        if (this.noRefresh) return false;
        await this.redraw();
        this.fire('map.refresh', { enabled: this.enabled, mode: this.mode })
    }




	/**
	 * @function
     * @memberOf module:geoflo
	 * @name once
	 * @description Registers a callback function to be executed only once for a specific GeoFlo event type.
	 * @param {string} type - The type of event to listen for.
	 * @param {function} callback - The callback function to be executed when the event occurs.
	 * @returns {boolean} Returns true if the callback is successfully registered to be executed once, otherwise false.
	 */
    this.once = function (type, callback) {
        return this.map && type ? this.map.once(this.id + ':' + type, callback) : false;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name on
	 * @description Registers a callback function to be executed for a specific GeoFlo event type.
	 * @param {string} type - The type of event to listen for.
	 * @param {function} callback - The callback function to be executed when the event occurs.
	 * @returns {boolean} Returns true if the event listener was successfully attached, false otherwise.
	 */
    this.on = function (type, callback) {
        if (!callback.name) throw new Error('Function must have a name!')
        return this.map && type ? this.map.on(this.id + ':' + type, callback) : false;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name off
	 * @description Removes an event listener from the map based on the provided GeoFlo event type and callback. Callback function must have a name.
	 * @param {string} type - The type of event to remove the listener from.
	 * @param {function} callback - The callback function to be removed as the event listener.
	 * @returns {boolean} Returns true if the event listener was successfully removed, false otherwise.
	 */
    this.off = function (type, callback) {
        if (!callback.name) throw new Error('Function must have a name!')
        return this.map && type ? this.map.off(this.id + ':' + type, callback) : false;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name fire
	 * @description Fires an event with the specified GeoFlo type and detail. Detail is an Object type.
	 * @param {string} type - The type of the event to fire.
	 * @param {any} detail - Additional details to include with the event.
	 * @returns {boolean} Returns true if the event was successfully fired, false otherwise.
	 */
    this.fire = function (type, detail) {
        return this.map && type ? this.map.fire(this.id + ':' + type, { detail: detail }) : false;
    }




	/**
	 * @function
     * @memberOf module:geoflo
	 * @name setOptions
	 * @description Sets the options for the object by merging the provided options with the existing ones.
	 * @param {Object} options - The options to be merged with the existing options.
	 * @returns {Object} The updated options object after merging.
	 */
    this.setOptions = function(options={}) {
        this.options = this.Utilities.assignDeep(this.options || {}, options);
        return this.options;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name setMode
	 * @description This function allows the user to set the mode of the map editor with various options.
	 * @param {Object} options - The options object for setting the mode.
	 * @param {string} [options.mode='select'] - The mode to set (default: select).
	 * @param {string} [options.type='LineString'] - The type of the mode (default: LineString).
	 * @param {Object} [options.feature] - The feature to edit in the mode.
	 * @returns {Object} The current mode after setting it based on the options.
	 */
    this.setMode = function (options={}) {
        if (!options.mode) options.mode = this.statics.constants.modes.SELECT;
        if (!options.type) options.type = 'Polyline';

        var classesToRemove = [];
        var selectedMode = null;
        var editMode = options.mode === this.statics.constants.modes.EDIT;

        if (this.currentMode && options.mode === this.mode && options.type === this.currentMode.type) return this.currentMode;
        
        if (editMode) {
            if (options.feature) {
                options.feature = geoflo.Utilities.cloneDeep(options.feature);
                options.mode = this.statics.constants.modes.DRAW;
                options.type = options.type || options.feature.properties.type;

                this.editing = geoflo.Utilities.cloneDeep(options.feature);
                this.removeSelection();
            } else {
                //this.wantingToEdit = true;
                if (this.currentMode) this.currentMode.deactivate();
                return this.setMode();
            }
        }

        if (this.currentMode && this.currentMode.activated) this.currentMode.deactivate();

        this.container.classList.forEach(function(className) {
            if (className.indexOf("mouse-") !== -1) {
                classesToRemove.push(className);
            }
        });

        if (classesToRemove.length > 0) {
            var _map$container$classL;
            (_map$container$classL = this.container.classList).remove.apply(_map$container$classL, classesToRemove);
        }

        this.setMapClass('pointer');

        this.modes.forEach(function(m) { if (m.canHandle && m.canHandle(options.mode)) { selectedMode = m; } });

        if (selectedMode) {
            this.fire('mode.change', {
                old: this.mode,
                new: options.mode,
                mode: selectedMode,
                type: options.type
            })

            this.currentMode = selectedMode;
            this.mode = options.mode;
            selectedMode.activate(options);
        }

        this.Snapping = new _src_Snapping_js__WEBPACK_IMPORTED_MODULE_11__["default"](this, this.currentMode);
        this.Pinning = new _src_Pinning_js__WEBPACK_IMPORTED_MODULE_12__["default"](this, this.currentMode);
        this.Routing = new _src_Routing_js__WEBPACK_IMPORTED_MODULE_13__["default"](this, this.currentMode);
        this.Exploring = new _src_Exploring_js__WEBPACK_IMPORTED_MODULE_14__["default"](this, this.currentMode);
        this.Painting = new _src_Painting_js__WEBPACK_IMPORTED_MODULE_15__["default"](this, this.currentMode);
        this.Layers.moveLayers();
        return this.currentMode;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name setControls
	 * @description Initializes and sets the controls for the map. Adds the fullscreen and navigation controls, and initializes the custom controls.
	 * @params {none} - No parameters needed for this function.
	 * @returns {Array} - An array of initialized controls for the map.
	 */
    this.setControls = function (controls=[]) {
        if (this.controls && this.controls.length) return this.controls;
        if (!this.options.controls) return false;
        this.controls = [];
        controls = controls.length ? controls : this.statics.controls;
        controls.forEach(function(control) { this.controls.push(new _src_Control_js__WEBPACK_IMPORTED_MODULE_16__["default"](control)) }, this);
        return this.controls;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name setIcon
	 * @description This function determines the appropriate icon to display based on the user's following status and navigation compass icon.
     * @deprecated
	 * @param {Event} event - The event for which the icon is being set.
	 * @returns {void}
	 */
    this.setIcon = function (event) {
        var icon = this.navigation ? this.navigation._compassIcon : false;
        var following = this.Locate && this.Locate.following;

        if (following) {

        } else if (icon) {
            //control.style.transform = icon.style.transform;
        }
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name setCenterMarker
	 * @description This function sets a marker at the center of the map. It allows customization of the marker icon and behavior.
	 * @param {Object} options - Options object for customizing the center marker.
	 * @param {boolean} [options.remove] - If true, removes the center marker.
	 * @param {boolean} [options.transform] - If true, applies transformation to the center marker.
	 * @param {boolean} [options.gamepad] - If true, applies gamepad settings to the center marker.
	 * @param {boolean} [options.dontAdd] - If true, does not add the center marker.
	 * @param {boolean} [options.noRemove] - If true, prevents the center marker from being removed.
	 * @return {Object|boolean} Returns the center marker object if successfully added or updated, or false if not applicable.
	 */
    this.setCenterMarker = function (options={}) {
        return;
        if (!this.mobile || this.noCenterMarker) return false;
        
        var following = this.Locate && this.Locate.following;
        var icon = this.statics.logo.icon;
        var el;

        if (options.remove) {
            if (this.centerMarker && !this.centerMarker.noRemove) return this.centerMarker.remove(), delete this.centerMarker;
            return false;
        }
       
        if (this.centerMarker) {
            this.centerMarker.setLngLat(this.map.getCenter()).addTo(this.map);
            if (options.transform || options.gamepad) this.centerMarker.setPitchAlignment('map');
            return this.centerMarker;
        } else if (options.dontAdd) {
            return false;
        }

        if (!this.centerMarkerIcon) {
            el = document.createElement('div');
            el.className = this.id + '-center-marker';
            setIcon(el, icon);
        }
        
        this.centerMarkerIcon = el;
        this.centerMarker = new this.Mapbox.Marker(this.centerMarkerIcon);
        this.centerMarker.setLngLat(this.map.getCenter()).addTo(this.map).setOffset([0,0]);
        this.centerMarker.noRemove = options.noRemove;

        if (following) this.centerMarker.setOffset([0,-20]);

        function setIcon(marker, icon) {
            marker.style.backgroundImage = `url("${icon}")`;
        }

        return this.centerMarker;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name setButtons
	 * @description This function resets the active buttons and activates the Select button.
	 * @return {boolean} Returns true if the Select button is successfully set, false otherwise.
	 */
    this.setButtons = function () {
        return this.getButtons('select') ? this.getButtons('select').add() : false;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name setActiveButton
	 * @description Sets the active button with the specified id in the controls array.
	 * @param {string} id - The id of the button to set as active.
	 * @returns {boolean} Returns false if the controls array is empty or undefined.
	 */
    this.setActiveButton = function (id) {
        if (!this.controls || !this.controls.length) return false;
        this.controls.forEach(function(control) { control.setActiveButton(id.toLowerCase()) })
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name setTheme
	 * @description Sets the theme colors for the control.
	 * @param {Object} colors - An object containing the theme colors.
	 * @returns {void}
	 */
    this.setTheme = function (colors) {
        this.Control ? this.Control.setTheme(colors) : false;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name setLayers
	 * @description Sets custom layers on the map.
	 * @param {Array} layers - An array of custom layers to be added to the map.
	 * @param {Object} options - Additional options for setting custom layers.
	 * @returns {Promise} A promise that resolves when the custom layers are set on the map.
	 */
    this.setLayers = async function (layers=[], options={}) {
        if (options.reset) this.removeFeatures(layers, options);
        return await this.Layers.setCustomLayers(layers, options);
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name setSelectedFeatures
	 * @description This function updates the selected features on the map with the provided array of features.
	 * @param {Array} features - An array of features to set as selected.
	 * @returns {boolean} Returns false if the features array is empty.
	 */
    this.setSelectedFeatures = function (features=[]) {
        if (!features.length) {
            selectedFeatures = [];
        } else {
            selectedFeatures.splice(0, selectedFeatures.length, ...features);
        }

        this.map.getSource(this.statics.constants.sources.SELECT).setData(turf.featureCollection(this.getSelectedFeatures()));
        this.map.getSource(this.statics.constants.sources.VERTEX).setData(turf.featureCollection(this.getSelectedFeatures()));

        this.fire('select.load', {
            features: turf.featureCollection(this.getSelectedFeatures()),
            source: this.map.getSource(this.statics.constants.sources.SELECT)
        })
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name setMeshFeatures
	 * @description Updates the mesh data with the provided features and returns the updated mesh. Adds a mesh index if it does not exist.
	 * @param {Array} features - An array of features to update the mesh with.
	 * @returns {Object} The updated mesh after setting the features.
	 */
    this.setMeshFeatures = function (features=[]) {
        if (!features.length) return false;
        this.updateMeshData(features, true);
        return this.meshIndex.getFeatures();
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name setMapClass
	 * @description Sets a specific mouse class on the map container element based on the provided name. Removes any existing classes starting with "mouse-" before adding the new class.
	 * @param {string} name - The name of the class to be added (without the "mouse-" prefix).
	 * @returns {boolean} Returns false if the name is empty, otherwise adds the class and returns undefined.
	 */
    this.setMapClass = function (name) {
        this.container.classList.forEach(function(className) {
            if (className.indexOf("mouse-") !== -1) this.container.classList.remove(className)
        }, this);

        if (!name) return false;
        this.container.classList.add("mouse-" + name);
    }

    /**
	 * @function
     * @memberof module:geoflo.Map
	 * @name setViewport
	 * @description This function sets the style of the viewport based on the options provided. It resizes the map, calculates the height and width of the container, adjusts the height and width of the viewport, extends the viewport style, sets padding, and returns the updated viewport element.
	 * @param {Object} options - The options object containing style properties for the viewport.
	 * @param {string} [options.position='absolute'] - The position property for the viewport.
	 * @param {string} [options.margin='auto'] - The margin property for the viewport.
	 * @param {string} [options.top=''] - The top property for the viewport.
	 * @param {string} [options.left=this.viewportLeft] - The left property for the viewport.
	 * @param {string} [options.bottom=this.viewportBottom] - The bottom property for the viewport.
	 * @returns {Element} The updated viewport element.
	 */
    this.setViewport = function (options) {
        var style = options || {
            position: 'absolute',
            margin: 'auto',
            top: '',
            left: this.viewportLeft,
            bottom: this.viewportBottom
        };

        var height = this.container.getBoundingClientRect().height;
        var width = this.container.getBoundingClientRect().width;

        style.height = `${Number.parseInt(height) - this.viewportHeightOffset}px`;
        style.width = `${Number.parseInt(width) - this.viewportWidthOffset}px`;

        this.Utilities.extend(this.viewport.style, style);
        this.setPadding();
        this.map.resize();
        return this.viewport;
    }

	/**
	 * @function
     * @memberof module:geoflo.Map
	 * @name setPadding
	 * @description Calculates the padding values for the container by comparing its position with the viewport.
	 * @returns {Object} The padding object containing left, right, top, and bottom padding values.
	 * @params {void}
	 */
    this.setPadding = function () {
        var left = (this.container.getBoundingClientRect().left) - (this.viewport.getBoundingClientRect().left);
        var right = (this.container.getBoundingClientRect().right) - (this.viewport.getBoundingClientRect().right);
        var top = (this.container.getBoundingClientRect().top) - (this.viewport.getBoundingClientRect().top);
        var bottom = (this.container.getBoundingClientRect().bottom) - (this.viewport.getBoundingClientRect().bottom);
        var noPadding = this.container.getBoundingClientRect().width < 20;

        this.padding = {
            left: noPadding ? 0 : Math.abs(left),
            right: noPadding ? 0 : Math.abs(right),
            top: noPadding ? 0 : Math.abs(top),
            bottom: noPadding ? 0 : Math.abs(bottom)
        };

        this.map.setPadding(this.padding);    
        return this.padding;
    }

    /**
	 * @function
     * @memberof module:geoflo.Map
	 * @name setStyle
	 * @description Sets the style of the map and returns the updated style.
	 * @param {Object} style - The style object to be applied to the map.
	 * @returns {Object} The updated style object of the map.
	 */
    this.setStyle = function (style, options) {
        if (!style) { return false };
        this.map.setStyle(style, options);
        return this.map.getStyle();
    }

    /**
	 * @description Sets the extent of the map based on the provided features or a given extent. If no features are provided, it uses the rendered drawn features. If extent is specified, it sets the map extent to the extent polygon. If center is not specified and isPoint is true, it centers the map at the centroid of the extent. If center is false, it fits the map to the bounding box of the features. If center is true, it centers the map at the centroid of the bounding box.
	 * @function
     * @memberof module:geoflo.Map
	 * @name setExtent
	 * @param {Array} features - Array of features to set the extent based on.
	 * @param {Array} extent - Extent polygon to set the map extent to.
	 * @param {Object} options - Additional options for setting the extent (center, isPoint).
	 * @returns {Object} - The map object after setting the extent.
	 */
    this.setExtent = function (features, extent, options={}) {
        this.settingExtent = true;

        var noFeatures = !features || !features.length;
        var center = options.center;
        !center && options.isPoint ? center = true : false;

        this.setViewport();
        
        if (extent) {
            this.preventDefault = true;
            features = !this.options.map.extent ? [] : [turf.polygon(this.options.map.extent)];
        } else if (noFeatures) {
            features = this.getDrawnFeatures();
        }

        var jumpTo = {
            bearing: options.bearing || this.options.map.bearing || this.map.getBearing(),
            center: this.options.map.center || this.map.getCenter(),
            zoom: options.zoom || this.options.map.zoom || this.map.getZoom(),
            pitch: options.pitch || this.options.map.pitch || this.map.getPitch()
        }

        if (!features) return this.map.jumpTo(jumpTo);
        if (!features.length) return;

        var bbox = turf.bbox(turf.featureCollection(features))

        if (center) {
            var polygon = turf.bboxPolygon(bbox);
            var centroid = turf.centroid(polygon);
            jumpTo.center = { lat: centroid.geometry.coordinates[1], lng: centroid.geometry.coordinates[0] };
            jumpTo.zoom = options.zoom || this.map.getZoom();
            jumpTo.pitch = options.pitch || this.map.getPitch();
            jumpTo.bearing = options.bearing || this.map.getBearing();
            this.map.jumpTo(jumpTo);
        } else if (bbox) {
            var settings = {
                padding: this.map.getPadding(),
                linear: true
            }

            if (options.bearing) settings.bearing = options.bearing;
            if (options.pitch) settings.pitch = options.pitch;
            if (options.maxZoom) settings.maxZoom = options.maxZoom;
            
            this.map.fitBounds(bbox, settings);
        }

        this.fire('features.zoom', { features: features, center: this.map.getCenter(), bbox: bbox });
        this.settingExtent = false;
        return this.map;
    }

    /**
     * @memberof module:geoflo
	 * @function
	 * @name setOpacity
	 * @description This function takes a numeric value and sets the opacity of specified layers on the map to that value.
	 *
	 * @param {number} value - The opacity value to set for the layers.
	 */
    this.setOpacity = function (value) {
        var opacity = this.opacity = Number(value);
        var layers = this.map.getStyle().layers;

        layers.map((layer) => {
            if (!layer.id.includes('geoflo') || layer.type === 'background') {
                if (layer.metadata && layer.metadata.custom) return;
                
                if (layer.type === 'symbol')  {
                    this.map.setPaintProperty(layer.id, `icon-opacity`, opacity);
                    this.map.setPaintProperty(layer.id, `text-opacity`, opacity);
                } else {
                    this.map.setPaintProperty(layer.id, `${layer.type}-opacity`, opacity);
                }
            }
        })
    }




	/**
	 * @function
     * @memberOf module:geoflo
	 * @name hasControls
	 * @description This function checks if the object has controls by verifying the existence and length of the controls array.
	 * @returns {boolean} Returns true if the object has controls, false otherwise.
	 */
    this.hasControls = function () {
        return this.controls && this.controls.length;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name hasSelection
	 * @description This function determines whether there is a selection of features.
	 * @returns {boolean} Returns true if there is a selection of features, otherwise false.
	 */
    this.hasSelection = function () {
        return this.getSelectedFeatures().length > 0;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name hasSingleSelection
	 * @description This function checks if there is only one selected feature.
	 * @returns {boolean} Returns true if there is a single selection, false otherwise.
	 */
    this.hasSingleSelection = function () {
        return this.getSelectedFeatures().length === 1;
    }




	/**
	 * @function
     * @memberOf module:geoflo
	 * @name activateSnapping
	 * @description This function activates snapping by getting the snapping buttons, activating them, and triggering the snapping activation event. Fires a custom event 'snapping.activate' with the enabled status and the snapping object.
	 * @returns {Object} The activated Snapping object.
	 */
    this.activateSnapping = function () {
        var buttons = this.getButtons('snapping');
        if (!buttons) return;
        buttons.activate();
        this.Snapping.activate();
        this.fire('snapping.activate', { enabled: true, mesh: this.meshIndex, snapping: this.Snapping })
        return this.Snapping;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name activatePinning
	 * @description This function activates pinning by getting the pinning buttons, activating them, enabling snapping, activating pinning, and firing an event. Fires a custom event 'pinning.activate' with the enabled status and the pinning object.
	 * @returns {Object} The activated pinning object.
	 */
    this.activatePinning = function () {
        var buttons = this.getButtons('pinning');
        if (!buttons) return;
        buttons.activate();
        //this.deactivateRouting();
        this.activateSnapping();
        this.Pinning.activate();
        this.fire('pinning.activate', { enabled: true, pinning: this.Pinning });
        return this.Pinning;
    }

	/**
     * @function
     * @memberOf module:geoflo
	 * @description This function activates the routing feature by getting the routing buttons, activating them, enabling snapping, deactivating painting, and activating the routing itself. Fires a custom event 'routing.activate' with the enabled status and the routing object.
	 * @name activateRouting
	 * @returns {Object} The activated Routing object.
	 */
    this.activateRouting = function () {
        var buttons = this.getButtons('routing');
        if (!buttons) return;
        buttons.activate();
        this.activateSnapping();
        this.deactivatePainting();
        this.Routing.activate();
        this.fire('routing.activate', { enabled: true, routing: this.Routing })
        return this.Routing;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name activateExploring
	 * @description This function activates the exploring mode by activating the exploring buttons, functionalities, and events. Fires a custom event 'exploring.activate' with the enabled status and the exploring object.
	 * @returns {Object} The activated exploring object.
	 */
    this.activateExploring = function () {
        var buttons = this.getButtons('exploring');
        if (!buttons) return;
        buttons.activate();
        this.deactivatePainting();
        this.Exploring.activate();
        this.fire('exploring.activate', { enabled: true, exploring: this.Exploring });
        return this.Exploring;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name activatePainting
	 * @description Activates the painting functionality by setting the draw mode, activating the painting buttons, deactivating routing and exploring, and firing an event. Fires a custom event 'painting.activate' with the enabled status and the painting object.
	 * @returns {Object} The activated Painting object.
	 */
    this.activatePainting = function () {
        var buttons = this.getButtons('painting');
        if (!buttons) return;
        buttons.activate();
        this.deactivateRouting();
        this.deactivateExploring();
        this.Painting.activate(this.drawMode);
        this.fire('painting.activate', { enabled: true, painting: this.Painting });
        return this.Painting;
    }




	/**
	 * @function
     * @memberOf module:geoflo
	 * @name deactivateSnapping
	 * @description This function deactivates the snapping feature by performing various actions. Deletes mesh data, deactivates the snapping buttons, deactivates the Snapping object, and fires a 'snapping.deactivate' event.
	 * @returns {boolean} Returns false after deactivating the snapping feature.
	 */
    this.deactivateSnapping = function () {
        var buttons = this.getButtons('snapping');
        if (!buttons) return;
        buttons.deactivate();
        this.deleteMeshData();
        this.Snapping.deactivate();
        this.fire('snapping.deactivate', { enable: false })
        return false;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name deactivatePinning
	 * @description This function deactivates the pinning feature by deactivating the pinning buttons, the Pinning object, and firing a 'pinning.deactivate' event.
	 * @returns {boolean} Returns false after deactivating pinning.
	 */
    this.deactivatePinning = function () {
        var buttons = this.getButtons('pinning');
        if (!buttons) return;
        buttons.deactivate();
        this.Pinning.deactivate();
        this.fire('pinning.deactivate', { enable: false });
        return false;
    }

	/**
	 * @description Deactivates the routing functionality by deactivating the routing buttons and the Routing module. Triggers a custom event 'routing.deactivate' with enable set to false.
	 * @function
     * @memberOf module:geoflo
	 * @name deactivateRouting
	 * @returns {boolean} Returns false after deactivating the routing functionality.
	 */
    this.deactivateRouting = function () {
        var buttons = this.getButtons('routing');
        if (!buttons) return;
        buttons.deactivate();
        this.Routing.deactivate();
        this.fire('routing.deactivate', { enable: false })
        return false;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name deactivateExploring
	 * @description This function deactivates the exploring mode by deactivating buttons, deleting mesh data, deactivating the exploring mode, and firing an event. Fires a custom event 'exploring.deactivate' with the enable status set to false.
	 * @returns {boolean} Returns false after deactivating the exploring mode.
	 */
    this.deactivateExploring = function () {
        var buttons = this.getButtons('exploring');
        if (!buttons) return;
        buttons.deactivate();
        this.deleteMeshData();
        this.Exploring.deactivate();
        this.fire('exploring.deactivate', { enable: false });
        return false;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name deactivatePainting
	 * @description This function deactivates the painting mode by deactivating the buttons, the painting tool, and firing an event. Fires a custom event 'painting.deactivate' with the enable status set to false.
	 * @returns {boolean} Returns false.
	 */
    this.deactivatePainting = function () {
        var buttons = this.getButtons('painting');
        if (!buttons) return;
        if (this.mobile && !this.currentMode.finished && this.currentMode.id === 'draw' && this.currentMode.type && this.currentMode.type === 'Rectangle') return;
        buttons.deactivate();
        this.Painting.deactivate();
        this.fire('painting.deactivate', { enable: false });
        return false;
    }

    


	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getMap
	 * @description Retrieves the map property from the Map object.
	 * @returns {Object} The map property of the Map object.
	 */
    this.getMap = function () {
        return this.map;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getModes
	 * @description Retrieves the modes based on the provided mode parameter. If a mode is specified, it returns the mode that can handle the input mode. If no mode is specified, it returns all available modes.
	 * @param {string} mode - The mode to be checked against available modes.
	 * @returns {Array|Object} - An array of all available modes if no mode is specified, or the mode object that can handle the input mode.
	 */
    this.getModes = function (mode) {
        return mode ? this.modes.find(function(m) { if (m.canHandle && m.canHandle(mode)) { return m; } }) : this.modes;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getMode
	 * @description Retrieves the current mode of the object. Either 'GeoFlo.Select' or 'GeoFlo.Draw'.
	 * @return {object} The current mode of the object.
	 */
    this.getMode = function () {
        return this.currentMode;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getColors
	 * @description This function retrieves the colors from the options object.
	 * @returns {Array} The colors array from the options object.
	 */
    this.getColors = function () {
        return this.options.colors;
    }

	/**
	 * @description Retrieves the buttons associated with a specific control or all buttons from the controls.
	 * @function
     * @memberOf module:geoflo
	 * @name getButtons
	 * @param {string} id - The ID of the button to retrieve. If not provided, retrieves all buttons.
	 * @returns {object|boolean} - Returns an object containing the buttons if found, or false if controls are not available.
	 */
    this.getButtons = function (id) {
        if (!this.hasControls()) return false;

        var buttons;

        this.controls.forEach(function (c) {
            var options = c.getButtonOptions();

            if (id) {
                if (!buttons && options[id]) buttons = options[id];
            } else {
                if (!buttons) buttons = {};

                Object.entries(options).forEach(function(entry) {
                    var key = entry[0];
                    var val = entry[1];
                    buttons[key] = val;
                })
            }
            
        })

        return buttons;
    }




	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getFeatures
	 * @description This function retrieves both the drawn and selected features and returns them as a single array.
	 * @return {Array} An array containing both the drawn and selected features.
	 */
    this.getFeatures = function () {
        return [this.getDrawnFeatures(), this.getSelectedFeatures()].flat();
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getDrawnFeatures
	 * @description Retrieves the drawn features from the Features object.
	 * @returns {Array} An array of drawn features.
	 */
    this.getDrawnFeatures = function () {
        return this.Features.getColdFeatures();
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getRenderedFeatures
	 * @description Retrieves rendered features within a specified radius around a given longitude and latitude, based on a filter.
	 * @param {Array<number>} lngLat - An array containing the longitude and latitude coordinates.
	 * @param {number} radiusInKm - The radius in kilometers within which to search for features.
	 * @param {object} filter - An optional filter object to apply when retrieving features.
	 * @returns {Array<object>} An array of rendered features that match the criteria.
	 */
    this.getRenderedFeatures = function (lngLat, radiusInKm, filter) {
        var features = [this.getRenderedDrawnFeatures(lngLat, radiusInKm, filter), this.getRenderedSnapFeatures(lngLat, radiusInKm, filter)].flat();
        return features;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getRenderedDrawnFeatures
	 * @description This function queries the map for rendered drawn features based on the provided parameters.
	 * @param {Object} lngLat - The longitude and latitude coordinates.
	 * @param {number} radiusInKm - The radius in kilometers for the search.
	 * @param {Object} filter - Optional filter object to apply to the query.
	 * @returns {Array} An array of features within the specified radius around the given coordinates.
	 */
    this.getRenderedDrawnFeatures = function (lngLat, radiusInKm, filter) {
        var bbox;
        var id = this.id;

        var prelayers = [
            id + "-line-cold",
            id + "-fill-cold",
            id + "-circle-cold",
            id + "-icon-cold",
            id + "-fill-select",
            id + "-line-select",
            id + '-point-select',
            id + '-symbol-select'
        ];

        var layers = [];

        prelayers.forEach(function(layer) {
            if (this.map.getLayer(layer)) layers.push(layer);
        }, this)

        this.Layers.getLayers().forEach(function(layer) {
            if (layer.id.includes(id)) return;
            if (this.map.getLayer(layer.id)) layers.push(layer.id);
        }, this)

        var options = { layers: layers };

        if (radiusInKm) {
            var radius = turf.distanceToDegrees(radiusInKm);
            bbox = [this.map.project([lngLat.lng - radius, lngLat.lat - radius]), this.map.project([lngLat.lng + radius, lngLat.lat + radius])];
        } else {
            var point = lngLat ? this.map.project([lngLat.lng, lngLat.lat]) : null;
            bbox = point ? [[point.x - 5, point.y - 5], [point.x + 5, point.y + 5]] : null
        }

        filter ? options.filter = filter : false;
        
        var features = this.map.queryRenderedFeatures(bbox, options);
        var ids = features.map(function(feature) { return feature.parent || feature.properties.parent || feature.id || feature.properties.id; });

        return features && features.length ? this.Features.getFeaturesById(ids) : [];;
    }
    
	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getRenderedSnapFeatures
	 * @description Retrieves rendered mesh index features within a specified radius around a given point on the map.
	 * @param {Object} lngLat - The longitude and latitude coordinates of the center point.
	 * @param {number} radiusInKm - The radius in kilometers within which to search for features.
	 * @param {Object} filter - Optional filter to apply to the query.
	 * @returns {Array} An array of features that fall within the specified radius around the given point.
	 */
    this.getRenderedSnapFeatures = function (lngLat, radiusInKm, filter) {
        if (!this.meshIndex) return [];

        var radius = turf.distanceToDegrees(radiusInKm);
        var bbox = [this.map.project([lngLat.lng - radius, lngLat.lat - radius]), this.map.project([lngLat.lng + radius, lngLat.lat + radius])];
        var options = { layers: [this.statics.constants.layers.MESH + '-line', this.statics.constants.layers.MESH + '-circle'] };
        filter ? options.filter = filter : false;
        var features = this.map.queryRenderedFeatures(bbox, options);
        return features && features.length ? this.meshIndex.getFeaturesFromIndex(features) : [];
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getFeatureById
	 * @description Retrieves a feature by its ID from the Features object.
	 * @param {string} id - The ID of the feature to retrieve.
	 * @returns {boolean|object} Returns the feature object if found, otherwise false.
	 */
    this.getFeatureById = function (id) {
        if (!id) return false;
        return this.Features.getFeatureById(id);
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getFeaturesByLayer
	 * @description This function queries the map for features within a specified radius around a given location from a specific source layer.
	 * @param {string} source - The source layer to query features from.
	 * @param {LngLat} lngLat - The longitude and latitude coordinates of the center point for the query.
	 * @param {number} radiusInKm - The radius in kilometers within which to search for features.
	 * @param {Object} filter - Optional filter object to apply to the query.
	 * @returns {Array} An array of features that match the query criteria.
	 */
    this.getFeaturesByLayer = function (source, lngLat, radiusInKm, filter) {
        var layers = [];
        var bbox;

        this.Layers.getLayers().forEach(function(layer) {
            if (!layer.id.includes(source)) return;
            layers.push(layer.id);
        })

        var options = { layers: layers };

        if (radiusInKm) {
            var radius = turf.distanceToDegrees(radiusInKm);
            bbox = [this.map.project([lngLat.lng - radius, lngLat.lat - radius]), this.map.project([lngLat.lng + radius, lngLat.lat + radius])];
        } else {
            var point = lngLat ? this.map.project([lngLat.lng, lngLat.lat]) : null;
            bbox = point ? [[point.x - 5, point.y - 5], [point.x + 5, point.y + 5]] : null
        }

        filter ? options.filter = filter : false;

        var features = this.map.queryRenderedFeatures(bbox, options);
        var ids = features.map(function(feature) { return feature.parent || feature.properties.parent || feature.id || feature.properties.id; });

        return features && features.length ? this.Features.getFeaturesById(ids) : [];;
    }




	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getSelectedFeatures
	 * @description Retrieves the selected features stored in the selectedFeatures array.
	 * @returns {Array} An array containing the selected features.
	 */
    this.getSelectedFeatures = function () {
        return selectedFeatures;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getSelectedFeatureIds
	 * @description Retrieves the IDs of selected features.
	 * @returns {Array} An array of feature IDs.
	 */
    this.getSelectedFeatureIds = function () {
        return this.getSelectedFeatures().map((feature) => { return feature.parent || feature.properties.parent || feature.id || feature.properties.id; });
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getSelectedFeaturesBbox
	 * @description Retrieves the bounding box of the selected features.
	 * @returns {Array<number>} The bounding box coordinates [minX, minY, maxX, maxY].
	 */
    this.getSelectedFeaturesBbox = function () {
        if (!this.hasSelection()) return null;
        return turf.bbox(turf.featureCollection(this.getSelectedFeatures()));
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getSelectedPropertyNames
	 * @description Retrieves the unique property names of selected features excluding the ID property.
	 * @returns {Array} An array of unique property names.
	 */
    this.getSelectedPropertyNames = function () {
        const id = this.id;
        const names = [];

        this.getSelectedFeatures().forEach((feature) => {
            Object.keys(feature.properties).forEach((propertyName) => {
                if (names.indexOf(propertyName) === -1 && propertyName !== id) {
                    names.push(propertyName);
                }
            });
        });

        return names;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name getSelectedPropertyValues
	 * @description Retrieves the properties of selected features excluding the property with the specified ID.
	 * @returns {Object} An object containing the properties of selected features.
	 */
    this.getSelectedPropertyValues = function  () {
        const id = this.id;
        var props = {};

        this.getSelectedFeatures().forEach(function (feature) { Object.assign(props, feature.properties); });
        if (props[id] !== undefined) { delete props[id]; }
        return props;
    }

	/**
	 * @description This function returns the common geometry type of the selected features. If all selected features have the same geometry type, it returns that type. If the selected features have different geometry types, it returns "illegal".
	 * @function
     * @memberOf module:geoflo
	 * @name getCommonGeometryType
	 * @returns {string|null} The common geometry type or null if different types are present.
	 */
    this.getCommonGeometryType = function () {
        let allFeaturesType = null;

        this.getSelectedFeatures().forEach((feature) => {
            if (allFeaturesType === null) {
                allFeaturesType = feature.geometry.type;
            } else if (feature.geometry.type !== allFeaturesType) {
                allFeaturesType = "illegal";
            }
        });

        if (allFeaturesType === "illegal") {
            return null;
        } else {
            return allFeaturesType;
        }
    }



    this.selectFeature = function (id) {
        var feature = this.getFeatureById(id);
        if (!feature) return false;
        var selected = this.Features.selectFeatures([feature]);
        
        return selected;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name editFeature
	 * @description This function allows editing a feature by providing its ID or using the currently selected feature. It triggers a 'feature.edit' event and sets the mode to 'edit'.
	 * @param {string} id - The ID of the feature to edit.
	 * @param {Object} options - Additional options for editing the feature.
	 * @param {Object} options.feature - The feature object to edit.
	 * @returns {Object} The edited feature.
	 */
    this.editFeature = function (id, options={}) {
        var feature = options.feature || this.getFeatureById(id);
        
        if (!feature) {
            if (!this.hasSingleSelection()) return false;
            feature = this.getSelectedFeatures()[0];
        }

        options.id = feature.id;
        options.mode = 'edit';
        options.feature = feature;

        this.fire('feature.edit', { feature: feature, id: feature.id });
        this.setMode(options);
        return feature;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name cancelEdit
	 * @description This function cancels the current edit mode if it is in 'draw' mode and deactivates the editing feature.
	 * @param {boolean} standby - Indicates whether the cancel operation is standby.
	 * @param {object} feature - The feature to be deactivated. If not provided, the editing feature will be used.
	 * @returns {boolean} Returns false if the current mode is not 'draw', otherwise deactivates the editing feature.
	 */
    this.cancelEdit = function (standby, feature) {
        if (this.currentMode.id !== 'draw') return false;
        return this.currentMode.deactivate(true, standby, feature || this.editing);
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name saveEdit
	 * @description Saves the edited feature using the currentModes saveEdit method.
	 * @return {any} The result of the saveEdit method of the current mode.
	 */
    this.saveEdit = function () {
        return this.currentMode.saveEdit();
    }





	/**
	 * @function
     * @memberOf module:geoflo
	 * @name addFeatures
	 * @description Adds features to the map and optionally zooms to them.
	 * @param {Array} features - Array of features to be added to the map.
	 * @param {boolean} noZoom - Flag to indicate whether to zoom to the added features.
	 */
    this.addFeatures = function (features, noZoom) {
        if (!features) return false;
        if (features.features) features = features.features;
        if (!Array.isArray(features)) features = [features];
        if (!features.length) return false;

        this.Features.addFeatures(features);
        !noZoom ? this.zoomToFeatures() : false;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name addFeaturesToSelected
	 * @description This function adds the provided features to the selected features list, updates the map sources, sets buttons and updates the text.
	 * @param {Array} features - The features to be added to the selected features list.
	 */
    this.addFeaturesToSelected = function (features, options={}) {
        if (!features || !features.length) return false;

        this.getSelectedFeatures().push(...features);
        this.setViewport();
        this.setButtons();
        this.map.getSource(this.statics.constants.sources.SELECT).setData(turf.featureCollection(this.getSelectedFeatures()));
        this.map.getSource(this.statics.constants.sources.VERTEX).setData(turf.featureCollection(this.getSelectedFeatures()));
        this.Features.setText(features);
        this.Features.updateFeatures(features);

        this.getSelectedFeatures().forEach(function (feature) {
            const source = feature.source;
            const layer = geoflo.Layers.getLayer(source, true);

            const type = layer ? layer.details.type : false;
            if (!type || type !== 'Image') return;

            const style = !layer ? false : layer.style;
            if (!style) return false;

            selectLayer.forEach(function (l) {
                if (!l.metadata || !l.metadata.types || !l.metadata.types.includes(type)) return;

                const styleType = style[type.toLowerCase()];
                if (!styleType) return false;

                if (styleType.paint) {
                    Object.entries(styleType.paint).forEach(function (entry) {
                        const key = entry[0];
                        const value = entry[1];
                        l.setPaintProperty(key, value);
                    });
                } else if (styleType.layout) {
                    Object.entries(styleType.layout).forEach(function (entry) {
                        const key = entry[0];
                        const value = entry[1];
                        l.setLayoutProperty(key, value);
                    });
                }
            });
        });

        if (options.zoom) this.zoomToFeatures(features, { center: options.center });

        if (options.text) {
            this.Layers.addTextLayer({
                select: true,
                ids: options.text.ids,
                field: options.text.field || 'text',
                layout: options.text.layout || {
                    'text-transform': 'uppercase',
                    'text-size': 10,
                    'text-offset': [0, 0.5]
                }
            });
        }
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name addFeaturesToMesh
	 * @description Adds features to the mesh index and updates its data.
	 * @param {Array} features - An array of features to be added to the mesh.
	 * @returns {Array} The array of features that were added to the mesh.
	 */
    this.addFeaturesToMesh = function (features=[]) {
        if (!features.length) return false;
        this.updateMeshData(features);
        return features;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name addGamepad
	 * @description Adds a gamepad to the list of available gamepads and fires an event. Fires a custom event 'gamepad.add' with the gamepad object.
	 * @param {Object} gamepad - The gamepad object to be added.
	 * @returns {boolean} Returns false if the 'Gamepad' plugin is not available.
	 */
    this.addGamepad = function (gamepad) {
        this.gamepads[gamepad.index] = new _src_Gamepad_js__WEBPACK_IMPORTED_MODULE_17__["default"](gamepad);
        this.fire('gamepad.add', { gamepad: gamepad });
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name addTooltip
	 * @description Attaches a tooltip by calling setTooltip to a specified element within a parent element.
	 * @param {Element} parent - The parent element to which the tooltip will be attached.
	 * @param {Element} element - The element to which the tooltip will be applied.
	 * @param {Object} options - The options for customizing the tooltip.
	 * @param {Element} appendTo - The element to which the tooltip will be appended.
	 */
    this.addTooltip = function (parent, element, options, appendTo) {
        if (!this.setTooltip) return false;

        this.setTooltip(element, {
            parent: parent,
            appendTo: appendTo,
            options: options
        })
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name addPlugin
	 * @description Adds a plugin to the plugins object of the current instance.
	 * @param {Object} plugin - The plugin object to be added.
	 * @param {string} plugin.id - The unique identifier of the plugin.
	 * @throws {Error} If no Plugin ID is provided.
	 */
    this.addPlugin = function (plugin) {
        if (!plugin.id) throw new Error('No Plugin ID provided')
        var id = plugin.id;
        this.plugins[id] = plugin;
    }



    

	/**
	 * @description Removes the selection of features based on the provided feature ID. If no ID is provided, all selected features are deselected.
	 * @function
     * @memberOf module:geoflo
	 * @name removeSelection
	 * @param {string} id - The ID of the feature to be deselected.
	 * @returns {number} The number of features that were deselected.
	 */
    this.removeSelection = function (id, options={}) {
        this.removePopup();
        if (!this.hasSelection()) return this.Features.setText(), this.updateFeatures();
        var features = this.Utilities.clone(this.getSelectedFeatures());
        this.Features.addFeatures(features, true, id);
        this.getSelectedFeatures().splice(0, features.length);
        this.map.getSource(this.statics.constants.sources.SELECT).setData(turf.featureCollection([]));
        this.map.getSource(this.statics.constants.sources.VERTEX).setData(turf.featureCollection([]));
        this.Features.setText();
        this.updateFeatures(features);
        this.setButtons();
        if (options.extent) this.setViewport(), this.setExtent();
        if (options.removeText) this.Layers.removeTextLayer();
        return features.length;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name removeControls
	 * @description This function is responsible for removing controls.
	 * @params {none} No parameters needed.
	 */
    this.removeControls = function () {
        console.log('NEED TO REMOVE CONTROLS')
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name removeGamepad
	 * @description Removes a gamepad from the list of connected gamepads and triggers the onDisconnect event. Fires a custom event 'gamepad.remove' with the gamepad object.
	 * @param {Object} gamepad - The gamepad object to be removed.
	 * @returns {boolean} Returns false if the gamepad is not found in the list.
	 */
    this.removeGamepad = function (gamepad) {
        if (!this.gamepads[gamepad.index]) return false;
        this.gamepads[gamepad.index].onDisconnect(gamepad);
        delete this.gamepads[gamepad.index]
        this.fire('gamepad.remove', { gamepad: gamepad });
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name removeFeatures
	 * @description Removes specified features from the map. If no layers are provided, all features are removed. If the layers parameter is not an array, the function returns false.
	 * @param {Array} layers - An array of layers to remove features from.
	 * @param {Object} options - Additional options for removing features.
	 */
    this.removeFeatures = function (layers, options) {
        if (!layers) return this.Features.deleteFeatures();
        if (!Array.isArray(layers)) return false;
        this.Features.removeFeatures(layers, true);
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name removeFeature
	 * @description Removes a feature from the Features collection and fires an event if edit mode is not enabled. Fires a custom event 'feature.delete' with the ID and feature object.
	 * @param {string} id - The ID of the feature to be removed.
	 * @param {boolean} edit - A flag indicating whether edit mode is enabled.
	 * @returns {boolean} - Returns true if the feature was successfully removed, otherwise false.
	 */
    this.removeFeature = function (id, edit) {
        var removed = id ? this.Features.removeFeatures(id, edit) : false;
        !edit ? this.fire('feature.delete', { id: id, feature: removed }) : false;
        return removed;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name removePopup
	 * @description Removes the popup element from the DOM.
	 * @return {boolean} Returns true if the popup was successfully removed, false otherwise.
	 */
    this.removePopup = function () {
        return this.popup && this.popup.remove ? this.popup.remove() : this.currentMode.popup && this.currentMode.popup.remove ? this.currentMode.popup.remove() : false;
    }






	/**
	 * @function
     * @memberOf module:geoflo
	 * @name updateMeshData
	 * @description This function updates the mesh data on the map by adding new features to the mesh index and updating the map source with the new data. If the mesh index is not available or the reset flag is set to true, the mesh index is reset before adding new features.
	 * @param {Array} features - An array of features to be added to the mesh index.
	 * @param {boolean} reset - A flag indicating whether to reset the mesh index before adding new features.
	 * @returns {Object} The updated feature collection that was set on the map source.
	 */
    this.updateMeshData = function (features=[], reset) {
        if (!this.meshIndex || reset) this.meshIndex = new _src_Mesh_js__WEBPACK_IMPORTED_MODULE_6__["default"]([]);
        this.meshIndex.addNewFeatures(features);

        var source = this.statics.constants.sources.MESH;
        var features = turf.featureCollection(this.meshIndex.getFeatures());

        this.map.getSource(source).setData(features);
        this.fire('mesh.update', { features: features });
        return features;
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name updateSelectedProperties
	 * @description This function updates the selected properties of features based on the new properties provided while keeping specified properties.
	 * @param {Object} newProperties - The new properties to update the features with.
	 * @param {Array} propertiesToKeep - An array of property names to keep while updating the features.
	 */
    this.updateSelectedProperties = function (newProperties, propertiesToKeep) {
        this.getSelectedFeatures().forEach((feature) => {
            const savedId = feature.parent || feature.properties.parent || feature.id || feature.properties.id;
            const baseProperties = {};

            propertiesToKeep.forEach((propertyName) => {
                if (feature.properties[propertyName]) baseProperties[propertyName] = feature.properties[propertyName];
            });

            feature.properties = Object.assign(baseProperties, newProperties, { id: savedId });
        });
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name updateOrientation
	 * @description Updates the orientation of the user based on the provided options.
	 * @param {Object} options - An object containing the options for updating the orientation.
	 * @returns {string} The location of the user after updating the orientation.
	 */
    this.updateOrientation = function (options) {
        if (!this.Locate) return false;
        this.Locate.update(options);
        return this.Locate.locate;
    }

    /**
	 * @function
     * @memberOf module:geoflo
     * @name updateFeatures
     * @description Updates the features of a layer based on the provided features.
     * @param {Array} features - An array of features to update the layer with.
     * @returns {Array} The updated features of the layer.
     */
    this.updateFeatures = function (features) {
        return this.Features.updateFeatures(features);
    }

    

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name saveFeatures
	 * @description This function prepares the features of a layer for export in different formats such as KMZ, GPX, and GeoJSON. It styles the features, creates necessary metadata, and generates the export files.
	 * @param {Object} layer - The layer object containing the features to be exported.
	 * @returns {void}
	 */
    this.saveFeatures = function (layer) {
        const id = this.id;
        var fc, folderName;

        if (!layer) {
            if (this.hasSelection()) {
                folderName = 'Selected Features';
                fc = turf.featureCollection(this.getSelectedFeatures());
            } else {
                folderName = folderName = 'All Features';
                fc = turf.featureCollection(this.Features.getColdFeatures());
            }
        } else {
            if (!layer.id || !layer.name) return window.alert('Layer ID and Name are required!');
            folderName = layer.name + '-' + layer.id;
            fc = turf.featureCollection(this.Features.getFeaturesByLayer(layer));
        }

        if (!fc.features.length) return window.alert('No Features to Export!');

        var features = geoflo.Utilities.cloneDeep(fc.features);

		features = features.map(function (f) {
            f.style = {};
            f.style['stroke'] = f.properties.style && f.properties.style.primaryColor ? f.properties.style.primaryColor : this.options.colors.primaryColor;
            f.style['stroke-width'] = 3;
            f.style['fill'] = f.properties.style && f.properties.style.secondaryColor ? f.properties.style.secondaryColor : this.options.colors.secondaryColor;
            f.style['fill-opacity'] = 1;
			
            f.properties.id = f.id;
            f.properties.unit = f.geometry.unit;
            f.properties.units = f.geometry.units;

            delete f.properties.style;
            delete f.geometry.unit;
            delete f.geometry.units;

			return f;
		}, this);

        fc = turf.featureCollection(features);

        var d = new Date();
        var name = id + "_export - " + (d.getMonth() + 1) + "." + d.getDate() + "." + d.getFullYear() + "_" + d.getHours() + d.getMinutes();

        const extensions = ['kmz', 'gpx', 'geojson'];
        const zip = new window.JSZip();
        const description = {
			Id: this.id,
            Version: this.version,
			Features: fc.features.length
		}

        extensions.forEach(function (t) {
            const folder = zip.folder(folderName + ' ' + t.toUpperCase());

			switch (t) {
				case 'kmz':
                    var table = document.createElement('table');
                    var tableBody = document.createElement('tbody');
                    table.appendChild(tableBody);

					Object.entries(description).forEach(function (entry) {
						var h = entry[0];
						var d = entry[1];

                        var row = document.createElement('tr');
                        var header = document.createElement('th');
                        var data = document.createElement('td');

                        header.textContent = h + ': ';
                        data.textContent = d;

                        row.appendChild(header);
                        row.appendChild(data);

						tableBody.appendChild(row);
					});

					var kml = omnivore.toKML(fc, {
						name: 'id',
                        simplestyle: true,
						description: description.Id,
						documentName: folderName,
						documentDescription: table.innerHTML
					});

					var blob = new Blob([kml], { type: "application/vnd.google-earth.kml+xml" });
					folder.file(folderName.toLowerCase() + ".kml", blob);
					break;
				case 'gpx':
					features.forEach(function (f) {
						var title = f.id;
						var feature = turf.featureCollection([f]);
						var gpx = omnivore.toGPX(feature, {
							creator: description.Id,
							featureTitle: function (p) { return p.id; }
						})

						folder.file(folderName.toLowerCase() + '_' + title + ".gpx", gpx);
					})
					break;
				case 'geojson':
					var geojson = fc;
					var blob = new Blob([JSON.stringify(geojson)], { type: "application/geojson" });
					folder.file(folderName.toLowerCase() + ".geojson", blob);
					break;
			}
		})

        zip.generateAsync({ type: "blob" }).then(function (content) {
            var blob = new Blob([content], { type: "application/zip;charset=utf-8" });

            window.geoflo.fire('features.export', { features: features, blob: blob, date: d, name: name });

            var tempLink = document.createElement("a");
            tempLink.setAttribute('href', URL.createObjectURL(blob));
            tempLink.setAttribute('download', name + ".zip");
            tempLink.click();
            URL.revokeObjectURL(tempLink.href);
        });
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name loadFeatures
	 * @description This function creates an input element of type file, allows multiple file selection, and triggers a file selection event. It then processes the selected files by calling the Utilities.processFiles function.
	 * @params {Event} event - The event object triggered by file selection.
	 * @returns {void}
	 */
    this.loadFeatures = function () {
        const input = document.createElement('input');
        input.type = 'file';
        input.setAttribute('multiple', 'multiple');
        input.addEventListener('change', handleSelection, false);
        input.click();

        function handleSelection(event) {
            const files = [];

            for (let x = 0; x < event.target.files.length; x++) {
                files.push(event.target.files[x]);
            }

            geoflo.Utilities.processFiles(files, processFiles);
        }

        function processFiles (file, name, ext) {
            var features = [];
        
            if (ext === 'geojson' || ext === 'json') {
                features = JSON.parse(file);
            } else if (omnivore[ext]) {
                omnivore[ext].parse(file, null, { addData: function (feats) { features = feats; } });
            } else {
                return alert("File type not supported: " + ext);
            }

            if (features.features) features = features.features;
            if (!Array.isArray(features)) features = [features];

            features.forEach(function (feature) {
                feature.properties.import = true;
                feature.source = feature.source || feature.properties.source || geoflo.statics.constants.sources.COLD;
            })
            
            geoflo.fire('features.import', { features: features, file: file, ext: ext, name: name })
            geoflo.addFeatures(features);
        }
    }


	/**
	 * @function
     * @memberOf module:geoflo
	 * @name moveMapAlongLine
	 * @description This function animates the movement of the map along a specified line. The camera follows the route, ensuring synchronized movement.
	 * @param {Array} line - The line representing the route on the map.
	 * @returns {void}
	 */
    this.moveMapAlongLine = function (line) {
        if (!line) return;

        const animationDuration = 80000;
        const cameraAltitude = 4000;
        // get the overall distance of each route so we can interpolate along them
        const routeDistance = turf.lineDistance(line);
        const cameraRouteDistance = turf.lineDistance(line);

        let start;

        console.log(line, routeDistance, cameraRouteDistance)

        function frame(time) {
            if (!start) start = time;
            // phase determines how far through the animation we are
            const phase = (time - start) / animationDuration;

            // phase is normalized between 0 and 1
            // when the animation is finished, reset start to loop the animation
            if (phase > 1) {
                // wait 1.5 seconds before looping
                setTimeout(() => {
                    start = 0.0;
                }, 1500);
            }

            // use the phase to get a point that is the appropriate distance along the route
            // this approach syncs the camera and route positions ensuring they move
            // at roughly equal rates even if they don't contain the same number of points
            const alongRoute = turf.along( turf.lineString(line), routeDistance * phase ).geometry.coordinates;
            const alongCamera = turf.along( turf.lineString(line), cameraRouteDistance * phase ).geometry.coordinates;
            const camera = geoflo.map.getFreeCameraOptions();

            // set the position and altitude of the camera
            camera.position = mapboxgl.MercatorCoordinate.fromLngLat({ lng: alongCamera[0], lat: alongCamera[1] }, cameraAltitude );

            // tell the camera to look at a point along the route
            camera.lookAtPoint({
                lng: alongRoute[0],
                lat: alongRoute[1]
            });

            geoflo.map.setFreeCameraOptions(camera);

            window.requestAnimationFrame(frame);
        }

        window.requestAnimationFrame(frame);
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name refreshMeshData
	 * @description This function refreshes the mesh data by triggering a 'snapping.refresh' event with the current mesh features.
	 * @params {void} - No parameters needed for this function.
	 */
    this.refreshMeshData = function () {
        if (!this.meshIndex) return;
        if (this.mapMoving) return;
        //this.deleteMeshData();
        //this.addFeaturesToMesh(this.getDrawnFeatures())
        this.fire('snapping.refresh', { features: this.meshIndex.getFeatures() })
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name deleteMeshData
	 * @description Deletes the mesh data by updating it with an empty array and triggering a 'snapping.delete' event with the features from the mesh index.
	 * @params {Array} features - The features to update the mesh data with.
	 * @params {Boolean} triggerEvent - A flag to indicate whether to trigger the 'snapping.delete' event.
	 */
    this.deleteMeshData = function () {
        this.updateMeshData([], true);
        this.fire('snapping.delete', { features: this.meshIndex.getFeatures() })
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name deleteUserData
	 * @description This function allows the user to delete selected features or all features based on confirmation prompts. It updates the map data and resets various properties.
	 * @params {void} - No parameters required.
	 * @returns {void} - No return value.
	 */
    this.deleteUserData = function () {
        var id

        if (this.hasSingleSelection()) {
            if (window.confirm('Delete Selected Feature?')) {
                var feature = this.getSelectedFeatures()[0];
                id = feature.parent || feature.properties.parent || feature.id || feature.properties.id;
                this.Features.removeFeatures(id, true);
                this.meshIndex ? this.meshIndex.removeFeature(id) : false;
                this.fire('feature:delete', { features: this.Features.getColdFeatures() })
            } else {
                return;
            }
        } else {
            if (window.confirm('Delete All Features?')) {
                this.Features.deleteFeatures();
                this.fire('features.delete', { features: this.Features.getColdFeatures() })
            } else {
                return;
            }
        }
        
        this.hotFeature = null;
        this.snapFeature = null;
        this.lastClick = null;
        this.firstClick = null;
        this.drawStarted = null;

        this.removeSelection(id);

        this.map.getSource(this.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
        this.map.getSource(this.statics.constants.sources.HOT).setData(turf.featureCollection([]));
        this.map.getSource(this.statics.constants.sources.HOTTEXT).setData(turf.featureCollection([]));

        if (this.editMode) {
            this.editMode = false;
            this.setMode();
        }
    }

    this.doubleClickZoom = {
        enable(map) {
            setTimeout(() => {
                if (!map || !map.doubleClickZoom) return;
                map.doubleClickZoom.enable();
            }, 0);
        },
        disable(map) {
            setTimeout(() => {
                if (!map || !map.doubleClickZoom) return;
                map.doubleClickZoom.disable();
            }, 0);
        }
    };


    

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name hideSelectedFeatures
	 * @description This function hides the selected features on the map by moving them to a hidden features array and updating the map sources.
	 * @params {Array} hiddenFeatures - Array to store the hidden features.
	 * @params {Array} selectedFeatures - Array of selected features on the map.
	 * @returns {void}
	 */
    this.hideSelectedFeatures = function () {
        if (hiddenFeatures.length > 0) {
            this.getSelectedFeatures().push(...hiddenFeatures);
            hiddenFeatures.splice(0, hiddenFeatures.length);
        } else if (this.hasSelection()) {
            hiddenFeatures.push(...this.getSelectedFeatures().splice(0, this.getSelectedFeatures().length));
        }

        this.map.getSource(this.statics.constants.sources.SELECT).setData(turf.featureCollection(this.getSelectedFeatures()));
        this.map.getSource(this.statics.constants.sources.VERTEX).setData(turf.featureCollection(this.getSelectedFeatures()));
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name combineSelectedFeatures
	 * @description Combines selected features based on their geometry type.
	 * @params {void}
	 * @returns {void}
	 */
    this.combineSelectedFeatures = function () {
        if (this.mode === this.statics.constants.modes.SELECT) {
            if (this.hasSelection()) {
                var allFeaturesType = this.getCommonGeometryType();

                if (allFeaturesType === "Polygon") {
                    var polygons = [];

                    this.forEachSelectedFeature(function(polygon) {
                        polygons.push.apply(polygons, consumableArray(polygon.geometry.coordinates));
                    });

                    if (polygons.length > 0) {
                        this.Features.addFeatures([turf.polygon(polygons, this.getSelectedPropertyValues())]);
                        this.removeSelection();
                    }
                } else if (allFeaturesType === "LineString") {
                    var coords = geoflo.Utilities.combineSameTypeFeatures(this.getSelectedFeatures());

                    if (coords.length > 0) {
                        this.Features.addFeatures([turf.lineString(coords, this.getSelectedPropertyValues())]);
                        this.removeSelection();
                    }
                } else {
                    console.error("Only objects of the same type can be combined, " + "i.e. lines with lines and polygons with polygons");
                }
            }
        } else {
            console.error("Combine can only be executed in selection mode");
        }
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name moveSelectedFeatures
	 * @description This function checks if moving is enabled and if there are selected features of LineString type. If so, it offsets the selected LineString features by the specified distance in the provided direction.
	 * @param {number} direction - The direction in which to move the selected features (1 for forward, -1 for backward).
	 * @returns {boolean} Returns false if moving is not enabled or there are no selected LineString features.
	 */
    this.moveSelectedFeatures = function (direction) {
        if (!this.options.moving || !this.options.moving.enable) { return false }
        var distance = this.options.moving.distance;

        if (this.mode === this.statics.constants.modes.SELECT) {
            if (this.hasSelection()) {
                var allFeaturesType = this.getCommonGeometryType();

                if (allFeaturesType === "LineString") {
                    var newSelectedFeatures = [];
                    this.forEachSelectedFeature(function(feature) { newSelectedFeatures.push(turf.lineOffset(feature, distance * direction)); });
                    this.setSelectedFeatures(newSelectedFeatures);
                }
            }
        }
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name moveFeature
	 * @description This function calculates the new coordinates of a feature based on the direction and distance provided. NOT WORKING YET.
	 * @param {Object} feature - The feature object to be moved.
	 * @param {number} direction - The direction in which the feature should be moved (1 for forward, -1 for backward).
	 * @returns {Array} An array of new coordinates for the feature after moving.
	 */
    this.moveFeature = function (feature, direction) {
        return;
        if (!this.options.moving || !this.options.moving.enable) return false
        
        var distance = this.options.moving.distance;
        var result = [];
        var lastDestinationPoint = null;
        var coordinates = feature.geometry.coordinates;

        for (var index = 0; index < coordinates.length; index++) {
            var moveBearing = 0;
            var startPoint = null;
            var middlePoint = coordinates[index];

            if (index === 0) {
                var endPoint = coordinates[index + 1];
                var secondBearing = turf.bearing(middlePoint, endPoint);
                moveBearing = secondBearing - 90;
                
                if (moveBearing < -180) {
                    moveBearing += 180;
                }
            } else if (index === coordinates.length - 1) {
                startPoint = coordinates[index - 1];
                var firstBearing = turf.bearing(middlePoint, startPoint);
                moveBearing = firstBearing - 90;

                if (moveBearing < -180) {
                    moveBearing += 180;
                }
            } else {
                startPoint = coordinates[index - 1];
                var _endPoint = coordinates[index + 1];

                var _firstBearing = turf.bearing(middlePoint, startPoint);
                var _secondBearing = turf.bearing(middlePoint, _endPoint);

                var angle = 0;

                if (_firstBearing < 0 && _secondBearing < 0 || _firstBearing > 0 && _secondBearing > 0) {
                    angle = Math.abs(Math.abs(_firstBearing) - Math.abs(_secondBearing));
                    moveBearing = _firstBearing < 0 ? _firstBearing - angle / 2 : _firstBearing + angle / 2;
                } else {
                    angle = Math.abs(Math.abs(_firstBearing) + Math.abs(_secondBearing));
                    moveBearing = _firstBearing < 0 ? _firstBearing - angle / 2 : (angle / 2 - _firstBearing) * -1;
                }
            }

            var destinationPoint = turf.destination(middlePoint, direction * distance, moveBearing);

            if (lastDestinationPoint && startPoint) {
                var crossingLine = turf.lineString([lastDestinationPoint.geometry.coordinates, destinationPoint.geometry.coordinates]);
                var intersectFc = turf.lineIntersect(turf.lineString([startPoint, middlePoint]), crossingLine);

                if (intersectFc.features.length > 0) {
                    destinationPoint = turf.destination(middlePoint, direction * -distance, moveBearing);
                }
            }

            result.push(destinationPoint.geometry.coordinates);
            lastDestinationPoint = destinationPoint;
        }

        return result;
    }

    

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name forEachSelectedFeature
	 * @description Iterates over each selected feature and applies a handler function to it.
	 * @param {Function} handler - The function to be applied to each selected feature.
	 * @returns {void}
	 */
    this.forEachSelectedFeature = function (handler) {
        this.getSelectedFeatures().forEach(handler);
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name zoomToFeatures
	 * @description This function zooms to the provided features on the map. If no features are provided, it zooms to the selected features, cold features, or the map extent if no other features are available.
	 * @param {Array} features - The features to zoom to on the map.
	 * @param {Object} options - Additional options for zooming (default: {}).
	 * @returns {boolean} Returns false if no features are available to zoom to.
	 */
    this.zoomToFeatures = function (features, options={}) {
        features = features || (this.hasSelection() ? this.getSelectedFeatures() : this.getDrawnFeatures());
        this.setExtent(features, false, options);
    }

	/**
	 * @function
     * @memberOf module:geoflo
	 * @name createPolygon
	 * @description Creates a polygon from selected LineString features and adds it to the map.
	 * @params {Array} selectedFeatures - An array of selected features to be combined into a polygon.
	 * @params {Object} selectedPropertyValues - Property values of the selected features.
	 * @returns {void}
	 */
    this.createPolygon = function () {
        if (this.mode === this.statics.constants.modes.SELECT) {
            if (this.hasSelection()) {
                var allFeaturesType = this.getCommonGeometryType();

                if (allFeaturesType === "LineString") {
                    var coords = geoflo.Utilities.combineSameTypeFeatures(this.getSelectedFeatures());

                    if (coords.length > 0) {
                        if (!geoflo.Utilities.isPointEqual(coords[0], coords[coords.length - 1])) {
                            coords.push(coords[0]);
                        }

                        this.addFeaturesToSelected([turf.polygon([coords], this.getSelectedPropertyValues())]);
                        this.removeSelection();
                    }
                } else {
                    console.error("Only objects of type LineString can be combined into a polygon");
                }
            }
        } else {
            console.error("Create polygon can only be executed in selection mode");
        }
    }


    this.onLoad = function (event) {
        if (!event.target || !event.target.getContainer) throw new Error('MapboxGL map object is required!');

        this.container = event.target._container;
        this.viewport ? this.container.insertBefore(this.viewport, this.container.firstChild) : false;

        event.target.off('style.load', this.onStyleLoad.bind(this));
        event.target.on('style.load', this.onStyleLoad.bind(this));

        if (this.options.map.maxPitch) event.target.setMaxPitch(this.options.map.maxPitch);
        if (this.options.map.maxZoom) event.target.setMaxZoom(this.options.map.maxZoom);
        if (this.options.map.minPitch) event.target.setMinPitch(this.options.map.minPitch);
        if (this.options.map.minZoom) event.target.setMinZoom(this.options.map.minZoom);

        return this.load(event.target);
    }

    this.onStyleLoad = function (event) {
        setTimeout(function() { geoflo.redraw(); }, 500)
    }

    this.onMapMove = function (event) {

    }

    this.initialize();
};

const geoflo = new GeoFlo();

_src_Utilities_js__WEBPACK_IMPORTED_MODULE_2__["default"].prototype.geoflo = geoflo;
_src_Features_js__WEBPACK_IMPORTED_MODULE_5__["default"].prototype.geoflo = geoflo;
_src_Layers_js__WEBPACK_IMPORTED_MODULE_4__["default"].prototype.geoflo = geoflo;
_src_Control_js__WEBPACK_IMPORTED_MODULE_16__["default"].prototype.geoflo = geoflo;
_src_Locate_js__WEBPACK_IMPORTED_MODULE_10__["default"].prototype.geoflo = geoflo;
_src_Mesh_js__WEBPACK_IMPORTED_MODULE_6__["default"].prototype.geoflo = geoflo;
_src_Draw_js__WEBPACK_IMPORTED_MODULE_9__["default"].prototype.geoflo = geoflo;
_src_Select_js__WEBPACK_IMPORTED_MODULE_8__["default"].prototype.geoflo = geoflo;
_src_Gamepad_js__WEBPACK_IMPORTED_MODULE_17__["default"].prototype.geoflo = geoflo;
_src_Styles_js__WEBPACK_IMPORTED_MODULE_3__["default"].prototype.geoflo = geoflo;
_src_Snapping_js__WEBPACK_IMPORTED_MODULE_11__["default"].prototype.geoflo = geoflo;
_src_Pinning_js__WEBPACK_IMPORTED_MODULE_12__["default"].prototype.geoflo = geoflo;
_src_Routing_js__WEBPACK_IMPORTED_MODULE_13__["default"].prototype.geoflo = geoflo;
_src_Exploring_js__WEBPACK_IMPORTED_MODULE_14__["default"].prototype.geoflo = geoflo;
_src_Painting_js__WEBPACK_IMPORTED_MODULE_15__["default"].prototype.geoflo = geoflo;


async function loadScript(url) {
    try {
        const response = await fetch(url);

        if (response.ok) {
            const scriptText = await response.text();
            const script = document.createElement('script');
            script.textContent = scriptText;
            document.head.appendChild(script);
        } else {
            console.error(`Failed to load script from ${url}. Status: ${response.status}`);
        }
    } catch (error) {
        console.error(`Error loading script: ${error.message}`);
    }
}

async function loadStylesheet(url) {
    try {
        const response = await fetch(url);

        if (response.ok) {
            const scriptText = await response.text();
            const script = document.createElement('style');
            script.textContent = scriptText;
            document.head.prepend(script);
        } else {
            console.error(`Failed to load script from ${url}. Status: ${response.status}`);
        }
    } catch (error) {
        console.error(`Error loading stylesheet: ${error.message}`);
    }
}


function isMobile() {
    const e = /(iphone|ipod|ipad|android|iemobile|blackberry|bada)/.test(window.navigator.userAgent.toLowerCase());
    return e || (navigator.userAgent.includes("Mac") && "ontouchend"in document)
}

async function ready (id) {
    var count = 0;

    return new Promise(async function (resolve, reject) {
        var ready = setInterval(function() {
            var element = document.getElementById(id);
            
            if (count === 10000) {
                clearInterval(ready);
                return reject(false);
            }

            if (!element) return count++;

            clearInterval(ready);
            return resolve(element);
        }, 1);
    })
}

async function loaded (geoflo) {
    return new Promise(async function (resolve, reject) {
        var ready = setInterval(function() {
            if (!geoflo.isLoaded) return false;
            clearInterval(ready);
            return resolve(geoflo.isLoaded);
        }, 1);
    })
}

function buildMapbox () {
    const DOM = {
        create: function create (tagName, className, container) {
            const el = window.document.createElement(tagName);
            if (className !== undefined) el.className = className;
            if (container) container.appendChild(el);
            return el;
        }
    }

    // Override to add a Top-Center
    mapboxgl.Map.prototype._setupContainer = function () {
        const container = this._container;
        container.classList.add('mapboxgl-map');

        const missingCSSCanary = this._missingCSSCanary = DOM.create('div', 'mapboxgl-canary', container);
        missingCSSCanary.style.visibility = 'hidden';
        this._detectMissingCSS();

        const canvasContainer = this._canvasContainer = DOM.create('div', 'mapboxgl-canvas-container', container);
        if (this._interactive) {
            canvasContainer.classList.add('mapboxgl-interactive');
        }

        this._canvas = DOM.create('canvas', 'mapboxgl-canvas', canvasContainer);
        // $FlowFixMe[method-unbinding]
        this._canvas.addEventListener('webglcontextlost', this._contextLost, false);
        // $FlowFixMe[method-unbinding]
        this._canvas.addEventListener('webglcontextrestored', this._contextRestored, false);
        this._canvas.setAttribute('tabindex', '0');
        this._canvas.setAttribute('aria-label', this._getUIString('Map.Title'));
        this._canvas.setAttribute('role', 'region');

        this._updateContainerDimensions();
        this._resizeCanvas(this._containerWidth, this._containerHeight);

        const controlContainer = this._controlContainer = DOM.create('div', 'mapboxgl-control-container', container);
        const positions = this._controlPositions = {};

        ['top-left', 'top-right', 'top-center', 'bottom-left', 'bottom-right'].forEach((positionName) => {
            positions[positionName] = DOM.create('div', `mapboxgl-ctrl-${positionName}`, controlContainer);
        });

        // $FlowFixMe[method-unbinding]
        this._container.addEventListener('scroll', this._onMapScroll, false);
    }
}


})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSx5REFBeUQsY0FBYztBQUN2RTtBQUNBLGlCQUFpQjtBQUNqQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNB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Ozs7OztBQ3ZxQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7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QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYiwwQkFBMEI7QUFDMUIsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsMEJBQTBCO0FBQzFCLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsMEJBQTBCO0FBQzFCLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFD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QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtB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OztBQUVBLGlFQUFlLFFBQVE7Ozs7Ozs7Ozs7Ozs7O0FDenJCdkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixHQUFHO0FBQzVCLHlCQUF5QixHQUFHO0FBQzVCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFD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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QStDLGNBQWM7QUFDN0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVix3REFBd0QsSUFBSSxZQUFZLGdCQUFnQjtBQUN4RjtBQUNBLE1BQU07QUFDTixtREFBbUQsY0FBYztBQUNqRTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EseUVBQXlFLGFBQWE7QUFDdEYsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0Bzb2x1dGVncmF0ZS9nZW9mbG8tc2RrLy4vc3JjL0NvbnRyb2wuanMiLCJ3ZWJwYWNrOi8vQHNvbHV0ZWdyYXRlL2dlb2Zsby1zZGsvLi9zcmMvRHJhdy5qcyIsIndlYnBhY2s6Ly9Ac29sdXRlZ3JhdGUvZ2VvZmxvLXNkay8uL3NyYy9FdmVudHMuanMiLCJ3ZWJwYWNrOi8vQHNvbHV0ZWdyYXRlL2dlb2Zsby1zZGsvLi9zcmMvRXhwbG9yaW5nLmpzIiwid2VicGFjazovL0Bzb2x1dGVncmF0ZS9nZW9mbG8tc2RrLy4vc3JjL0ZlYXR1cmVzLmpzIiwid2VicGFjazovL0Bzb2x1dGVncmF0ZS9nZW9mbG8tc2RrLy4vc3JjL0dhbWVwYWQuanMiLCJ3ZWJwYWNrOi8vQHNvbHV0ZWdyYXRlL2dlb2Zsby1zZGsvLi9zcmMvTGF5ZXJzLmpzIiwid2VicGFjazovL0Bzb2x1dGVncmF0ZS9nZW9mbG8tc2RrLy4vc3JjL0xvY2F0ZS5qcyIsIndlYnBhY2s6Ly9Ac29sdXRlZ3JhdGUvZ2VvZmxvLXNkay8uL3NyYy9NZXNoLmpzIiwid2VicGFjazovL0Bzb2x1dGVncmF0ZS9nZW9mbG8tc2RrLy4vc3JjL09wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vQHNvbHV0ZWdyYXRlL2dlb2Zsby1zZGsvLi9zcmMvUGFpbnRpbmcuanMiLCJ3ZWJwYWNrOi8vQHNvbHV0ZWdyYXRlL2dlb2Zsby1zZGsvLi9zcmMvUGlubmluZy5qcyIsIndlYnBhY2s6Ly9Ac29sdXRlZ3JhdGUvZ2VvZmxvLXNkay8uL3NyYy9Sb3V0aW5nLmpzIiwid2VicGFjazovL0Bzb2x1dGVncmF0ZS9nZW9mbG8tc2RrLy4vc3JjL1NlbGVjdC5qcyIsIndlYnBhY2s6Ly9Ac29sdXRlZ3JhdGUvZ2VvZmxvLXNkay8uL3NyYy9TbmFwcGluZy5qcyIsIndlYnBhY2s6Ly9Ac29sdXRlZ3JhdGUvZ2VvZmxvLXNkay8uL3NyYy9TdGF0aWNzLmpzIiwid2VicGFjazovL0Bzb2x1dGVncmF0ZS9nZW9mbG8tc2RrLy4vc3JjL1N0eWxlcy5qcyIsIndlYnBhY2s6Ly9Ac29sdXRlZ3JhdGUvZ2VvZmxvLXNkay8uL3NyYy9VdGlsaXRpZXMuanMiLCJ3ZWJwYWNrOi8vQHNvbHV0ZWdyYXRlL2dlb2Zsby1zZGsvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vQHNvbHV0ZWdyYXRlL2dlb2Zsby1zZGsvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL0Bzb2x1dGVncmF0ZS9nZW9mbG8tc2RrL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vQHNvbHV0ZWdyYXRlL2dlb2Zsby1zZGsvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9Ac29sdXRlZ3JhdGUvZ2VvZmxvLXNkay8uL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQG1peGluXG4gKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsb1xuICogQG5hbWUgQ29udHJvbFxuICogQGRlc2NyaXB0aW9uIFRoaXMgbW9kdWxlIGlzIHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyBhbmQgbWFuYWdpbmcgdGhlIGNvbnRyb2wgYnV0dG9ucyBpbiB0aGUgR2VvZmxvIGFwcGxpY2F0aW9uLlxuICogQHBhcmFtIHtBcnJheX0gY29udHJvbHMgLSBBbiBhcnJheSBvZiBjb250cm9sIG9iamVjdHMgdG8gYmUgYWRkZWQgdG8gdGhlIG1hcC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgb3B0aW9ucyBmb3IgdGhlIGNvbnRyb2wgYnV0dG9ucy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIENvbnRyb2wgb2JqZWN0LlxuICovXG5cbmNvbnN0IENvbnRyb2wgPSBmdW5jdGlvbiAoY29udHJvbHMsIG9wdGlvbnM9e30pIHtcbiAgICBjb25zdCBnZW9mbG8gPSB0aGlzLmdlb2ZsbztcblxuICAgIHRoaXMuY29udHJvbHMgPSBjb250cm9scztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgdmFyIHJnYmEgPSBmdW5jdGlvbiAoaGV4LCBhbHBoYSkge1xuICAgICAgICBoZXggPSBoZXgudHJpbSgpO1xuXG5cbiAgICAgICAgaWYgKGhleC5pbmNsdWRlcygncmdiYScpKSB7XG4gICAgICAgICAgICBoZXggPSB0aGlzLmhleChoZXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoZXggfHwgWzQsIDddLmluZGV4T2YoaGV4Lmxlbmd0aCkgPT09IC0xKSB7IHJldHVybiBmYWxzZSB9XG5cbiAgICAgICAgICAgIGhleCA9IGhleC5zdWJzdHIoMSk7XG5cbiAgICAgICAgICAgIGlmIChoZXgubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAgICAgaGV4ID0gaGV4LnNwbGl0KCcnKS5tYXAoZnVuY3Rpb24gKGVsKSB7IHJldHVybiBlbCArIGVsICsgJyc7IH0pLmpvaW4oJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHIgPSBwYXJzZUludChoZXguc2xpY2UoMCwgMiksIDE2KSxcbiAgICAgICAgICAgIGcgPSBwYXJzZUludChoZXguc2xpY2UoMiwgNCksIDE2KSxcbiAgICAgICAgICAgIGIgPSBwYXJzZUludChoZXguc2xpY2UoNCwgNiksIDE2KTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBhbHBoYSAhPT0gdW5kZWZpbmVkID8gXCJyZ2JhKFwiICsgciArIFwiIFwiICsgZyArIFwiIFwiICsgYiArIFwiIC8gXCIgKyBhbHBoYSArIFwiJSlcIiA6IFwicmdiKFwiICsgciArIFwiIFwiICsgZyArIFwiIFwiICsgYiArIFwiKVwiO1xuICAgIH1cblxuICAgIHZhciBoZXggPSBmdW5jdGlvbiAocmdiYSkge1xuICAgICAgICB2YXIgYSxcbiAgICAgICAgICAgIHJnYiA9IHJnYmEucmVwbGFjZSgvXFxzL2csICcnKS5tYXRjaCgvXnJnYmE/XFwoKFxcZCspLChcXGQrKSwoXFxkKyksPyhbXixcXHMpXSspPy9pKSxcbiAgICAgICAgICAgIGFscGhhID0gKHJnYiAmJiByZ2JbNF0gfHwgXCJcIikudHJpbSgpLFxuICAgICAgICAgICAgaGV4ID0gcmdiID8gKHJnYlsxXSB8IDEgPDwgOCkudG9TdHJpbmcoMTYpLnNsaWNlKDEpICsgKHJnYlsyXSB8IDEgPDwgOCkudG9TdHJpbmcoMTYpLnNsaWNlKDEpICsgKHJnYlszXSB8IDEgPDwgOCkudG9TdHJpbmcoMTYpLnNsaWNlKDEpIDogcmdiYTtcblxuICAgICAgICBpZiAoYWxwaGEgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIGEgPSBhbHBoYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGEgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgYSA9ICgoYSAqIDI1NSkgfCAxIDw8IDgpLnRvU3RyaW5nKDE2KS5zbGljZSgxKVxuICAgICAgICBoZXggPSBoZXggKyBhO1xuICAgICAgICByZXR1cm4gaGV4O1xuICAgIH1cblxuXG5cbiAgICAvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uQ29udHJvbFxuXHQgKiBAbmFtZSBlbmFibGVcbiAgICAgKiBAZGVzY3JpcHRpb24gRW5hYmxlcyB0aGUgY29udHJvbCBidXR0b25zLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb250cm9sIC0gVGhlIGNvbnRyb2wgb2JqZWN0IHRvIGVuYWJsZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb250cm9sIG9iamVjdC5cbiAgICAgKi9cbiAgICB0aGlzLmVuYWJsZSA9IGZ1bmN0aW9uIChjb250cm9sKSB7XG4gICAgICAgIGlmICghY29udHJvbCkgcmV0dXJuIG51bGw7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBjb250cm9sLnBvc2l0aW9uO1xuICAgICAgICBnZW9mbG8ubWFwLmFkZENvbnRyb2wodGhpcywgY29udHJvbC5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgLyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkNvbnRyb2xcblx0ICogQG5hbWUgZGlzYWJsZVxuICAgICAqIEBkZXNjcmlwdGlvbiBEaXNhYmxlcyB0aGUgY29udHJvbCBidXR0b25zLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbnRyb2wgb2JqZWN0LlxuICAgICAqL1xuICAgIHRoaXMuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZ2VvZmxvLm1hcC5yZW1vdmVDb250cm9sKHRoaXMpO1xuICAgIH1cblxuXG5cbiAgICAvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uQ29udHJvbFxuXHQgKiBAbmFtZSBvbkFkZFxuICAgICAqIEBkZXNjcmlwdGlvbiBBZGRzIHRoZSBjb250cm9sIGJ1dHRvbnMgdG8gdGhlIG1hcC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIC0gVGhlIG1hcCBvYmplY3QgdG8gYWRkIHRoZSBjb250cm9sIGJ1dHRvbnMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29udHJvbCBvYmplY3QuXG4gICAgICovXG4gICAgdGhpcy5vbkFkZCA9IGZ1bmN0aW9uKG1hcCkge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucykgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmF0dHJpYnV0aW9uKSByZXR1cm4gdGhpcy5zZXRBdHRyaWJ1dGlvbihtYXApO1xuICAgICAgICB0aGlzLnNldFRoZW1lKG9wdGlvbnMuY29sb3JzIHx8IGdlb2Zsby5vcHRpb25zLmNvbG9ycyk7XG4gICAgICAgIGdlb2Zsby5maXJlKCdjb250cm9sLmFkZCcsIHsgY29udHJvbDogdGhpcywgZWxlbWVudDogdGhpcy5lbGVtZW50IH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50O1xuICAgIH1cblxuICAgIC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5Db250cm9sXG5cdCAqIEBuYW1lIG9uUmVtb3ZlXG4gICAgICogQGRlc2NyaXB0aW9uIFJlbW92ZXMgdGhlIGNvbnRyb2wgYnV0dG9ucyBmcm9tIHRoZSBtYXAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29udHJvbCBvYmplY3QuXG4gICAgICovXG4gICAgdGhpcy5vblJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBnZW9mbG8uYnV0dG9ucy5yZW1vdmVCdXR0b25zKCk7XG4gICAgICAgIGdlb2Zsby5maXJlKCdjb250cm9sLnJlbW92ZScsIHsgZWxlbWVudDogdGhpcy5lbGVtZW50IH0pO1xuICAgICAgICBnZW9mbG8uZGlzYWJsZSgpO1xuICAgIH1cblxuXG5cbiAgICAvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uQ29udHJvbFxuXHQgKiBAbmFtZSBzZXRBdHRyaWJ1dGlvblxuICAgICAqIEBkZXNjcmlwdGlvbiBTZXRzIHRoZSBhdHRyaWJ1dGlvbiBmb3IgdGhlIGNvbnRyb2wgYnV0dG9ucy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb250cm9sIG9iamVjdC5cbiAgICAgKi9cbiAgICB0aGlzLnNldEF0dHJpYnV0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXR0ciA9IEF0dHIoZ2VvZmxvLCB0aGlzLmNvbnRyb2wsIG9wdGlvbnMpO1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGF0dHIpXG5cbiAgICAgICAgdGhpcy5zZXRUaGVtZShvcHRpb25zLmNvbG9ycyB8fCBnZW9mbG8ub3B0aW9ucy5jb2xvcnMpO1xuICAgICAgICBnZW9mbG8uZmlyZSgnY29udHJvbC5hZGQnLCB7IGNvbnRyb2w6IHRoaXMsIGVsZW1lbnQ6IHRoaXMuZWxlbWVudCB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudDtcbiAgICB9XG5cbiAgICAvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uQ29udHJvbFxuXHQgKiBAbmFtZSBzZXRNb2RlXG4gICAgICogQGRlc2NyaXB0aW9uIFNldHMgdGhlIG1vZGUgZm9yIHRoZSBjb250cm9sIGJ1dHRvbnMuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1vZGUgLSBUaGUgbW9kZSB0byBzZXQgdGhlIGNvbnRyb2wgYnV0dG9ucyB0by5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb250cm9sIG9iamVjdC5cbiAgICAgKi9cbiAgICB0aGlzLnNldE1vZGUgPSBmdW5jdGlvbiAobW9kZSkge1xuICAgICAgICBnZW9mbG8uc2V0QWN0aXZlQnV0dG9uKCFtb2RlID8gJ3NlbGVjdCcgOiBtb2RlID09PSAnZHJhdycgPyBtb2RlIDogbW9kZSlcbiAgICB9XG5cbiAgICAvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uQ29udHJvbFxuXHQgKiBAbmFtZSBzZXRUaGVtZVxuICAgICAqIEBkZXNjcmlwdGlvbiBTZXRzIHRoZSB0aGVtZSBmb3IgdGhlIGNvbnRyb2wgYnV0dG9ucy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29sb3JzIC0gVGhlIGNvbG9ycyB0byBzZXQgdGhlIHRoZW1lIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbnRyb2wgb2JqZWN0LlxuICAgICAqL1xuICAgIHRoaXMuc2V0VGhlbWUgPSBmdW5jdGlvbihjb2xvcnMpIHtcbiAgICAgICAgaWYgKCFjb2xvcnMpIHsgcmV0dXJuIGNvbnNvbGUuZXJyb3IoJ0NvbnRyb2wgY29sb3JzIG5vdCBwcm92aWRlZCEnKSB9O1xuXG4gICAgICAgIGNvbG9ycy5wcmltYXJ5Q29sb3IgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJy0tJyArIGdlb2Zsby5pZCArICctcHJpbWFyeS1jb2xvcicsIHJnYmEoY29sb3JzLnByaW1hcnlDb2xvcikpIDogZmFsc2U7XG4gICAgICAgIGNvbG9ycy5wcmltYXJ5QmFja2dyb3VuZCA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS0nICsgZ2VvZmxvLmlkICsgJy1wcmltYXJ5LWJhY2tncm91bmQnLCByZ2JhKGNvbG9ycy5wcmltYXJ5QmFja2dyb3VuZCkpIDogZmFsc2U7XG4gICAgICAgIGNvbG9ycy5wcmltYXJ5VGV4dCA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS0nICsgZ2VvZmxvLmlkICsgJy1wcmltYXJ5LXRleHQnLCByZ2JhKGNvbG9ycy5wcmltYXJ5VGV4dCkpIDogZmFsc2U7XG4gICAgICAgIGNvbG9ycy5wcmltYXJ5Qm9yZGVyID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCctLScgKyBnZW9mbG8uaWQgKyAnLXByaW1hcnktYm9yZGVyJywgcmdiYShjb2xvcnMucHJpbWFyeUJvcmRlcikpIDogZmFsc2U7XG5cbiAgICAgICAgY29sb3JzLnNlY29uZGFyeUNvbG9yID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCctLScgKyBnZW9mbG8uaWQgKyAnLXNlY29uZGFyeS1jb2xvcicsIHJnYmEoY29sb3JzLnNlY29uZGFyeUNvbG9yKSkgOiBmYWxzZTtcbiAgICAgICAgY29sb3JzLnNlY29uZGFyeUJhY2tncm91bmQgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJy0tJyArIGdlb2Zsby5pZCArICctc2Vjb25kYXJ5LWJhY2tncm91bmQnLCByZ2JhKGNvbG9ycy5zZWNvbmRhcnlCYWNrZ3JvdW5kKSkgOiBmYWxzZTtcbiAgICAgICAgY29sb3JzLnNlY29uZGFyeVRleHQgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJy0tJyArIGdlb2Zsby5pZCArICctc2Vjb25kYXJ5LXRleHQnLCByZ2JhKGNvbG9ycy5zZWNvbmRhcnlUZXh0KSkgOiBmYWxzZTtcbiAgICAgICAgY29sb3JzLnNlY29uZGFyeUJvcmRlciA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS0nICsgZ2VvZmxvLmlkICsgJy1zZWNvbmRhcnktYm9yZGVyJywgcmdiYShjb2xvcnMuc2Vjb25kYXJ5Qm9yZGVyKSkgOiBmYWxzZTtcblxuICAgICAgICBnZW9mbG8uZmlyZSgndGhlbWUuY2hhbmdlJywgeyBjb2xvcnM6IGNvbG9ycyB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGhlbWUoKTtcbiAgICB9XG5cbiAgICAvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uQ29udHJvbFxuXHQgKiBAbmFtZSBzZXRDb250cm9sXG4gICAgICogQGRlc2NyaXB0aW9uIFNldHMgdGhlIGNvbnRyb2wgYnV0dG9ucy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBjb250cm9scyAtIFRoZSBjb250cm9sIGJ1dHRvbnMgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbnRyb2wgb2JqZWN0LlxuICAgICAqL1xuICAgIHRoaXMuc2V0Q29udHJvbCA9IGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICBpZiAoIWNvbnRyb2xzKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgdmFyIGJ1dHRvbnM7XG5cbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc05hbWUgPSBnZW9mbG8uaWQgKyAnLWNvbnRyb2wtd3JhcCc7XG5cbiAgICAgICAgdGhpcy5jb250cm9sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuY29udHJvbC5jbGFzc05hbWUgPSBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuY2xhc3Nlcy5QUkVERUZJTkVEX0NPTlRST0xfQkFTRSArICcgJyArIGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5jbGFzc2VzLlBSRURFRklORURfQ09OVFJPTF9HUk9VUDtcblxuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5jb250cm9sKTtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb250cm9scykpIHtcbiAgICAgICAgICAgIGJ1dHRvbnMgPSBCdXR0b25zKHRoaXMuY29udHJvbCwgY29udHJvbHMpO1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBidXR0b25zKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5lbmFibGUoYnV0dG9ucyk7XG4gICAgfVxuXG5cbiAgICAvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uQ29udHJvbFxuXHQgKiBAbmFtZSBnZXRUaGVtZVxuICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIHRoZSB0aGVtZSBmb3IgdGhlIGNvbnRyb2wgYnV0dG9ucy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSB0aGVtZSBmb3IgdGhlIGNvbnRyb2wgYnV0dG9ucy5cbiAgICAgKi9cbiAgICB0aGlzLmdldFRoZW1lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZW9mbG8ub3B0aW9ucy5jb2xvcnM7XG4gICAgfVxuXG4gICAgLyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkNvbnRyb2xcblx0ICogQG5hbWUgZ2V0QnV0dG9uc1xuICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIHRoZSBjb250cm9sIGJ1dHRvbnMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29udHJvbCBidXR0b25zLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0QnV0dG9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J1dHRvbnM7XG4gICAgfVxuXG4gICAgLyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkNvbnRyb2xcblx0ICogQG5hbWUgZ2V0Q29udHJvbFxuICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIHRoZSBjb250cm9sIGJ1dHRvbnMuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGlkIC0gVGhlIGlkIG9mIHRoZSBjb250cm9sIGJ1dHRvbiB0byBnZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29udHJvbCBidXR0b24uXG4gICAgICovXG4gICAgdGhpcy5nZXRDb250cm9sID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHZhciBub2RlcyA9IHRoaXMuY29udHJvbC5jaGlsZE5vZGVzO1xuICAgICAgICBpZiAoIW5vZGVzLmxlbmd0aCkgcmV0dXJuO1xuXG4gICAgICAgIHZhciBjb250cm9sO1xuXG4gICAgICAgIGlmIChpZCkgbm9kZXMuZm9yRWFjaChmdW5jdGlvbihuKSB7IGlmIChuLmNsYXNzTGlzdC5jb250YWlucyhpZCkpIGNvbnRyb2wgPSBuIH0pO1xuICAgICAgICByZXR1cm4gY29udHJvbDtcbiAgICB9XG5cblxuICAgIC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5Db250cm9sXG5cdCAqIEBuYW1lIHNob3dDb250cm9sXG4gICAgICogQGRlc2NyaXB0aW9uIFNob3dzIHRoZSBjb250cm9sIGJ1dHRvbnMuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGlkIC0gVGhlIGlkIG9mIHRoZSBjb250cm9sIGJ1dHRvbiB0byBzaG93LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbnRyb2wgYnV0dG9uLlxuICAgICAqL1xuICAgIHRoaXMuc2hvd0NvbnRyb2wgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgdmFyIGNvbnRyb2wgPSB0aGlzLmdldENvbnRyb2woaWQpO1xuICAgICAgICBpZiAoIWNvbnRyb2wpIHJldHVybiBmYWxzZTtcbiAgICAgICAgXG4gICAgICAgIGNvbnRyb2wuc3R5bGUuZGlzcGxheSA9IHRoaXMucG9zaXRpb24uaW5jbHVkZXMoJ2NlbnRlcicpID8gICdmbGV4JyA6ICdibG9jayc7XG4gICAgICAgIHJldHVybiBjb250cm9sO1xuICAgIH1cblxuICAgIC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5Db250cm9sXG5cdCAqIEBuYW1lIGhpZGVDb250cm9sXG4gICAgICogQGRlc2NyaXB0aW9uIEhpZGVzIHRoZSBjb250cm9sIGJ1dHRvbnMuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGlkIC0gVGhlIGlkIG9mIHRoZSBjb250cm9sIGJ1dHRvbiB0byBoaWRlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbnRyb2wgYnV0dG9uLlxuICAgICAqL1xuICAgIHRoaXMuaGlkZUNvbnRyb2wgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgdmFyIGNvbnRyb2wgPSB0aGlzLmdldENvbnRyb2woaWQpO1xuICAgICAgICBpZiAoIWNvbnRyb2wpIHJldHVybiBmYWxzZTtcblxuICAgICAgICBjb250cm9sLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIHJldHVybiBjb250cm9sO1xuICAgIH1cblxuXG4gICAgdGhpcy5zZXRDb250cm9sKGNvbnRyb2xzKTtcblxuICAgIGZ1bmN0aW9uIEJ1dHRvbnMgKGVsZW1lbnQsIGNvbnRyb2xzKSB7XG4gICAgICAgIGlmICghY29udHJvbHMgfHwgIWVsZW1lbnQpIHJldHVybiBmYWxzZTtcbiAgICBcbiAgICAgICAgdmFyIGNsYXNzVHlwZXMgPSBbJ21vZGUnLCAnZmVhdHVyZScsICdtb3VzZSddO1xuICAgICAgICB2YXIgYnV0dG9uRWxlbWVudHMgPSB7fTtcbiAgICAgICAgdmFyIGJ1dHRvbk9wdGlvbnMgPSB7fTtcbiAgICAgICAgdmFyIGFjdGl2ZUJ1dHRvbiA9IG51bGw7XG4gICAgICAgIHZhciBjdXJyZW50Q29udHJvbDtcbiAgICAgICAgdmFyIHBvc2l0aW9uO1xuICAgICAgICBcbiAgICBcbiAgICAgICAgdmFyIGN1cnJlbnRNYXBDbGFzc2VzID0ge1xuICAgICAgICAgICAgbW9kZTogbnVsbCxcbiAgICAgICAgICAgIGZlYXR1cmU6IG51bGwsXG4gICAgICAgICAgICBtb3VzZTogbnVsbFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICB2YXIgbmV4dE1hcENsYXNzZXMgPSB7XG4gICAgICAgICAgICBtb2RlOiBudWxsLFxuICAgICAgICAgICAgZmVhdHVyZTogbnVsbCxcbiAgICAgICAgICAgIG1vdXNlOiBudWxsXG4gICAgICAgIH07XG4gICAgXG4gICAgXG4gICAgXG4gICAgICAgIGNvbnN0IG1vdXNlbGVhdmUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICghZ2VvZmxvLmN1cnJlbnRNb2RlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBnZW9mbG8uY3VycmVudE1vZGUuaGFuZGxlT2ZmTWFwID8gZ2VvZmxvLmN1cnJlbnRNb2RlLmhhbmRsZU9mZk1hcChldmVudCkgOiBmYWxzZTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBjb25zdCBtb3VzZW92ZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICghZ2VvZmxvLmN1cnJlbnRNb2RlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBnZW9mbG8uY3VycmVudE1vZGUuaGFuZGxlT25NYXAgPyBnZW9mbG8uY3VycmVudE1vZGUuaGFuZGxlT25NYXAoZXZlbnQpIDogZmFsc2U7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgY29udHJvbHMuZm9yRWFjaChmdW5jdGlvbiAoY29udHJvbCkge1xuICAgICAgICAgICAgaWYgKCFnZXRDb250cm9sT3B0aW9ucyhjb250cm9sKSkgY29udHJvbC5zaG93ID0gZmFsc2U7XG4gICAgICAgICAgICBzZXRQb3NpdGlvbihjb250cm9sKTtcbiAgICAgICAgICAgIGNyZWF0ZUJ1dHRvbnMoZWxlbWVudCwgY29udHJvbCk7XG4gICAgICAgIH0pXG4gICAgXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZXRBY3RpdmVCdXR0b246IHNldEFjdGl2ZUJ1dHRvbixcbiAgICAgICAgICAgIHF1ZXVlTWFwQ2xhc3NlczogcXVldWVNYXBDbGFzc2VzLFxuICAgICAgICAgICAgdXBkYXRlTWFwQ2xhc3NlczogdXBkYXRlTWFwQ2xhc3NlcyxcbiAgICAgICAgICAgIHJlbW92ZUJ1dHRvbnM6IHJlbW92ZUJ1dHRvbnMsXG4gICAgICAgICAgICBnZXRCdXR0b25PcHRpb25zOiBnZXRCdXR0b25PcHRpb25zLFxuICAgICAgICAgICAgZ2V0QnV0dG9uRWxlbWVudHM6IGdldEJ1dHRvbkVsZW1lbnRzLFxuICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgIFxuICAgICAgICBmdW5jdGlvbiBxdWV1ZU1hcENsYXNzZXMob3B0aW9ucykge1xuICAgICAgICAgICAgbmV4dE1hcENsYXNzZXMgPSBnZW9mbG8uVXRpbGl0aWVzLmV4dGVuZChuZXh0TWFwQ2xhc3Nlcywgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlTWFwQ2xhc3NlcygpIHtcbiAgICAgICAgICAgIGlmICghZ2VvZmxvLmNvbnRhaW5lcilcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgXG4gICAgICAgICAgICB2YXIgY2xhc3Nlc1RvUmVtb3ZlID0gW107XG4gICAgICAgICAgICB2YXIgY2xhc3Nlc1RvQWRkID0gW107XG4gICAgXG4gICAgICAgICAgICBjbGFzc1R5cGVzLmZvckVhY2goZnVuY3Rpb24odHlwZSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXh0TWFwQ2xhc3Nlc1t0eXBlXSA9PT0gY3VycmVudE1hcENsYXNzZXNbdHlwZV0pXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICBcbiAgICAgICAgICAgICAgICBjbGFzc2VzVG9SZW1vdmUucHVzaCh0eXBlICsgJy0nICsgY3VycmVudE1hcENsYXNzZXNbdHlwZV0pO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0TWFwQ2xhc3Nlc1t0eXBlXSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjbGFzc2VzVG9BZGQucHVzaCh0eXBlICsgJy0nICsgbmV4dE1hcENsYXNzZXNbdHlwZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIFxuICAgICAgICAgICAgaWYgKGNsYXNzZXNUb1JlbW92ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9nZW9mbG8kY29udGFpbmVyJGNsYXNzTDtcbiAgICBcbiAgICAgICAgICAgICAgICAoX2dlb2ZsbyRjb250YWluZXIkY2xhc3NMID0gZ2VvZmxvLmNvbnRhaW5lci5jbGFzc0xpc3QpLnJlbW92ZS5hcHBseShfZ2VvZmxvJGNvbnRhaW5lciRjbGFzc0wsIGNsYXNzZXNUb1JlbW92ZSk7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBpZiAoY2xhc3Nlc1RvQWRkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgX2dlb2ZsbyRjb250YWluZXIkY2xhc3NMMjtcbiAgICBcbiAgICAgICAgICAgICAgICAoX2dlb2ZsbyRjb250YWluZXIkY2xhc3NMMiA9IGdlb2Zsby5jb250YWluZXIuY2xhc3NMaXN0KS5hZGQuYXBwbHkoX2dlb2ZsbyRjb250YWluZXIkY2xhc3NMMiwgY2xhc3Nlc1RvQWRkKTtcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGN1cnJlbnRNYXBDbGFzc2VzID0gZ2VvZmxvLlV0aWxpdGllcy5leHRlbmQoY3VycmVudE1hcENsYXNzZXMsIG5leHRNYXBDbGFzc2VzKTtcbiAgICAgICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVUaXRsZShvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gJycgKyBvcHRpb25zLnRpdGxlICsgKG9wdGlvbnMua2V5ID8gJyAoJyArIG9wdGlvbnMua2V5ICsgJyknIDogXCJcIik7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlQnV0dG9ucyAoZWxlbWVudCwgY29udHJvbCkge1xuICAgICAgICAgICAgdmFyIGJ1dHRvbnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIHZhciBncm91cCA9IChjb250cm9sLmdyb3VwID8gY29udHJvbC5ncm91cC50b1VwcGVyQ2FzZSgpIDogY29udHJvbC5hdHRyaWJ1dGlvbiA/ICdBVFRSJyA6ICdOT05FJykgKyAnX0dST1VQJztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChidXR0b25zKTtcbiAgICBcbiAgICAgICAgICAgIGJ1dHRvbnMuY2xhc3NOYW1lID0gJycgKyBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuY2xhc3Nlc1tncm91cF0gKyAnICcgKyBjb250cm9sLnR5cGU7XG4gICAgICAgICAgICBidXR0b25zLnN0eWxlLmRpc3BsYXkgPSBjb250cm9sLnNob3cgPyBwb3NpdGlvbi5pbmNsdWRlcygnY2VudGVyJykgPyAgJ2ZsZXgnIDogJ2Jsb2NrJyA6ICdub25lJztcbiAgICBcbiAgICAgICAgICAgIGNvbnRyb2wuc2hvdyAmJiBjb250cm9sLmRpdmlkZXIgPyBlbGVtZW50LmFwcGVuZENoaWxkKGNyZWF0ZURpdmlkZXIoKSkgOiBmYWxzZTtcbiAgICBcbiAgICAgICAgICAgIGJ1dHRvbnMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgbW91c2VvdmVyKTtcbiAgICAgICAgICAgIGJ1dHRvbnMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIG1vdXNlbGVhdmUpO1xuICAgIFxuICAgICAgICAgICAgYWRkQnV0dG9ucyhjb250cm9sLCBidXR0b25zKTtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiBidXR0b25zO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VCdXR0b24oaWQsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmICghY3VycmVudENvbnRyb2wgfHwgIWN1cnJlbnRDb250cm9sLmJ1dHRvbnNbaWRdKSByZXR1cm4gZmFsc2U7XG4gICAgXG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBvcHRpb25zLnBvc2l0aW9uO1xuICAgICAgICAgICAgdmFyIGJ1dHRvbiA9IG9wdGlvbnMuYnV0dG9uIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIFxuICAgICAgICAgICAgb3B0aW9ucy5rZXkgPSBnZW9mbG8ub3B0aW9ucy5rZXlzICYmIGdlb2Zsby5vcHRpb25zLmtleXNbaWRdID8gZ2VvZmxvLm9wdGlvbnMua2V5c1tpZF0gOiBvcHRpb25zLmtleTtcbiAgICBcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnRpdGxlKSB7IGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgY3JlYXRlVGl0bGUob3B0aW9ucykpOyB9XG4gICAgICAgICAgICBvcHRpb25zLmNvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b24pO1xuICAgIFxuICAgICAgICAgICAgb3B0aW9uc1tcImlkXCJdID0gaWQ7XG4gICAgICAgICAgICBvcHRpb25zW1wiYnV0dG9uXCJdID0gYnV0dG9uO1xuICAgIFxuICAgICAgICAgICAgb3B0aW9ucy5hZGQgPSBmdW5jdGlvbiAob3B0cz17fSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkFkZCA/IHRoaXMub25BZGQob3B0cykgOiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgb3B0aW9ucy5yZW1vdmUgPSBmdW5jdGlvbiAob3B0cz17fSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgdGhpcy5vblJlbW92ZSA/IHRoaXMub25SZW1vdmUob3B0cykgOiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgb3B0aW9ucy5hY3RpdmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKG9wdGlvbnMuaW5hY3RpdmVDbGFzcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5idXR0b24uY2xhc3NMaXN0LmFkZChvcHRpb25zLmFjdGl2ZUNsYXNzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1dHRvbi5jbGFzc0xpc3QuYWRkKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5jbGFzc2VzLkFDVElWRV9CVVRUT04pO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgb3B0aW9ucy5kZWFjdGl2YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKG9wdGlvbnMuYWN0aXZlQ2xhc3MpO1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5jbGFzc2VzLkFDVElWRV9CVVRUT04pO1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKG9wdGlvbnMuaW5hY3RpdmVDbGFzcyk7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBvcHRpb25zLmRvbnRTaG93ID8gYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZScgOiBmYWxzZTtcbiAgICBcbiAgICAgICAgICAgIGJ1dHRvbkVsZW1lbnRzW2lkXSA9IGJ1dHRvbjtcbiAgICAgICAgICAgIGJ1dHRvbk9wdGlvbnNbaWRdID0gb3B0aW9ucztcbiAgICBcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24uaW5jbHVkZXMoJ3JpZ2h0JykgPyAnbGVmdCcgOlxuICAgICAgICAgICAgICAgIHBvc2l0aW9uLmluY2x1ZGVzKCdsZWZ0JykgPyAncmlnaHQnIDpcbiAgICAgICAgICAgICAgICBwb3NpdGlvbi5pbmNsdWRlcygnYm90dG9tJykgPyAndG9wJyA6XG4gICAgICAgICAgICAgICAgcG9zaXRpb24uaW5jbHVkZXMoJ3RvcCcpID8gJ2JvdHRvbScgOlxuICAgICAgICAgICAgICAgICdhYnNvbHV0ZSc7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBvcHRpb25zLmNvbnRhaW5lci50b29sdGlwUG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICAgICAgICAgIGdlb2Zsby5hZGRUb29sdGlwKG9wdGlvbnMuY29udGFpbmVyLCBidXR0b24sIGNyZWF0ZVRpdGxlKG9wdGlvbnMpKTtcbiAgICAgICAgICAgIHJldHVybiBidXR0b247XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlQ29udHJvbEJ1dHRvbihpZCkge1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIFxuICAgICAgICAgICAgdmFyIGJ1dHRvbiA9IGNyZWF0ZUJhc2VCdXR0b24oaWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKCFidXR0b24pIHJldHVybiBmYWxzZTtcbiAgICBcbiAgICAgICAgICAgIGJ1dHRvbi5jbGFzc05hbWUgPSBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuY2xhc3Nlcy5DT05UUk9MX0JVVFRPTiArICcgJyArIG9wdGlvbnMuY2xhc3NOYW1lO1xuICAgIFxuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gYWN0aXZlQnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlYWN0aXZhdGVCdXR0b25zKCk7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMub25EZWFjdGl2YXRlID8gb3B0aW9ucy5vbkRlYWN0aXZhdGUob3B0aW9ucykgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMub25BY3RpdmF0ZShvcHRpb25zKSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRBY3RpdmVCdXR0b24oaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRydWUpO1xuICAgIFxuICAgICAgICAgICAgcmV0dXJuIGJ1dHRvbjtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVPcHRpb25CdXR0b24oaWQpIHtcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICBcbiAgICAgICAgICAgIHZhciBidXR0b24gPSBjcmVhdGVCYXNlQnV0dG9uKGlkLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGlmICghYnV0dG9uKSByZXR1cm4gZmFsc2U7XG4gICAgXG4gICAgICAgICAgICBidXR0b24uY2xhc3NOYW1lID0gJycgKyBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuY2xhc3Nlcy5DT05UUk9MX0JVVFRPTjtcbiAgICBcbiAgICAgICAgICAgIGlmIChnZW9mbG8ub3B0aW9uc1tvcHRpb25zLm5hbWVdICYmIGdlb2Zsby5vcHRpb25zW29wdGlvbnMubmFtZV0uZW5hYmxlKSB7XG4gICAgICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQob3B0aW9ucy5hY3RpdmVDbGFzcyk7XG4gICAgICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLmNsYXNzZXMuQUNUSVZFX0JVVFRPTik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKG9wdGlvbnMuaW5hY3RpdmVDbGFzcyk7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKCFnZW9mbG8ub3B0aW9uc1tvcHRpb25zLm5hbWVdKSB7IGdlb2Zsby5vcHRpb25zW29wdGlvbnMubmFtZV0gPSB7fTsgfVxuICAgIFxuICAgICAgICAgICAgICAgIGlmIChnZW9mbG8ub3B0aW9uc1tvcHRpb25zLm5hbWVdLmVuYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5vbkRlYWN0aXZhdGUpIG9wdGlvbnMub25EZWFjdGl2YXRlKG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMub25BY3RpdmF0ZShvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0cnVlKTtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiBidXR0b247XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlQWN0aW9uQnV0dG9uKGlkKSB7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgXG4gICAgICAgICAgICB2YXIgYnV0dG9uID0gY3JlYXRlQmFzZUJ1dHRvbihpZCwgb3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAoIWJ1dHRvbikgcmV0dXJuIGZhbHNlO1xuICAgIFxuICAgICAgICAgICAgYnV0dG9uLmNsYXNzTmFtZSA9IGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5jbGFzc2VzLkFDVElPTl9CVVRUT04gKyAnICcgKyBvcHRpb25zLmNsYXNzTmFtZTtcbiAgICBcbiAgICAgICAgICAgIGlmIChpZCA9PT0gJ2xvY2F0ZScgJiYgZ2VvZmxvLmxvY2F0ZSkgaWYgKGdlb2Zsby5sb2NhdGUuY29udHJvbCkgZ2VvZmxvLmxvY2F0ZS5jb250cm9sLl9jb250YWluZXIucmVtb3ZlKCk7XG4gICAgXG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5vbkFjdGl2YXRlKG9wdGlvbnMpO1xuICAgICAgICAgICAgfSwgdHJ1ZSk7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gYnV0dG9uO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZURpdmlkZXIoKSB7XG4gICAgICAgICAgICB2YXIgZGl2aWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgZGl2aWRlci5jbGFzc05hbWUgPSAnJyArIGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5jbGFzc2VzLkRJVklERVI7XG4gICAgICAgICAgICByZXR1cm4gZGl2aWRlcjtcbiAgICAgICAgfVxuICAgIFxuICAgIFxuICAgICAgICBmdW5jdGlvbiBzZXRQb3NpdGlvbiAoY29udHJvbCkge1xuICAgICAgICAgICAgaWYgKCFwb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIGlmICghY29udHJvbC5wb3NpdGlvbikgdGhyb3cgbmV3IEVycm9yKCdUaGUgZmlyc3QgY29udHJvbCBuZWVkcyB0byBoYXZlIGEgcG9zaXRpb24nKVxuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gY29udHJvbC5wb3NpdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIFxuICAgIFxuICAgICAgICBmdW5jdGlvbiBkZWFjdGl2YXRlQnV0dG9ucygpIHtcbiAgICAgICAgICAgIGlmICghYWN0aXZlQnV0dG9uKSByZXR1cm47XG4gICAgICAgICAgICBhY3RpdmVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZShnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuY2xhc3Nlcy5BQ1RJVkVfQlVUVE9OKTtcbiAgICAgICAgICAgIGFjdGl2ZUJ1dHRvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gc2V0QWN0aXZlQnV0dG9uKGlkKSB7XG4gICAgICAgICAgICBkZWFjdGl2YXRlQnV0dG9ucygpO1xuICAgIFxuICAgICAgICAgICAgdmFyIGJ1dHRvbiA9ICFpZCAmJiBnZW9mbG8uZWRpdE1vZGUgPyBidXR0b25FbGVtZW50c1snZWRpdCddIDogIWlkID8gYnV0dG9uRWxlbWVudHNbJ3NlbGVjdCddIDogaWQgPT09ICdlZGl0JyA/IGJ1dHRvbkVsZW1lbnRzWydzZWxlY3QnXSA6IGJ1dHRvbkVsZW1lbnRzW2lkXTtcbiAgICAgICAgICAgIGlmICghYnV0dG9uKSByZXR1cm47XG4gICAgXG4gICAgICAgICAgICBpZiAoYnV0dG9uICYmIGlkICE9PSAndHJhc2gnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi50aXRsZS5pbmNsdWRlcygnRHJhdyAnKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYnV0dG9uLnRpdGxlLmluY2x1ZGVzKGdlb2Zsby5jdXJyZW50TW9kZS50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLmNsYXNzZXMuQUNUSVZFX0JVVFRPTik7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVCdXR0b24gPSBidXR0b247XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZChnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuY2xhc3Nlcy5BQ1RJVkVfQlVUVE9OKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBcbiAgICBcbiAgICAgICAgZnVuY3Rpb24gYWRkQnV0dG9ucyhjb250cm9sLCBidXR0b25zKSB7XG4gICAgICAgICAgICBjdXJyZW50Q29udHJvbCA9IGNvbnRyb2w7XG4gICAgXG4gICAgICAgICAgICBpZiAoY29udHJvbC50eXBlID09PSAnbW9kZXMnKSB7XG4gICAgICAgICAgICAgICAgY3JlYXRlQ29udHJvbEJ1dHRvbihcInNlbGVjdFwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogYnV0dG9ucyxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuY2xhc3Nlcy5DT05UUk9MX0JVVFRPTl9TRUxFQ1QsXG4gICAgICAgICAgICAgICAgICAgIGtleTogXCJzXCIsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnU2VsZWN0IEZlYXR1cmVzJyxcbiAgICAgICAgICAgICAgICAgICAgb25BZGQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoZ2VvZmxvLmVkaXRNb2RlIHx8IGdlb2Zsby5kcmF3TW9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9mbG8uZ2V0QnV0dG9ucygnZWRpdCcpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb2Zsby5nZXRCdXR0b25zKCdzYXZlJykuYWRkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGdlb2Zsby5oYXNTZWxlY3Rpb24oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb2Zsby5nZXRCdXR0b25zKCdzYXZlJykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvZmxvLmdldEJ1dHRvbnMoJ2VkaXQnKS5hZGQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvZmxvLmdldEJ1dHRvbnMoJ3NhdmUnKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9mbG8uZ2V0QnV0dG9ucygnZWRpdCcpLnJlbW92ZSgpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb2Zsby5nZXRCdXR0b25zKCd1bmRvJykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvZmxvLmdldEJ1dHRvbnMoJ2NhbmNlbCcpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb2Zsby5nZXRCdXR0b25zKCdyZWRvJykucmVtb3ZlKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvZmxvLmdldEJ1dHRvbnMoJ2ltcG9ydCcpLmFkZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb2Zsby5nZXRCdXR0b25zKCdleHBvcnQnKS5hZGQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9mbG8uZ2V0QnV0dG9ucygnY2xlYXInKS5hZGQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb25BY3RpdmF0ZTogZnVuY3Rpb24gb25BY3RpdmF0ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlb2Zsby5ub1NlbGVjdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvZmxvLnNldE1vZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvbkRlYWN0aXZhdGU6IGZ1bmN0aW9uIG9uRGVhY3RpdmF0ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlb2Zsby5ub1NlbGVjdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgICAgICAgICBjcmVhdGVDb250cm9sQnV0dG9uKFwiZWRpdFwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogYnV0dG9ucyxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuY2xhc3Nlcy5DT05UUk9MX0JVVFRPTl9FRElULFxuICAgICAgICAgICAgICAgICAgICBrZXk6IFwiRW50ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdFZGl0IEZlYXR1cmUnLFxuICAgICAgICAgICAgICAgICAgICBkb250U2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgb25BZGQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlb2Zsby5nZXRCdXR0b25zKCdzZWxlY3QnKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLmNsYXNzZXMuQUNUSVZFX0JVVFRPTik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idXR0b24uc3R5bGVbJ2JhY2tncm91bmQtY29sb3InXSA9IGdlb2Zsby5vcHRpb25zLmNvbG9ycy5zZWNvbmRhcnlCYWNrZ3JvdW5kO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvbkFjdGl2YXRlOiBmdW5jdGlvbiBvbkFjdGl2YXRlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvZmxvLmVkaXRGZWF0dXJlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9mbG8uZ2V0QnV0dG9ucygnc2F2ZScpLmFkZCgpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvbkRlYWN0aXZhdGU6IGZ1bmN0aW9uIG9uRGVhY3RpdmF0ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlb2Zsby5jdXJyZW50TW9kZS5kZWFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG9uUmVtb3ZlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvZmxvLmdldEJ1dHRvbnMoJ3NhdmUnKSA/IGZhbHNlIDogY3JlYXRlU2VsZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgXG4gICAgICAgICAgICAgICAgY3JlYXRlQ29udHJvbEJ1dHRvbihcInNhdmVcIiwge1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGJ1dHRvbnMsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLmNsYXNzZXMuQ09OVFJPTF9CVVRUT05fRklOU0lILFxuICAgICAgICAgICAgICAgICAgICBrZXk6IFwiRW50ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdTYXZlIEVkaXQnLFxuICAgICAgICAgICAgICAgICAgICBkb250U2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgb25BZGQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9mbG8uZ2V0QnV0dG9ucygnc2VsZWN0JykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9mbG8uZ2V0QnV0dG9ucygnZWRpdCcpLnJlbW92ZSgpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvZmxvLmdldEJ1dHRvbnMoJ2ltcG9ydCcpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvZmxvLmdldEJ1dHRvbnMoJ2V4cG9ydCcpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvZmxvLmdldEJ1dHRvbnMoJ2NsZWFyJykucmVtb3ZlKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9mbG8uZ2V0QnV0dG9ucygndW5kbycpLmFkZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvZmxvLmdldEJ1dHRvbnMoJ2NhbmNlbCcpLmFkZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvZmxvLmdldEJ1dHRvbnMoJ3JlZG8nKS5hZGQoKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnV0dG9uLnN0eWxlWydiYWNrZ3JvdW5kLWNvbG9yJ10gPSBnZW9mbG8ub3B0aW9ucy5jb2xvcnMuc2Vjb25kYXJ5Q29sb3I7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG9uQWN0aXZhdGU6IGZ1bmN0aW9uIG9uQWN0aXZhdGUoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvZmxvLmN1cnJlbnRNb2RlLmhhbmRsZUNsaWNrKHsgZmluaXNoOiB0cnVlIH0pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udHJvbC50eXBlID09PSAnb3B0aW9ucycpIHtcbiAgICAgICAgICAgICAgICBjcmVhdGVBY3Rpb25CdXR0b24oXCJpbXBvcnRcIiwge1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGJ1dHRvbnMsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLmNsYXNzZXMuQ09OVFJPTF9CVVRUT05fSU1QT1JULFxuICAgICAgICAgICAgICAgICAgICBrZXk6IFwidVwiLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0ltcG9ydCBGZWF0dXJlcycsXG4gICAgICAgICAgICAgICAgICAgIG9uQWN0aXZhdGU6IGZ1bmN0aW9uIG9uQWN0aXZhdGUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VvZmxvLmxvYWRGZWF0dXJlcygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIGNyZWF0ZUFjdGlvbkJ1dHRvbihcImV4cG9ydFwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogYnV0dG9ucyxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuY2xhc3Nlcy5DT05UUk9MX0JVVFRPTl9FWFBPUlQsXG4gICAgICAgICAgICAgICAgICAgIGtleTogXCJkXCIsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnRXhwb3J0IEZlYXR1cmVzJyxcbiAgICAgICAgICAgICAgICAgICAgb25BY3RpdmF0ZTogZnVuY3Rpb24gb25BY3RpdmF0ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZW9mbG8uc2F2ZUZlYXR1cmVzKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgICAgICAgICBjcmVhdGVBY3Rpb25CdXR0b24oXCJjbGVhclwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogYnV0dG9ucyxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuY2xhc3Nlcy5DT05UUk9MX0JVVFRPTl9DTEVBUixcbiAgICAgICAgICAgICAgICAgICAga2V5OiBcIkRlbGV0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0RlbGV0ZSBTZWxlY3RlZCBvciBBbGwgRmVhdHVyZXMnLFxuICAgICAgICAgICAgICAgICAgICBvbkFjdGl2YXRlOiBmdW5jdGlvbiBvbkFjdGl2YXRlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvZmxvLmRlbGV0ZU1lc2hEYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9mbG8uZGVsZXRlVXNlckRhdGEoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlb2Zsby5nZXRCdXR0b25zKCdzZWxlY3QnKS5hZGQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgXG4gICAgICAgICAgICAgICAgY3JlYXRlQWN0aW9uQnV0dG9uKFwidW5kb1wiLCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogYnV0dG9ucyxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuY2xhc3Nlcy5DT05UUk9MX0JVVFRPTl9VTkRPLFxuICAgICAgICAgICAgICAgICAgICBrZXk6IFwidVwiLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1VuZG8gRWRpdCcsXG4gICAgICAgICAgICAgICAgICAgIGRvbnRTaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBvbkFjdGl2YXRlOiBmdW5jdGlvbiBvbkFjdGl2YXRlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdlb2Zsby5jdXJyZW50TW9kZS5oYW5kbGVVbmRvKClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICBjcmVhdGVBY3Rpb25CdXR0b24oXCJyZWRvXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBidXR0b25zLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5jbGFzc2VzLkNPTlRST0xfQlVUVE9OX1JFRE8sXG4gICAgICAgICAgICAgICAgICAgIGtleTogXCJyXCIsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnUmVkbyBFZGl0JyxcbiAgICAgICAgICAgICAgICAgICAgZG9udFNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG9uQWN0aXZhdGU6IGZ1bmN0aW9uIG9uQWN0aXZhdGUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VvZmxvLmN1cnJlbnRNb2RlLmhhbmRsZVJlZG8oKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgXG4gICAgICAgICAgICAgICAgY3JlYXRlQWN0aW9uQnV0dG9uKFwiY2FuY2VsXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBidXR0b25zLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5jbGFzc2VzLkNPTlRST0xfQlVUVE9OX0NBTkNFTCxcbiAgICAgICAgICAgICAgICAgICAga2V5OiBcIkVzY2FwZVwiLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0NhbmNlbCBFZGl0JyxcbiAgICAgICAgICAgICAgICAgICAgZG9udFNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG9uQWN0aXZhdGU6IGZ1bmN0aW9uIG9uQWN0aXZhdGUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VvZmxvLmNhbmNlbEVkaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb250cm9sLnR5cGUgPT09ICdhY3Rpb25zJykge1xuICAgICAgICAgICAgICAgIGNyZWF0ZU9wdGlvbkJ1dHRvbihcInNuYXBwaW5nXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBidXR0b25zLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInNuYXBwaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnRW5hYmxlL0Rpc2FibGUgU25hcHBpbmcnLFxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVDbGFzczogZ2VvZmxvLmlkICsgJy1zbmFwcGluZy1lbmFibGVkJyxcbiAgICAgICAgICAgICAgICAgICAgaW5hY3RpdmVDbGFzczogZ2VvZmxvLmlkICsgJy1zbmFwcGluZy1kaXNhYmxlZCcsXG4gICAgICAgICAgICAgICAgICAgIG9uQWN0aXZhdGU6IGZ1bmN0aW9uIG9uQWN0aXZhdGUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VvZmxvLmFjdGl2YXRlU25hcHBpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb25EZWFjdGl2YXRlOiBmdW5jdGlvbiBvbkRlYWN0aXZhdGUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VvZmxvLmRlYWN0aXZhdGVTbmFwcGluZygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIGNyZWF0ZU9wdGlvbkJ1dHRvbihcInBpbm5pbmdcIiwge1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGJ1dHRvbnMsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicGlubmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0VuYWJsZS9EaXNhYmxlIFBpbm5pbmcnLFxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVDbGFzczogZ2VvZmxvLmlkICsgJy1waW5uaW5nLWVuYWJsZWQnLFxuICAgICAgICAgICAgICAgICAgICBpbmFjdGl2ZUNsYXNzOiBnZW9mbG8uaWQgKyAnLXBpbm5pbmctZGlzYWJsZWQnLFxuICAgICAgICAgICAgICAgICAgICBvbkFjdGl2YXRlOiBmdW5jdGlvbiBvbkFjdGl2YXRlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdlb2Zsby5hY3RpdmF0ZVBpbm5pbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb25EZWFjdGl2YXRlOiBmdW5jdGlvbiBvbkRlYWN0aXZhdGUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VvZmxvLmRlYWN0aXZhdGVQaW5uaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgY3JlYXRlT3B0aW9uQnV0dG9uKFwicm91dGluZ1wiLCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogYnV0dG9ucyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJyb3V0aW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnRW5hYmxlL0Rpc2FibGUgUm91dGluZycsXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZUNsYXNzOiBnZW9mbG8uaWQgKyAnLXJvdXRpbmctZW5hYmxlZCcsXG4gICAgICAgICAgICAgICAgICAgIGluYWN0aXZlQ2xhc3M6IGdlb2Zsby5pZCArICctcm91dGluZy1kaXNhYmxlZCcsXG4gICAgICAgICAgICAgICAgICAgIG9uQWN0aXZhdGU6IGZ1bmN0aW9uIG9uQWN0aXZhdGUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VvZmxvLmFjdGl2YXRlUm91dGluZygpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvbkRlYWN0aXZhdGU6IGZ1bmN0aW9uIG9uRGVhY3RpdmF0ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZW9mbG8uZGVhY3RpdmF0ZVJvdXRpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgIFxuICAgICAgICAgICAgICAgIGNyZWF0ZU9wdGlvbkJ1dHRvbihcImV4cGxvcmluZ1wiLCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogYnV0dG9ucyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJleHBsb3JpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGBFbmFibGUvRGlzYWJsZSBFeHBsb3JpbmdgLFxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVDbGFzczogZ2VvZmxvLmlkICsgJy1leHBsb3JpbmctZW5hYmxlZCcsXG4gICAgICAgICAgICAgICAgICAgIGluYWN0aXZlQ2xhc3M6IGdlb2Zsby5pZCArICctZXhwbG9yaW5nLWRpc2FibGVkJyxcbiAgICAgICAgICAgICAgICAgICAgb25BY3RpdmF0ZTogZnVuY3Rpb24gb25BY3RpdmF0ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZW9mbG8uYWN0aXZhdGVFeHBsb3JpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb25EZWFjdGl2YXRlOiBmdW5jdGlvbiBvbkRlYWN0aXZhdGUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VvZmxvLmRlYWN0aXZhdGVFeHBsb3JpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICBjcmVhdGVPcHRpb25CdXR0b24oXCJwYWludGluZ1wiLCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogYnV0dG9ucyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJwYWludGluZ1wiLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0VuYWJsZS9EaXNhYmxlIFBhaW50aW5nJyxcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlQ2xhc3M6IGdlb2Zsby5pZCArICctcGFpbnRpbmctZW5hYmxlZCcsXG4gICAgICAgICAgICAgICAgICAgIGluYWN0aXZlQ2xhc3M6IGdlb2Zsby5pZCArICctcGFpbnRpbmctZGlzYWJsZWQnLFxuICAgICAgICAgICAgICAgICAgICBvbkFjdGl2YXRlOiBmdW5jdGlvbiBvbkFjdGl2YXRlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdlb2Zsby5hY3RpdmF0ZVBhaW50aW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG9uRGVhY3RpdmF0ZTogZnVuY3Rpb24gb25EZWFjdGl2YXRlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdlb2Zsby5kZWFjdGl2YXRlUGFpbnRpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb250cm9sLnR5cGUgPT09ICd0eXBlcycpIHtcbiAgICAgICAgICAgICAgICBjcmVhdGVDb250cm9sQnV0dG9uKFwicG9seWxpbmVcIiwge1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGJ1dHRvbnMsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLmNsYXNzZXMuQ09OVFJPTF9CVVRUT05fTElORSxcbiAgICAgICAgICAgICAgICAgICAga2V5OiBcImxcIixcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdEcmF3IFBvbHlsaW5lJyxcbiAgICAgICAgICAgICAgICAgICAgb25BY3RpdmF0ZTogZnVuY3Rpb24gb25BY3RpdmF0ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZW9mbG8uc2V0TW9kZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLm1vZGVzLkRSQVcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJQb2x5bGluZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb25EZWFjdGl2YXRlOiBmdW5jdGlvbiBvbkRlYWN0aXZhdGUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9mbG8uY3VycmVudE1vZGUuZGVhY3RpdmF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvZmxvLnNldE1vZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICBjcmVhdGVDb250cm9sQnV0dG9uKFwicG9seWdvblwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogYnV0dG9ucyxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuY2xhc3Nlcy5DT05UUk9MX0JVVFRPTl9QT0xZR09OLFxuICAgICAgICAgICAgICAgICAgICBrZXk6IFwicFwiLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0RyYXcgUG9seWdvbicsXG4gICAgICAgICAgICAgICAgICAgIG9uQWN0aXZhdGU6IGZ1bmN0aW9uIG9uQWN0aXZhdGUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VvZmxvLnNldE1vZGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6IGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5tb2Rlcy5EUkFXLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiUG9seWdvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb25EZWFjdGl2YXRlOiBmdW5jdGlvbiBvbkRlYWN0aXZhdGUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9mbG8uY3VycmVudE1vZGUuZGVhY3RpdmF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvZmxvLnNldE1vZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICBjcmVhdGVDb250cm9sQnV0dG9uKFwicmVjdGFuZ2xlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBidXR0b25zLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5jbGFzc2VzLkNPTlRST0xfQlVUVE9OX1JFQ1RBTkdMRSxcbiAgICAgICAgICAgICAgICAgICAga2V5OiBcInJcIixcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdEcmF3IFJlY3RhbmdsZScsXG4gICAgICAgICAgICAgICAgICAgIG9uQWN0aXZhdGU6IGZ1bmN0aW9uIG9uQWN0aXZhdGUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VvZmxvLnNldE1vZGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6IGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5tb2Rlcy5EUkFXLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiUmVjdGFuZ2xlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvbkRlYWN0aXZhdGU6IGZ1bmN0aW9uIG9uRGVhY3RpdmF0ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlb2Zsby5jdXJyZW50TW9kZS5kZWFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9mbG8uc2V0TW9kZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIGNyZWF0ZUNvbnRyb2xCdXR0b24oXCJjaXJjbGVcIiwge1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGJ1dHRvbnMsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLmNsYXNzZXMuQ09OVFJPTF9CVVRUT05fUE9JTlQsXG4gICAgICAgICAgICAgICAgICAgIGtleTogXCJvXCIsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnRHJhdyBDaXJjbGUnLFxuICAgICAgICAgICAgICAgICAgICBvbkFjdGl2YXRlOiBmdW5jdGlvbiBvbkFjdGl2YXRlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdlb2Zsby5zZXRNb2RlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlOiBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMubW9kZXMuRFJBVyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIkNpcmNsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb25EZWFjdGl2YXRlOiBmdW5jdGlvbiBvbkRlYWN0aXZhdGUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9mbG8uY3VycmVudE1vZGUuZGVhY3RpdmF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvZmxvLnNldE1vZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgIFxuICAgICAgICAgICAgICAgIGNyZWF0ZUNvbnRyb2xCdXR0b24oXCJ0ZXh0XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBidXR0b25zLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5jbGFzc2VzLkNPTlRST0xfQlVUVE9OX1RFWFQsXG4gICAgICAgICAgICAgICAgICAgIGtleTogXCJ0XCIsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnRHJhdyBUZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgb25BY3RpdmF0ZTogZnVuY3Rpb24gb25BY3RpdmF0ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZW9mbG8uc2V0TW9kZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLm1vZGVzLkRSQVcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJUZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvbkRlYWN0aXZhdGU6IGZ1bmN0aW9uIG9uRGVhY3RpdmF0ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlb2Zsby5jdXJyZW50TW9kZS5kZWFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9mbG8uc2V0TW9kZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIGNyZWF0ZUNvbnRyb2xCdXR0b24oXCJpY29uXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBidXR0b25zLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5jbGFzc2VzLkNPTlRST0xfQlVUVE9OX0lDT04sXG4gICAgICAgICAgICAgICAgICAgIGtleTogXCJpXCIsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnRHJhdyBJY29uJyxcbiAgICAgICAgICAgICAgICAgICAgb25BY3RpdmF0ZTogYXN5bmMgZnVuY3Rpb24gb25BY3RpdmF0ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZW9mbG8uc2V0TW9kZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLm1vZGVzLkRSQVcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJJY29uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvbkRlYWN0aXZhdGU6IGZ1bmN0aW9uIG9uRGVhY3RpdmF0ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlb2Zsby5jdXJyZW50TW9kZS5kZWFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9mbG8uc2V0TW9kZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbnRyb2wudHlwZSA9PT0gJ3V0aWxzJykge1xuICAgICAgICAgICAgICAgIGNyZWF0ZUFjdGlvbkJ1dHRvbihcInpvb21cIiwge1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGJ1dHRvbnMsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLmNsYXNzZXMuQ09OVFJPTF9CVVRUT05fWk9PTV9JTl9GRUFUVVJFUyxcbiAgICAgICAgICAgICAgICAgICAga2V5OiBcInhcIixcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdab29tIHRvIEV4dGVudCcsXG4gICAgICAgICAgICAgICAgICAgIG9uQWN0aXZhdGU6IGZ1bmN0aW9uIG9uQWN0aXZhdGUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VvZmxvLnpvb21Ub0ZlYXR1cmVzKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgICAgICAgICAvKiBjcmVhdGVBY3Rpb25CdXR0b24oXCJsb2NhdGVcIiwge1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGJ1dHRvbnMsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLmNsYXNzZXMuQ09OVFJPTF9CVVRUT05fTE9DQVRFLFxuICAgICAgICAgICAgICAgICAgICBrZXk6IFwidVwiLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0xvY2F0ZSBVc2VyJyxcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uOiBnZW9mbG8ubG9jYXRlLmdldEJ1dHRvbigpLFxuICAgICAgICAgICAgICAgICAgICBvbkFjdGl2YXRlOiBmdW5jdGlvbiBvbkFjdGl2YXRlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvZmxvLmxvY2F0ZS5vbkNvbnRyb2xFdmVudCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pOyAqL1xuICAgICAgICBcbiAgICAgICAgICAgICAgICBjcmVhdGVBY3Rpb25CdXR0b24oXCJyZWZyZXNoXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBidXR0b25zLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5jbGFzc2VzLkNPTlRST0xfQlVUVE9OX1JFRlJFU0gsXG4gICAgICAgICAgICAgICAgICAgIGtleTogXCJxXCIsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnUmVmcmVzaCcsXG4gICAgICAgICAgICAgICAgICAgIG9uQWN0aXZhdGU6IGZ1bmN0aW9uIG9uQWN0aXZhdGUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VvZmxvLnJlZnJlc2goKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgLyogY3JlYXRlQWN0aW9uQnV0dG9uKFwiZGVsZXRlLXNuYXBcIiwge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogYWN0aW9uMkdyb3VwLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLmNsYXNzZXMuQ09OVFJPTF9CVVRUT05fREVMRVRFX1NOQVAsXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdEZWxldGUgU25hcCBMYXllciBGZWF0dXJlcycsXG4gICAgICAgICAgICAgICAgb25BY3Rpb246IGZ1bmN0aW9uIG9uQWN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VvZmxvLmRlbGV0ZU1lc2hEYXRhKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7ICovXG4gICAgXG4gICAgICAgICAgICAvKiBjcmVhdGVDb250cm9sQnV0dG9uKFwiY3V0XCIsIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXI6IGNvbnRyb2xHcm91cCxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5jbGFzc2VzLkNPTlRST0xfQlVUVE9OX0NVVCxcbiAgICAgICAgICAgICAgICBrZXk6IFwiYVwiLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnQ3V0IEZlYXR1cmVzJyxcbiAgICAgICAgICAgICAgICBvbkFjdGl2YXRlOiBmdW5jdGlvbiBvbkFjdGl2YXRlKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VvZmxvLnNldE1vZGUoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLm1vZGVzLkNVVCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7ICovXG4gICAgXG4gICAgICAgICAgICAvKiBjcmVhdGVBY3Rpb25CdXR0b24oXCJjb21iaW5lXCIsIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXI6IGFjdGlvbjJHcm91cCxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5jbGFzc2VzLkNPTlRST0xfQlVUVE9OX0NPTUJJTkVfRkVBVFVSRVMsXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdDb21iaW5lIEZlYXR1cmVzJyxcbiAgICAgICAgICAgICAgICBrZXk6ICcrJyxcbiAgICAgICAgICAgICAgICBvbkFjdGlvbjogZnVuY3Rpb24gb25BY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZW9mbG8uY29tYmluZUZlYXR1cmVzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7ICovXG4gICAgXG4gICAgICAgICAgICAvKiBjcmVhdGVBY3Rpb25CdXR0b24oXCJncm91cC1lbGVtZW50c1wiLCB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiBhY3Rpb24yR3JvdXAsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuY2xhc3Nlcy5DT05UUk9MX0JVVFRPTl9HUk9VUF9GRUFUVVJFUyxcbiAgICAgICAgICAgICAgICBrZXk6IFwiZ1wiLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnR3JvdXAgU2ltaWxhciBGZWF0dXJlcycsXG4gICAgICAgICAgICAgICAgb25BY3Rpb246IGZ1bmN0aW9uIG9uQWN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VvZmxvLmdyb3VwRmVhdHVyZXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgICAgIGNyZWF0ZUFjdGlvbkJ1dHRvbihcInVuZ3JvdXAtZWxlbWVudHNcIiwge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogYWN0aW9uMkdyb3VwLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLmNsYXNzZXMuQ09OVFJPTF9CVVRUT05fVU5HUk9VUF9GRUFUVVJFUyxcbiAgICAgICAgICAgICAgICBrZXk6IFwiR1wiLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnVW5ncm91cCBTaW1pbGFyIEZlYXR1cmVzJyxcbiAgICAgICAgICAgICAgICBvbkFjdGlvbjogZnVuY3Rpb24gb25BY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZW9mbG8udW5ncm91cEZlYXR1cmVzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7ICovXG4gICAgXG4gICAgICAgICAgICAvKiBjcmVhdGVBY3Rpb25CdXR0b24oXCJjcmVhdGUtcG9seWdvblwiLCB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiBhY3Rpb24yR3JvdXAsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuY2xhc3Nlcy5DT05UUk9MX0JVVFRPTl9DUkVBVEVfUE9MWUdPTixcbiAgICAgICAgICAgICAgICBrZXk6ICdwJyxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0NyZWF0ZSBQb2x5Z29uIGZyb20gU2VsZWN0ZWQgRmVhdHVyZScsXG4gICAgICAgICAgICAgICAgb25BY3Rpb246IGZ1bmN0aW9uIG9uQWN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VvZmxvLmNyZWF0ZVBvbHlnb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTsgKi9cbiAgICBcbiAgICAgICAgICAgIC8qIGNyZWF0ZUFjdGlvbkJ1dHRvbihcImhpZGUtc2VsZWN0ZWRcIiwge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogYWN0aW9uMkdyb3VwLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLmNsYXNzZXMuQ09OVFJPTF9CVVRUT05fSElERV9TRUxFQ1RFRCxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0hpZGUgU2VsZWN0ZWQgRmVhdHVyZScsXG4gICAgICAgICAgICAgICAgb25BY3Rpb246IGZ1bmN0aW9uIG9uQWN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VvZmxvLmhpZGVGZWF0dXJlcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pOyAqL1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlQnV0dG9ucygpIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGJ1dHRvbkVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uKGJ1dHRvbklkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJ1dHRvbiA9IGJ1dHRvbkVsZW1lbnRzW2J1dHRvbklkXTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoYnV0dG9uLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYnV0dG9uKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvbikge1xuICAgICAgICAgICAgICAgICAgICBidXR0b24ucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGRlbGV0ZSBidXR0b25FbGVtZW50c1tidXR0b25JZF07XG4gICAgICAgICAgICAgICAgZGVsZXRlIGJ1dHRvbk9wdGlvbnNbYnV0dG9uSWRdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICBcbiAgICBcbiAgICAgICAgZnVuY3Rpb24gZ2V0Q29udHJvbE9wdGlvbnMgKGNvbnRyb2wpIHtcbiAgICAgICAgICAgIGlmICghY29udHJvbCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgdmFyIGNvbnRyb2xzID0gZ2VvZmxvLm9wdGlvbnMuY29udHJvbHMgJiYgdHlwZW9mIGdlb2Zsby5vcHRpb25zLmNvbnRyb2xzID09PSAnb2JqZWN0JztcbiAgICAgICAgICAgIHZhciBkb250U2hvdyA9IGNvbnRyb2xzID8gIWdlb2Zsby5vcHRpb25zLmNvbnRyb2xzW2NvbnRyb2wudHlwZV0gOiBmYWxzZVxuICAgICAgICAgICAgcmV0dXJuICBkb250U2hvdyB8fCBjb250cm9sLmRvbnRTaG93IHx8ICFnZW9mbG8ub3B0aW9ucy5jb250cm9scyA/IGZhbHNlIDogdHJ1ZTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBnZXRCdXR0b25PcHRpb25zKCkge1xuICAgICAgICAgICAgcmV0dXJuIGJ1dHRvbk9wdGlvbnM7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gZ2V0QnV0dG9uRWxlbWVudHMoKSB7XG4gICAgICAgICAgICByZXR1cm4gYnV0dG9uRWxlbWVudHM7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2w7IiwiLyoqXG4gKiBAbWl4aW5cbiAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvXG4gKiBAbmFtZSBEcmF3XG4gKiBAZGVzY3JpcHRpb24gVGhpcyBtb2R1bGUgcHJvdmlkZXMgdGhlIGZ1bmN0aW9uYWxpdHkgZm9yIGRyYXdpbmcgZmVhdHVyZXMgb24gdGhlIG1hcC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBjdXJyZW50IGluc3RhbmNlIGZvciBtZXRob2QgY2hhaW5pbmcuXG4gKiBcbiAqL1xuY29uc3QgRHJhdyA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBnZW9mbG8gPSB0aGlzLmdlb2ZsbztcblxuICAgIHRoaXMuaWQgPSAnZHJhdyc7XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkRyYXdcblx0ICogQG5hbWUgY2FuSGFuZGxlXG5cdCAqIEBkZXNjcmlwdGlvbiBDaGVja3MgaWYgdGhlIGdpdmVuIG1vZGVOYW1lIGlzIGVxdWFsIHRvIHRoZSBjb25zdGFudCBtb2RlIERSQVcuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlTmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBtb2RlIHRvIGJlIGNoZWNrZWQuXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIG1vZGVOYW1lIGlzIGVxdWFsIHRvIERSQVcsIGZhbHNlIG90aGVyd2lzZS5cblx0ICovXG4gICAgdGhpcy5jYW5IYW5kbGUgPSBmdW5jdGlvbiAobW9kZU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5tb2Rlcy5EUkFXID09PSBtb2RlTmFtZTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkRyYXdcblx0ICogQG5hbWUgYWN0aXZhdGVcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gYWN0aXZhdGVzIHRoZSBkcmF3aW5nIG1vZGUgd2l0aCB0aGUgcHJvdmlkZWQgb3B0aW9ucy4gSXQgc2V0cyB1cCB0aGUgbmVjZXNzYXJ5IHByb3BlcnRpZXMgYW5kIGV2ZW50IGxpc3RlbmVycyBmb3IgZHJhd2luZyBmZWF0dXJlcyBvbiB0aGUgbWFwLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciBhY3RpdmF0aW5nIHRoZSBkcmF3aW5nIG1vZGUuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5mZWF0dXJlXSAtIFRoZSBmZWF0dXJlIHRvIGJlIGVkaXRlZCBvciBkcmF3bi5cblx0ICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLnR5cGVdIC0gVGhlIHR5cGUgb2YgZmVhdHVyZSB0byBiZSBkcmF3bi5cblx0ICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmxuZ0xhdF0gLSBUaGUgbG9uZ2l0dWRlIGFuZCBsYXRpdHVkZSBjb29yZGluYXRlcyBmb3IgZHJhd2luZy5cblx0ICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmlkXSAtIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGZlYXR1cmUuXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgaW5zdGFuY2UgZm9yIG1ldGhvZCBjaGFpbmluZy5cblx0ICovXG4gICAgdGhpcy5hY3RpdmF0ZSA9IGZ1bmN0aW9uIChvcHRpb25zPXt9KSB7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2YXRlZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoZ2VvZmxvLmN1cnJlbnRNb2RlLmlkICE9PSB0aGlzLmlkKSByZXR1cm4gb3B0aW9ucy5tb2RlID0gdGhpcy5pZCwgZ2VvZmxvLnNldE1vZGUob3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5hY3RpdmF0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9oYW5kbGVIaXN0b3J5ID0gdGhpcy5oYW5kbGVIaXN0b3J5LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGlzdG9yeSA9IFtdO1xuICAgICAgICB0aGlzLnVuZG8gPSBbXTtcblxuICAgICAgICBpZiAob3B0aW9ucy5mZWF0dXJlKSBvcHRpb25zLnR5cGUgPSBlZGl0TW9kZShvcHRpb25zLmZlYXR1cmUpO1xuICAgICAgICBnZW9mbG8uZHJhd01vZGUgPSAhZ2VvZmxvLmVkaXRNb2RlO1xuICAgICAgICBcbiAgICAgICAgdmFyIGxuZ0xhdCA9IG9wdGlvbnMubG5nTGF0O1xuICAgICAgICBkZWxldGUgb3B0aW9ucy5sbmdMYXQ7XG5cbiAgICAgICAgdmFyIG5ld1R5cGUgPSB0aGlzLnR5cGUgPSBvcHRpb25zLnR5cGU7XG4gICAgICAgIHZhciBwcm9wZXJ0aWVzID0gb3B0aW9ucy5mZWF0dXJlID8gb3B0aW9ucy5mZWF0dXJlLnByb3BlcnRpZXMgOiBvcHRpb25zO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gT2JqZWN0LmFzc2lnbih7fSwgcHJvcGVydGllcyk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnByb3BlcnRpZXMubW9kZTtcbiAgICAgICAgZGVsZXRlIHRoaXMucHJvcGVydGllcy5sb2NhdGlvbjtcblxuICAgICAgICBjb25zdCBpZCA9IG9wdGlvbnMuaWQgfHwgcHJvcGVydGllcy5pZCB8fCBVUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFtdKSkuc2xpY2UoLTM2KTtcblxuICAgICAgICB0aGlzLnByb3BlcnRpZXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLnR5cGUgPSBuZXdUeXBlO1xuXG4gICAgICAgIGdlb2Zsby5zZXRCdXR0b25zKCk7XG4gICAgICAgIGdlb2Zsby5zZXRBY3RpdmVCdXR0b24obmV3VHlwZSk7XG4gICAgICAgIFxuICAgICAgICBpZiAoZ2VvZmxvLlV0aWxpdGllcy5pc1BvaW50KGdlb2Zsby5ob3RGZWF0dXJlKSkgdGhpcy5pc1BvaW50ID0gdHJ1ZTtcblxuICAgICAgICBnZW9mbG8uZmlyZSgnZHJhdy5hY3RpdmF0ZScsIHtcbiAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgIHR5cGU6IG5ld1R5cGUsXG4gICAgICAgICAgICBhY3RpdmF0ZWQ6IHRoaXMuYWN0aXZhdGVkLFxuICAgICAgICAgICAgZWRpdGluZzogZ2VvZmxvLmVkaXRNb2RlLFxuICAgICAgICAgICAgZmVhdHVyZTogZ2VvZmxvLmhvdEZlYXR1cmUgfHwgb3B0aW9ucy5mZWF0dXJlLFxuICAgICAgICAgICAgcHJvcGVydGllczogdGhpcy5wcm9wZXJ0aWVzXG4gICAgICAgIH0pXG5cbiAgICAgICAgZ2VvZmxvLm9uKCdzb3VyY2UuaG90JywgdGhpcy5faGFuZGxlSGlzdG9yeSk7XG4gICAgICAgIGlmIChsbmdMYXQpIHRoaXMuaGFuZGxlTW92ZSh7IGxuZ0xhdDogbG5nTGF0IH0pO1xuICAgICAgICBnZW9mbG8ub3B0aW9ucy5wYWludGluZy5lbmFibGUgfHwgKGdlb2Zsby5tb2JpbGUgJiYgbmV3VHlwZSA9PT0gJ1JlY3RhbmdsZScpID8gZ2VvZmxvLmFjdGl2YXRlUGFpbnRpbmcoKSA6IGZhbHNlO1xuICAgICAgICB0aGlzLnVwZGF0ZUhvdFNvdXJjZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkRyYXdcblx0ICogQG5hbWUgZGVhY3RpdmF0ZVxuXHQgKiBAZGVzY3JpcHRpb24gRGVhY3RpdmF0ZXMgdGhlIGRyYXcgZmVhdHVyZSBieSBjYW5jZWxpbmcgdGhlIGN1cnJlbnQgZWRpdCwgY2xlYW5pbmcgdXAgdGhlIGRyYXcsIHNldHRpbmcgYnV0dG9ucywgYW5kIGhhbmRsaW5nIGV2ZW50cy5cblx0ICogQHBhcmFtIHtib29sZWFufSBjYW5jZWwgLSBGbGFnIHRvIGRldGVybWluZSBpZiB0aGUgZWRpdCBzaG91bGQgYmUgY2FuY2VsZWQuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RhbmRieSAtIEZsYWcgdG8gaW5kaWNhdGUgaWYgdGhlIGZlYXR1cmUgaXMgaW4gc3RhbmRieSBtb2RlLlxuXHQgKiBAcGFyYW0ge29iamVjdH0gZmVhdHVyZSAtIFRoZSBmZWF0dXJlIHRvIGJlIGRlYWN0aXZhdGVkLlxuXHQgKi9cbiAgICB0aGlzLmRlYWN0aXZhdGUgPSBmdW5jdGlvbiAoY2FuY2VsLCBzdGFuZGJ5LCBmZWF0dXJlKSB7XG4gICAgICAgIGlmICghdGhpcy5hY3RpdmF0ZWQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGNhbmNlbCkgdGhpcy5jYW5jZWxFZGl0KHN0YW5kYnksIGZlYXR1cmUpO1xuICAgICAgICBjbGVhbnVwRHJhdyh0aGlzKTtcbiAgICAgICAgZ2VvZmxvLnNldEJ1dHRvbnMoKTtcbiAgICAgICAgZ2VvZmxvLm9mZignc291cmNlLmhvdCcsIHRoaXMuX2hhbmRsZUhpc3RvcnkpO1xuICAgICAgICBnZW9mbG8uZmlyZSgnZHJhdy5kZWFjdGl2YXRlJywgeyBhY3RpdmF0ZWQ6IHRoaXMuYWN0aXZhdGVkIH0pO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBnZW9mbG8ubWFwLmdldFNvdXJjZShnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5TRUxFQ1QpLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXSkpOyB9LCAzMDApO1xuICAgICAgICAhZ2VvZmxvLm9wdGlvbnMucmVwZWF0RHJhdyA/IGdlb2Zsby5zZXRNb2RlKCkgOiB0aGlzLmFjdGl2YXRlKHRoaXMucHJvcGVydGllcyk7XG4gICAgfVxuXG5cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uRHJhd1xuXHQgKiBAbmFtZSB1cGRhdGVIb3RTb3VyY2Vcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gdXBkYXRlcyB0aGUgaG90IHNvdXJjZSBmZWF0dXJlIHdpdGggbmV3IHByb3BlcnRpZXMgYW5kIGFzc2lnbnMgaXQgdG8gdGhlIGdlb2Zsby5ob3RGZWF0dXJlLiBJdCB0aGVuIHVwZGF0ZXMgdGhlIGRhdGEgb2YgdGhlIFZFUlRFWCBhbmQgSE9UIHNvdXJjZXMgb24gdGhlIG1hcCB3aXRoIHRoZSB1cGRhdGVkIGZlYXR1cmUuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBmZWF0dXJlIC0gVGhlIGZlYXR1cmUgb2JqZWN0IHRvIGJlIHVwZGF0ZWQuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzIC0gVGhlIG5ldyBwcm9wZXJ0aWVzIHRvIGJlIGFzc2lnbmVkIHRvIHRoZSBmZWF0dXJlLlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgdXBkYXRlZCBob3Qgc291cmNlIGZlYXR1cmUuXG5cdCAqL1xuICAgIHRoaXMudXBkYXRlSG90U291cmNlID0gZnVuY3Rpb24gKGZlYXR1cmUsIHByb3BlcnRpZXMpIHtcbiAgICAgICAgaWYgKGZlYXR1cmUpIGdlb2Zsby5ob3RGZWF0dXJlID0gZmVhdHVyZTtcbiAgICAgICAgaWYgKCFnZW9mbG8uaG90RmVhdHVyZSB8fCBnZW9mbG8ub3ZlcnBhc3NEb3dubG9hZGluZykgcmV0dXJuO1xuICAgICAgICBnZW9mbG8uaG90RmVhdHVyZS5wcm9wZXJ0aWVzID0gZ2VvZmxvLlV0aWxpdGllcy5hc3NpZ25EZWVwKGdlb2Zsby5ob3RGZWF0dXJlLnByb3BlcnRpZXMsIHByb3BlcnRpZXMgfHwge30pO1xuICAgICAgICBnZW9mbG8uaG90RmVhdHVyZS5wcm9wZXJ0aWVzLnN0eWxlID0gZ2VvZmxvLmhvdEZlYXR1cmUucHJvcGVydGllcy5zdHlsZSB8fCB7fTtcbiAgICAgICAgZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuVkVSVEVYKS5zZXREYXRhKHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW2dlb2Zsby5ob3RGZWF0dXJlXSkpO1xuICAgICAgICBnZW9mbG8ubWFwLmdldFNvdXJjZShnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5IT1QpLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbZ2VvZmxvLmhvdEZlYXR1cmVdKSk7XG4gICAgICAgIHJldHVybiBnZW9mbG8uaG90RmVhdHVyZTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkRyYXdcblx0ICogQG5hbWUgZGVsZXRlVmVydGV4XG5cdCAqIEBkZXNjcmlwdGlvbiBEZWxldGVzIGEgdmVydGV4IGZyb20gdGhlIGN1cnJlbnQgZmVhdHVyZSBiZWluZyBlZGl0ZWQgb24gdGhlIG1hcC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IG9mIHRoZSB2ZXJ0ZXggdG8gYmUgZGVsZXRlZC5cblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuICAgIHRoaXMuZGVsZXRlVmVydGV4ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIGlmIChnZW9mbG8uaG90RmVhdHVyZSkge1xuICAgICAgICAgICAgY29uc3QgY29vcmRzID0gZ2VvZmxvLmhvdEZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgICAgICAgICBpbmRleCA9IGluZGV4ICE9PSB1bmRlZmluZWQgPyBpbmRleCA6IGNvb3Jkcy5sZW5ndGggLSAxO1xuXG4gICAgICAgICAgICBpZiAoY29vcmRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBjb29yZHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICBnZW9mbG8ubGFzdENsaWNrID0geyBjb29yZHM6IGNvb3Jkc1tjb29yZHMubGVuZ3RoIC0gMV0gfTtcblxuICAgICAgICAgICAgICAgIGlmIChjb29yZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBnZW9mbG8uc25hcEZlYXR1cmUgPSB0dXJmLnBvaW50KGNvb3Jkc1tjb29yZHMubGVuZ3RoIC0gMV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGdlb2Zsby5zbmFwRmVhdHVyZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGNvb3Jkcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGdlb2Zsby5tYXAuZ2V0U291cmNlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLkhPVCkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtnZW9mbG8uaG90RmVhdHVyZV0pKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBnZW9mbG8uaG90RmVhdHVyZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGdlb2Zsby5tYXAuZ2V0U291cmNlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLkhPVCkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtdKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZ2VvZmxvLmZpcmUoJ3ZlcnRleC5kZWxldGUnLCB7IGNvb3JkczogY29vcmRzLCBpbmRleDogaW5kZXgsIGZlYXR1cmU6IGdlb2Zsby5ob3RGZWF0dXJlIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChnZW9mbG8ubGFzdE1vdXNlRXZlbnQpIHtcbiAgICAgICAgICAgICAgICBnZW9mbG8uY3VycmVudE1vZGUuaGFuZGxlTW92ZSA/IGdlb2Zsby5jdXJyZW50TW9kZS5oYW5kbGVNb3ZlKGdlb2Zsby5sYXN0TW91c2VFdmVudCkgOiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChnZW9mbG8uc25hcEZlYXR1cmUpIHtcbiAgICAgICAgICAgIGdlb2Zsby5zbmFwRmVhdHVyZSA9IG51bGw7XG4gICAgICAgICAgICBnZW9mbG8ubGFzdENsaWNrID0gbnVsbDtcbiAgICAgICAgICAgIGdlb2Zsby5tYXAuZ2V0U291cmNlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLlNOQVApLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXSkpO1xuICAgICAgICB9XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5EcmF3XG5cdCAqIEBuYW1lIGdldEZlYXR1cmVcblx0ICogQGRlc2NyaXB0aW9uIFJldHJpZXZlcyB0aGUgaG90IGZlYXR1cmUgZnJvbSB0aGUgY29udGV4dC5cblx0ICogQHJldHVybnMge2FueX0gVGhlIGhvdCBmZWF0dXJlIHN0b3JlZCBpbiB0aGUgY29udGV4dC5cblx0ICovXG4gICAgdGhpcy5nZXRGZWF0dXJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZ2VvZmxvLmhvdEZlYXR1cmU7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5EcmF3XG5cdCAqIEBuYW1lIHNlbGVjdEZlYXR1cmVcblx0ICogQGRlc2NyaXB0aW9uIFNlbGVjdHMgYSBmZWF0dXJlIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBJRC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGlkIC0gVGhlIElEIG9mIHRoZSBmZWF0dXJlIHRvIGJlIHNlbGVjdGVkLlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBmYWxzZSBpZiBubyBJRCBpcyBwcm92aWRlZCwgb3RoZXJ3aXNlIHJldHVybnMgdGhlIHJlc3VsdCBvZiBzZWxlY3RpbmcgdGhlIGZlYXR1cmUuXG5cdCAqL1xuICAgIHRoaXMuc2VsZWN0RmVhdHVyZSA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICBpZiAoIWlkKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGdlb2Zsby5zZXRNb2RlKCk7XG4gICAgICAgIHJldHVybiBnZW9mbG8uY3VycmVudE1vZGUuc2VsZWN0RmVhdHVyZShpZCk7XG4gICAgfVxuXG5cdC8qKiBcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uRHJhd1xuXHQgKiBAbmFtZSBzYXZlRWRpdFxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBzYXZlcyB0aGUgZWRpdGVkIGZlYXR1cmUgaW4gdGhlIG1hcC5cblx0ICogQHBhcmFtIHtPYmplY3R9IGZlYXR1cmUgLSBUaGUgZmVhdHVyZSB0byBiZSBzYXZlZC5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IC0gUmV0dXJucyB0cnVlIGlmIHRoZSBmZWF0dXJlIGlzIHN1Y2Nlc3NmdWxseSBzYXZlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQgKi9cbiAgICB0aGlzLnNhdmVFZGl0ID0gZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgdmFyIGhvdCA9IGdlb2Zsby5ob3RGZWF0dXJlO1xuICAgICAgICBpZiAoIWhvdCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIHZhciB0eXBlID0gaG90LnByb3BlcnRpZXMudHlwZSB8fCBmZWF0dXJlLnByb3BlcnRpZXMudHlwZSB8fCB0aGlzLnR5cGU7XG4gICAgICAgIGZlYXR1cmUgPSBmZWF0dXJlIHx8IGhvdDtcblxuICAgICAgICB0aGlzLnNhdmluZ0VkaXQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZmluaXNoRHJhdyh0eXBlLCBmZWF0dXJlKTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkRyYXdcblx0ICogQG5hbWUgY2FuY2VsRWRpdFxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBjYW5jZWxzIHRoZSBjdXJyZW50IGVkaXRpbmcgb3BlcmF0aW9uIGJ5IHNldHRpbmcgdGhlICdjYW5jZWxsZWQnIGZsYWcgdG8gdHJ1ZS4gSWYgdGhlICdmZWF0dXJlJyBwYXJhbWV0ZXIgaXMgbm90IHByb3ZpZGVkIG9yIGRvZXMgbm90IGhhdmUgYSAndHlwZScgcHJvcGVydHksIGl0IHNldHMgJ2dlb2Zsby5ob3RGZWF0dXJlJyB0byBudWxsIGFuZCBmaW5pc2hlcyB0aGUgZHJhdyBwcm9jZXNzLiBJdCB0aGVuIHNldHMgdGhlICdzdGFuZGJ5JyBwcm9wZXJ0eSwgdXBkYXRlcyAnZ2VvZmxvLmhvdEZlYXR1cmUnLCBmaXJlcyBhICdkcmF3LmNhbmNlbCcgZXZlbnQgd2l0aCB0aGUgZmVhdHVyZSwgYW5kIHJldHVybnMgdGhlIHJlc3VsdCBvZiAnZmluaXNoRHJhdygpJy5cblx0ICogQHBhcmFtIHtib29sZWFufSBzdGFuZGJ5IC0gVGhlIHN0YW5kYnkgdmFsdWUgdG8gc2V0LlxuXHQgKiBAcGFyYW0ge29iamVjdH0gZmVhdHVyZSAtIFRoZSBmZWF0dXJlIGJlaW5nIGVkaXRlZC5cblx0ICogQHJldHVybnMge2FueX0gVGhlIHJlc3VsdCBvZiB0aGUgJ2ZpbmlzaERyYXcoKScgZnVuY3Rpb24uXG5cdCAqL1xuICAgIHRoaXMuY2FuY2VsRWRpdCA9IGZ1bmN0aW9uIChzdGFuZGJ5LCBmZWF0dXJlKSB7XG4gICAgICAgIHRoaXMuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKCFmZWF0dXJlIHx8ICFmZWF0dXJlLnByb3BlcnRpZXMudHlwZSkgcmV0dXJuIGdlb2Zsby5ob3RGZWF0dXJlID0gbnVsbCwgZmluaXNoRHJhdygpO1xuICAgICAgICB0aGlzLnN0YW5kYnkgPSBzdGFuZGJ5O1xuICAgICAgICBnZW9mbG8uaG90RmVhdHVyZSA9IGZlYXR1cmU7XG4gICAgICAgIGdlb2Zsby5maXJlKCdkcmF3LmNhbmNlbCcsIHsgZmVhdHVyZTogZmVhdHVyZSB9KTtcbiAgICAgICAgcmV0dXJuIGZpbmlzaERyYXcoKTtcbiAgICB9XG5cblxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5EcmF3XG5cdCAqIEBuYW1lIGhhbmRsZURvd25cblx0ICogQGRlc2NyaXB0aW9uIEhhbmRsZXMgdGhlIG1vdXNlIG9yIHRvdWNoIGRvd24gZXZlbnQgb24gdGhlIG1hcC4gVXBkYXRlcyB0aGUgbW91c2UvdG91Y2ggcG9zaXRpb24sIGFkZHMgYSB2ZXJ0ZXggaWYgYWxsb3dlZCwgYW5kIHNldHMgZmVhdHVyZXMgZm9yIHBpbm5pbmcuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIFRoZSBldmVudCBvYmplY3QgY29udGFpbmluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbW91c2Ugb3IgdG91Y2ggZXZlbnQuXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cbiAgICB0aGlzLmhhbmRsZURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIHBvaW50O1xuXG4gICAgICAgIGdlb2Zsby5tb3VzZUlzRG93biA9IFtldmVudC5sbmdMYXQubG5nLCBldmVudC5sbmdMYXQubGF0XTtcblxuICAgICAgICBpZiAoZXZlbnQudG91Y2gpIHtcbiAgICAgICAgICAgIGdlb2Zsby50b3VjaERvd24gPSB0cnVlO1xuICAgICAgICAgICAgcG9pbnQgPSB0dXJmLnBvaW50KGdlb2Zsby5tb3VzZUlzRG93bik7XG4gICAgICAgICAgICBvblZlcnRleChnZXRWZXJ0ZXgocG9pbnQpKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKGdlb2Zsby5jYW5BZGRWZXJ0ZXgpIHtcbiAgICAgICAgICAgIHBvaW50ID0gYWRkVmVydGV4KGdlb2Zsby5jYW5BZGRWZXJ0ZXgsIGV2ZW50KTtcbiAgICAgICAgICAgIHJldHVybiBvblZlcnRleChnZXRWZXJ0ZXgocG9pbnQpLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdlb2Zsby5QaW5uaW5nLnNldEZlYXR1cmVzKGdlb2Zsby5zbmFwcGVkVmVydGV4KTtcbiAgICAgICAgc3RhcnRJZGxlVGltZSgpO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uRHJhd1xuXHQgKiBAbmFtZSBoYW5kbGVVcFxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBpcyByZXNwb25zaWJsZSBmb3IgaGFuZGxpbmcgdGhlIG1vdXNlIHVwIGV2ZW50IGR1cmluZyBkcmF3aW5nIGFuZCBlZGl0aW5nIG9wZXJhdGlvbnMgb24gdGhlIG1hcC4gSXQgY2hlY2tzIHZhcmlvdXMgY29uZGl0aW9ucyBhbmQgdHJpZ2dlcnMgY29ycmVzcG9uZGluZyBhY3Rpb25zIGJhc2VkIG9uIHRoZSBjb250ZXh0IGFuZCB1c2VyIGludGVyYWN0aW9ucy5cblx0ICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBUaGUgbW91c2UgdXAgZXZlbnQgb2JqZWN0LlxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG4gICAgdGhpcy5oYW5kbGVVcCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBnZW9mbG8ubW91c2VJc0Rvd24gPSBmYWxzZTtcbiAgICAgICAgZ2VvZmxvLnRvdWNoRG93biA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChnZW9mbG8uUGFpbnRpbmcuZW5hYmxlZCkgcmV0dXJuIGdlb2Zsby5QYWludGluZy5oYW5kbGVVcChldmVudCk7XG4gICAgICAgIGlmIChnZW9mbG8uYWRkZWRWZXJ0ZXhPbkxpbmUgJiYgIWdlb2Zsby5kcmFnTW92aW5nKSByZXR1cm47XG4gICAgICAgIGlmIChldmVudC50b3VjaCAmJiBnZW9mbG8udG91Y2hNb3ZpbmcpIHJldHVybiBnZW9mbG8uZHJhZ01vdmluZyA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChnZW9mbG8uVXRpbGl0aWVzLmlzUG9pbnQoZ2VvZmxvLmhvdEZlYXR1cmUpICYmIGdlb2Zsby5zbmFwcGVkVmVydGV4KSByZXR1cm4gZ2VvZmxvLmVkaXRNb2RlID8gdGhpcy5zYXZlRWRpdCgpIDogZmluaXNoRHJhdyh0aGlzLnR5cGUpO1xuXG4gICAgICAgIGlmIChnZW9mbG8uc25hcHBlZFZlcnRleCAmJiBnZW9mbG8uZHJhZ01vdmluZyAmJiAhZ2VvZmxvLm1hcE1vdmluZyAmJiB0aGlzLnR5cGUgIT09ICdSZWN0YW5nbGUnKSB7XG4gICAgICAgICAgICBnZW9mbG8uZ2FtZXBhZERyYWcgPSBldmVudC5nYW1lcGFkO1xuXG4gICAgICAgICAgICB2YXIgaXNMYXN0SW5kZXggPSBnZW9mbG8uVXRpbGl0aWVzLmlzTGFzdEluZGV4KGdlb2Zsby5kcmFnSW5kZXgsIGdlb2Zsby5ob3RGZWF0dXJlKTtcbiAgICAgICAgICAgIGlzTGFzdEluZGV4ID0gaXNMYXN0SW5kZXggPyBpc0xhc3RJbmRleCA6IGdlb2Zsby5VdGlsaXRpZXMuaXNQb2x5Z29uKGdlb2Zsby5ob3RGZWF0dXJlKSAmJiBnZW9mbG8uZHJhZ0luZGV4ID09IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGNvb3JkcyA9IGdlb2Zsby5VdGlsaXRpZXMuZ2V0TGFzdEluZGV4Q29vcmRzKGdlb2Zsby5ob3RGZWF0dXJlKTtcblxuICAgICAgICAgICAgb25WZXJ0ZXgoZ2V0VmVydGV4KHR1cmYucG9pbnQoZ2VvZmxvLnNuYXBwZWRWZXJ0ZXgpKSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUhvdFNvdXJjZSgpO1xuICAgICAgICAgICAgaWYgKGlzTGFzdEluZGV4KSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBnZW9mbG8ubGFzdENsaWNrID0geyBjb29yZHM6IGNvb3JkcyB9IH0sIDEwMClcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZ2VvZmxvLnBpbmFibGVGZWF0dXJlcyA9IFtdO1xuICAgICAgICBnZW9mbG8ubW91c2VJc0lkbGUgPSBmYWxzZTtcbiAgICAgICAgYWRkVGV4dC5jYWxsKHRoaXMsIHRoaXMudHlwZSk7XG4gICAgICAgIGdlb2Zsby5yZWZyZXNoTWVzaERhdGEoKTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkRyYXdcblx0ICogQG5hbWUgaGFuZGxlQ2xpY2tcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gcHJvY2Vzc2VzIHRoZSBjbGljayBldmVudCBmb3IgZHJhd2luZyBmZWF0dXJlcyBvbiB0aGUgbWFwLiBJdCBkZXRlcm1pbmVzIHRoZSBhY3Rpb24gYmFzZWQgb24gdGhlIGV2ZW50IHR5cGUgYW5kIGNvbnRleHQgc3RhdGUsIHN1Y2ggYXMgZWRpdGluZyBtb2RlLCB0b3VjaCBpbnB1dCwgdmVydGV4IGFkZGl0aW9uLCBhbmQgZ2FtZXBhZCBpbnRlcmFjdGlvbi5cblx0ICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IC0gVGhlIGV2ZW50IG9iamVjdCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjbGljayBldmVudC5cblx0ICogQHJldHVybnMge09iamVjdH0gVGhlIHVwZGF0ZWQgZXZlbnQgb2JqZWN0IG9yIHRoZSByZXN1bHQgb2YgdGhlIGRyYXdpbmcgYWN0aW9uLlxuXHQgKi9cbiAgICB0aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5maW5pc2gpIHJldHVybiBnZW9mbG8uZWRpdE1vZGUgPyB0aGlzLnNhdmVFZGl0KCkgOiBmaW5pc2hEcmF3KHRoaXMudHlwZSk7XG4gICAgICAgIGlmIChldmVudC50b3VjaCAmJiBnZW9mbG8udG91Y2hNb3ZpbmcpIHJldHVybiBnZW9mbG8udG91Y2hNb3ZpbmcgPSBmYWxzZSwgZ2VvZmxvLlNuYXBwaW5nLnNldEZlYXR1cmUoKSwgdGhpcy51cGRhdGVIb3RTb3VyY2UoKTtcbiAgICAgICAgaWYgKGV2ZW50LnRvdWNoKSBnZW9mbG8udG91Y2hDbGljayA9IHRydWU7XG5cbiAgICAgICAgaWYgKGdlb2Zsby5hZGRlZFZlcnRleE9uTGluZSkge1xuICAgICAgICAgICAgZ2VvZmxvLlNuYXBwaW5nLnNldEZlYXR1cmUoKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlSG90U291cmNlKCk7XG4gICAgICAgICAgICBvblZlcnRleChnZXRWZXJ0ZXgoZ2VvZmxvLmFkZGVkVmVydGV4T25MaW5lKSk7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZURyYWcoZXZlbnQpO1xuICAgICAgICAgICAgZ2VvZmxvLmRyYWdNb3ZpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGdlb2Zsby5nYW1lcGFkRHJhZyA9IGZhbHNlXG4gICAgICAgICAgICBnZW9mbG8ubW91c2VJc0lkbGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnZW9mbG8uZ2FtZXBhZERyYWcpIHJldHVybiBnZW9mbG8uZ2FtZXBhZERyYWcgPSBmYWxzZTtcblxuICAgICAgICBpZiAoZ2VvZmxvLmVkaXRNb2RlICYmICh0aGlzLnR5cGUgPT09ICdQb2x5Z29uJyB8fCB0aGlzLnR5cGUgPT09ICdUZXh0JykpIHJldHVybjtcblxuICAgICAgICBpZiAoIXRoaXMuZmlyc3RDbGljayAmJiAhZ2VvZmxvLmRyYXdTdGFydGVkKSB7XG4gICAgICAgICAgICBnZW9mbG8uZHJhd1N0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgZ2VvZmxvLmZpcmUoJ2RyYXcuc3RhcnQnLCB7IHR5cGU6IHRoaXMudHlwZSwgZWRpdGluZzogZ2VvZmxvLmVkaXRNb2RlLCBjb29yZHM6IFtldmVudC5sbmdMYXQubG5nLCBldmVudC5sbmdMYXQubGF0XSB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdlb2Zsby5maXJlKCd2ZXJ0ZXguYWRkJywgeyB0eXBlOiB0aGlzLnR5cGUsIGNvb3JkczogW2V2ZW50LmxuZ0xhdC5sbmcsIGV2ZW50LmxuZ0xhdC5sYXRdIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxhc3RQb2ludCA9IGdlb2Zsby5jbG9zZXN0UG9pbnQgfHwgeyBjb29yZHM6IFtldmVudC5sbmdMYXQubG5nLCBldmVudC5sbmdMYXQubGF0XSB9O1xuICAgICAgICB2YXIgcG9pbnQgPSB0dXJmLnBvaW50KGxhc3RQb2ludC5jb29yZHMpO1xuXG4gICAgICAgIHBvaW50LnByb3BlcnRpZXMgPSB0aGlzLnByb3BlcnRpZXM7XG4gICAgICAgIHBvaW50LnNvdXJjZSA9IHRoaXMuc291cmNlO1xuXG4gICAgICAgIGdlb2Zsby5sYXN0TW92ZSA9IGxhc3RQb2ludC5jb29yZHMubGVuZ3RoID4gMSA/IHsgbGF0OiBsYXN0UG9pbnQuY29vcmRzW2xhc3RQb2ludC5jb29yZHMubGVuZ3RoLTFdWzFdLCBsbmc6IGxhc3RQb2ludC5jb29yZHNbbGFzdFBvaW50LmNvb3Jkcy5sZW5ndGgtMV1bMF0gfSA6IGZhbHNlOyAgICAgICAgXG5cbiAgICAgICAgaWYgKCFnZW9mbG8uc3RhcnRQb2ludCkge1xuICAgICAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ1JlY3RhbmdsZScpIHtcbiAgICAgICAgICAgICAgICBnZW9mbG8uc3RhcnRQb2ludCA9IGxhc3RQb2ludC5jb29yZHM7XG5cbiAgICAgICAgICAgICAgICBnZW9mbG8uaG90RmVhdHVyZSA9IHR1cmYucG9seWdvbihbW1xuICAgICAgICAgICAgICAgICAgICBnZW9mbG8uc3RhcnRQb2ludCxcbiAgICAgICAgICAgICAgICAgICAgW2V2ZW50LmxuZ0xhdC5sbmcsIGV2ZW50LmxuZ0xhdC5sYXRdLFxuICAgICAgICAgICAgICAgICAgICBbZ2VvZmxvLnN0YXJ0UG9pbnRbMF0sIGV2ZW50LmxuZ0xhdC5sYXRdLFxuICAgICAgICAgICAgICAgICAgICBnZW9mbG8uc3RhcnRQb2ludFxuICAgICAgICAgICAgICAgIF1dKTtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2VvZmxvLlV0aWxpdGllcy5zZXRQcm9wZXJ0eShnZW9mbG8uaG90RmVhdHVyZSwgJ3R5cGUnLCB0aGlzLnR5cGUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnR5cGUgPT09ICdQb2x5Z29uJykge1xuICAgICAgICAgICAgICAgIGdlb2Zsby5zdGFydFBvaW50ID0gbGFzdFBvaW50LmNvb3JkcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKCFnZW9mbG8uc25hcEZlYXR1cmUgJiYgbGFzdFBvaW50KSBnZW9mbG8uc25hcEZlYXR1cmUgPSBsYXN0UG9pbnQ7XG5cbiAgICAgICAgaWYgKG5lZWRzVG9GaW5pc2godGhpcy50eXBlLCBsYXN0UG9pbnQuY29vcmRzKSkgcmV0dXJuIGZpbmlzaERyYXcodGhpcy50eXBlLCBwb2ludCk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmZpcnN0Q2xpY2sgPSBnZW9mbG8uZmlyc3RDbGljayA/IGZhbHNlIDogeyBjb29yZHM6IGxhc3RQb2ludC5jb29yZHMgfTtcblxuICAgICAgICBnZW9mbG8ubGFzdENsaWNrID0gbGFzdFBvaW50O1xuICAgICAgICBnZW9mbG8uZmlyc3RDbGljayA9IGdlb2Zsby5maXJzdENsaWNrID8gZ2VvZmxvLmZpcnN0Q2xpY2sgOiB7IGNvb3JkczogbGFzdFBvaW50LmNvb3JkcyB9O1xuICAgICAgICBnZW9mbG8uU25hcHBpbmcuc2V0RmVhdHVyZSgpO1xuICAgICAgICBhZGRUZXh0LmNhbGwodGhpcywgdGhpcy50eXBlKTtcbiAgICAgICAgZ2VvZmxvLkV4cGxvcmluZy5zZXRGZWF0dXJlcyhsYXN0UG9pbnQuY29vcmRzLCB7IHNldDogdHJ1ZSB9KTtcbiAgICAgICAgZGVsZXRlIGdlb2Zsby50b3VjaENsaWNrO1xuICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVIb3RTb3VyY2UoKTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkRyYXdcblx0ICogQG5hbWUgaGFuZGxlTW92ZVxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBkZXRlcm1pbmVzIHRoZSBiZWhhdmlvciBiYXNlZCBvbiB0aGUgZXZlbnQgdHlwZSBhbmQgY29udGV4dCBzdGF0ZS4gSXQgaGFuZGxlcyB2YXJpb3VzIGFjdGlvbnMgc3VjaCBhcyBkcmFnZ2luZywgcGFpbnRpbmcsIHNuYXBwaW5nLCByb3V0aW5nLCBhbmQgc25hcHBpbmcgdG8gcG9pbnRzLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgLSBUaGUgZXZlbnQgb2JqZWN0IGNvbnRhaW5pbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG1vdXNlIG9yIHRvdWNoIGV2ZW50LlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBmYWxzZSBpbiBjZXJ0YWluIGNvbmRpdGlvbnMgdG8gcHJldmVudCBkZWZhdWx0IGJlaGF2aW9yLlxuXHQgKi9cbiAgICB0aGlzLmhhbmRsZU1vdmUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LnRvdWNoICYmIGdlb2Zsby5tb3VzZUlzRG93bikgZ2VvZmxvLnRvdWNoTW92aW5nID0gdHJ1ZTtcbiAgICAgICAgaWYgKGdlb2Zsby5vdmVycGFzc0Rvd25sb2FkaW5nKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChnZW9mbG8ubW91c2VJc0Rvd24gJiYgZ2VvZmxvLmNhbkFkZFZlcnRleCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoZ2VvZmxvLmNhbkRyYWdNb3ZlICYmIGdlb2Zsby5zbmFwcGVkVmVydGV4ICYmIGdlb2Zsby5tb3VzZUlzRG93bikgcmV0dXJuIHRoaXMuaGFuZGxlRHJhZyhldmVudCk7XG4gICAgICAgIGlmIChnZW9mbG8ubW91c2VJc0Rvd24gJiYgZ2VvZmxvLlBhaW50aW5nLmVuYWJsZWQpIHJldHVybiB0aGlzLmhhbmRsZVBhaW50aW5nKGV2ZW50KTtcbiAgICAgICAgaWYgKGV2ZW50LnRvdWNoICYmIGdlb2Zsby50b3VjaE1vdmluZykgcmV0dXJuIGdlb2Zsby5zbmFwRmVhdHVyZSA9IGZhbHNlO1xuXG4gICAgICAgIHZhciBidXR0b24gPSAhZXZlbnQub3JpZ2luYWxFdmVudCA/IGZhbHNlIDogZXZlbnQub3JpZ2luYWxFdmVudC5idXR0b25zICE9PSB1bmRlZmluZWQgPyBldmVudC5vcmlnaW5hbEV2ZW50LmJ1dHRvbnMgOiBldmVudC5vcmlnaW5hbEV2ZW50LndoaWNoO1xuICAgICAgICBpZiAoYnV0dG9uID09PSAxKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgdmFyIGNhbGN1bGF0ZVJvdXRlID0gZ2VvZmxvLlJvdXRpbmcuZW5hYmxlZDtcbiAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQgJiYgZXZlbnQub3JpZ2luYWxFdmVudC5hbHRLZXkpIGNhbGN1bGF0ZVJvdXRlID0gZmFsc2U7XG5cbiAgICAgICAgdmFyIHNuYXBUb1BvaW50ID0gZ2VvZmxvLlNuYXBwaW5nLmVuYWJsZWQ7XG4gICAgICAgIGlmIChldmVudC5vcmlnaW5hbEV2ZW50ICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQuc2hpZnRLZXkpIHNuYXBUb1BvaW50ID0gZmFsc2U7XG5cbiAgICAgICAgdmFyIGV2dENvb3JkcyA9IFtldmVudC5sbmdMYXQubG5nLCBldmVudC5sbmdMYXQubGF0XTtcbiAgICAgICAgdmFyIGlzUG9pbnQgPSBnZW9mbG8uVXRpbGl0aWVzLmlzUG9pbnQoZ2VvZmxvLmhvdEZlYXR1cmUpO1xuICAgICAgICB2YXIgZWRpdFBvbHlnb24gPSBnZW9mbG8uZWRpdE1vZGUgJiYgKHRoaXMudHlwZSA9PT0gJ1BvbHlnb24nIHx8IHRoaXMudHlwZSA9PT0gJ1JlY3RhbmdsZScpO1xuICAgICAgICB2YXIgcG9pbnQgPSB0dXJmLnBvaW50KGV2dENvb3Jkcyk7XG4gICAgICAgIHZhciBzbmFwRmVhdHVyZSA9IG51bGw7XG5cbiAgICAgICAgaWYgKGVkaXRQb2x5Z29uKSB7XG4gICAgICAgICAgICBzbmFwRmVhdHVyZSA9IHBvaW50O1xuICAgICAgICB9IGVsc2UgaWYgKHNuYXBUb1BvaW50KSB7XG4gICAgICAgICAgICBzbmFwRmVhdHVyZSA9IGdlb2Zsby5TbmFwcGluZy5zZXRDbG9zZXN0KGV2dENvb3JkcywgaXNQb2ludCk7XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzUG9pbnQpIHtcbiAgICAgICAgICAgIHNuYXBGZWF0dXJlID0gZ2VvZmxvLlNuYXBwaW5nLnVwZGF0ZUZlYXR1cmUoZXZ0Q29vcmRzKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc1BvaW50KSB7XG4gICAgICAgICAgICBzbmFwRmVhdHVyZSA9IHBvaW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhbGN1bGF0ZVJvdXRlKSBzbmFwRmVhdHVyZSA9IGdlb2Zsby5Sb3V0aW5nLmdldENsb3Nlc3QoKSB8fCBzbmFwRmVhdHVyZTtcbiAgICAgICAgaWYgKCFzbmFwRmVhdHVyZSkgc25hcEZlYXR1cmUgPSBwb2ludDtcblxuICAgICAgICBnZW9mbG8uU25hcHBpbmcuYWRkRmVhdHVyZShzbmFwRmVhdHVyZSwgdGhpcy5wcm9wZXJ0aWVzLCBlZGl0UG9seWdvbik7XG4gICAgICAgIG9uVmVydGV4KGdldFZlcnRleChwb2ludCkpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFzbmFwRmVhdHVyZSAmJiB0aGlzLmlzUG9pbnQpIGRlbGV0ZSB0aGlzLmlzUG9pbnQ7XG4gICAgICAgIGlmIChlZGl0UG9seWdvbiAmJiBjYWxjdWxhdGVSb3V0ZSkgZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXNbJ1JPVVRFJ10pLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXSkpO1xuXG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICdSZWN0YW5nbGUnKSByZXR1cm4gdGhpcy5oYW5kbGVSZWN0YW5nbGUoZXZlbnQpO1xuICAgICAgICBpZiAodGhpcy50eXBlID09PSAnSWNvbicpIHJldHVybiB0aGlzLmhhbmRsZUljb24oZXZlbnQsIGdlb2Zsby5zbmFwRmVhdHVyZSk7XG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICdUZXh0JykgcmV0dXJuIHRoaXMuaGFuZGxlVGV4dChldmVudCwgZ2VvZmxvLnNuYXBGZWF0dXJlKTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkRyYXdcblx0ICogQG5hbWUgaGFuZGxlRHJhZ1xuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBpcyByZXNwb25zaWJsZSBmb3IgaGFuZGxpbmcgdGhlIGRyYWcgZXZlbnQgb2YgYSB2ZXJ0ZXggb24gdGhlIG1hcC4gSXQgdXBkYXRlcyB0aGUgcG9zaXRpb24gb2YgdGhlIHZlcnRleCBiYXNlZCBvbiB0aGUgdXNlcidzIGludGVyYWN0aW9uIGFuZCB0cmlnZ2VycyB2YXJpb3VzIGFjdGlvbnMgYWNjb3JkaW5nbHkuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIFRoZSBldmVudCBvYmplY3QgY29udGFpbmluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZHJhZyBldmVudC5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgZmFsc2UgaWYgdGhlIGRyYWcgaW5kZXggaXMgbm90IHZhbGlkLlxuXHQgKi9cbiAgICB0aGlzLmhhbmRsZURyYWcgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIHZhbGlkSW5kZXggPSBnZW9mbG8uZHJhZ0luZGV4ID4gLTE7XG4gICAgICAgIFxuICAgICAgICBpZiAoIXZhbGlkSW5kZXgpIHtcbiAgICAgICAgICAgIG9mZlZlcnRleCgpO1xuICAgICAgICAgICAgaWYgKGdlb2Zsby5tb3VzZUlzRG93biAmJiBnZW9mbG8uUGFpbnRpbmcuZW5hYmxlZCkgdGhpcy5oYW5kbGVQYWludGluZyhldmVudCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAhZXZlbnQuZ2FtZXBhZCA/IGV2ZW50Lm9yaWdpbmFsRXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkgOiBmYWxzZTtcblxuICAgICAgICBnZW9mbG8uZHJhZ01vdmluZyA9IHRydWU7XG4gICAgICAgIGdlb2Zsby5sYXN0RHJhZ01vdmUgPSAwO1xuICAgICAgICBnZW9mbG8uc25hcHBlZFZlcnRleCA9IFtldmVudC5sbmdMYXQubG5nLCBldmVudC5sbmdMYXQubGF0XTtcbiAgICAgICAgZ2VvZmxvLmJ5cGFzc1JvdXRpbmcgPSB0cnVlOyAvLyFldmVudC5nYW1lcGFkID8gZXZlbnQub3JpZ2luYWxFdmVudC5hbHRLZXkgOiBmYWxzZTtcbiAgICAgICAgZ2VvZmxvLmJ5cGFzc1NuYXBwaW5nID0gIWV2ZW50LmdhbWVwYWQgPyBldmVudC5vcmlnaW5hbEV2ZW50LnNoaWZ0S2V5IDogZmFsc2U7XG4gICAgICAgIGdlb2Zsby5sYXN0SW5kZXggPSBnZW9mbG8uVXRpbGl0aWVzLmlzTGFzdEluZGV4KGdlb2Zsby5kcmFnSW5kZXgsIGdlb2Zsby5ob3RGZWF0dXJlKTtcblxuICAgICAgICB2YXIgdmVydGV4ID0gdHVyZi5wb2ludChnZW9mbG8uc25hcHBlZFZlcnRleCk7XG5cbiAgICAgICAgaWYgKGdlb2Zsby5sYXN0SW5kZXgpIGdlb2Zsby5sYXN0Q2xpY2sgPSB7IGNvb3JkczogZ2VvZmxvLnNuYXBwZWRWZXJ0ZXggfTtcblxuICAgICAgICBpZiAodGhpcy50eXBlID09PSAnQ2lyY2xlJyB8fCB0aGlzLnR5cGUgPT09ICdJY29uJyB8fCB0aGlzLnR5cGUgPT09ICdJbWFnZScpIHtcbiAgICAgICAgICAgIGlmICghZ2VvZmxvLlBhaW50aW5nLmVuYWJsZWQpIGdlb2Zsby5ob3RGZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzID0gZ2VvZmxvLnNuYXBwZWRWZXJ0ZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgaXNMYXN0SW5kZXggPSBnZW9mbG8uVXRpbGl0aWVzLmlzTGFzdEluZGV4KGdlb2Zsby5kcmFnSW5kZXgsIGdlb2Zsby5ob3RGZWF0dXJlKTtcbiAgICAgICAgICAgIGdlb2Zsby5ob3RGZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzW2dlb2Zsby5kcmFnSW5kZXhdID0gZ2VvZmxvLnNuYXBwZWRWZXJ0ZXg7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICdQb2x5Z29uJykge1xuICAgICAgICAgICAgICAgIGlmIChpc0xhc3RJbmRleCkgZ2VvZmxvLmhvdEZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF0gPSBnZW9mbG8uc25hcHBlZFZlcnRleDtcbiAgICAgICAgICAgICAgICBpZiAoZ2VvZmxvLmRyYWdJbmRleCA9PSAwKSBnZW9mbG8uaG90RmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlc1tnZW9mbG8uaG90RmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcy5sZW5ndGggLTFdID0gZ2VvZmxvLnNuYXBwZWRWZXJ0ZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBnZW9mbG8uVXRpbGl0aWVzLnNldFByb3BlcnR5KGdlb2Zsby5ob3RGZWF0dXJlLCAndHlwZScsIHRoaXMudHlwZSk7XG4gICAgICAgIGdlb2Zsby5VdGlsaXRpZXMuc2V0UHJvcGVydHkodmVydGV4LCAndHlwZScsIHRoaXMudHlwZSk7XG4gICAgICAgIGdlb2Zsby5tYXAuZ2V0U291cmNlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLlJPVVRFKS5zZXREYXRhKHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW10pKTtcbiAgICAgICAgZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuU05BUCkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtdKSk7XG4gICAgICAgIGdlb2Zsby5tYXAuZ2V0U291cmNlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLkhPVCkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtnZW9mbG8uaG90RmVhdHVyZV0pKTtcbiAgICAgICAgZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuVkVSVEVYKS5zZXREYXRhKHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW3ZlcnRleF0pKTtcbiAgICAgICAgZ2VvZmxvLmZpcmUoJ3ZlcnRleC5kcmFnJywgeyB0eXBlOiB0aGlzLnR5cGUsIGNvb3JkczogW2V2ZW50LmxuZ0xhdC5sbmcsIGV2ZW50LmxuZ0xhdC5sYXRdLCBmZWF0dXJlOiBnZW9mbG8uaG90RmVhdHVyZSwgdmVydGV4OiB2ZXJ0ZXggfSk7XG4gICAgICAgIGdlb2Zsby5QaW5uaW5nLnVwZGF0ZUZlYXR1cmVzKCk7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5EcmF3XG5cdCAqIEBuYW1lIGhhbmRsZVRvdWNoXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGlzIHJlc3BvbnNpYmxlIGZvciBoYW5kbGluZyB0b3VjaCBldmVudHMgYW5kIHRyaWdnZXJpbmcgY29ycmVzcG9uZGluZyBhY3Rpb25zLlxuXHQgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSB0b3VjaCBldmVudCBvYmplY3QuXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cbiAgICB0aGlzLmhhbmRsZVRvdWNoID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnRvdWNoID0gdHJ1ZTtcblxuICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZURvd24oZXZlbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnR5cGUgPT09ICd0b3VjaGVuZCcpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlVXAoZXZlbnQpO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVDbGljayhldmVudCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQudHlwZSA9PT0gJ3RvdWNobW92ZScpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlTW92ZShldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkRyYXdcblx0ICogQG5hbWUgaGFuZGxlT2ZmTWFwXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGlzIHRyaWdnZXJlZCB3aGVuIGFuIG9mZi1tYXAgZXZlbnQgb2NjdXJzIGFuZCBjbGVhcnMgdGhlIGRhdGEgb2YgYSBzcGVjaWZpYyBzb3VyY2Ugb24gdGhlIG1hcC5cblx0ICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgb2JqZWN0IHRyaWdnZXJpbmcgdGhlIGZ1bmN0aW9uLlxuXHQgKi9cbiAgICB0aGlzLmhhbmRsZU9mZk1hcCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuU05BUCkpIGdlb2Zsby5tYXAuZ2V0U291cmNlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLlNOQVApLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXSkpO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uRHJhd1xuXHQgKiBAbmFtZSBoYW5kbGVPbk1hcFxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiB1cGRhdGVzIHRoZSBkYXRhIG9mIHRoZSBTTkFQIHNvdXJjZSBvbiB0aGUgbWFwIHdpdGggdGhlIHNuYXBGZWF0dXJlLlxuXHQgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBldmVudCB0cmlnZ2VyaW5nIHRoZSBmdW5jdGlvbi5cblx0ICovXG4gICAgdGhpcy5oYW5kbGVPbk1hcCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuU05BUCkgJiYgZ2VvZmxvLnNuYXBGZWF0dXJlKSBnZW9mbG8ubWFwLmdldFNvdXJjZShnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5TTkFQKS5zZXREYXRhKHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW2dlb2Zsby5zbmFwRmVhdHVyZV0pKTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkRyYXdcblx0ICogQG5hbWUgaGFuZGxlUGFpbnRpbmdcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gaXMgdHJpZ2dlcmVkIHdoZW4gcGFpbnRpbmcgb24gdGhlIG1hcC4gSXQgZGlzYWJsZXMgZHJhZyBwYW4sIHNldHMgdGhlIG1hcCBjbGFzcyB0byAncGFpbnRpbmcnLCBhbmQgdXBkYXRlcyB0aGUgZmVhdHVyZSBjb29yZGluYXRlcy5cblx0ICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IC0gVGhlIGV2ZW50IG9iamVjdCB0cmlnZ2VyaW5nIHRoZSBmdW5jdGlvbi5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgZmFsc2UgaWYgbW91c2UgaXMgbm90IGRvd24gb3Igbm8gY29vcmRpbmF0ZXMgYXJlIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIHVwZGF0ZXMgdGhlIGZlYXR1cmUgY29vcmRpbmF0ZXMuXG5cdCAqL1xuICAgIHRoaXMuaGFuZGxlUGFpbnRpbmcgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKCFnZW9mbG8ubW91c2VJc0Rvd24pIHJldHVybiBmYWxzZTtcbiAgICAgICAgZ2VvZmxvLm1hcC5kcmFnUGFuLmRpc2FibGUoKTtcbiAgICAgICAgZ2VvZmxvLnNldE1hcENsYXNzKCdwYWludGluZycpO1xuXG4gICAgICAgIHZhciBzbmFwQ29vcmRzID0gZ2VvZmxvLnNuYXBGZWF0dXJlICYmICFnZW9mbG8uUGFpbnRpbmcuZmVhdHVyZTtcbiAgICAgICAgdmFyIGNvb3JkcyA9IGV2ZW50LmxuZ0xhdCAmJiBldmVudC5sbmdMYXQubG5nID8gW2V2ZW50LmxuZ0xhdC5sbmcsIGV2ZW50LmxuZ0xhdC5sYXRdIDogZmFsc2U7XG4gICAgICAgIGlmIChzbmFwQ29vcmRzKSBjb29yZHMgPSBnZW9mbG8uc25hcEZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG5cbiAgICAgICAgaWYgKCFjb29yZHMpIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGdlb2Zsby5QYWludGluZy51cGRhdGVGZWF0dXJlKGNvb3Jkcyk7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5EcmF3XG5cdCAqIEBuYW1lIGhhbmRsZVJlY3RhbmdsZVxuXHQgKiBAZGVzY3JpcHRpb24gSGFuZGxlcyB0aGUgY3JlYXRpb24gYW5kIG1hbmlwdWxhdGlvbiBvZiBhIHJlY3RhbmdsZSBmZWF0dXJlIG9uIGEgbWFwLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgLSBUaGUgZXZlbnQgb2JqZWN0IHRyaWdnZXJpbmcgdGhlIGZ1bmN0aW9uLlxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG4gICAgdGhpcy5oYW5kbGVSZWN0YW5nbGUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGdlb2Zsby5lZGl0TW9kZSAmJiBnZW9mbG8uaG90RmVhdHVyZSkgZ2VvZmxvLnN0YXJ0UG9pbnQgPSBnZW9mbG8uaG90RmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlc1swXVswXTtcbiAgICAgICAgaWYgKCFnZW9mbG8uc3RhcnRQb2ludCkgcmV0dXJuO1xuICAgICAgICBpZiAoIWdlb2Zsby5kcmFnTW92aW5nKSBnZW9mbG8uVXRpbGl0aWVzLnNldFByb3BlcnR5KGdlb2Zsby5ob3RGZWF0dXJlLCAndHlwZScsIHRoaXMudHlwZSk7XG4gICAgICAgIGdlb2Zsby5kcmFnTW92aW5nID0gdHJ1ZTtcblxuICAgICAgICB2YXIgY29vcmRzID0gZ2VvZmxvLnNuYXBGZWF0dXJlID8gZ2VvZmxvLnNuYXBGZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzIDogW2V2ZW50LmxuZ0xhdC5sbmcsIGV2ZW50LmxuZ0xhdC5sYXRdO1xuXG4gICAgICAgIGlmIChnZW9mbG8uZHJhZ0luZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIHZhciBzdGFydFBvaW50ID0gZ2VvZmxvLmRyYWdJbmRleCA9PSAwIHx8IGdlb2Zsby5kcmFnSW5kZXggPT0gNCA/IDQgOiBnZW9mbG8uZHJhZ0luZGV4O1xuICAgICAgICAgICAgdmFyIGVuZFBvaW50ID0gc3RhcnRQb2ludCA9PSAxID8gMyA6IHN0YXJ0UG9pbnQgPT0gMiA/IDQgOiBzdGFydFBvaW50ID09IDMgPyAxIDogMjtcbiAgICAgICAgICAgIHZhciBsZWZ0UG9pbnQgPSBlbmRQb2ludCA9PSAxID8gNCA6IGVuZFBvaW50ID09IDIgPyAxIDogZW5kUG9pbnQgPT0gMyA/IDIgOiAzXG4gICAgICAgICAgICB2YXIgcmlnaHRQb2ludCA9IGxlZnRQb2ludCA9PSAxID8gMyA6IGxlZnRQb2ludCA9PSAyID8gNCA6IGxlZnRQb2ludCA9PSAzID8gMSA6IDI7XG5cbiAgICAgICAgICAgIHVwZGF0ZUNvb3JkaW5hdGUoZ2VvZmxvLmhvdEZlYXR1cmUsIFwiMC5cIiArIHN0YXJ0UG9pbnQsIGNvb3Jkc1swXSwgY29vcmRzWzFdKTtcbiAgICAgICAgICAgIHVwZGF0ZUNvb3JkaW5hdGUoZ2VvZmxvLmhvdEZlYXR1cmUsIFwiMC5cIiArIGxlZnRQb2ludCwgY29vcmRzWzBdLCBnZW9mbG8uc3RhcnRQb2ludFsxXSk7XG4gICAgICAgICAgICB1cGRhdGVDb29yZGluYXRlKGdlb2Zsby5ob3RGZWF0dXJlLCBcIjAuXCIgKyByaWdodFBvaW50LCBnZW9mbG8uc3RhcnRQb2ludFswXSwgY29vcmRzWzFdKTtcbiAgICAgICAgICAgIHVwZGF0ZUNvb3JkaW5hdGUoZ2VvZmxvLmhvdEZlYXR1cmUsIFwiMC5cIiArIGVuZFBvaW50LCBnZW9mbG8uc3RhcnRQb2ludFswXSwgZ2VvZmxvLnN0YXJ0UG9pbnRbMV0gKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVwZGF0ZUNvb3JkaW5hdGUoZ2VvZmxvLmhvdEZlYXR1cmUsIFwiMC4xXCIsIGNvb3Jkc1swXSwgZ2VvZmxvLnN0YXJ0UG9pbnRbMV0pO1xuICAgICAgICAgICAgdXBkYXRlQ29vcmRpbmF0ZShnZW9mbG8uaG90RmVhdHVyZSwgXCIwLjJcIiwgY29vcmRzWzBdLCBjb29yZHNbMV0pO1xuICAgICAgICAgICAgdXBkYXRlQ29vcmRpbmF0ZShnZW9mbG8uaG90RmVhdHVyZSwgXCIwLjNcIiwgZ2VvZmxvLnN0YXJ0UG9pbnRbMF0sIGNvb3Jkc1sxXSk7XG4gICAgICAgICAgICB1cGRhdGVDb29yZGluYXRlKGdlb2Zsby5ob3RGZWF0dXJlLCBcIjAuNFwiLCBnZW9mbG8uc3RhcnRQb2ludFswXSwgZ2VvZmxvLnN0YXJ0UG9pbnRbMV0gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdlb2Zsby5tYXAuZ2V0U291cmNlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLkhPVCkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtnZW9mbG8uaG90RmVhdHVyZV0pKTtcbiAgICAgICAgZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuVkVSVEVYKS5zZXREYXRhKHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW2dlb2Zsby5ob3RGZWF0dXJlXSkpO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uRHJhd1xuXHQgKiBAbmFtZSBoYW5kbGVUZXh0XG5cdCAqIEBkZXNjcmlwdGlvbiBIYW5kbGVzIHRleHQgaW5wdXQgZXZlbnRzIGFuZCBsb2dzIHJlbGV2YW50IHByb3BlcnRpZXMuXG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IG9iamVjdCB0cmlnZ2VyaW5nIHRoZSBmdW5jdGlvbi5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGZlYXR1cmUgLSBUaGUgZmVhdHVyZSB0byBiZSBoYW5kbGVkLlxuXHQgKi9cbiAgICB0aGlzLmhhbmRsZVRleHQgPSBmdW5jdGlvbiAoZXZlbnQsIGZlYXR1cmUpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2hhbmRsZVRleHQnLCB0aGlzLnByb3BlcnRpZXMsIGdlb2Zsby5zbmFwRmVhdHVyZSk7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5EcmF3XG5cdCAqIEBuYW1lIGhhbmRsZUljb25cblx0ICogQGRlc2NyaXB0aW9uIEhhbmRsZXMgdGhlIGljb24gYmFzZWQgb24gdGhlIGV2ZW50IGFuZCBmZWF0dXJlIHByb3ZpZGVkLlxuXHQgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBldmVudCB0cmlnZ2VyaW5nIHRoZSBmdW5jdGlvbi5cblx0ICogQHBhcmFtIHtPYmplY3R9IGZlYXR1cmUgLSBUaGUgZmVhdHVyZSBvYmplY3QgdG8gYmUgaGFuZGxlZC5cblx0ICovXG4gICAgdGhpcy5oYW5kbGVJY29uID0gZnVuY3Rpb24gKGV2ZW50LCBmZWF0dXJlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdoYW5kbGVJY29uJywgdGhpcy5wcm9wZXJ0aWVzLCBnZW9mbG8uc25hcEZlYXR1cmUpO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uRHJhd1xuXHQgKiBAbmFtZSBoYW5kbGVDb250ZXh0XG5cdCAqIEBkZXNjcmlwdGlvbiBIYW5kbGVzIHRoZSBjb250ZXh0IG9mIGRyYWdnaW5nIGFuZCBtb3ZpbmcgYSBmZWF0dXJlIHZlcnRleC5cblx0ICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgdHJpZ2dlcmluZyB0aGUgY29udGV4dCBoYW5kbGluZy5cblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuICAgIHRoaXMuaGFuZGxlQ29udGV4dCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoIWdlb2Zsby5jYW5EcmFnTW92ZSB8fCAhZ2VvZmxvLnNuYXBwZWRWZXJ0ZXgpIHJldHVybjtcbiAgICAgICAgXG4gICAgICAgIHZhciB2YWxpZEluZGV4ID0gZ2VvZmxvLmRyYWdJbmRleCA+IC0xO1xuICAgICAgICBpZiAoIXZhbGlkSW5kZXgpIHJldHVybjtcblxuICAgICAgICBnZW9mbG8uaG90RmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcy5zcGxpY2UoZ2VvZmxvLmRyYWdJbmRleCwgMSk7XG5cbiAgICAgICAgZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuSE9UKS5zZXREYXRhKHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW2dlb2Zsby5ob3RGZWF0dXJlXSkpO1xuICAgICAgICBnZW9mbG8ubWFwLmdldFNvdXJjZShnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5WRVJURVgpLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbZ2VvZmxvLmhvdEZlYXR1cmVdKSk7XG4gICAgICAgIGdlb2Zsby5tYXAuZ2V0U291cmNlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLlNOQVApLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXSkpO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uRHJhd1xuXHQgKiBAbmFtZSBoYW5kbGVIaXN0b3J5XG5cdCAqIEBkZXNjcmlwdGlvbiBIYW5kbGVzIHRoZSBoaXN0b3J5IG9mIGZlYXR1cmVzIGluIHRoZSBjdXJyZW50IG1vZGUuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIFRoZSBldmVudCB0cmlnZ2VyaW5nIHRoZSBoaXN0b3J5IHVwZGF0ZS5cblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuICAgIHRoaXMuaGFuZGxlSGlzdG9yeSA9IGZ1bmN0aW9uIGhhbmRsZUhpc3RvcnkgKGV2ZW50KSB7XG4gICAgICAgIGlmIChnZW9mbG8uZHJhZ01vdmluZykgcmV0dXJuO1xuXG4gICAgICAgIHZhciBoaXN0b3J5ID0gZ2VvZmxvLmN1cnJlbnRNb2RlLmhpc3Rvcnk7XG4gICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBmZWF0dXJlcyA9IGV2ZW50LmRldGFpbC5kYXRhLmZlYXR1cmVzO1xuICAgICAgICBpZiAoIWZlYXR1cmVzIHx8ICFmZWF0dXJlcy5sZW5ndGgpIHJldHVybjtcblxuICAgICAgICB2YXIgZmVhdHVyZSA9IGdlb2Zsby5VdGlsaXRpZXMuY2xvbmVEZWVwKGZlYXR1cmVzWzBdKTtcbiAgICAgICAgZmVhdHVyZS5oaXN0b3J5RGF0ZSA9IGRhdGU7XG4gICAgICAgIGhpc3RvcnkucHVzaChmZWF0dXJlKTtcblxuICAgICAgICBnZW9mbG8uZmlyZSgnZmVhdHVyZS5oaXN0b3J5JywgeyB0eXBlOiBnZW9mbG8uY3VycmVudE1vZGUudHlwZSwgZmVhdHVyZTogZmVhdHVyZSwgaGlzdG9yeTogaGlzdG9yeSB9KTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkRyYXdcblx0ICogQG5hbWUgaGFuZGxlVW5kb1xuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBpcyByZXNwb25zaWJsZSBmb3IgdW5kb2luZyB0aGUgbGFzdCBhY3Rpb24gcGVyZm9ybWVkIGluIHRoZSBhcHBsaWNhdGlvbi4gSXQgcmV0cmlldmVzIHRoZSBoaXN0b3J5IGFuZCB1bmRvIGFycmF5cyBmcm9tIHRoZSBjdXJyZW50IG1vZGUsIHBvcHMgdGhlIGxhc3QgZmVhdHVyZSBmcm9tIHRoZSBoaXN0b3J5LCBzZXRzIHRoZSB1bmRvIGZsYWcgdG8gdHJ1ZSBmb3IgdGhlIGZlYXR1cmUsIHVwZGF0ZXMgdGhlIGhvdEZlYXR1cmUsIHB1c2hlcyB0aGUgZmVhdHVyZSB0byB0aGUgdW5kbyBhcnJheSwgYW5kIHVwZGF0ZXMgdGhlIG1hcCBzb3VyY2UgZGF0YSB3aXRoIHRoZSBob3RGZWF0dXJlLlxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG4gICAgdGhpcy5oYW5kbGVVbmRvID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYWxlcnQoXCJVTkRFUiBERVZFTE9QTUVOVFwiKTtcbiAgICAgICAgdmFyIGhpc3RvcnkgPSBnZW9mbG8uY3VycmVudE1vZGUuaGlzdG9yeTtcbiAgICAgICAgdmFyIHVuZG8gPSBnZW9mbG8uY3VycmVudE1vZGUudW5kbztcblxuICAgICAgICB2YXIgZmVhdHVyZSA9IGhpc3RvcnkucG9wKCk7XG5cbiAgICAgICAgZmVhdHVyZS51bmRvID0gdHJ1ZTtcbiAgICAgICAgZ2VvZmxvLmhvdEZlYXR1cmUgPSBmZWF0dXJlO1xuXG4gICAgICAgIHVuZG8ucHVzaChnZW9mbG8uaG90RmVhdHVyZSk7XG4gICAgICAgIGdlb2Zsby5tYXAuZ2V0U291cmNlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLkhPVCkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtnZW9mbG8uaG90RmVhdHVyZV0pKTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkRyYXdcblx0ICogQG5hbWUgaGFuZGxlUmVkb1xuXHQgKiBAZGVzY3JpcHRpb24gSGFuZGxlcyB0aGUgcmVkbyBmdW5jdGlvbmFsaXR5IChjdXJyZW50bHkgdW5kZXIgZGV2ZWxvcG1lbnQpLlxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG4gICAgdGhpcy5oYW5kbGVSZWRvID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYWxlcnQoXCJVTkRFUiBERVZFTE9QTUVOVFwiKTtcbiAgICAgICAgdmFyIHJlZG8gPSBmYWxzZVxuICAgIH1cblxuXG5cblxuXG5cbiAgICBmdW5jdGlvbiBlZGl0TW9kZSAoZmVhdHVyZSkge1xuICAgICAgICB2YXIgdHlwZSA9IGdlb2Zsby5GZWF0dXJlcy5nZXRUeXBlKGZlYXR1cmUpO1xuICAgICAgICBpZiAoIXR5cGUpIHJldHVybiBhbGVydCgnTm8gRmVhdHVyZSBUeXBlIEZvdW5kJyk7XG4gICAgXG4gICAgICAgIGdlb2Zsby5jdXJyZW50TW9kZS50eXBlID0gdHlwZTtcbiAgICAgICAgZ2VvZmxvLmN1cnJlbnRNb2RlLnNvdXJjZSA9IGZlYXR1cmUuc291cmNlO1xuICAgICAgICBnZW9mbG8uZWRpdE1vZGUgPSB0cnVlO1xuICAgICAgICBnZW9mbG8uaG90RmVhdHVyZSA9IGZlYXR1cmU7XG4gICAgXG4gICAgICAgIGdlb2Zsby5VdGlsaXRpZXMuc2V0UHJvcGVydHkoZ2VvZmxvLmhvdEZlYXR1cmUsICd0eXBlJywgdHlwZSk7XG4gICAgICAgIGdlb2Zsby5VdGlsaXRpZXMuc2V0UHJvcGVydHkoZ2VvZmxvLmhvdEZlYXR1cmUsICdlZGl0JywgdHJ1ZSk7XG5cbiAgICAgICAgZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuU0VMRUNUKS5zZXREYXRhKHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW10pKTtcbiAgICBcbiAgICAgICAgaWYgKHR5cGUgPT09ICdQb2x5Z29uJykge1xuICAgICAgICAgICAgZ2VvZmxvLmhvdEZlYXR1cmUgPSB0dXJmLnBvbHlnb25Ub0xpbmUoZ2VvZmxvLmhvdEZlYXR1cmUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdDaXJjbGUnIHx8IHR5cGUgPT09ICdJY29uJyB8fCB0eXBlID09PSAnSW1hZ2UnKSB7XG4gICAgICAgICAgICBnZW9mbG8ubWFwLmdldFNvdXJjZShnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5IT1QpLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXSkpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdUZXh0Jykge1xuICAgICAgICAgICAgZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuSE9UVEVYVCkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtnZW9mbG8uaG90RmVhdHVyZV0pKTtcbiAgICAgICAgICAgIGFkZFRleHQuY2FsbChnZW9mbG8uY3VycmVudE1vZGUsIHR5cGUsIGdlb2Zsby5ob3RGZWF0dXJlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdlb2Zsby5tYXAuZ2V0U291cmNlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLkhPVCkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtnZW9mbG8uaG90RmVhdHVyZV0pKTtcbiAgICAgICAgICAgIGdlb2Zsby5tYXAuZ2V0U291cmNlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLlZFUlRFWCkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtnZW9mbG8uaG90RmVhdHVyZV0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb29yZHMgPSBnZW9mbG8uVXRpbGl0aWVzLmlzUG9pbnQoZ2VvZmxvLmhvdEZlYXR1cmUpID8gZ2VvZmxvLmhvdEZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXMgOiBnZW9mbG8uaG90RmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlc1tnZW9mbG8uaG90RmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgXG4gICAgICAgIGdlb2Zsby5sYXN0Q2xpY2sgPSB7IGNvb3JkczogY29vcmRzIH07XG4gICAgICAgIGdlb2Zsby5GZWF0dXJlcy5yZW1vdmVGZWF0dXJlcyhnZW9mbG8uaG90RmVhdHVyZS5pZCk7XG4gICAgICAgIGdlb2Zsby5yZWZyZXNoTWVzaERhdGEoKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBnZW9mbG8uY3VycmVudE1vZGUudHlwZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaW5pc2hEcmF3ICh0eXBlLCBwb2ludCwgdGV4dCkge1xuICAgICAgICB2YXIgZmVhdHVyZTtcbiAgICAgICAgdmFyIGNhbmNlbGxlZCA9IGdlb2Zsby5jdXJyZW50TW9kZS5jYW5jZWxsZWQ7XG5cbiAgICAgICAgaWYgKGdlb2Zsby5lZGl0TW9kZSAmJiAhZ2VvZmxvLmN1cnJlbnRNb2RlLnNhdmluZ0VkaXQgJiYgIWNhbmNlbGxlZCkgcmV0dXJuIGdlb2Zsby5jdXJyZW50TW9kZS5zYXZlRWRpdChwb2ludCk7XG4gICAgXG4gICAgICAgIGlmIChjYW5jZWxsZWQgfHwgIXR5cGUpIHtcbiAgICAgICAgICAgIGZpbmlzaFRleHQoKTtcblxuICAgICAgICAgICAgaWYgKGdlb2Zsby5ob3RGZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgZ2VvZmxvLnJlbW92ZVNlbGVjdGlvbigpO1xuICAgICAgICAgICAgICAgIGdlb2Zsby5yZW1vdmVGZWF0dXJlKGdlb2Zsby5ob3RGZWF0dXJlLmlkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBnZW9mbG8uYWRkRmVhdHVyZXMoW2dlb2Zsby5ob3RGZWF0dXJlXSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdlb2Zsby5QaW5uaW5nLnJlc2V0RmVhdHVyZXMoKTtcblxuICAgICAgICAgICAgaWYgKCFnZW9mbG8uZWRpdE1vZGUpIGdlb2Zsby5maXJlKCdkcmF3LmNhbmNlbCcsIHsgY2FuY2VsOiB0cnVlLCBmZWF0dXJlOiBnZW9mbG8uaG90RmVhdHVyZSB9KTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnVGV4dCcgJiYgIXRleHQpIHtcbiAgICAgICAgICAgIHJldHVybiBhZGRUZXh0LmNhbGwoZ2VvZmxvLmN1cnJlbnRNb2RlLCB0eXBlLCBwb2ludCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZ2VvZmxvLmhvdEZlYXR1cmUpIHtcbiAgICAgICAgICAgIGlmIChnZW9mbG8uVXRpbGl0aWVzLmlzUG9pbnQoZ2VvZmxvLmhvdEZlYXR1cmUpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvb3JkcyA9IEFycmF5LmlzQXJyYXkoZ2VvZmxvLmhvdEZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF0pID9cbiAgICAgICAgICAgICAgICBnZW9mbG8uaG90RmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlc1swXSA6XG4gICAgICAgICAgICAgICAgW2dlb2Zsby5ob3RGZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdLCBnZW9mbG8uaG90RmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlc1sxXV1cbiAgICBcbiAgICAgICAgICAgICAgICBwb2ludCA9IGdlb2Zsby5QYWludGluZy5lbmFibGVkIHx8IGdlb2Zsby5jdXJyZW50TW9kZS5zYXZpbmdFZGl0ID8gcG9pbnQgOiB0dXJmLnBvaW50KGNvb3Jkcyk7XG4gICAgICAgICAgICAgICAgZmVhdHVyZSA9IHBvaW50O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChnZW9mbG8uVXRpbGl0aWVzLmlzUG9seWdvbihnZW9mbG8uaG90RmVhdHVyZSwgdHlwZSkpIHtcbiAgICAgICAgICAgICAgICBnZW9mbG8uaG90RmVhdHVyZS5nZW9tZXRyeS50eXBlID0gXCJQb2x5Z29uXCI7XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ1JlY3RhbmdsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2VvZmxvLmVuZFBvaW50ID8gdXBkYXRlQ29vcmRpbmF0ZShnZW9mbG8uaG90RmVhdHVyZSwgXCIwLjJcIiwgZ2VvZmxvLmVuZFBvaW50WzBdLCBnZW9mbG8uZW5kUG9pbnRbMV0pIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZ2VvZmxvLmhvdEZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXMucHVzaChnZW9mbG8uaG90RmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlc1swXSk7XG4gICAgICAgICAgICAgICAgICAgIGdlb2Zsby5ob3RGZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzID0gW2dlb2Zsby5ob3RGZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGdlb2Zsby5VdGlsaXRpZXMuaXNMaW5lU3RyaW5nKGdlb2Zsby5ob3RGZWF0dXJlLCB0eXBlKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnUG9seWdvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2VvZmxvLmhvdEZlYXR1cmUuZ2VvbWV0cnkudHlwZSA9IHR5cGU7XG4gICAgICAgICAgICAgICAgICAgIGdlb2Zsby5ob3RGZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzLnB1c2goZ2VvZmxvLmhvdEZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF0pO1xuICAgICAgICAgICAgICAgICAgICBnZW9mbG8uaG90RmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcyA9IFtnZW9mbG8uaG90RmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlc107XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnUmVjdGFuZ2xlJykge1xuICAgICAgICAgICAgICAgICAgICBnZW9mbG8uZW5kUG9pbnQgPyB1cGRhdGVDb29yZGluYXRlKGdlb2Zsby5ob3RGZWF0dXJlLCBcIjAuMlwiLCBnZW9mbG8uZW5kUG9pbnRbMF0sIGdlb2Zsby5lbmRQb2ludFsxXSkgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBvaW50KSB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZSA9IHBvaW50O1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKGdlb2Zsby5QYWludGluZy5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRvbGVyYW5jZSA9IGdlb2Zsby5vcHRpb25zLnBhaW50aW5nLnRvbGVyYW5jZTtcbiAgICBcbiAgICAgICAgICAgICAgICBnZW9mbG8uaG90RmVhdHVyZSA9IHR5cGUgPT09ICdDaXJjbGUnID8gZ2VvZmxvLmhvdEZlYXR1cmUgOiB0dXJmLnNpbXBsaWZ5KGdlb2Zsby5ob3RGZWF0dXJlLCB7XG4gICAgICAgICAgICAgICAgICAgIG11dGF0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdG9sZXJhbmNlOiB0eXBlb2YgdG9sZXJhbmNlID09PSAnZnVuY3Rpb24nID8gdG9sZXJhbmNlKGdlb2Zsby5tYXApIDogdG9sZXJhbmNlLFxuICAgICAgICAgICAgICAgICAgICBoaWdoUXVhbGl0eTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKGdlb2Zsby5zdGFydFBvaW50KSBnZW9mbG8uaG90RmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlc1swXSA9IGdlb2Zsby5zdGFydFBvaW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHBvaW50KSB7XG4gICAgICAgICAgICBmZWF0dXJlID0gcG9pbnQ7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZmVhdHVyZSA9IGdlb2Zsby5FeHBsb3JpbmcuY3VycmVudEZlYXR1cmUgfHwgZmVhdHVyZSB8fCBnZW9mbG8uaG90RmVhdHVyZTtcbiAgICAgICAgaWYgKCFmZWF0dXJlIHx8ICFnZW9mbG8uY3VycmVudE1vZGUuYWN0aXZhdGVkKSByZXR1cm4gZ2VvZmxvLmN1cnJlbnRNb2RlLmRlYWN0aXZhdGUoKTtcblxuICAgICAgICBmZWF0dXJlID0gZ2VvZmxvLkZlYXR1cmVzLmFkZEZlYXR1cmUoZmVhdHVyZSwgZ2VvZmxvLmN1cnJlbnRNb2RlLnNvdXJjZSwgZ2VvZmxvLmN1cnJlbnRNb2RlLnByb3BlcnRpZXMpO1xuICAgICAgICBnZW9mbG8uZmlyZSgnZHJhdy5maW5pc2gnLCB7IGZlYXR1cmU6IGZlYXR1cmUsIHBpbm5lZDogZ2VvZmxvLlBpbm5pbmcuZ2V0RmVhdHVyZXMoKSwgdHlwZTogdHlwZSwgZWRpdGluZzogZ2VvZmxvLmVkaXRNb2RlIH0pO1xuICAgICAgICByZXR1cm4gZ2VvZmxvLmN1cnJlbnRNb2RlLmRlYWN0aXZhdGUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaW5pc2hUZXh0IChlLCB0eXBlLCBmZWF0dXJlKSB7XG4gICAgICAgIHZhciBtYXJrZXIgPSBnZW9mbG8udGV4dE1hcmtlcjtcbiAgICAgICAgaWYgKCFtYXJrZXIpIHJldHVybiBmYWxzZTtcblxuICAgICAgICB2YXIgZWxlbWVudCA9IG1hcmtlci5nZXRFbGVtZW50KCk7XG4gICAgICAgIHZhciB0ZXh0ID0gZWxlbWVudC52YWx1ZTtcbiAgICBcbiAgICAgICAgaWYgKCF0ZXh0Lmxlbmd0aCB8fCBnZW9mbG8uY3VycmVudE1vZGUuY2FuY2VsbGVkKSByZXR1cm4gbWFya2VyLnJlbW92ZSgpLCBnZW9mbG8udGV4dElucHV0ID0gZmFsc2UsIGFkZFRleHQuY2FsbCh0aGlzLCB0eXBlLCBmZWF0dXJlKTtcbiAgICBcbiAgICAgICAgdmFyIGNvb3JkcyA9IFtlbGVtZW50LmdldEF0dHJpYnV0ZSgnbG5nJyksIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdsYXQnKV07XG4gICAgICAgIHR5cGUgPSB0eXBlIHx8IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJyk7XG5cbiAgICAgICAgZ2VvZmxvLmN1cnJlbnRNb2RlLnByb3BlcnRpZXMudGV4dCA9IHRleHQ7XG4gICAgICAgIFxuICAgICAgICB2YXIgZmVhdHVyZSA9IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkZlYXR1cmVcIixcbiAgICAgICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJnZW9tZXRyeVwiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcIlBvaW50XCIsXG4gICAgICAgICAgICAgIFwiY29vcmRpbmF0ZXNcIjogY29vcmRzXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIG1hcmtlci5yZW1vdmUoKTtcbiAgICAgICAgZmluaXNoRHJhdyh0eXBlLCBmZWF0dXJlLCB0ZXh0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhbnVwRHJhdyAobW9kZSkge1xuICAgICAgICBnZW9mbG8ubWFwLmdldFNvdXJjZShnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5ST1VURSkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtdKSk7XG4gICAgICAgIGdlb2Zsby5tYXAuZ2V0U291cmNlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLlNOQVApLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXSkpO1xuICAgICAgICBnZW9mbG8ubWFwLmdldFNvdXJjZShnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5IT1QpLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXSkpO1xuICAgICAgICBnZW9mbG8ubWFwLmdldFNvdXJjZShnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5WRVJURVgpLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXSkpO1xuICAgICAgICBnZW9mbG8ubWFwLmdldFNvdXJjZShnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5IT1RURVhUKS5zZXREYXRhKHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW10pKTtcbiAgICAgICAgZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuU0VMRUNUKS5zZXREYXRhKHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW10pKTtcbiAgICBcbiAgICAgICAgZ2VvZmxvLmRlbGV0ZU1lc2hEYXRhKCk7XG4gICAgXG4gICAgICAgIG1vZGUuaGlzdG9yeSA9IFtdO1xuICAgICAgICBtb2RlLnVuZG8gPSBbXTtcbiAgICAgICAgbW9kZS50eXBlID0gbnVsbDtcbiAgICAgICAgbW9kZS5jYW5jZWxsZWQgPSBmYWxzZTtcbiAgICAgICAgbW9kZS5hY3RpdmF0ZWQgPSBmYWxzZTtcbiAgICAgICAgbW9kZS5zYXZpbmdFZGl0ID0gZmFsc2U7XG5cbiAgICAgICAgZ2VvZmxvLmVkaXRNb2RlID0gZmFsc2U7XG4gICAgICAgIGdlb2Zsby5kcmF3TW9kZSA9IGZhbHNlO1xuXG4gICAgICAgIGRlbGV0ZSBnZW9mbG8uc3RhcnRQb2ludDtcbiAgICAgICAgZGVsZXRlIGdlb2Zsby5sYXN0Q2xpY2s7XG4gICAgICAgIGRlbGV0ZSBnZW9mbG8uZmlyc3RDbGljaztcbiAgICAgICAgZGVsZXRlIGdlb2Zsby5lbmRQb2ludDtcbiAgICAgICAgZGVsZXRlIGdlb2Zsby5zbmFwRmVhdHVyZTtcbiAgICAgICAgZGVsZXRlIGdlb2Zsby5ob3RGZWF0dXJlO1xuICAgICAgICBkZWxldGUgZ2VvZmxvLmRyYXdTdGFydGVkO1xuICAgICAgICBkZWxldGUgZ2VvZmxvLmRyYWdNb3Zpbmc7XG4gICAgICAgIGRlbGV0ZSBnZW9mbG8uZWRpdGluZztcbiAgICAgICAgZGVsZXRlIGdlb2Zsby50ZXh0TWFya2VyO1xuICAgICAgICBkZWxldGUgZ2VvZmxvLnRleHRJbnB1dDtcbiAgICAgICAgZGVsZXRlIGdlb2Zsby50b3VjaE1vdmluZztcbiAgICAgICAgZGVsZXRlIGdlb2Zsby50b3VjaERvd247XG4gICAgICAgIGRlbGV0ZSBnZW9mbG8ucGlubmluZ0ZlYXR1cmVzO1xuICAgICAgICBkZWxldGUgZ2VvZmxvLnBpbm5lZEZlYXR1cmVzO1xuICAgICAgICBkZWxldGUgZ2VvZmxvLmNhbkRyYWdNb3ZlO1xuICAgICAgICBkZWxldGUgZ2VvZmxvLmNhbkFkZFZlcnRleDtcbiAgICAgICAgZGVsZXRlIGdlb2Zsby5kcmFnSW5kZXg7XG4gICAgICAgIGRlbGV0ZSBnZW9mbG8uYWRkZWRWZXJ0ZXhPbkxpbmU7XG4gICAgICAgIGRlbGV0ZSBnZW9mbG8uc25hcHBlZFZlcnRleDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRWZXJ0ZXggKHBvaW50KSB7XG4gICAgICAgIHZhciBob3RGZWF0dXJlID0gZ2VvZmxvLmhvdEZlYXR1cmU7XG4gICAgICAgIHZhciB2ZXJ0ZXg7XG4gICAgXG4gICAgICAgIGlmIChnZW9mbG8uZHJhZ01vdmluZykgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoIWhvdEZlYXR1cmUpIHJldHVybiBmYWxzZTtcbiAgICBcbiAgICAgICAgdmFyIGNsb3Nlc3QgPSBnZW9mbG8uU25hcHBpbmcuZ2V0Q2xvc2VzdChwb2ludC5nZW9tZXRyeS5jb29yZGluYXRlcyk7XG4gICAgICAgIHZhciBjb29yZHMgPSBjbG9zZXN0LmNvb3JkcztcbiAgICAgICAgdmFyIHR5cGUgPSBjbG9zZXN0LnBvaW50ID8gY2xvc2VzdC5wb2ludC50eXBlIDogZmFsc2U7XG4gICAgICAgIFxuICAgICAgICBpZiAoIXR5cGUpIHJldHVybiBmYWxzZTtcbiAgICBcbiAgICAgICAgaWYgKCFjb29yZHMgJiYgdHlwZSA9PT0gJ2xpbmVwb2ludCcgJiYgY2xvc2VzdC5wb2ludC5ib3JkZXJzKSB7XG4gICAgICAgICAgICB2YXIgc2VnbWVudCA9IHR1cmYubGluZVN0cmluZyhbY2xvc2VzdC5wb2ludC5ib3JkZXIxLCBjbG9zZXN0LnBvaW50LmJvcmRlcjJdKTtcbiAgICAgICAgICAgIHZlcnRleCA9IHR1cmYuYWxvbmcoc2VnbWVudCwgY2xvc2VzdC5wb2ludC5kaXN0YW5jZTEpO1xuICAgICAgICAgICAgY29vcmRzID0gdmVydGV4Lmdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGlmICghY29vcmRzKSByZXR1cm4gZmFsc2U7XG4gICAgXG4gICAgICAgIHZlcnRleCA9IGdlb2Zsby5VdGlsaXRpZXMuaXNMaW5lU3RyaW5nKGhvdEZlYXR1cmUpICYmIHR5cGUgPT09ICd2ZXJ0ZXgnID8gdHVyZi5ib29sZWFuUG9pbnRPbkxpbmUoaG90RmVhdHVyZSwgdHVyZi5wb2ludChjb29yZHMpKSA6IHR1cmYucG9pbnQoY29vcmRzKTtcbiAgICAgICAgdmVydGV4LnByb3BlcnRpZXMudHlwZSA9IHR5cGU7XG4gICAgXG4gICAgICAgIGdlb2Zsby5maXJlKCd2ZXJ0ZXguZmluZCcsIHsgdmVydGV4OiB2ZXJ0ZXgsIGZlYXR1cmU6IGdlb2Zsby5ob3RGZWF0dXJlLCBjbG9zZXN0OiBjbG9zZXN0IH0pO1xuICAgICAgICByZXR1cm4gdmVydGV4O1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBhZGRWZXJ0ZXggKHBvaW50LCBldmVudCkge1xuICAgICAgICB2YXIgZmVhdHVyZTtcbiAgICBcbiAgICAgICAgaWYgKGV2ZW50ICYmIHBvaW50KSB7XG4gICAgICAgICAgICB2YXIgY29vcmRzID0gZ2VvZmxvLmhvdEZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgICAgICAgICB2YXIgbGluZSA9IHR1cmYubGluZVN0cmluZyhjb29yZHMpO1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gdHVyZi5wb2ludChjb29yZHNbMF0pXG4gICAgICAgICAgICB2YXIgc3BsaXQgPSB0dXJmLmxpbmVTbGljZShzdGFydCwgcG9pbnQsIGxpbmUpO1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gc3BsaXQuZ2VvbWV0cnkuY29vcmRpbmF0ZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIHZhciB2ZXJ0ZXggPSBzcGxpdC5nZW9tZXRyeS5jb29yZGluYXRlc1tpbmRleF07XG4gICAgXG4gICAgICAgICAgICBwb2ludCA9IHR1cmYucG9pbnQodmVydGV4KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGluZS5nZW9tZXRyeS5jb29yZGluYXRlcy5zcGxpY2UuYXBwbHkobGluZS5nZW9tZXRyeS5jb29yZGluYXRlcywgW2luZGV4LCAwXS5jb25jYXQoW3ZlcnRleF0pKTtcbiAgICBcbiAgICAgICAgICAgIGxpbmUgPSB0dXJmLmNsZWFuQ29vcmRzKGxpbmUpO1xuICAgICAgICAgICAgZmVhdHVyZSA9IHR1cmYudHJ1bmNhdGUobGluZSwgeyBwcmVjaXNpb246IDYsIGNvb3JkaW5hdGVzOiAyLCBtdXRhdGU6IHRydWUgfSk7XG4gICAgICAgICAgICBnZW9mbG8uaG90RmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcyA9IGZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgICAgICAgICBnZW9mbG8uaG90RmVhdHVyZSA9IGdlb2Zsby5VdGlsaXRpZXMuY2xvbmVEZWVwKGdlb2Zsby5ob3RGZWF0dXJlKTtcbiAgICAgICAgfSBlbHNlIGlmIChwb2ludCkge1xuICAgICAgICAgICAgZ2VvZmxvLmNhbkRyYWdNb3ZlID0gdHJ1ZTtcbiAgICAgICAgICAgIGdlb2Zsby5jYW5BZGRWZXJ0ZXggPSBwb2ludDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIG9uVmVydGV4ICh2ZXJ0ZXgsIGFkZCkge1xuICAgICAgICB2YXIgaG90RmVhdHVyZSA9IGdlb2Zsby5ob3RGZWF0dXJlO1xuICAgICAgICB2YXIgZHJhZ0luZGV4ID0gbnVsbDtcbiAgICBcbiAgICAgICAgaWYgKGdlb2Zsby5kcmFnTW92aW5nKSByZXR1cm4gb2ZmVmVydGV4KCk7XG4gICAgICAgIGlmICghaG90RmVhdHVyZSB8fCAhdmVydGV4KSByZXR1cm4gb2ZmVmVydGV4KCk7XG4gICAgICAgIFxuICAgICAgICBnZW9mbG8udXBkYXRlTWVzaERhdGEoKTtcbiAgICBcbiAgICAgICAgdmFyIHR5cGUgPSB2ZXJ0ZXgucHJvcGVydGllcy50eXBlO1xuICAgICAgICB2YXIgaW5kZXggPSB2ZXJ0ZXgucHJvcGVydGllcy5pbmRleCB8fCB2ZXJ0ZXgucHJvcGVydGllcy5pbmRleCA9PSAwO1xuICAgIFxuICAgICAgICBkcmFnSW5kZXggPSBpbmRleCA/IHZlcnRleC5wcm9wZXJ0aWVzLmluZGV4IDogZ2VvZmxvLmN1cnJlbnRNb2RlLnR5cGUgPT09ICdDaXJjbGUnIHx8IGdlb2Zsby5jdXJyZW50TW9kZS50eXBlID09PSAnSWNvbicgfHwgZ2VvZmxvLmN1cnJlbnRNb2RlLnR5cGUgPT09ICdJbWFnZScgPyAwIDogZmFsc2U7XG4gICAgXG4gICAgICAgIGdlb2Zsby5tYXAuZ2V0U291cmNlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLlNOQVApLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbdmVydGV4XSkpO1xuICAgICAgICBnZW9mbG8ubWFwLmdldFNvdXJjZShnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5WRVJURVgpLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbZ2VvZmxvLmhvdEZlYXR1cmVdKSk7XG4gICAgXG4gICAgICAgIGlmICh0eXBlID09PSAnbGluZXBvaW50JykgcmV0dXJuIGFkZFZlcnRleCh2ZXJ0ZXgpO1xuICAgIFxuICAgICAgICBnZW9mbG8ubWFwLmRyYWdQYW4uZGlzYWJsZSgpO1xuICAgICAgICBnZW9mbG8uZHJhZ0luZGV4ID0gZHJhZ0luZGV4O1xuICAgICAgICBnZW9mbG8uYWRkZWRWZXJ0ZXhPbkxpbmUgPSBhZGQgPyB2ZXJ0ZXggOiBmYWxzZTtcbiAgICAgICAgZ2VvZmxvLmNhbkFkZFZlcnRleCA9IGZhbHNlO1xuICAgICAgICBnZW9mbG8uY2FuRHJhZ01vdmUgPSB0cnVlO1xuICAgICAgICBnZW9mbG8uc25hcHBlZFZlcnRleCA9IHZlcnRleC5nZW9tZXRyeS5jb29yZGluYXRlcztcbiAgICAgICAgZ2VvZmxvLlBpbm5pbmcuc2V0RmVhdHVyZXMoZ2VvZmxvLnNuYXBwZWRWZXJ0ZXgpO1xuICAgICAgICBnZW9mbG8uZmlyZSgndmVydGV4Lm9uJywgeyB2ZXJ0ZXg6IHZlcnRleCwgaW5kZXg6IGRyYWdJbmRleCwgZmVhdHVyZTogZ2VvZmxvLmhvdEZlYXR1cmUgfSk7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIG9mZlZlcnRleCAoKSB7XG4gICAgICAgIGlmICghZ2VvZmxvLmhvdEZlYXR1cmUpIHJldHVybjsgICAgXG4gICAgICAgIGlmIChnZW9mbG8ubW91c2VJc0Rvd24gJiYgZ2VvZmxvLlBhaW50aW5nLmVuYWJsZWQpIHJldHVybiBmYWxzZTtcblxuICAgICAgICBpZiAoZ2VvZmxvLnNuYXBwZWRWZXJ0ZXgpIHtcbiAgICAgICAgICAgIGdlb2Zsby5sYXN0SW5kZXggPyBnZW9mbG8ubGFzdENsaWNrID0geyBjb29yZHM6IGdlb2Zsby5zbmFwcGVkVmVydGV4IH0gOiBmYWxzZTtcbiAgICAgICAgICAgIGdlb2Zsby5maXJlKCd2ZXJ0ZXgub2ZmJywgeyB2ZXJ0ZXg6IGZhbHNlLCBpbmRleDogZ2VvZmxvLmRyYWdJbmRleCwgZmVhdHVyZTogZ2VvZmxvLmhvdEZlYXR1cmUgfSlcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBnZW9mbG8ubWFwLmRyYWdQYW4uZW5hYmxlKCk7XG4gICAgICAgIGdlb2Zsby5kcmFnTW92aW5nID0gZmFsc2U7XG4gICAgICAgIGdlb2Zsby5jYW5EcmFnTW92ZSA9IGZhbHNlO1xuICAgICAgICBnZW9mbG8uc25hcHBlZFZlcnRleCA9IG51bGw7XG4gICAgICAgIGdlb2Zsby5kcmFnSW5kZXggPSAtMTtcbiAgICAgICAgZ2VvZmxvLm1vdXNlSXNEb3duID0gZ2VvZmxvLnRvdWNoRG93biB8fCBmYWxzZTtcbiAgICAgICAgZ2VvZmxvLnBpbmFibGVGZWF0dXJlcyA9IFtdO1xuICAgICAgICBnZW9mbG8ubGFzdEluZGV4ID0gZmFsc2U7XG4gICAgICAgIGdlb2Zsby5jYW5BZGRWZXJ0ZXggPSBmYWxzZTtcbiAgICAgICAgZ2VvZmxvLmFkZGVkVmVydGV4T25MaW5lID0gZmFsc2VcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRUZXh0ICh0eXBlLCBmZWF0dXJlKSB7XG4gICAgICAgIGZlYXR1cmUgPSBmZWF0dXJlIHx8IGdlb2Zsby5ob3RGZWF0dXJlO1xuICAgICAgICBpZiAoIWZlYXR1cmUpIHJldHVybiBmYWxzZTtcblxuICAgICAgICB0eXBlID0gdHlwZSB8fCBmZWF0dXJlLnByb3BlcnRpZXMudHlwZTtcbiAgICAgICAgZmVhdHVyZS5wcm9wZXJ0aWVzLnR5cGUgPSB0eXBlO1xuXG4gICAgICAgIGlmICh0eXBlICE9PSAnVGV4dCcpIHJldHVybiAvL2dlb2Zsby5GZWF0dXJlcy5zZXRUZXh0KGZlYXR1cmUpO1xuICAgICAgICBpZiAoZ2VvZmxvLnRleHRJbnB1dCkgcmV0dXJuIGZpbmlzaFRleHQoZmFsc2UsIHR5cGUsIGZlYXR1cmUpO1xuICAgICAgICBcbiAgICAgICAgdmFyIGxuZ0xhdCA9IHsgbG5nOiBmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdLCBsYXQ6IGZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMV0gfVxuICAgICAgICB2YXIgZWwgPSBnZW9mbG8udGV4dElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcblxuICAgICAgICBlbC52YWx1ZSA9IGZlYXR1cmUucHJvcGVydGllcy50ZXh0IHx8ICcnO1xuICAgICAgICBlbC5jbGFzc05hbWUgPSAndGV4dC1tYXJrZXInO1xuXG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJywgJ3RydWUnKTtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdhdXRvY29ycmVjdCcsICdvZmYnKTtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdzcGVsbGNoZWNrJywgJ2ZhbHNlJyk7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSgncGxhY2Vob2xkZXInLCAnUHJlc3MgRW50ZXIgb3IgU2VsZWN0IEJ1dHRvbiBXaGVuIERvbmUuLi4nKTtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCd0eXBlJywgdHlwZSk7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnbG5nJywgbG5nTGF0LmxuZyk7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnbGF0JywgbG5nTGF0LmxhdCk7XG4gICAgICAgIFxuICAgICAgICBnZW9mbG8udGV4dE1hcmtlciA9IG5ldyBnZW9mbG8uTWFwYm94Lk1hcmtlcihlbCkuc2V0TG5nTGF0KGxuZ0xhdCkuYWRkVG8oZ2VvZmxvLm1hcCk7XG4gICAgICAgIGdlb2Zsby50ZXh0TWFya2VyLnNldE9mZnNldChbMCwgLTI1XSlcblxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIGZpbmlzaFRleHQpO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBpbnB1dFRleHQpO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwicGFzdGVcIiwgaGFuZGxlUGFzdGUpO1xuICAgICAgICBlbC5mb2N1cygpO1xuXG4gICAgICAgIGdlb2Zsby5maXJlKCd0ZXh0LmFkZCcsIHsgZmVhdHVyZTogZmVhdHVyZSwgbWFya2VyOiBnZW9mbG8udGV4dE1hcmtlciwgdHlwZTogdHlwZSB9KTtcbiAgICBcbiAgICAgICAgZnVuY3Rpb24gaW5wdXRUZXh0IChlKSB7XG4gICAgICAgICAgICBpZiAoWzMyLCAzNywgMzgsIDM5LCA0MF0uaW5kZXhPZihlLmtleUNvZGUpID4gLTEpIHtcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfSBlbHNlIGlmKGUua2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZmluaXNoVGV4dChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZVBhc3RlIChlKSB7XG4gICAgICAgICAgICB2YXIgY2xpcGJvYXJkRGF0YSwgcGFzdGVkRGF0YTtcbiAgICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBjbGlwYm9hcmREYXRhID0gZS5jbGlwYm9hcmREYXRhIHx8IHdpbmRvdy5jbGlwYm9hcmREYXRhO1xuICAgICAgICAgICAgcGFzdGVkRGF0YSA9IGNsaXBib2FyZERhdGEuZ2V0RGF0YSgndGV4dC9wbGFpbicpLnNsaWNlKDAsIENIQVJfTElNSVQpO1xuICAgICAgICAgICAgZS50YXJnZXQuaW5uZXJUZXh0ID0gcGFzdGVkRGF0YTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZUNvb3JkaW5hdGUgKGYsIHQsIGUsIG4pIHtcbiAgICAgICAgdmFyIG8gPSB0LnNwbGl0KFwiLlwiKVxuICAgICAgICAgICAgLCByID0gcGFyc2VJbnQob1swXSwgMTApXG4gICAgICAgICAgICAsIGkgPSBwYXJzZUludChvWzFdLCAxMCk7XG4gICAgICAgIHZvaWQgMCA9PT0gZi5nZW9tZXRyeS5jb29yZGluYXRlc1tyXSAmJiAoZi5nZW9tZXRyeS5jb29yZGluYXRlc1tyXSA9IFtdKSxcbiAgICAgICAgZi5nZW9tZXRyeS5jb29yZGluYXRlc1tyXVtpXSA9IFtlLCBuXVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZVJlY3RhbmdsZSAoZXZlbnQsIHR5cGUpIHtcbiAgICAgICAgaWYgKHR5cGUgIT09ICdSZWN0YW5nbGUnKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIFxuICAgICAgICB2YXIgZ2VvbWV0cnkgPSBnZW9mbG8uaG90RmVhdHVyZS5nZW9tZXRyeTtcbiAgICAgICAgdmFyIGNvb3JkcyA9IGdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICAgICAgICBjb25zdCBjb29yZFR5cGUgPSBnZW9tZXRyeS50eXBlO1xuICAgICAgICAvL2Nvb3JkcyA9IGNvb3JkVHlwZSA9PT0gJ0xpbmVzdHJpbmcnID8gY29vcmRzIDogY29vcmRzWzBdO1xuICAgIFxuICAgICAgICBpZiAoZ2VvZmxvLmN1cnJlbnRWZXJ0ZXhQb3NpdGlvbiA9PT0gMikge1xuICAgICAgICAgICAgY29uc3QgZ2V0cFhZMyA9IGNhbGN1bGF0ZXBYWTMoZ2VvbWV0cnksIGV2ZW50LCB0eXBlKTtcbiAgICAgICAgICAgIGlmIChnZXRwWFkzWzJdKSByZXR1cm4gdXBkYXRlQ29vcmRpbmF0ZShgMC4ke2dlb2Zsby5jdXJyZW50VmVydGV4UG9zaXRpb24gKyAxfWAsIGdldHBYWTNbMl1bMF0sIGdldHBYWTNbMl1bMV0pO1xuICAgICAgICAgICAgcmV0dXJuIGdlb2Zsby5ob3RGZWF0dXJlO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHVwZGF0ZUNvb3JkaW5hdGUoYDAuJHtnZW9mbG8uY3VycmVudFZlcnRleFBvc2l0aW9ufWAsIGV2ZW50LmxuZ0xhdC5sbmcsIGV2ZW50LmxuZ0xhdC5sYXQpO1xuICAgICAgICBnZW9mbG8uY3VycmVudFZlcnRleFBvc2l0aW9uKys7XG4gICAgICAgIHVwZGF0ZUNvb3JkaW5hdGUoYDAuJHtnZW9mbG8uY3VycmVudFZlcnRleFBvc2l0aW9ufWAsIGV2ZW50LmxuZ0xhdC5sbmcsIGV2ZW50LmxuZ0xhdC5sYXQpO1xuICAgIFxuICAgICAgICBmdW5jdGlvbiBjYWxjdWxhdGVwWFkzIChnZW9tZXRyeSwgZXZlbnQsIHR5cGUpIHtcbiAgICAgICAgICAgIHZhciBjb29yZHMgPSBnZW9tZXRyeS5jb29yZGluYXRlcztcbiAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBwWFkwID0gY29vcmRzWzBdO1xuICAgICAgICAgICAgY29uc3QgcFhZMF8zODU3ID0gZ2VvZmxvLlV0aWxpdGllcy5kZWdyZWVzMm1ldGVycyhwWFkwKTtcbiAgICAgICAgICAgIGNvbnN0IHBYWTEgPSBjb29yZHNbMV07XG4gICAgICAgICAgICBjb25zdCBwWFkxXzM4NTcgPSBnZW9mbG8uVXRpbGl0aWVzLmRlZ3JlZXMybWV0ZXJzKHBYWTEpO1xuICAgICAgICAgICAgbGV0IHBYWTJfMzg1NyA9IGdlb2Zsby5VdGlsaXRpZXMuZGVncmVlczJtZXRlcnMoW2V2ZW50LmxuZ0xhdC5sbmcsIGV2ZW50LmxuZ0xhdC5sYXRdKTtcbiAgICAgICAgICAgIGNvbnN0IG1vdXNlXzM4NTcgPSBnZW9mbG8uVXRpbGl0aWVzLmRlZ3JlZXMybWV0ZXJzKFtldmVudC5sbmdMYXQubG5nLCBldmVudC5sbmdMYXQubGF0XSk7XG4gICAgICAgIFxuICAgICAgICAgICAgaWYgKHBYWTBfMzg1N1swXSA9PT0gcFhZMV8zODU3WzBdKSB7XG4gICAgICAgICAgICAgICAgcFhZMl8zODU3ID0gW21vdXNlXzM4NTdbMF0sIHBYWTFfMzg1N1sxXV07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBYWTBfMzg1N1sxXSA9PT0gcFhZMV8zODU3WzFdKSB7XG4gICAgICAgICAgICAgICAgcFhZMl8zODU3ID0gW3BYWTFfMzg1N1swXSwgbW91c2VfMzg1N1sxXV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZlY3RvcjFfMzg1NyA9IChwWFkxXzM4NTdbMV0gLSBwWFkwXzM4NTdbMV0pIC8gKHBYWTFfMzg1N1swXSAtIHBYWTBfMzg1N1swXSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmVjdG9yMl8zODU3ID0gLTEuMCAvIHZlY3RvcjFfMzg1NztcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKHZlY3RvcjJfMzg1NykgPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHBYWTJfMzg1N1sxXSA9IHZlY3RvcjJfMzg1NyAqIChtb3VzZV8zODU3WzBdIC0gcFhZMV8zODU3WzBdKSArIHBYWTFfMzg1N1sxXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwWFkyXzM4NTdbMF0gPSBwWFkxXzM4NTdbMF0gKyAocFhZMl8zODU3WzFdIC0gcFhZMV8zODU3WzFdKSAvIHZlY3RvcjJfMzg1NztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgY29uc3QgdmVjdG9yXzM4NTcgPSBbcFhZMV8zODU3WzBdIC0gcFhZMF8zODU3WzBdLCBwWFkxXzM4NTdbMV0gLSBwWFkwXzM4NTdbMV1dO1xuICAgICAgICAgICAgY29uc3QgcFhZM18zODU3ID0gW3BYWTJfMzg1N1swXSAtIHZlY3Rvcl8zODU3WzBdLCBwWFkyXzM4NTdbMV0gLSB2ZWN0b3JfMzg1N1sxXV07XG4gICAgICAgICAgICBjb25zdCBwWFkyRyA9IGdlb2Zsby5VdGlsaXRpZXMubWV0ZXJzMmRlZ3JlZXMocFhZMl8zODU3KTtcbiAgICAgICAgICAgIGNvbnN0IHBYWTNHID0gZ2VvZmxvLlV0aWxpdGllcy5tZXRlcnMyZGVncmVlcyhwWFkzXzM4NTcpO1xuICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBbY29vcmRzLCBwWFkyRywgcFhZM0ddO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdGFydElkbGVUaW1lICgpIHtcbiAgICAgICAgdmFyIHJlYWR5ID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoZ2VvZmxvLm1vdXNlSXNEb3duKSB7XG4gICAgICAgICAgICAgICAgZ2VvZmxvLmxhc3REcmFnTW92ZSArPSAxO1xuICAgICAgICAgICAgICAgIGNoZWNrSWRsZU1vdmUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2VvZmxvLmxhc3REcmFnTW92ZSA9IDA7XG4gICAgICAgICAgICAgICAgZ2VvZmxvLm1vdXNlSXNJZGxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChyZWFkeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDEpO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBjaGVja0lkbGVNb3ZlICgpIHtcbiAgICAgICAgaWYgKGdlb2Zsby5sYXN0RHJhZ01vdmUgPCBnZW9mbG8ub3B0aW9ucy5waW5uaW5nLmlkbGUpIHJldHVybiBnZW9mbG8ubW91c2VJc0lkbGUgPSBmYWxzZSwgZmFsc2U7XG4gICAgICAgIGdlb2Zsby5tb3VzZUlzSWRsZSA9IHRydWU7XG4gICAgICAgIGdlb2Zsby5TbmFwcGluZy5zZXRWZXJ0ZXgoKTtcbiAgICAgICAgZ2VvZmxvLlBpbm5pbmcudXBkYXRlRmVhdHVyZXMoKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmVlZHNUb0ZpbmlzaCAodHlwZSwgY29vcmRzKSB7XG4gICAgICAgIHZhciB0eXBlcyA9IFsnQ2lyY2xlJywgJ0ljb24nLCAnVGV4dCcsICdJbWFnZSddO1xuICAgICAgICBpZiAoIXR5cGUpIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAodHlwZXMuaW5jbHVkZXModHlwZSkpIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ1JlY3RhbmdsZScgJiYgZ2VvZmxvLnN0YXJ0UG9pbnQpIHJldHVybiBnZW9mbG8uZW5kUG9pbnQgPSBjb29yZHMsIHRydWU7XG4gICAgICAgIGlmICh0eXBlID09PSAnUG9seWdvbicgJiYgZ2VvZmxvLnNuYXBwZWRWZXJ0ZXggJiYgZ2VvZmxvLnN0YXJ0UG9pbnQgJiYgZ2VvZmxvLlV0aWxpdGllcy5pc1BvaW50RXF1YWwoZ2VvZmxvLnN0YXJ0UG9pbnQsIGdlb2Zsby5zbmFwcGVkVmVydGV4KSkgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmIChnZW9mbG8uc25hcHBlZFZlcnRleCAmJiBnZW9mbG8uVXRpbGl0aWVzLmlzTGFzdEluZGV4KGdlb2Zsby5kcmFnSW5kZXgsIGdlb2Zsby5ob3RGZWF0dXJlKSkgcmV0dXJuIHRydWVcbiAgICAgICAgaWYgKGdlb2Zsby5sYXN0Q2xpY2sgJiYgZ2VvZmxvLlV0aWxpdGllcy5pc1BvaW50RXF1YWwoZ2VvZmxvLmxhc3RDbGljay5jb29yZHMsIGNvb3JkcykpIHJldHVybiB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uc3RyYWluRmVhdHVyZU1vdmVtZW50IChnZW9qc29uRmVhdHVyZXMsIGRlbHRhKSB7XG4gICAgICAgIC8vIFwiaW5uZXIgZWRnZVwiID0gYSBmZWF0dXJlJ3MgbGF0aXR1ZGUgY2xvc2VzdCB0byB0aGUgZXF1YXRvclxuICAgICAgICBsZXQgbm9ydGhJbm5lckVkZ2UgPSBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuTEFUX01JTjtcbiAgICAgICAgbGV0IHNvdXRoSW5uZXJFZGdlID0gZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLkxBVF9NQVg7XG4gICAgICAgIC8vIFwib3V0ZXIgZWRnZVwiID0gYSBmZWF0dXJlJ3MgbGF0aXR1ZGUgZnVydGhlc3QgZnJvbSB0aGUgZXF1YXRvclxuICAgICAgICBsZXQgbm9ydGhPdXRlckVkZ2UgPSBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuTEFUX01JTjtcbiAgICAgICAgbGV0IHNvdXRoT3V0ZXJFZGdlID0gZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLkxBVF9NQVg7XG4gICAgXG4gICAgICAgIGxldCB3ZXN0RWRnZSA9IGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5MTkdfTUFYO1xuICAgICAgICBsZXQgZWFzdEVkZ2UgPSBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuTE5HX01JTjtcbiAgICBcbiAgICAgICAgZ2VvanNvbkZlYXR1cmVzLmZvckVhY2goKGZlYXR1cmUpID0+IHtcbiAgICAgICAgICAgIC8vY29uc3QgYm91bmRzID0gZXh0ZW50KGZlYXR1cmUpOyBOZWVkIHRvIGFkZCBUdXJmIGJvdW5kcyBoZXJlXG4gICAgICAgICAgICBjb25zdCBmZWF0dXJlU291dGhFZGdlID0gYm91bmRzWzFdO1xuICAgICAgICAgICAgY29uc3QgZmVhdHVyZU5vcnRoRWRnZSA9IGJvdW5kc1szXTtcbiAgICAgICAgICAgIGNvbnN0IGZlYXR1cmVXZXN0RWRnZSA9IGJvdW5kc1swXTtcbiAgICAgICAgICAgIGNvbnN0IGZlYXR1cmVFYXN0RWRnZSA9IGJvdW5kc1syXTtcbiAgICAgICAgICAgIGlmIChmZWF0dXJlU291dGhFZGdlID4gbm9ydGhJbm5lckVkZ2UpIG5vcnRoSW5uZXJFZGdlID0gZmVhdHVyZVNvdXRoRWRnZTtcbiAgICAgICAgICAgIGlmIChmZWF0dXJlTm9ydGhFZGdlIDwgc291dGhJbm5lckVkZ2UpIHNvdXRoSW5uZXJFZGdlID0gZmVhdHVyZU5vcnRoRWRnZTtcbiAgICAgICAgICAgIGlmIChmZWF0dXJlTm9ydGhFZGdlID4gbm9ydGhPdXRlckVkZ2UpIG5vcnRoT3V0ZXJFZGdlID0gZmVhdHVyZU5vcnRoRWRnZTtcbiAgICAgICAgICAgIGlmIChmZWF0dXJlU291dGhFZGdlIDwgc291dGhPdXRlckVkZ2UpIHNvdXRoT3V0ZXJFZGdlID0gZmVhdHVyZVNvdXRoRWRnZTtcbiAgICAgICAgICAgIGlmIChmZWF0dXJlV2VzdEVkZ2UgPCB3ZXN0RWRnZSkgd2VzdEVkZ2UgPSBmZWF0dXJlV2VzdEVkZ2U7XG4gICAgICAgICAgICBpZiAoZmVhdHVyZUVhc3RFZGdlID4gZWFzdEVkZ2UpIGVhc3RFZGdlID0gZmVhdHVyZUVhc3RFZGdlO1xuICAgICAgICB9KTtcbiAgICBcbiAgICBcbiAgICAgICAgLy8gVGhlc2UgY2hhbmdlcyBhcmUgbm90IG11dHVhbGx5IGV4Y2x1c2l2ZTogd2UgbWlnaHQgaGl0IHRoZSBpbm5lclxuICAgICAgICAvLyBlZGdlIGJ1dCBhbHNvIGhhdmUgaGl0IHRoZSBvdXRlciBlZGdlIGFuZCB0aGVyZWZvcmUgbmVlZFxuICAgICAgICAvLyBhbm90aGVyIHJlYWRqdXN0bWVudFxuICAgICAgICBjb25zdCBjb25zdHJhaW5lZERlbHRhID0gZGVsdGE7XG4gICAgXG4gICAgICAgIGlmIChub3J0aElubmVyRWRnZSArIGNvbnN0cmFpbmVkRGVsdGEubGF0ID4gZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLkxBVF9SRU5ERVJFRF9NQVgpIHtcbiAgICAgICAgICAgIGNvbnN0cmFpbmVkRGVsdGEubGF0ID0gZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLkxBVF9SRU5ERVJFRF9NQVggLSBub3J0aElubmVyRWRnZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9ydGhPdXRlckVkZ2UgKyBjb25zdHJhaW5lZERlbHRhLmxhdCA+IGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5MQVRfTUFYKSB7XG4gICAgICAgICAgICBjb25zdHJhaW5lZERlbHRhLmxhdCA9IGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5MQVRfTUFYIC0gbm9ydGhPdXRlckVkZ2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvdXRoSW5uZXJFZGdlICsgY29uc3RyYWluZWREZWx0YS5sYXQgPCBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuTEFUX1JFTkRFUkVEX01JTikge1xuICAgICAgICAgICAgY29uc3RyYWluZWREZWx0YS5sYXQgPSBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuTEFUX1JFTkRFUkVEX01JTiAtIHNvdXRoSW5uZXJFZGdlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzb3V0aE91dGVyRWRnZSArIGNvbnN0cmFpbmVkRGVsdGEubGF0IDwgZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLkxBVF9NSU4pIHtcbiAgICAgICAgICAgIGNvbnN0cmFpbmVkRGVsdGEubGF0ID0gZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLkxBVF9NSU4gLSBzb3V0aE91dGVyRWRnZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod2VzdEVkZ2UgKyBjb25zdHJhaW5lZERlbHRhLmxuZyA8PSBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuTE5HX01JTikge1xuICAgICAgICAgICAgY29uc3RyYWluZWREZWx0YS5sbmcgKz0gTWF0aC5jZWlsKE1hdGguYWJzKGNvbnN0cmFpbmVkRGVsdGEubG5nKSAvIDM2MCkgKiAzNjA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVhc3RFZGdlICsgY29uc3RyYWluZWREZWx0YS5sbmcgPj0gZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLkxOR19NQVgpIHtcbiAgICAgICAgICAgIGNvbnN0cmFpbmVkRGVsdGEubG5nIC09IE1hdGguY2VpbChNYXRoLmFicyhjb25zdHJhaW5lZERlbHRhLmxuZykgLyAzNjApICogMzYwO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHJldHVybiBjb25zdHJhaW5lZERlbHRhO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZU9yaWVudGVkQW5nbGVQb2x5Z29uIChmZWF0dXJlKSB7XG4gICAgICAgIHZhciBnZW9tZXRyeSA9IGZlYXR1cmUuZ2VvbWV0cnk7XG4gICAgICAgIHZhciBjb29yZHMgPSBnZW9tZXRyeS5jb29yZGluYXRlcztcbiAgICAgICAgY29uc3QgY29vcmRUeXBlID0gZ2VvbWV0cnkudHlwZTtcbiAgICAgICAgY29vcmRzID0gY29vcmRUeXBlID09PSAnTGluZXN0cmluZycgPyBjb29yZHMgOiBjb29yZHNbMF07XG4gICAgXG4gICAgICAgIGNvbnN0IHBYWTAgPSBjb29yZHNbMF07XG4gICAgICAgIGNvbnN0IHBYWTBfMzg1NyA9IGdlb2Zsby5VdGlsaXRpZXMuZGVncmVlczJtZXRlcnMocFhZMCk7XG4gICAgICAgIGNvbnN0IHBYWTEgPSBjb29yZHNbMV07XG4gICAgICAgIGNvbnN0IHBYWTFfMzg1NyA9IGdlb2Zsby5VdGlsaXRpZXMuZGVncmVlczJtZXRlcnMocFhZMSk7XG4gICAgICAgIGNvbnN0IGFuZ2xlU3RkR3JhdXMgPSBNYXRoLmF0YW4yKHBYWTFfMzg1N1sxXSAtIHBYWTBfMzg1N1sxXSwgcFhZMV8zODU3WzBdIC0gcFhZMF8zODU3WzBdKSAqIDE4MCAvIE1hdGguUEk7XG4gICAgXG4gICAgICAgIGxldCBhbmdsZVN1ZEdyYXVzID0gLTEuMCAqIChhbmdsZVN0ZEdyYXVzICsgOTApO1xuICAgICAgICBjb25zdCBhbmdsZSA9IGFuZ2xlU3VkR3JhdXMgPCAwID8gYW5nbGVTdWRHcmF1cyArIDM2MCA6IGFuZ2xlU3VkR3JhdXM7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KChhbmdsZSkudG9GaXhlZCgyKSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgRHJhdzsiLCJjb25zdCBldmVudHMgPSBbXG4gICAgJ21hcC5lbmFibGUnLFxuICAgICdtYXAuZGlzYWJsZScsXG4gICAgJ21hcC5yZWFkeScsXG4gICAgJ21hcC5yZWRyYXcnLFxuICAgICdtYXAucmVmcmVzaCcsXG4gICAgJ21vZGUuY2hhbmdlJyxcbiAgICAndGhlbWUuY2hhbmdlJyxcbiAgICAnc291cmNlcy5hZGQnLFxuICAgICdzb3VyY2UuYWRkJyxcbiAgICAnc291cmNlLmhvdCcsXG4gICAgJ2xheWVycy5hZGQnLFxuICAgICdsYXllcnMucmVtb3ZlJyxcbiAgICAnbGF5ZXIuYWRkJyxcbiAgICAnY29udHJvbC5hZGQnLFxuICAgICdjb250cm9sLnJlbW92ZScsXG4gICAgJ2ZlYXR1cmVzLnpvb20nLFxuICAgICdmZWF0dXJlcy5hZGQnLFxuICAgICdmZWF0dXJlcy5kZWxldGUnLFxuICAgICdmZWF0dXJlcy51cGRhdGUnLFxuICAgICdmZWF0dXJlcy5pbXBvcnQnLFxuICAgICdmZWF0dXJlcy5leHBvcnQnLFxuICAgICdmZWF0dXJlcy5vZmZzZXQnLFxuICAgICdmZWF0dXJlLmFkZCcsXG4gICAgJ2ZlYXR1cmUuZGVsZXRlJyxcbiAgICAnZmVhdHVyZS5zZWxlY3QnLFxuICAgICdmZWF0dXJlLmRlc2VsZWN0JyxcbiAgICAnZmVhdHVyZS51cGRhdGUnLFxuICAgICdmZWF0dXJlLmhpc3RvcnknLFxuICAgICdzZWxlY3QubG9hZCcsXG4gICAgJ3NlbGVjdC5hZGQnLFxuICAgICdzZWxlY3QucmVtb3ZlJyxcbiAgICAnc2VsZWN0LmFjdGl2YXRlJyxcbiAgICAnc2VsZWN0LmRlYWN0aXZhdGUnLFxuICAgICdkcmF3LmFjdGl2YXRlJyxcbiAgICAnZHJhdy5kZWFjdGl2YXRlJyxcbiAgICAnZHJhdy5zdGFydCcsXG4gICAgJ2RyYXcuZmluaXNoJyxcbiAgICAnZHJhdy5jYW5jZWwnLFxuICAgICdtZXNoLmxvYWQnLFxuICAgICd0ZXh0LmFkZCcsXG4gICAgJ2ljb24uYWRkJyxcbiAgICAndmVydGV4LmZpbmQnLFxuICAgICd2ZXJ0ZXgub24nLFxuICAgICd2ZXJ0ZXgub2ZmJyxcbiAgICAndmVydGV4LmFkZCcsXG4gICAgJ3ZlcnRleC5kcmFnJyxcbiAgICAndmVydGV4LmRyYWdzbmFwJyxcbiAgICAndmVydGV4LmRlbGV0ZScsXG4gICAgJ292ZXJwYXNzLmFkZCcsXG4gICAgJ3NuYXBwaW5nLmFjdGl2YXRlJyxcbiAgICAnc25hcHBpbmcuZGVhY3RpdmF0ZScsXG4gICAgJ3NuYXBwaW5nLmFkZCcsXG4gICAgJ3NuYXBwaW5nLnJlZnJlc2gnLFxuICAgICdzbmFwcGluZy5kZWxldGUnLFxuICAgICdwaW5uaW5nLmFjdGl2YXRlJyxcbiAgICAncGlubmluZy5kZWFjdGl2YXRlJyxcbiAgICAncGlubmluZy5hZGQnLFxuICAgICdwaW5uaW5nLnVwZGF0ZScsXG4gICAgJ3JvdXRpbmcuYWN0aXZhdGUnLFxuICAgICdyb3V0aW5nLmRlYWN0aXZhdGUnLFxuICAgICdyb3V0aW5nLmFkZCcsXG4gICAgJ3BhaW50aW5nLmFjdGl2YXRlJyxcbiAgICAncGFpbnRpbmcuZGVhY3RpdmF0ZScsXG4gICAgJ3BhaW50aW5nLnN0YXJ0JyxcbiAgICAncGFpbnRpbmcudXBkYXRlJyxcbiAgICAnZ2FtZXBhZC5pbml0JyxcbiAgICAnZ2FtZXBhZC5hZGQnLFxuICAgICdnYW1lcGFkLnJlbW92ZScsXG4gICAgJ2dhbWVwYWQuaG9sZCcsXG4gICAgJ2dhbWVwYWQucHJlc3MnLFxuICAgICdnYW1lcGFkLnJlbGVhc2UnLFxuICAgICdnYW1lcGFkLmNvbm5lY3QnLFxuICAgICdnYW1lcGFkLmRpc2Nvbm5lY3QnLFxuICAgICdsb2NhdGUub24nLFxuICAgICdsb2NhdGUub2ZmJyxcbiAgICAnbG9jYXRlLnVwZGF0ZSdcbl1cblxuY29uc3QgRXZlbnRzID0gZnVuY3Rpb24gKGdlb2Zsbykge1xuICAgIGNvbnN0IG1hcE1vdmVTdGFydCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBnZW9mbG8ubWFwTW92aW5nID0gZXZlbnQ7XG4gICAgICAgIGlmIChnZW9mbG8uc2V0dGluZ0V4dGVudCkgcmV0dXJuO1xuICAgICAgICBpZiAoZ2VvZmxvLmxvY2F0ZSkgZ2VvZmxvLmxvY2F0ZS5vbk1hcE1vdmUoZXZlbnQpO1xuICAgICAgICBnZW9mbG8uc2V0SWNvbihldmVudCk7XG4gICAgfTtcblxuICAgIGNvbnN0IG1hcE1vdmluZyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBnZW9mbG8ubWFwTW92aW5nID0gZXZlbnQ7XG4gICAgICAgIGlmIChnZW9mbG8uc2V0dGluZ0V4dGVudCkgcmV0dXJuO1xuICAgICAgICBnZW9mbG8uc2V0SWNvbihldmVudCk7XG4gICAgICAgIGdlb2Zsby5zZXRDZW50ZXJNYXJrZXIoKTtcbiAgICAgICAgZ2VvZmxvLmxvY2F0ZSAmJiBnZW9mbG8ubG9jYXRlLmZvbGxvd2luZyA/IGdlb2Zsby5zZXRNYXBDbGFzcygnZGlzYWJsZScpIDogZmFsc2U7XG4gICAgfTtcblxuICAgIGNvbnN0IG1hcE1vdmVFbmQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZ2VvZmxvLm1hcE1vdmluZyA9IGZhbHNlO1xuICAgICAgICBpZiAoZ2VvZmxvLnNldHRpbmdFeHRlbnQpIHJldHVybjtcbiAgICAgICAgZ2VvZmxvLm9uTWFwTW92ZShldmVudCk7XG4gICAgICAgIGlmIChnZW9mbG8ubG9jYXRlKSBnZW9mbG8ubG9jYXRlLm9uTWFwTW92ZShldmVudCk7XG4gICAgICAgIGdlb2Zsby5zZXRJY29uKGV2ZW50KTtcbiAgICB9O1xuXG4gICAgY29uc3QgbW91c2VNb3ZlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBwYWludGluZyA9IGdlb2Zsby5vcHRpb25zLnBhaW50aW5nICYmIGdlb2Zsby5vcHRpb25zLnBhaW50aW5nLmVuYWJsZTtcbiAgICAgICAgcGFpbnRpbmcgPSBwYWludGluZyAmJiBnZW9mbG8uY3VycmVudE1vZGUgJiYgZ2VvZmxvLmN1cnJlbnRNb2RlLmlkID09PSAnZHJhdyc7XG4gICAgICAgIFxuICAgICAgICBnZW9mbG8ubG9jYXRlICYmIGdlb2Zsby5sb2NhdGUuZm9sbG93aW5nID8gZ2VvZmxvLnNldE1hcENsYXNzKCdkaXNhYmxlJykgOlxuICAgICAgICBnZW9mbG8uZHJhZ01vdmluZyA/IGdlb2Zsby5zZXRNYXBDbGFzcygnZ3JhYmJpbmcnKSA6XG4gICAgICAgIGdlb2Zsby5hZGRpbmdWZXJ0ZXhPbkxpbmUgfHwgZ2VvZmxvLmNhbkFkZFZlcnRleCA/IGdlb2Zsby5zZXRNYXBDbGFzcygncG9pbnRlcicpIDpcbiAgICAgICAgZ2VvZmxvLmNhbkRyYWdNb3ZlID8gZ2VvZmxvLnNldE1hcENsYXNzKCdncmFiJykgOlxuICAgICAgICBwYWludGluZz8gZ2VvZmxvLnNldE1hcENsYXNzKCdwYWludGluZycpIDpcbiAgICAgICAgZ2VvZmxvLnNldE1hcENsYXNzKCdwb2ludGVyJyk7XG5cbiAgICAgICAgZ2VvZmxvLmxhc3RNb3VzZUV2ZW50ID0gZXZlbnQ7XG4gICAgICAgIGdlb2Zsby5jdXJyZW50TW9kZS5oYW5kbGVNb3ZlID8gZ2VvZmxvLmN1cnJlbnRNb2RlLmhhbmRsZU1vdmUoZXZlbnQpIDogZmFsc2U7XG4gICAgfTtcblxuICAgIGNvbnN0IG1vdXNlRG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgcGFpbnRpbmcgPSBnZW9mbG8ub3B0aW9ucy5wYWludGluZyAmJiBnZW9mbG8ub3B0aW9ucy5wYWludGluZy5lbmFibGU7XG4gICAgICAgIHBhaW50aW5nID0gcGFpbnRpbmcgJiYgZ2VvZmxvLmN1cnJlbnRNb2RlICYmIGdlb2Zsby5jdXJyZW50TW9kZS5pZCA9PT0gJ2RyYXcnO1xuICAgICAgICBcbiAgICAgICAgZ2VvZmxvLmxvY2F0ZSAmJiBnZW9mbG8ubG9jYXRlLmZvbGxvd2luZyA/IGdlb2Zsby5zZXRNYXBDbGFzcygnZGlzYWJsZScpIDpcbiAgICAgICAgcGFpbnRpbmc/IGdlb2Zsby5zZXRNYXBDbGFzcygncGFpbnRpbmcnKSA6XG4gICAgICAgIGdlb2Zsby5kcmFnTW92aW5nID8gZ2VvZmxvLnNldE1hcENsYXNzKCdncmFiYmluZycpIDpcbiAgICAgICAgZ2VvZmxvLmFkZGluZ1ZlcnRleE9uTGluZSA/IGdlb2Zsby5zZXRNYXBDbGFzcygnZ3JhYmJpbmcnKSA6XG4gICAgICAgIGdlb2Zsby5jYW5EcmFnTW92ZSA/IGdlb2Zsby5zZXRNYXBDbGFzcygnZ3JhYicpIDpcbiAgICAgICAgZ2VvZmxvLmxhc3RDbGljayA/IGdlb2Zsby5zZXRNYXBDbGFzcygnZ3JhYmJpbmcnKSA6XG4gICAgICAgIGdlb2Zsby5zZXRNYXBDbGFzcygncG9pbnRlcicpO1xuICAgICAgICBcbiAgICAgICAgZ2VvZmxvLm1vdXNlSXNEb3duID0gW2V2ZW50LmxuZ0xhdC5sbmcsIGV2ZW50LmxuZ0xhdC5sYXRdO1xuICAgICAgICBnZW9mbG8uY3VycmVudE1vZGUuaGFuZGxlRG93biA/IGdlb2Zsby5jdXJyZW50TW9kZS5oYW5kbGVEb3duKGV2ZW50KSA6IGZhbHNlO1xuICAgIH07XG5cbiAgICBjb25zdCBtb3VzZVVwID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGdlb2Zsby5tb3VzZUlzRG93biA9IGZhbHNlO1xuICAgICAgICBnZW9mbG8ubG9jYXRlICYmIGdlb2Zsby5sb2NhdGUuZm9sbG93aW5nID8gZ2VvZmxvLnNldE1hcENsYXNzKCdkaXNhYmxlJykgOiBnZW9mbG8uc2V0TWFwQ2xhc3MoJ3BvaW50ZXInKTtcbiAgICAgICAgZ2VvZmxvLmN1cnJlbnRNb2RlLmhhbmRsZVVwID8gZ2VvZmxvLmN1cnJlbnRNb2RlLmhhbmRsZVVwKGV2ZW50KSA6IGZhbHNlO1xuICAgIH07XG5cbiAgICBjb25zdCBtb3VzZUNsaWNrID0gYXN5bmMgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC50eXBlLmluY2x1ZGVzKCdwcmVjbGljaycpKSByZXR1cm4gZ2VvZmxvLmN1cnJlbnRNb2RlLmhhbmRsZVByZWNsaWNrID8gZ2VvZmxvLmN1cnJlbnRNb2RlLmhhbmRsZVByZWNsaWNrKGV2ZW50KSA6IGZhbHNlO1xuICAgICAgICBnZW9mbG8uY3VycmVudE1vZGUuaGFuZGxlQ2xpY2sgPyBnZW9mbG8uY3VycmVudE1vZGUuaGFuZGxlQ2xpY2soZXZlbnQpIDogZmFsc2U7XG4gICAgfTtcblxuICAgIGNvbnN0IG1vdXNlRHJhZyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBnZW9mbG8ubG9jYXRlICYmIGdlb2Zsby5sb2NhdGUuZm9sbG93aW5nID8gZ2VvZmxvLnNldE1hcENsYXNzKCdkaXNhYmxlJykgOlxuICAgICAgICBnZW9mbG8uZHJhZ01vdmluZyA/IGdlb2Zsby5zZXRNYXBDbGFzcygnZ3JhYmJpbmcnKSA6XG4gICAgICAgIGdlb2Zsby5jYW5EcmFnTW92ZSA/IGdlb2Zsby5zZXRNYXBDbGFzcygnZ3JhYicpIDpcbiAgICAgICAgZ2VvZmxvLnNldE1hcENsYXNzKCdtb3ZlJyk7XG5cbiAgICAgICAgZ2VvZmxvLmN1cnJlbnRNb2RlLmhhbmRsZURyYWcgPyBnZW9mbG8uY3VycmVudE1vZGUuaGFuZGxlRHJhZyhldmVudCkgOiBmYWxzZTtcbiAgICB9O1xuXG4gICAgY29uc3QgbW91c2VsZWF2ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBnZW9mbG8uY3VycmVudE1vZGUuaGFuZGxlT2ZmTWFwID8gZ2VvZmxvLmN1cnJlbnRNb2RlLmhhbmRsZU9mZk1hcChldmVudCkgOiBmYWxzZTtcbiAgICB9O1xuXG4gICAgY29uc3QgbW91c2VvdmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGdlb2Zsby5jdXJyZW50TW9kZS5oYW5kbGVPbk1hcCA/IGdlb2Zsby5jdXJyZW50TW9kZS5oYW5kbGVPbk1hcChldmVudCkgOiBmYWxzZTtcbiAgICB9O1xuXG4gICAgY29uc3Qga2V5cHJlc3MgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGdlb2Zsby50ZXh0TWFya2VyKSByZXR1cm47XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyhcImtleWNvZGU6IFwiLCBldmVudC5rZXlDb2RlLCBcIiA9PlwiLCBldmVudC5rZXksIFwiIHwgQ29kZTpcIiwgZXZlbnQuY29kZSwgXCIgRXZlbnQ6XCIsIGV2ZW50KTtcbiAgICAgICAgY29uc3QgYnV0dG9uT3B0aW9ucyA9IGdlb2Zsby5nZXRCdXR0b25zKCk7XG5cbiAgICAgICAgbGV0IGtleUhhbmRsZWQgPSBmYWxzZTtcblxuICAgICAgICBPYmplY3Qua2V5cyhidXR0b25PcHRpb25zKS5mb3JFYWNoKChidXR0b25JZCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gYnV0dG9uT3B0aW9uc1tidXR0b25JZF07XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBnZW9mbG8ub3B0aW9ucy5rZXlzW2J1dHRvbklkXTtcblxuICAgICAgICAgICAgaWYgKGtleSA9PT0gZXZlbnQua2V5KSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uLmJ1dHRvbi5jbGljaygpO1xuICAgICAgICAgICAgICAgIGtleUhhbmRsZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09IGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgICAgICAgICBvcHRpb24uYnV0dG9uLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAga2V5SGFuZGxlZCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbi5rZXljb2RlICYmIG9wdGlvbi5rZXljb2RlID09PSBldmVudC5rZXlDb2RlKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uLmJ1dHRvbi5jbGljaygpO1xuICAgICAgICAgICAgICAgIGtleUhhbmRsZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZ2VvZmxvLm9wdGlvbnMuY29tbWFuZHMpIHtcbiAgICAgICAgICAgIGdlb2Zsby5vcHRpb25zLmNvbW1hbmRzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICBpZiAoYy5rZXkgPT09IGV2ZW50LmtleUNvZGUgfHwgYy5rZXkgPT09IGV2ZW50LmtleSB8fCBjLmtleSA9PT0gZXZlbnQuY29kZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWMuY29tbWFuZCB8fCB0eXBlb2YgYy5jb21tYW5kICE9PSAnZnVuY3Rpb24nKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGMuY29tbWFuZChldmVudCwgZ2VvZmxvLCBjKTtcbiAgICAgICAgICAgICAgICAgICAga2V5SGFuZGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXlIYW5kbGVkKSB7IHJldHVybiBrZXlIYW5kbGVkIH1cblxuICAgICAgICBpZiAoZXZlbnQua2V5LmluY2x1ZGVzKCdBcnJvdycpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoZXZlbnQuY29kZSkge1xuICAgICAgICAgICAgY2FzZSBcIkVudGVyXCI6IHtcbiAgICAgICAgICAgICAgICBnZW9mbG8uc2V0TW9kZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcIk51bXBhZEVudGVyXCI6IHtcbiAgICAgICAgICAgICAgICBnZW9mbG8uc2V0TW9kZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcIkVzY2FwZVwiOiB7XG4gICAgICAgICAgICAgICAgZ2VvZmxvLmhvdEZlYXR1cmUgPSBudWxsO1xuICAgICAgICAgICAgICAgIGdlb2Zsby5zZXRNb2RlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwiSG9tZVwiOiB7XG4gICAgICAgICAgICAgICAgZ2VvZmxvLm1vdmVTZWxlY3RlZEZlYXR1cmVzKDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcIkVuZFwiOiB7XG4gICAgICAgICAgICAgICAgZ2VvZmxvLm1vdmVTZWxlY3RlZEZlYXR1cmVzKC0xKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJEZWxldGVcIjoge1xuICAgICAgICAgICAgICAgIGlmIChnZW9mbG8ubW9kZSA9PT0gZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLm1vZGVzLlNFTEVDVCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2VvZmxvLmhhc1NlbGVjdGlvbigpKSB7IGdlb2Zsby5yZW1vdmVTZWxlY3Rpb24oKTsgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZ2VvZmxvLm1vZGUgPT09IGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5tb2Rlcy5EUkFXKSB7XG4gICAgICAgICAgICAgICAgICAgIGdlb2Zsby5jdXJyZW50TW9kZS5kZWxldGVWZXJ0ZXgoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgdG91Y2hzdGFydCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBnZW9mbG8uY3VycmVudE1vZGUuaGFuZGxlVG91Y2ggPyBnZW9mbG8uY3VycmVudE1vZGUuaGFuZGxlVG91Y2goZXZlbnQpIDogZmFsc2U7XG4gICAgfTtcblxuICAgIGNvbnN0IHRvdWNoZW5kID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGdlb2Zsby5jdXJyZW50TW9kZS5oYW5kbGVUb3VjaCA/IGdlb2Zsby5jdXJyZW50TW9kZS5oYW5kbGVUb3VjaChldmVudCkgOiBmYWxzZTtcbiAgICB9O1xuXG4gICAgY29uc3QgdG91Y2htb3ZlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGdlb2Zsby5jdXJyZW50TW9kZS5oYW5kbGVUb3VjaCA/IGdlb2Zsby5jdXJyZW50TW9kZS5oYW5kbGVUb3VjaChldmVudCkgOiBmYWxzZTtcbiAgICB9O1xuXG4gICAgY29uc3QgdG91Y2hjYW5jZWwgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZ2VvZmxvLmN1cnJlbnRNb2RlLmhhbmRsZVRvdWNoID8gZ2VvZmxvLmN1cnJlbnRNb2RlLmhhbmRsZVRvdWNoKGV2ZW50KSA6IGZhbHNlO1xuICAgIH07XG5cbiAgICBjb25zdCBnYW1lcGFkY29ubmVjdGVkID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGdlb2Zsby5hZGRHYW1lcGFkKGV2ZW50LmdhbWVwYWQgfHwgZXZlbnQuZGV0YWlsLmdhbWVwYWQpO1xuICAgIH07XG5cbiAgICBjb25zdCBnYW1lcGFkZGlzY29ubmVjdGVkID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGdlb2Zsby5yZW1vdmVHYW1lcGFkKGV2ZW50LmdhbWVwYWQgfHwgZXZlbnQuZGV0YWlsLmdhbWVwYWQpO1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVPcmllbnRhdGlvbiA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBnZW9mbG8udXBkYXRlT3JpZW50YXRpb24oe1xuICAgICAgICAgICAgYWxwaGE6IGV2ZW50LmFscGhhLFxuICAgICAgICAgICAgYmV0YTogZXZlbnQuYmV0YSxcbiAgICAgICAgICAgIGdhbW1hOiBldmVudC5nYW1tYVxuICAgICAgICB9KVxuICAgIH07XG5cbiAgICBjb25zdCBkcmFnU3RhcnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgLy9pZiAoZ2VvZmxvLmxvY2F0ZSAmJiBnZW9mbG8ubG9jYXRlLmZvbGxvd2luZykgcmV0dXJuIGV2ZW50Lm9yaWdpbmFsRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgcm90YXRlUGl0Y2ggPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZ2VvZmxvLnNldE1hcENsYXNzKCdncmFiYmluZycpO1xuICAgICAgICBnZW9mbG8uc2V0SWNvbihldmVudCk7XG4gICAgICAgIGdlb2Zsby5zZXRDZW50ZXJNYXJrZXIoeyB0cmFuc2Zvcm06IHRydWUgfSk7XG4gICAgfTtcblxuXG5cbiAgICBjb25zdCBmaXJlRXZlbnQgPSBmdW5jdGlvbiBmaXJlRXZlbnQgKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBldmVudC50eXBlLnNwbGl0KCc6JylbMV07XG4gICAgICAgIFxuICAgICAgICBjb25zdCBkZXRhaWwgPSB7XG4gICAgICAgICAgICBkYXRhOiBldmVudC5kZXRhaWwsXG4gICAgICAgICAgICB0eXBlOiBuYW1lLnNwbGl0KCcuJylbMF0sXG4gICAgICAgICAgICBhY3Rpb246IG5hbWUuc3BsaXQoJy4nKVsxXSxcbiAgICAgICAgICAgIHRhcmdldDogZ2VvZmxvLFxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGV0YWlscyA9IHsgbmFtZTogbmFtZSwgZGV0YWlsOiBkZXRhaWwgfTtcbiAgICAgICAgZ2VvZmxvLm1hcC5maXJlKGdlb2Zsby5pZCwgZGV0YWlscyk7XG4gICAgfVxuXG4gICAgY29uc3QgY29udGV4dE1lbnUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZ2VvZmxvLmN1cnJlbnRNb2RlLmhhbmRsZUNvbnRleHQgPyBnZW9mbG8uY3VycmVudE1vZGUuaGFuZGxlQ29udGV4dChldmVudCkgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBzb3VyY2VEYXRhID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICghZXZlbnQuc291cmNlRGF0YVR5cGUgfHwgIWV2ZW50LnNvdXJjZURhdGFUeXBlID09PSAnY29udGVudCcgfHwgIWV2ZW50LnNvdXJjZUlkKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IGlkID0gZXZlbnQuc291cmNlSWQ7XG5cbiAgICAgICAgY29uc3QgZGV0YWlsID0ge1xuICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgZGF0YTogZXZlbnQuc291cmNlLmRhdGEsXG4gICAgICAgICAgICB0eXBlOiBldmVudC50eXBlLFxuICAgICAgICAgICAgdGFyZ2V0OiBnZW9mbG8sXG4gICAgICAgIH1cblxuICAgICAgICBpZCA9PT0gZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuSE9UID8gZ2VvZmxvLmZpcmUoJ3NvdXJjZS5ob3QnLCBkZXRhaWwpIDogZmFsc2U7XG4gICAgfVxuXG4gICAgXG5cbiAgICBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVycyAoKSB7XG4gICAgICAgIGdlb2Zsby5tYXAub24oXCJtb3Zlc3RhcnRcIiwgbWFwTW92ZVN0YXJ0KTtcbiAgICAgICAgZ2VvZmxvLm1hcC5vbihcIm1vdmVcIiwgbWFwTW92aW5nKTtcbiAgICAgICAgZ2VvZmxvLm1hcC5vbihcIm1vdmVlbmRcIiwgbWFwTW92ZUVuZCk7XG4gICAgICAgIGdlb2Zsby5tYXAub24oXCJtb3VzZW1vdmVcIiwgbW91c2VNb3ZlKTtcblxuICAgICAgICBnZW9mbG8ubWFwLm9uKCdwcmVjbGljaycsIG1vdXNlQ2xpY2spO1xuICAgICAgICBnZW9mbG8ubWFwLm9uKCdjbGljaycsIG1vdXNlQ2xpY2spO1xuICAgICAgICBnZW9mbG8ubWFwLm9uKCd0YXAnLCBtb3VzZUNsaWNrKTtcblxuICAgICAgICBnZW9mbG8ubWFwLm9uKCdkcmFnc3RhcnQnLCBkcmFnU3RhcnQpO1xuICAgICAgICBnZW9mbG8ubWFwLm9uKCdkcmFnJywgbW91c2VEcmFnKTtcbiAgICAgICAgZ2VvZmxvLm1hcC5vbignbW91c2Vkb3duJywgbW91c2VEb3duKTtcbiAgICAgICAgZ2VvZmxvLm1hcC5vbignbW91c2V1cCcsIG1vdXNlVXApO1xuXG4gICAgICAgIGdlb2Zsby5tYXAub24oJ3JvdGF0ZXN0YXJ0Jywgcm90YXRlUGl0Y2gpO1xuICAgICAgICBnZW9mbG8ubWFwLm9uKCdwaXRjaHN0YXJ0Jywgcm90YXRlUGl0Y2gpO1xuICAgICAgICBnZW9mbG8ubWFwLm9uKCdyb3RhdGUnLCByb3RhdGVQaXRjaCk7XG4gICAgICAgIGdlb2Zsby5tYXAub24oJ3BpdGNoJywgcm90YXRlUGl0Y2gpO1xuXG4gICAgICAgIGdlb2Zsby5tYXAub24oJ3RvdWNoc3RhcnQnLCB0b3VjaHN0YXJ0KTtcbiAgICAgICAgZ2VvZmxvLm1hcC5vbigndG91Y2hlbmQnLCB0b3VjaGVuZCk7XG4gICAgICAgIGdlb2Zsby5tYXAub24oJ3RvdWNobW92ZScsIHRvdWNobW92ZSk7XG4gICAgICAgIGdlb2Zsby5tYXAub24oJ3RvdWNoY2FuY2VsJywgdG91Y2hjYW5jZWwpO1xuXG4gICAgICAgIGdlb2Zsby5tYXAub24oJ2NvbnRleHRtZW51JywgY29udGV4dE1lbnUpO1xuICAgICAgICBnZW9mbG8ubWFwLm9uKCdzb3VyY2VkYXRhJywgc291cmNlRGF0YSk7XG5cbiAgICAgICAgZXZlbnRzLmZvckVhY2goZnVuY3Rpb24oZXZlbnQpIHsgZ2VvZmxvLm1hcC5vbihnZW9mbG8uaWQgKyAnOicgKyBldmVudCwgZmlyZUV2ZW50KTsgfSlcblxuICAgICAgICBnZW9mbG8uY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBrZXlwcmVzcyk7XG4gICAgICAgIGdlb2Zsby5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgbW91c2VvdmVyKTtcbiAgICAgICAgZ2VvZmxvLmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgbW91c2VsZWF2ZSk7XG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJnYW1lcGFkY29ubmVjdGVkXCIsIGdhbWVwYWRjb25uZWN0ZWQpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImdhbWVwYWRkaXNjb25uZWN0ZWRcIiwgZ2FtZXBhZGRpc2Nvbm5lY3RlZCk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiZGV2aWNlb3JpZW50YXRpb25cIiwgaGFuZGxlT3JpZW50YXRpb24sIHRydWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzICgpIHtcbiAgICAgICAgZ2VvZmxvLm1hcC5vZmYoXCJtb3Zlc3RhcnRcIiwgbWFwTW92ZVN0YXJ0KTtcbiAgICAgICAgZ2VvZmxvLm1hcC5vZmYoXCJtb3ZlXCIsIG1hcE1vdmluZyk7XG4gICAgICAgIGdlb2Zsby5tYXAub2ZmKFwibW92ZWVuZFwiLCBtYXBNb3ZlRW5kKTtcbiAgICAgICAgZ2VvZmxvLm1hcC5vZmYoXCJtb3VzZW1vdmVcIiwgbW91c2VNb3ZlKTtcblxuICAgICAgICBnZW9mbG8ubWFwLm9mZigncHJlY2xpY2snLCBtb3VzZUNsaWNrKTtcbiAgICAgICAgZ2VvZmxvLm1hcC5vZmYoJ2NsaWNrJywgbW91c2VDbGljayk7XG4gICAgICAgIGdlb2Zsby5tYXAub2ZmKCd0YXAnLCBtb3VzZUNsaWNrKTtcblxuICAgICAgICBnZW9mbG8ubWFwLm9mZignZHJhZ3N0YXJ0JywgZHJhZ1N0YXJ0KTtcbiAgICAgICAgZ2VvZmxvLm1hcC5vZmYoJ2RyYWcnLCBtb3VzZURyYWcpO1xuICAgICAgICBnZW9mbG8ubWFwLm9mZignbW91c2Vkb3duJywgbW91c2VEb3duKTtcbiAgICAgICAgZ2VvZmxvLm1hcC5vZmYoJ21vdXNldXAnLCBtb3VzZVVwKTtcblxuICAgICAgICBnZW9mbG8ubWFwLm9mZigncm90YXRlc3RhcnQnLCByb3RhdGVQaXRjaCk7XG4gICAgICAgIGdlb2Zsby5tYXAub2ZmKCdwaXRjaHN0YXJ0Jywgcm90YXRlUGl0Y2gpO1xuXG4gICAgICAgIGdlb2Zsby5tYXAub2ZmKCd0b3VjaHN0YXJ0JywgdG91Y2hzdGFydCk7XG4gICAgICAgIGdlb2Zsby5tYXAub2ZmKCd0b3VjaGVuZCcsIHRvdWNoZW5kKTtcbiAgICAgICAgZ2VvZmxvLm1hcC5vZmYoJ3RvdWNobW92ZScsIHRvdWNobW92ZSk7XG4gICAgICAgIGdlb2Zsby5tYXAub2ZmKCd0b3VjaGNhbmNlbCcsIHRvdWNoY2FuY2VsKTtcbiAgICAgICAgXG4gICAgICAgIGdlb2Zsby5tYXAub2ZmKCdjb250ZXh0bWVudScsIGNvbnRleHRNZW51KTtcbiAgICAgICAgZ2VvZmxvLm1hcC5vZmYoJ3NvdXJjZWRhdGEnLCBzb3VyY2VEYXRhKTtcblxuICAgICAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbihldmVudCkgeyBnZW9mbG8ubWFwLm9mZihnZW9mbG8uaWQgKyAnOicgKyBldmVudCwgZmlyZUV2ZW50KTsgfSlcblxuICAgICAgICBnZW9mbG8uY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBrZXlwcmVzcyk7XG4gICAgICAgIGdlb2Zsby5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgbW91c2VvdmVyKTtcbiAgICAgICAgZ2VvZmxvLmNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgbW91c2VsZWF2ZSk7XG5cbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJnYW1lcGFkY29ubmVjdGVkXCIsIGdhbWVwYWRjb25uZWN0ZWQpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImdhbWVwYWRkaXNjb25uZWN0ZWRcIiwgZ2FtZXBhZGRpc2Nvbm5lY3RlZCk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiZGV2aWNlb3JpZW50YXRpb25cIiwgaGFuZGxlT3JpZW50YXRpb24sIHRydWUpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXJzLFxuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyc1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRXZlbnRzOyIsIi8qKlxuICogQG1peGluXG4gKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsb1xuICogQG5hbWUgRXhwbG9yaW5nXG4gKiBAZGVzY3JpcHRpb24gVGhpcyBtaXhpbiBwcm92aWRlcyB0aGUgZXhwbG9yaW5nIGZ1bmN0aW9uYWxpdHkgZm9yIHRoZSBHZW9GbG8gYXBwbGljYXRpb24uIEl0IGFsbG93cyB1c2VycyB0byBleHBsb3JlIGZlYXR1cmVzIG9uIHRoZSBtYXAgYnkgY3JlYXRpbmcgYSBidWZmZXIgYXJvdW5kIHRoZSBmZWF0dXJlIGFuZCBzbmFwcGluZyB0byBuZWFyYnkgZmVhdHVyZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gbW9kZSAtIFRoZSBtb2RlIG9iamVjdCBjb250YWluaW5nIHRoZSB0eXBlIG9mIG1vZGUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgRXhwbG9yaW5nIG9iamVjdC5cbiAqL1xuY29uc3QgRXhwbG9yaW5nID0gZnVuY3Rpb24gKG1vZGUpIHtcbiAgICBjb25zdCBnZW9mbG8gPSB0aGlzLmdlb2ZsbztcbiAgICB0aGlzLnR5cGUgPSBtb2RlLnR5cGU7XG5cblx0LyoqXG4gICAgICogQWN0aXZhdGVzIHRoZSBleHBsb3JpbmcgZnVuY3Rpb25hbGl0eSBieSBlbmFibGluZyB0aGUgJ2V4cGxvcmluZycgb3B0aW9uLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBuYW1lIGFjdGl2YXRlXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uRXhwbG9yaW5nXG4gICAgICogQGRlc2NyaXB0aW9uIEFjdGl2YXRlcyBieSBzZXR0aW5nIHRoZSAnZW5hYmxlZCcgcHJvcGVydHkgdG8gdHJ1ZSBhbmQgZW5hYmxpbmcgdGhlICdleHBsb3JpbmcnIG9wdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgKi9cbiAgICB0aGlzLmFjdGl2YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICBnZW9mbG8ub3B0aW9uc1snZXhwbG9yaW5nJ10uZW5hYmxlID0gdHJ1ZTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkV4cGxvcmluZ1xuXHQgKiBAbmFtZSBkZWFjdGl2YXRlXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHNldHMgdGhlICdlbmFibGVkJyBhbmQgJ2N1cnJlbnRNYXRjaCcgcHJvcGVydGllcyB0byBmYWxzZSwgYW5kIGRpc2FibGVzIHRoZSAnZXhwbG9yaW5nJyBvcHRpb24gaW4gdGhlIGNvbnRleHQuXG5cdCAqL1xuICAgIHRoaXMuZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY3VycmVudE1hdGNoID0gZmFsc2U7XG4gICAgICAgIGdlb2Zsby5vcHRpb25zWydleHBsb3JpbmcnXS5lbmFibGUgPSBmYWxzZTtcbiAgICB9XG5cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uRXhwbG9yaW5nXG5cdCAqIEBuYW1lIHNldEZlYXR1cmVzXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHNldHMgZmVhdHVyZXMgb24gdGhlIG1hcCBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgY29vcmRpbmF0ZXMgYW5kIG9wdGlvbnMuIEl0IGNhbGN1bGF0ZXMgdGhlIGJ1ZmZlciBiYXNlZCBvbiB0aGUgbWFwIHpvb20gbGV2ZWwgYW5kIHJldHJpZXZlcyBmZWF0dXJlcyB3aXRoaW4gdGhlIGJ1ZmZlciBhcmVhLiBJZiByb3V0aW5nIGlzIGVuYWJsZWQsIGl0IGNhbGN1bGF0ZXMgdGhlIHJvdXRlIGJldHdlZW4gdHdvIHBvaW50cy5cblx0ICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBjb29yZHMgLSBUaGUgY29vcmRpbmF0ZXMgdG8gc2V0IGZlYXR1cmVzIGFyb3VuZC5cblx0ICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSAtIEFkZGl0aW9uYWwgb3B0aW9ucyBmb3Igc2V0dGluZyBmZWF0dXJlcy5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgZmFsc2UgaWYgdGhlIGZ1bmN0aW9uIGlzIG5vdCBleGVjdXRlZCBzdWNjZXNzZnVsbHkuXG5cdCAqL1xuICAgIHRoaXMuc2V0RmVhdHVyZXMgPSBmdW5jdGlvbiAoY29vcmRzLCBvcHRpb25zPXt9KSB7XG4gICAgICAgIGlmIChnZW9mbG8ubWFwTW92aW5nIHx8ICF0aGlzLmVuYWJsZWQgfHwgZ2VvZmxvLmN1cnJlbnRNb2RlLmlkICE9PSAnZHJhdycpIHJldHVybiBmYWxzZTtcbiAgICAgICAgXG4gICAgICAgIGlmICghZ2VvZmxvLlJvdXRpbmcuZW5hYmxlZCkge1xuICAgICAgICAgICAgaWYgKGdlb2Zsby5ob3RGZWF0dXJlKSBnZW9mbG8uaG90RmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcy5wb3AoKTtcbiAgICAgICAgICAgIHZhciBmcm9tUG9pbnQgPSBnZW9mbG8uY3VycmVudE1vZGUuZmlyc3RDbGljayB8fCAhZ2VvZmxvLmhvdEZlYXR1cmUgPyBnZW9mbG8uZmlyc3RDbGljay5jb29yZHMgOiBnZW9mbG8uaG90RmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlc1tnZW9mbG8uaG90RmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIHZhciBjb29yZHMgPSBbZnJvbVBvaW50LCBjb29yZHNdO1xuICAgICAgICAgICAgaWYgKGdlb2Zsby5VdGlsaXRpZXMuaXNQb2ludEVxdWFsKGNvb3Jkc1swXSwgY29vcmRzWzFdKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Um91dGUoY29vcmRzLCBvcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnZW9mbG8ubWFwLmdldFpvb20oKSA8IGdlb2Zsby5vcHRpb25zLmV4cGxvcmluZy5taW5ab29tKSByZXR1cm4gYWxlcnQoYFpvb20gbXVzdCBiZSBsb3dlciB0aGFuICR7Z2VvZmxvLm9wdGlvbnMuZXhwbG9yaW5nLm1pblpvb219YCk7XG5cbiAgICAgICAgdmFyIGJ1ZmZlciA9IG9wdGlvbnMuYnVmZmVyIHx8ICgoZ2VvZmxvLm9wdGlvbnMuZXhwbG9yaW5nLmJ1ZmZlciAqIE1hdGgucG93KDIsIE1hdGgubWF4KDEsIDE5IC0gZ2VvZmxvLm1hcC5nZXRab29tKCkpKSkgLyAxMDApO1xuICAgICAgICB2YXIgcG9seWdvbiA9IHR1cmYuYmJveFBvbHlnb24oWyBnZW9mbG8ubWFwLmdldEJvdW5kcygpLmdldFdlc3QoKSwgZ2VvZmxvLm1hcC5nZXRCb3VuZHMoKS5nZXRTb3V0aCgpLCBnZW9mbG8ubWFwLmdldEJvdW5kcygpLmdldEVhc3QoKSwgZ2VvZmxvLm1hcC5nZXRCb3VuZHMoKS5nZXROb3J0aCgpIF0pO1xuXG4gICAgICAgIGlmIChjb29yZHMpIHBvbHlnb24gPSB0dXJmLnBvbHlnb24odHVyZi5idWZmZXIodHVyZi5wb2ludChjb29yZHMpLCBidWZmZXIpLmdlb21ldHJ5LmNvb3JkaW5hdGVzKTtcblxuICAgICAgICBnZW9mbG8ubWFwLmdldFNvdXJjZShnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlc1snU05BUCddKS5zZXREYXRhKHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW10pKTtcbiAgICAgICAgZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXNbJ1JPVVRFJ10pLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXSkpO1xuICAgICAgICBnZW9mbG8ubWFwLmdldFNvdXJjZShnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlc1snVkVSVEVYJ10pLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbcG9seWdvbl0pKTtcblxuICAgICAgICB0aGlzLmdldEZlYXR1cmVzKHR1cmYuYmJveChwb2x5Z29uKSkudGhlbihmZWF0dXJlcyA9PiB7IHNldEZlYXR1cmVzKGZlYXR1cmVzLCBvcHRpb25zKTsgfSk7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5FeHBsb3Jpbmdcblx0ICogQG5hbWUgc2V0RmVhdHVyZVxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBjcmVhdGVzIGEgbGluZSBmZWF0dXJlIHVzaW5nIHRoZSBnaXZlbiBjb29yZGluYXRlcyBhbmQgdXBkYXRlcyB0aGUgY3VycmVudCBtYXRjaCBiYXNlZCBvbiB0aGUgb3B0aW9ucy4gSXQgYWxzbyB0cmlnZ2VycyBhbiBldmVudCBhbmQgdXBkYXRlcyB0aGUgc291cmNlIGRhdGEgb24gdGhlIG1hcC5cblx0ICogQHBhcmFtIHtBcnJheX0gY29vcmRzIC0gVGhlIGNvb3JkaW5hdGVzIHRvIGNyZWF0ZSB0aGUgbGluZSBmZWF0dXJlLiBEZWZhdWx0IGlzIGFuIGVtcHR5IGFycmF5LlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIEFkZGl0aW9uYWwgb3B0aW9ucyBmb3Igc2V0dGluZyB0aGUgZmVhdHVyZSwgc3VjaCBhcyB0aGUgc3RhcnRpbmcgcG9pbnQuIERlZmF1bHQgaXMgYW4gZW1wdHkgb2JqZWN0LlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgdXBkYXRlZCBmZWF0dXJlIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBjb29yZGluYXRlcyBhbmQgb3B0aW9ucy5cblx0ICovXG4gICAgdGhpcy5zZXRGZWF0dXJlID0gZnVuY3Rpb24gKGNvb3Jkcz1bXSwgb3B0aW9ucz17fSkge1xuICAgICAgICBpZiAoIWdlb2Zsby5ob3RGZWF0dXJlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICghY29vcmRzLmxlbmd0aCkgcmV0dXJuIGdlb2Zsby5ob3RGZWF0dXJlO1xuXG4gICAgICAgIHZhciBmZWF0dXJlID0gdHVyZi5saW5lU3RyaW5nKGNvb3Jkcyk7XG4gICAgICAgIGZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF0gPSBvcHRpb25zLnN0YXJ0IHx8IGZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF07XG5cbiAgICAgICAgaWYgKHRoaXMuY3VycmVudE1hdGNoKSBmZWF0dXJlID0gdHVyZi5saW5lU3RyaW5nKGdlb2Zsby5VdGlsaXRpZXMuY29tYmluZVNhbWVUeXBlRmVhdHVyZXMoW3RoaXMuY3VycmVudE1hdGNoLCBmZWF0dXJlXSkpO1xuICAgICAgICB0aGlzLmN1cnJlbnRNYXRjaCA9IGZlYXR1cmU7XG5cbiAgICAgICAgZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuU05BUCkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtdKSk7XG4gICAgICAgIGdlb2Zsby5maXJlKCdleHBsb3JpbmcubWF0Y2gnLCB7IHJvdXRlOiB0aGlzLmN1cnJlbnRNYXRjaCB9KTtcbiAgICAgICAgcmV0dXJuIG1vZGUudXBkYXRlSG90U291cmNlKHRoaXMuY3VycmVudE1hdGNoKTtcbiAgICB9XG5cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uRXhwbG9yaW5nXG5cdCAqIEBuYW1lIGdldEZlYXR1cmVzXG5cdCAqIEBkZXNjcmlwdGlvbiBSZXRyaWV2ZXMgZmVhdHVyZXMgYmFzZWQgb24gdGhlIHByb3ZpZGVkIGJvdW5kcyB1c2luZyBPdmVycGFzcyBBUEkuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGJvdW5kcyAtIEFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIGJvdW5kaW5nIGJveCBjb29yZGluYXRlcyBbbWluTG9uLCBtaW5MYXQsIG1heExvbiwgbWF4TGF0XS5cblx0ICogQHJldHVybnMge1Byb21pc2U8QXJyYXk+fSBBbiBhcnJheSBvZiBHZW9KU09OIGZlYXR1cmVzIHdpdGhpbiB0aGUgc3BlY2lmaWVkIGJvdW5kcy5cblx0ICovXG4gICAgdGhpcy5nZXRGZWF0dXJlcyA9IGFzeW5jIGZ1bmN0aW9uIChib3VuZHMpIHtcbiAgICAgICAgaWYgKCFib3VuZHMgfHwgIWJvdW5kcy5sZW5ndGggfHwgYm91bmRzLmxlbmd0aCAhPSA0KSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgdmFyIHRhZyA9IGB3YXlbXCJoaWdod2F5XCJdKCR7Ym91bmRzWzFdfSAsICR7Ym91bmRzWzBdfSAsICR7Ym91bmRzWzNdfSAsICR7Ym91bmRzWzJdfSk7YDtcblxuICAgICAgICBpZiAoZ2VvZmxvLm1hcC5nZXRab29tKCkgPCAxMikge1xuICAgICAgICAgICAgdGFnID0gYHdheVtcImhpZ2h3YXlcIj1cIm1vdG9yd2F5XCJdKCR7Ym91bmRzWzFdfSAsICR7Ym91bmRzWzBdfSAsICR7Ym91bmRzWzNdfSAsICR7Ym91bmRzWzJdfSk7YFxuICAgICAgICAgICAgLyogd2F5W1wiaGlnaHdheVwiPVwicHJpbWFyeVwiXSgke2JvdW5kc1sxXX0gLCAke2JvdW5kc1swXX0gLCAke2JvdW5kc1szXX0gLCAke2JvdW5kc1syXX0pO1xuICAgICAgICAgICAgd2F5W1wiaGlnaHdheVwiPVwic2Vjb25kYXJ5XCJdKCR7Ym91bmRzWzFdfSAsICR7Ym91bmRzWzBdfSAsICR7Ym91bmRzWzNdfSAsICR7Ym91bmRzWzJdfSk7YCAqL1xuICAgICAgICB9XG5cbiAgICAgICAgZ2VvZmxvLm92ZXJwYXNzRG93bmxvYWRpbmcgPSB0cnVlO1xuXG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gJ1tvdXQ6anNvbl1bdGltZW91dDoyNV07KCcgKyB0YWcgKyAnKTtvdXQgYm9keTs+O291dCBza2VsIHF0Oyc7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBmZXRjaChcIi8vb3ZlcnBhc3MtYXBpLmRlL2FwaS9pbnRlcnByZXRlcj9kYXRhPVwiICsgcXVlcnksIHsgbWV0aG9kOiAnR0VUJyB9ICk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZGF0YS5qc29uKCk7XG4gICAgICAgIGNvbnN0IGdlb2pzb24gPSBjb252ZXJ0RnJvbU92ZXJwYXNzVG9HZW9qc29uKHJlc3BvbnNlKTtcbiAgICAgICAgcmV0dXJuIGdlb2pzb24gJiYgZ2VvanNvbi5mZWF0dXJlcyA/IGdlb2pzb24uZmVhdHVyZXMgOiBbXTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkV4cGxvcmluZ1xuXHQgKiBAbmFtZSBnZXRNYXRjaFxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiB0YWtlcyBhbiBhcnJheSBvZiBjb29yZGluYXRlcyBhbmQgb3B0aW9uYWwgb3B0aW9ucyB0byBmZXRjaCBhIG1hdGNoZWQgcm91dGUgZnJvbSB0aGUgT1NSTSBBUEkuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGNvb3JkcyAtIEFuIGFycmF5IG9mIGNvb3JkaW5hdGVzIHRvIG1hdGNoIHRoZSByb3V0ZSBhZ2FpbnN0LlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE9wdGlvbmFsIHBhcmFtZXRlcnMgZm9yIGN1c3RvbWl6YXRpb24uXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLmZlYXR1cmUgLSBPcHRpb25hbCBmZWF0dXJlIHRvIG1hdGNoIGFnYWluc3QuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfEZ1bmN0aW9ufSBvcHRpb25zLnJhZGl1cyAtIE9wdGlvbmFsIHJhZGl1cyBmb3IgbWF0Y2hpbmcgb3IgYSBmdW5jdGlvbiB0byBjYWxjdWxhdGUgaXQuXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLnByb2ZpbGUgLSBPcHRpb25hbCBwcm9maWxlIGZvciByb3V0aW5nIChkZWZhdWx0OiAnZHJpdmluZycpLlxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMuc2V0IC0gT3B0aW9uYWwgZmxhZyB0byBzZXQgdGhlIGZlYXR1cmUgaWYgbWF0Y2hpbmcgaXMgc3VjY2Vzc2Z1bC5cblx0ICogQHJldHVybnMge1Byb21pc2U8QXJyYXl8Qm9vbGVhbj59IFRoZSBtYXRjaGVkIHJvdXRlIHJlc3BvbnNlIG9iamVjdCBvciBmYWxzZSBpZiBubyBjb29yZGluYXRlcyBhcmUgcHJvdmlkZWQgb3IgbWF0Y2hpbmcgZmFpbHMuXG5cdCAqL1xuICAgIHRoaXMuZ2V0TWF0Y2ggPSBhc3luYyBmdW5jdGlvbiAoY29vcmRzPVtdLCBvcHRpb25zPXt9KSB7XG4gICAgICAgIGlmICghY29vcmRzLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIHZhciB0b2xlcmFuY2UgPSBnZW9mbG8ub3B0aW9ucy5leHBsb3JpbmcudG9sZXJhbmNlO1xuICAgICAgICB2YXIgZmVhdHVyZSA9IG9wdGlvbnMuZmVhdHVyZSB8fCB0dXJmLmNsZWFuQ29vcmRzKHR1cmYubGluZVN0cmluZyhjb29yZHMpKTtcbiAgICAgICAgZmVhdHVyZSA9IHR1cmYuc2ltcGxpZnkoZmVhdHVyZSwgeyBtdXRhdGU6IHRydWUsIHRvbGVyYW5jZTogdHlwZW9mIHRvbGVyYW5jZSA9PT0gJ2Z1bmN0aW9uJyA/IHRvbGVyYW5jZShnZW9mbG8ubWFwKSA6IHRvbGVyYW5jZSwgaGlnaFF1YWxpdHk6IHRydWUgfSk7XG5cbiAgICAgICAgdmFyIGNvb3JkaW5hdGVzID0gZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcztcbiAgICAgICAgaWYgKGNvb3JkaW5hdGVzLmxlbmd0aCA8IDIpIHJldHVybiBmYWxzZTtcblxuICAgICAgICBnZW9mbG8ub3ZlcnBhc3NEb3dubG9hZGluZyA9IHRydWU7XG5cbiAgICAgICAgb3B0aW9ucy5yYWRpdXMgPSBvcHRpb25zLnJhZGl1cyB8fCA1MDtcbiAgICAgICAgb3B0aW9ucy5wcm9maWxlID0gb3B0aW9ucy5wcm9maWxlIHx8ICdkcml2aW5nJztcbiAgICAgICAgY29vcmRzID0gY29vcmRpbmF0ZXMuam9pbignOycpO1xuXG4gICAgICAgIGNvbnN0IHJhZGl1c2VzID0gY29vcmRpbmF0ZXMubWFwKCgpID0+IG9wdGlvbnMucmFkaXVzKS5qb2luKCc7Jyk7XG5cbiAgICAgICAgY29uc3QgcXVlcnkgPSAnaHR0cHM6Ly9yb3V0ZXIucHJvamVjdC1vc3JtLm9yZy9tYXRjaC92MS8nICsgb3B0aW9ucy5wcm9maWxlICsgJy8nICsgY29vcmRzICtcbiAgICAgICAgICAgICc/b3ZlcnZpZXc9c2ltcGxpZmllZCcgK1xuICAgICAgICAgICAgJyZyYWRpdXNlcz0nICsgcmFkaXVzZXMgK1xuICAgICAgICAgICAgJyZnZW5lcmF0ZV9oaW50cz1mYWxzZScgK1xuICAgICAgICAgICAgJyZza2lwX3dheXBvaW50cz10cnVlJyArXG4gICAgICAgICAgICAnJmdhcHM9aWdub3JlJyArXG4gICAgICAgICAgICAnJmFubm90YXRpb25zPW5vZGVzJyArXG4gICAgICAgICAgICAnJnRpZHk9dHJ1ZScgK1xuICAgICAgICAgICAgJyZnZW9tZXRyaWVzPWdlb2pzb24nO1xuXG4gICAgICAgIGNvbnN0IG1hdGNoID0gYXdhaXQgZmV0Y2gocXVlcnksIHsgbWV0aG9kOiAnR0VUJyB9ICk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgbWF0Y2guanNvbigpO1xuXG4gICAgICAgIGdlb2Zsby5vdmVycGFzc0Rvd25sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChyZXNwb25zZS5jb2RlICE9PSAnT2snKSBhbGVydChgJHtyZXNwb25zZS5jb2RlfSAtICR7cmVzcG9uc2UubWVzc2FnZX0uYCk7XG4gICAgICAgIHJldHVybiAhb3B0aW9ucy5zZXQgPyByZXNwb25zZSA6ICFyZXNwb25zZS5tYXRjaGluZ3MgfHwgIXJlc3BvbnNlLm1hdGNoaW5ncy5sZW5ndGggPyBmZWF0dXJlIDogdGhpcy5zZXRGZWF0dXJlKHJlc3BvbnNlLm1hdGNoaW5nc1swXS5nZW9tZXRyeS5jb29yZGluYXRlcywgb3B0aW9ucyk7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5FeHBsb3Jpbmdcblx0ICogQG5hbWUgZ2V0Um91dGVcblx0ICogQGRlc2NyaXB0aW9uIFJldHJpZXZlcyBhIHJvdXRlIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBjb29yZGluYXRlcyB1c2luZyB0aGUgT1NSTSByb3V0aW5nIHNlcnZpY2UuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGNvb3JkcyAtIEFycmF5IG9mIGNvb3JkaW5hdGVzIHJlcHJlc2VudGluZyB0aGUgcm91dGUuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gQWRkaXRpb25hbCBvcHRpb25zIGZvciB0aGUgcm91dGUgY2FsY3VsYXRpb24uXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLmZlYXR1cmUgLSBGZWF0dXJlIG9iamVjdCB0byB1c2UgZm9yIHRoZSByb3V0ZSBjYWxjdWxhdGlvbi5cblx0ICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMucHJvZmlsZSAtIFByb2ZpbGUgdHlwZSBmb3IgdGhlIHJvdXRlIGNhbGN1bGF0aW9uIChkZWZhdWx0OiAnZHJpdmluZycpLlxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMuc2V0IC0gRmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIHRvIHNldCB0aGUgcm91dGUgYXMgYSBmZWF0dXJlLlxuXHQgKiBAcmV0dXJucyB7UHJvbWlzZTxBcnJheXxCb29sZWFuPn0gVGhlIHJvdXRlIHJlc3BvbnNlIG9iamVjdCBvciBmYWxzZSBpZiBubyBjb29yZGluYXRlcyBhcmUgcHJvdmlkZWQgb3IgdGhlIHJvdXRlIGNhbGN1bGF0aW9uIGZhaWxzLlxuXHQgKi9cbiAgICB0aGlzLmdldFJvdXRlID0gYXN5bmMgZnVuY3Rpb24gKGNvb3Jkcz1bXSwgb3B0aW9ucz17fSkge1xuICAgICAgICB2YXIgZmVhdHVyZSA9IG9wdGlvbnMuZmVhdHVyZSA/IG9wdGlvbnMuZmVhdHVyZSA6ICFjb29yZHMubGVuZ3RoID8gZmFsc2UgOiB0dXJmLmNsZWFuQ29vcmRzKHR1cmYubGluZVN0cmluZyhjb29yZHMpKTtcbiAgICAgICAgaWYgKCFmZWF0dXJlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIFxuICAgICAgICB2YXIgY29vcmRpbmF0ZXMgPSBmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICAgICAgICBpZiAoY29vcmRpbmF0ZXMubGVuZ3RoIDwgMikgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGdlb2Zsby5vdmVycGFzc0Rvd25sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgb3B0aW9ucy5wcm9maWxlID0gb3B0aW9ucy5wcm9maWxlIHx8ICdkcml2aW5nJztcbiAgICAgICAgY29vcmRzID0gY29vcmRpbmF0ZXMuam9pbignOycpO1xuXG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gJ2h0dHBzOi8vcm91dGVyLnByb2plY3Qtb3NybS5vcmcvcm91dGUvdjEvJyArIG9wdGlvbnMucHJvZmlsZSArICcvJyArIGNvb3JkcyArXG4gICAgICAgICAgICAnP292ZXJ2aWV3PXNpbXBsaWZpZWQnICtcbiAgICAgICAgICAgICcmY29udGludWVfc3RyYWlnaHQ9dHJ1ZScgK1xuICAgICAgICAgICAgJyZhbm5vdGF0aW9ucz1ub2RlcycgK1xuICAgICAgICAgICAgJyZnZW9tZXRyaWVzPWdlb2pzb24nO1xuXG4gICAgICAgIGNvbnN0IG1hdGNoID0gYXdhaXQgZmV0Y2gocXVlcnksIHsgbWV0aG9kOiAnR0VUJyB9ICk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgbWF0Y2guanNvbigpO1xuXG4gICAgICAgIGdlb2Zsby5vdmVycGFzc0Rvd25sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChyZXNwb25zZS5jb2RlICE9PSAnT2snKSBhbGVydChgJHtyZXNwb25zZS5jb2RlfSAtICR7cmVzcG9uc2UubWVzc2FnZX0uYCk7XG4gICAgICAgIHJldHVybiAhb3B0aW9ucy5zZXQgPyByZXNwb25zZSA6ICFyZXNwb25zZS5yb3V0ZXMgfHwgIXJlc3BvbnNlLnJvdXRlcy5sZW5ndGggPyBmZWF0dXJlIDogdGhpcy5zZXRGZWF0dXJlKHJlc3BvbnNlLnJvdXRlc1swXS5nZW9tZXRyeS5jb29yZGluYXRlcywgb3B0aW9ucyk7XG4gICAgfVxuICAgIFxuXG5cbiAgICBpZiAoZ2VvZmxvLm9wdGlvbnNbJ2V4cGxvcmluZyddLmVuYWJsZSkgdGhpcy5hY3RpdmF0ZSgpO1xuXG5cblxuICAgIGZ1bmN0aW9uIGNvbnZlcnRGcm9tT3ZlcnBhc3NUb0dlb2pzb24ob3ApIHtcbiAgICAgICAgY29uc3QgZWxlbWVudHNCeUlkID0ge307XG5cbiAgICAgICAgb3AuZWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gYCR7ZWxlbWVudC50eXBlfS0ke2VsZW1lbnQuaWR9YDtcbiAgICAgICAgICAgIGVsZW1lbnRzQnlJZFtrZXldID0gZWxlbWVudDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qgd2F5VG9Qb2ludHMgPSBmdW5jdGlvbiAod2F5KSB7XG4gICAgICAgICAgICBjb25zdCBsaW5lID0gW107XG4gICAgICAgICAgICB3YXkubm9kZXMuZm9yRWFjaCgobm9kZUlkKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gYG5vZGUtJHtub2RlSWR9YDtcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlRWxlbWVudCA9IGVsZW1lbnRzQnlJZFtrZXldO1xuICAgICAgICAgICAgICAgIGlmIChub2RlRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBsaW5lLnB1c2goW25vZGVFbGVtZW50Lmxvbiwgbm9kZUVsZW1lbnQubGF0XSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIk5vZGUgXCIsIGtleSwgXCIgbWlzc2luZ1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBsaW5lO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGxpbmVTdHJpbmdzID0gW107XG5cbiAgICAgICAgb3AuZWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQudHlwZSA9PT0gXCJ3YXlcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSB3YXlUb1BvaW50cyhlbGVtZW50KTtcbiAgICAgICAgICAgICAgICBpZiAobGluZS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVTdHJpbmdzLnB1c2godHVyZi5saW5lU3RyaW5nKGxpbmUsIGVsZW1lbnQudGFncykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC50eXBlID09PSBcInJlbGF0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50Lm1lbWJlcnMuZm9yRWFjaCgobWVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lbWJlclR5cGUgPSBtZW1iZXIudHlwZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lbWJlclR5cGUgPT09IFwid2F5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGB3YXktJHttZW1iZXIucmVmfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3YXkgPSBlbGVtZW50c0J5SWRba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSB3YXlUb1BvaW50cyh3YXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmUubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVTdHJpbmdzLnB1c2godHVyZi5saW5lU3RyaW5nKGxpbmUsIGVsZW1lbnQudGFncykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBnZW9mbG8udHVyZi5mZWF0dXJlQ29sbGVjdGlvbihsaW5lU3RyaW5ncyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0RmVhdHVyZXMoZmVhdHVyZXM9W10pIHtcbiAgICAgICAgZ2VvZmxvLm92ZXJwYXNzRG93bmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKGdlb2Zsby5tYXBNb3ZpbmcgfHwgIWdlb2Zsby5FeHBsb3JpbmcuZW5hYmxlZCB8fCBnZW9mbG8uY3VycmVudE1vZGUuaWQgIT09ICdkcmF3JykgcmV0dXJuIGdlb2Zsby51cGRhdGVNZXNoRGF0YShbXSwgdHJ1ZSk7XG4gICAgICAgIGdlb2Zsby5tYXAuZ2V0U291cmNlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLlZFUlRFWCkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtdKSk7XG4gICAgICAgIGdlb2Zsby5TbmFwcGluZy5hZGRGZWF0dXJlKGdlb2Zsby5zbmFwRmVhdHVyZSk7XG4gICAgICAgIGdlb2Zsby5zZXRNZXNoRmVhdHVyZXMoZmVhdHVyZXMpO1xuICAgICAgICBnZW9mbG8uY3VycmVudE1vZGUudXBkYXRlSG90U291cmNlKCk7XG4gICAgICAgIGdlb2Zsby5maXJlKCdvdmVycGFzcy5hZGQnLCB7IGZlYXR1cmVzOiBmZWF0dXJlcyB9KTtcbiAgICAgICAgaWYgKCFnZW9mbG8uY3VycmVudE1vZGUuZmlyc3RDbGljaykgcmV0dXJuIGZlYXR1cmVzO1xuICAgICAgICB2YXIgcG9pbnRzID0gdHVyZi5leHBsb2RlKHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oZmVhdHVyZXMpKVxuICAgICAgICB2YXIgY2xvc2VzdFBvaW50ID0gdHVyZi5uZWFyZXN0UG9pbnQodHVyZi5wb2ludChnZW9mbG8uY3VycmVudE1vZGUuZmlyc3RDbGljay5jb29yZHMpLCBwb2ludHMpO1xuICAgICAgICBnZW9mbG8ubGFzdENsaWNrID0geyBjb29yZHM6IGNsb3Nlc3RQb2ludC5nZW9tZXRyeS5jb29yZGluYXRlcyB9O1xuICAgICAgICByZXR1cm4gZmVhdHVyZXM7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgRXhwbG9yaW5nOyIsIi8qKlxuICogQG1peGluXG4gKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsb1xuICogQG5hbWUgRmVhdHVyZXNcbiAqIEBkZXNjcmlwdGlvbiBUaGlzIG1vZHVsZSBwcm92aWRlcyB0aGUgZmVhdHVyZXMgZnVuY3Rpb25hbGl0eSBmb3IgdGhlIEdlb2ZsbyBhcHBsaWNhdGlvbi4gSXQgYWxsb3dzIHVzZXJzIHRvIGFkZCwgcmVtb3ZlLCB1cGRhdGUsIGFuZCByZXRyaWV2ZSBmZWF0dXJlcyBmcm9tIHRoZSBtYXAuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBGZWF0dXJlcyBvYmplY3QuXG4gKiBAdGhyb3dzIHtFcnJvcn0gVGhyb3dzIGFuIGVycm9yIGlmIG5vIG1hcCBvYmplY3QgaXMgcHJvdmlkZWQuXG4gKi9cbmNvbnN0IEZlYXR1cmVzID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGdlb2ZsbyA9IHRoaXMuZ2VvZmxvO1xuICAgIGlmICghZ2VvZmxvLm1hcCkgeyB0aHJvdyBuZXcgRXJyb3IoJ05vIG1hcCBvYmplY3QgcHJvdmlkZWQhJykgfVxuXG4gICAgY29uc3QgY29sZEZlYXR1cmVzID0gW107XG4gICAgdGhpcy5vZmZzZXRMaW5lcyA9IGZhbHNlO1xuXG4gICAgXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5GZWF0dXJlc1xuXHQgKiBAbmFtZSBnZXRDb2xkRmVhdHVyZXNcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhbiBhcnJheSBvZiBjb2xkIGZlYXR1cmVzLlxuXHQgKiBAcmV0dXJuIHtBcnJheX0gQW4gYXJyYXkgb2YgY29sZCBmZWF0dXJlcy5cblx0ICovXG4gICAgdGhpcy5nZXRDb2xkRmVhdHVyZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjb2xkRmVhdHVyZXM7XG4gICAgfTtcblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uRmVhdHVyZXNcblx0ICogQG5hbWUgZ2V0RmVhdHVyZUJ5SWRcblx0ICogQGRlc2NyaXB0aW9uIFJldHJpZXZlcyBhIGZlYXR1cmUgYnkgaXRzIElEIGZyb20gYSBnaXZlbiBzb3VyY2UuIElmIHRoZSBJRCBpcyBhbiBhcnJheSB3aXRoIG11bHRpcGxlIElEcywgaXQgcmV0cmlldmVzIG11bHRpcGxlIGZlYXR1cmVzLiBJZiB0aGUgSUQgaXMgYW4gb2JqZWN0LCBpdCB0cmllcyB0byBleHRyYWN0IHRoZSBJRCBmcm9tIHRoZSBvYmplY3QncyBwYXJlbnQsIHByb3BlcnRpZXMsIG9yIGlkIGZpZWxkcy5cblx0ICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfEFycmF5fSBpZCAtIFRoZSBJRCBvciBhcnJheSBvZiBJRHMgb2YgdGhlIGZlYXR1cmUocykgdG8gcmV0cmlldmUuXG5cdCAqIEByZXR1cm5zIHtPYmplY3R8QXJyYXl9IFRoZSBmZWF0dXJlIG9yIGFycmF5IG9mIGZlYXR1cmVzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3ZpZGVkIElEKHMpLlxuXHQgKi9cbiAgICB0aGlzLmdldEZlYXR1cmVCeUlkID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGlkKSAmJiBpZC5sZW5ndGggPiAxKSByZXR1cm4gdGhpcy5nZXRGZWF0dXJlc0J5SWQoaWQpO1xuICAgICAgICBpZiAodHlwZW9mIGlkID09PSAnb2JqZWN0JykgaWQgPSBpZC5wYXJlbnQgfHwgaWQucHJvcGVydGllcy5wYXJlbnQgfHwgaWQuaWQgfHwgaWQucHJvcGVydGllcy5pZDtcbiAgICAgICAgcmV0dXJuIGdldEZlYXR1cmVCeUlkKGlkKTtcbiAgICB9O1xuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5GZWF0dXJlc1xuXHQgKiBAbmFtZSBnZXRGZWF0dXJlc0J5SWRcblx0ICogQGRlc2NyaXB0aW9uIFJldHJpZXZlcyBmZWF0dXJlcyBieSB0aGVpciBJRHMuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGlkcyAtIEFuIGFycmF5IG9mIGZlYXR1cmUgSURzIHRvIHJldHJpZXZlLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IC0gQW4gYXJyYXkgb2YgZmVhdHVyZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvdmlkZWQgSURzLlxuXHQgKi9cbiAgICB0aGlzLmdldEZlYXR1cmVzQnlJZCA9IGZ1bmN0aW9uIChpZHMpIHtcbiAgICAgICAgY29uc3QgYWRkZWRJZHMgPSBbXTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgICAgICAgaWRzLmZvckVhY2goKGlkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmZWF0dXJlID0gdGhpcy5nZXRGZWF0dXJlQnlJZChpZCk7XG4gICAgICAgICAgICBpZiAoZmVhdHVyZSAmJiAhYWRkZWRJZHMuaW5jbHVkZXMoaWQpKSBhZGRlZElkcy5wdXNoKGlkKSwgcmVzdWx0LnB1c2goZmVhdHVyZSk7XG4gICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uRmVhdHVyZXNcblx0ICogQG5hbWUgZ2V0VHlwZVxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSB0eXBlIG9mIHRoZSBpbnB1dCBmZWF0dXJlLlxuXHQgKiBAcGFyYW0ge2FueX0gZmVhdHVyZSAtIFRoZSBmZWF0dXJlIHdob3NlIHR5cGUgbmVlZHMgdG8gYmUgZGV0ZXJtaW5lZC5cblx0ICogQHJldHVybnMge3N0cmluZ30gVGhlIHR5cGUgb2YgdGhlIGlucHV0IGZlYXR1cmUuXG5cdCAqL1xuICAgIHRoaXMuZ2V0VHlwZSA9IGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgIHJldHVybiBnZXRUeXBlKGZlYXR1cmUpO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uRmVhdHVyZXMgZ2V0VW5pdFxuXHQgKiBAbmFtZSBnZXRVbml0XG5cdCAqIEBkZXNjcmlwdGlvbiBSZXRyaWV2ZXMgdGhlIHVuaXQgYXNzb2NpYXRlZCB3aXRoIGEgZ2l2ZW4gZmVhdHVyZSB0eXBlIGZyb20gdGhlIGNvbnRleHQgb3B0aW9ucy5cblx0ICogQHBhcmFtIHtPYmplY3R9IGZlYXR1cmUgLSBUaGUgZmVhdHVyZSBvYmplY3QgZm9yIHdoaWNoIHRoZSB1bml0IG5lZWRzIHRvIGJlIHJldHJpZXZlZC5cblx0ICogQHJldHVybnMge3N0cmluZ3xib29sZWFufSBUaGUgdW5pdCBhc3NvY2lhdGVkIHdpdGggdGhlIGZlYXR1cmUgdHlwZSBpZiBmb3VuZCwgb3RoZXJ3aXNlIGZhbHNlLlxuXHQgKi9cbiAgICB0aGlzLmdldFVuaXQgPSBmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICBpZiAoIWZlYXR1cmUpIHJldHVybiBmYWxzZTtcblxuICAgICAgICB2YXIgdHlwZSA9IGZlYXR1cmUucHJvcGVydGllcy50eXBlO1xuICAgICAgICBpZiAoIXR5cGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgICBpZiAoIWdlb2Zsby5vcHRpb25zLnVuaXRzIHx8ICFnZW9mbG8ub3B0aW9ucy51bml0c1t0eXBlXSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIHJldHVybiBnZW9mbG8ub3B0aW9ucy51bml0c1t0eXBlXTtcbiAgICB9O1xuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5GZWF0dXJlc1xuXHQgKiBAbmFtZSBnZXRVbml0c1xuXHQgKiBAcGFyYW0ge09iamVjdH0gZmVhdHVyZSAtIFRoZSBmZWF0dXJlIGZvciB3aGljaCB1bml0cyBuZWVkIHRvIGJlIGNhbGN1bGF0ZWQuXG5cdCAqIEByZXR1cm5zIHtudW1iZXJ9IC0gVGhlIGNhbGN1bGF0ZWQgdW5pdHMgKGxlbmd0aCBvciBhcmVhKSBvZiB0aGUgZmVhdHVyZS5cblx0ICovXG4gICAgdGhpcy5nZXRVbml0cyA9IGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgIHZhciB1bml0ID0gdGhpcy5nZXRVbml0KGZlYXR1cmUpO1xuICAgICAgICBpZiAoIXVuaXQgfHwgIWZlYXR1cmUpIHJldHVybiBmYWxzZTtcblxuICAgICAgICB2YXIgdW5pdHMgPSAxO1xuICAgICAgICB2YXIgdHlwZSA9IGZlYXR1cmUucHJvcGVydGllcy50eXBlO1xuXG4gICAgICAgIGlmICh0eXBlID09PSBcIlBvbHlsaW5lXCIpIHtcbiAgICAgICAgICAgIHVuaXRzID0gdHVyZi5sZW5ndGgoZmVhdHVyZSwgeyB1bml0czogJ21ldGVycycgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1BvbHlnb24nKSB7XG4gICAgICAgICAgICB1bml0cyA9IHR1cmYuYXJlYShmZWF0dXJlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnUmVjdGFuZ2xlJykge1xuICAgICAgICAgICAgdW5pdHMgPSB0dXJmLmFyZWEoZmVhdHVyZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5pdHM7XG4gICAgfTtcblxuXG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkZlYXR1cmVzXG5cdCAqIEBuYW1lIHNldEZlYXR1cmVzU3RhdGVcblx0ICogQGRlc2NyaXB0aW9uIFNldHMgdGhlIHN0YXRlIG9mIG11bHRpcGxlIGZlYXR1cmVzIGluIGEgbWFwLlxuXHQgKiBAcGFyYW0ge0FycmF5fSBmZWF0dXJlcyAtIEFuIGFycmF5IG9mIGZlYXR1cmVzIHRvIHNldCB0aGUgc3RhdGUgZm9yLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IHN0YXRlIC0gVGhlIHN0YXRlIHRvIHNldCBmb3IgdGhlIGZlYXR1cmVzLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IC0gVGhlIHVwZGF0ZWQgYXJyYXkgb2YgZmVhdHVyZXMgd2l0aCB0aGUgbmV3IHN0YXRlLlxuXHQgKi9cbiAgICB0aGlzLnNldEZlYXR1cmVzU3RhdGUgPSBmdW5jdGlvbiAoZmVhdHVyZXM9W10sIHN0YXRlKSB7XG4gICAgICAgIGlmICghc3RhdGUgfHwgIWZlYXR1cmVzLmxlbmd0aCkgcmV0dXJuIFtdO1xuICAgICAgICBcbiAgICAgICAgZmVhdHVyZXMuZm9yRWFjaChmdW5jdGlvbihmZWF0dXJlKSB7XG4gICAgICAgICAgICB2YXIgaWQgPSBmZWF0dXJlLmlkIHx8IGZlYXR1cmUucHJvcGVydGllcy5pZDtcbiAgICAgICAgICAgIGlmIChnZW9mbG8uaG90RmVhdHVyZSAmJiBnZW9mbG8uaG90RmVhdHVyZS5pZCA9PT0gaWQpIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMuc2V0RmVhdHVyZVN0YXRlKGlkLCBzdGF0ZSk7XG4gICAgICAgIH0sIHRoaXMpXG5cbiAgICAgICAgcmV0dXJuIGZlYXR1cmVzO1xuICAgIH07XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkZlYXR1cmVzXG5cdCAqIEBuYW1lIHNldEZlYXR1cmVTdGF0ZVxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBzZXRzIHRoZSBzdGF0ZSBvZiBhIGZlYXR1cmUgYW5kIGl0cyBjaGlsZHJlbiBpbiB0aGUgbWFwIGJ5IHVwZGF0aW5nIHRoZWlyIGZlYXR1cmUgc3RhdGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIFRoZSBJRCBvZiB0aGUgcGFyZW50IGZlYXR1cmUuXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZSAtIFRoZSBzdGF0ZSBvYmplY3QgdG8gc2V0IGZvciB0aGUgZmVhdHVyZXMuXG5cdCAqIEByZXR1cm5zIHthcnJheX0gLSBBbiBhcnJheSBvZiBmZWF0dXJlcyB3aG9zZSBzdGF0ZSB3YXMgdXBkYXRlZC5cblx0ICovXG4gICAgdGhpcy5zZXRGZWF0dXJlU3RhdGUgPSBmdW5jdGlvbiAoaWQsIHN0YXRlKSB7XG4gICAgICAgIGlmICghc3RhdGUgfHwgIWlkKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgdmFyIGZlYXR1cmVzID0gZ2V0RmVhdHVyZXNCeVBhcmVudChpZCk7XG4gICAgICAgIFxuICAgICAgICBmZWF0dXJlcy5mb3JFYWNoKGZ1bmN0aW9uKGZlYXR1cmUpIHtcbiAgICAgICAgICAgIHZhciBpZCA9IGZlYXR1cmUuaWQgfHwgZmVhdHVyZS5wcm9wZXJ0aWVzLmlkO1xuICAgICAgICAgICAgZ2VvZmxvLm1hcC5zZXRGZWF0dXJlU3RhdGUoeyBzb3VyY2U6IGZlYXR1cmUuc291cmNlLCBpZDogaWQgfSwgc3RhdGUpO1xuICAgICAgICB9KVxuXG4gICAgICAgIHJldHVybiBmZWF0dXJlcztcbiAgICB9O1xuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5GZWF0dXJlc1xuXHQgKiBAbmFtZSBzZXRUZXh0XG5cdCAqIEBkZXNjcmlwdGlvbiBTZXRzIHRleHQgZmVhdHVyZXMgb24gdGhlIG1hcCBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgZmVhdHVyZXMuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBmZWF0dXJlcyAtIFRoZSBmZWF0dXJlcyB0byBzZXQgdGV4dCBvbi5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgZmFsc2UgaWYgbm8gZmVhdHVyZXMgYXJlIHByb3ZpZGVkIG9yIGlmIHRoZSBmZWF0dXJlcyBhcnJheSBpcyBlbXB0eS5cblx0ICovXG4gICAgdGhpcy5zZXRUZXh0ID0gZnVuY3Rpb24gKGZlYXR1cmVzPVtdKSB7XG4gICAgICAgIGlmICghZ2VvZmxvLm9wdGlvbnMuc2hvd0ZlYXR1cmVUZXh0KSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgdmFyIHNvdXJjZSA9IGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLkhPVFRFWFQ7XG5cbiAgICAgICAgdGhpcy50ZXh0RmVhdHVyZXMgPSBbXTtcblxuICAgICAgICBpZiAoZmVhdHVyZXMuZmVhdHVyZXMpIGZlYXR1cmVzID0gZmVhdHVyZXMuZmVhdHVyZXM7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShmZWF0dXJlcykpIGZlYXR1cmVzID0gW2ZlYXR1cmVzXTtcblxuICAgICAgICBmZWF0dXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IGZlYXR1cmUucHJvcGVydGllcy50eXBlO1xuICAgICAgICAgICAgaWYgKCF0eXBlKSByZXR1cm47XG5cbiAgICAgICAgICAgIHRoaXMuY3VycmVudFR5cGUgPSB0eXBlO1xuXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ1BvbHlsaW5lJyAmJiBnZW9mbG8uVXRpbGl0aWVzLmlzVmFsaWRMaW5lU3RyaW5nKGZlYXR1cmUpICYmIGdlb2Zsby5vcHRpb25zLnNob3dMaW5lVW5pdHMpIHtcbiAgICAgICAgICAgICAgICB0dXJmLnNlZ21lbnRFYWNoKGZlYXR1cmUsIHNldExpbmVUZXh0LmJpbmQodGhpcykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzb3VyY2UgPSBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5TRUxFQ1Q7XG4gICAgICAgICAgICAgICAgdmFyIGZlYXQgPSBnZW9mbG8uVXRpbGl0aWVzLmNsb25lRGVlcChmZWF0dXJlKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBmZWF0LnByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdUZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogZmVhdHVyZS5wcm9wZXJ0aWVzLnRleHQsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiBmZWF0dXJlLnByb3BlcnRpZXMuc3R5bGVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0RmVhdHVyZXMucHVzaChmZWF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcylcbiAgICAgICAgXG4gICAgICAgIGdlb2Zsby5tYXAuZ2V0U291cmNlKHNvdXJjZSkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKHRoaXMudGV4dEZlYXR1cmVzKSk7XG5cbiAgICAgICAgZGVsZXRlIHRoaXMudGV4dEZlYXR1cmVzO1xuICAgICAgICBkZWxldGUgdGhpcy5jdXJyZW50VHlwZTtcbiAgICB9XG5cblxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5GZWF0dXJlc1xuXHQgKiBAbmFtZSBhZGRGZWF0dXJlXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGFkZHMgYSBmZWF0dXJlIHRvIHRoZSBtYXAgd2l0aCB0aGUgZ2l2ZW4gcHJvcGVydGllcy4gSXQgY2xlYW5zIHRoZSBjb29yZGluYXRlcywgdHJ1bmNhdGVzIHRoZW0sIGFzc2lnbnMgZGVlcCBwcm9wZXJ0aWVzLCBzZXRzIHRoZSBzb3VyY2UsIGFuZCByZW1vdmVzIHVubmVjZXNzYXJ5IHByb3BlcnRpZXMgYmVmb3JlIGFkZGluZyB0aGUgZmVhdHVyZSB0byB0aGUgbWFwLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gZmVhdHVyZSAtIFRoZSBmZWF0dXJlIG9iamVjdCB0byBiZSBhZGRlZCB0byB0aGUgbWFwLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXM9e31dIC0gQWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRvIGJlIGFzc2lnbmVkIHRvIHRoZSBmZWF0dXJlLlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZmVhdHVyZSBvYmplY3QgdGhhdCB3YXMgYWRkZWQgdG8gdGhlIG1hcC5cblx0ICovXG4gICAgdGhpcy5hZGRGZWF0dXJlID0gZnVuY3Rpb24gKGZlYXR1cmUsIHNvdXJjZSwgcHJvcGVydGllcz17fSkge1xuICAgICAgICBpZiAoIWZlYXR1cmUgfHwgIWZlYXR1cmUucHJvcGVydGllcykgcmV0dXJuIGZhbHNlO1xuICAgICAgICBcbiAgICAgICAgZmVhdHVyZSA9IHR1cmYuY2xlYW5Db29yZHMoZmVhdHVyZSk7XG4gICAgICAgIGZlYXR1cmUgPSB0dXJmLnRydW5jYXRlKGZlYXR1cmUsIHsgcHJlY2lzaW9uOiA2LCBjb29yZGluYXRlczogMywgbXV0YXRlOiB0cnVlIH0pO1xuXG4gICAgICAgIGZlYXR1cmUucHJvcGVydGllcyA9IGdlb2Zsby5VdGlsaXRpZXMuYXNzaWduRGVlcChwcm9wZXJ0aWVzLCBmZWF0dXJlLnByb3BlcnRpZXMpO1xuICAgICAgICBmZWF0dXJlLnNvdXJjZSA9IHNvdXJjZSB8fCBmZWF0dXJlLnNvdXJjZSB8fCBmZWF0dXJlLnByb3BlcnRpZXMuc291cmNlIHx8IGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLkNPTEQ7XG4gICAgICAgIFxuICAgICAgICBkZWxldGUgZmVhdHVyZS5wcm9wZXJ0aWVzLnNvdXJjZTtcbiAgICAgICAgZGVsZXRlIGZlYXR1cmUucHJvcGVydGllcy5wYWludGluZztcbiAgICAgICAgZGVsZXRlIGZlYXR1cmUucHJvcGVydGllcy5lZGl0O1xuICAgICAgICBkZWxldGUgZmVhdHVyZS5wcm9wZXJ0aWVzLm5ldztcbiAgICAgICAgZGVsZXRlIGZlYXR1cmUucHJvcGVydGllcy5zZWxlY3RlZDtcbiAgICAgICAgZGVsZXRlIGZlYXR1cmUucHJvcGVydGllcy5oaWRkZW47XG4gICAgICAgIGRlbGV0ZSBmZWF0dXJlLnByb3BlcnRpZXMub2Zmc2V0O1xuICAgICAgICBcbiAgICAgICAgZmVhdHVyZS5wcm9wZXJ0aWVzLnN0eWxlID0gZmVhdHVyZS5wcm9wZXJ0aWVzLnN0eWxlIHx8IHt9O1xuXG4gICAgICAgIHRoaXMuYWRkVW5pdHMoZmVhdHVyZSk7XG4gICAgICAgIHRoaXMuYWRkRmVhdHVyZXMoW2ZlYXR1cmVdKTtcbiAgICAgICAgcmV0dXJuIGZlYXR1cmU7XG4gICAgfTtcblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uRmVhdHVyZXNcblx0ICogQG5hbWUgYWRkRmVhdHVyZXNcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gdGFrZXMgYW4gYXJyYXkgb2YgZmVhdHVyZXMgYW5kIGFkZHMgdGhlbSB0byB0aGUgbWFwLiBJdCBhbHNvIHVwZGF0ZXMgdGhlIHNvdXJjZSBpZiBhbnkgY2hhbmdlcyBhcmUgbWFkZS5cblx0ICogQHBhcmFtIHtBcnJheX0gZmVhdHVyZXMgLSBBbiBhcnJheSBvZiBmZWF0dXJlcyB0byBiZSBhZGRlZCB0byB0aGUgbWFwLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IHVuc2VsZWN0IC0gQSBmbGFnIGluZGljYXRpbmcgd2hldGhlciB0byB1bnNlbGVjdCB0aGUgZmVhdHVyZXMuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gVGhlIGFycmF5IG9mIGZlYXR1cmVzIHRoYXQgd2VyZSBhZGRlZCB0byB0aGUgbWFwLlxuXHQgKi9cbiAgICB0aGlzLmFkZEZlYXR1cmVzID0gZnVuY3Rpb24gKGZlYXR1cmVzLCB1bnNlbGVjdCwgaWQpIHtcbiAgICAgICAgdmFyIHVwZGF0ZTtcbiAgICAgICAgdmFyIHNvdXJjZXMgPSBbXTtcblxuICAgICAgICBmZWF0dXJlcy5mb3JFYWNoKChmZWF0dXJlKSA9PiB7XG4gICAgICAgICAgICBmZWF0dXJlLmlkID0gZmVhdHVyZS5pZCB8fCBmZWF0dXJlLnByb3BlcnRpZXMuaWQgfHwgVVJMLmNyZWF0ZU9iamVjdFVSTChuZXcgQmxvYihbXSkpLnNsaWNlKC0zNik7XG4gICAgICAgICAgICBpZiAoaWQgJiYgZmVhdHVyZS5pZCAhPT0gaWQpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgZmVhdHVyZS5zb3VyY2UgPSBmZWF0dXJlLnNvdXJjZSB8fCBmZWF0dXJlLnByb3BlcnRpZXMuc291cmNlIHx8IGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLkNPTEQ7XG4gICAgICAgICAgICBmZWF0dXJlLnByb3BlcnRpZXMuaWQgPSBmZWF0dXJlLmlkO1xuICAgICAgICAgICAgZmVhdHVyZS5wcm9wZXJ0aWVzLnR5cGUgPSB0aGlzLmdldFR5cGUoZmVhdHVyZSk7XG5cbiAgICAgICAgICAgIHZhciBpbmRleCA9IGNvbGRGZWF0dXJlcy5maW5kSW5kZXgoZnVuY3Rpb24oZikgeyBpZiAoZi5pZCA9PT0gZmVhdHVyZS5pZCB8fCBmLnByb3BlcnRpZXMuaWQgPT09IGZlYXR1cmUuaWQpIHJldHVybiBmOyB9KTtcblxuICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEZlYXR1cmVTdGF0ZShmZWF0dXJlLmlkLCB7IGhpZGRlbjogIXVuc2VsZWN0IH0pO1xuICAgICAgICAgICAgICAgIGNvbGRGZWF0dXJlc1tpbmRleF0gPSBmZWF0dXJlO1xuICAgICAgICAgICAgICAgIHVwZGF0ZSA9ICF1bnNlbGVjdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlID0gIXRoaXMudXBkYXRpbmdGZWF0dXJlcztcbiAgICAgICAgICAgICAgICBjb2xkRmVhdHVyZXMucHVzaChmZWF0dXJlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHVuc2VsZWN0KSBkZWxldGUgZmVhdHVyZS5wcm9wZXJ0aWVzLl9zZWxlY3RlZDtcbiAgICAgICAgICAgIGlmICh1cGRhdGUgJiYgIXNvdXJjZXMuaW5jbHVkZXMoZmVhdHVyZS5zb3VyY2UpKSBzb3VyY2VzLnB1c2goZmVhdHVyZS5zb3VyY2UpO1xuICAgICAgICB9LCB0aGlzKTtcblxuICAgICAgICBpZiAodXBkYXRlKSB0aGlzLnVwZGF0ZVNvdXJjZShzb3VyY2VzKTtcbiAgICAgICAgcmV0dXJuIGZlYXR1cmVzO1xuICAgIH07XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkZlYXR1cmVzXG5cdCAqIEBuYW1lIGFkZFVuaXRzXG5cdCAqIEBkZXNjcmlwdGlvbiBBZGRzIHVuaXRzIHRvIGEgZmVhdHVyZSdzIGdlb21ldHJ5IGJhc2VkIG9uIHRoZSBzcGVjaWZpZWQgY29udmVyc2lvbiBvciBkZWZhdWx0IHVuaXQuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBmZWF0dXJlIC0gVGhlIGZlYXR1cmUgb2JqZWN0IHRvIHdoaWNoIHVuaXRzIHdpbGwgYmUgYWRkZWQuXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBjb252ZXJ0VG8gLSBUaGUgdW5pdCB0byB3aGljaCB0aGUgZmVhdHVyZSdzIHVuaXRzIHdpbGwgYmUgY29udmVydGVkLiBJZiBub3QgcHJvdmlkZWQsIHRoZSBkZWZhdWx0IHVuaXQgd2lsbCBiZSB1c2VkLlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZmVhdHVyZSBvYmplY3Qgd2l0aCBhZGRlZCB1bml0cy5cblx0ICovXG4gICAgdGhpcy5hZGRVbml0cyA9IGZ1bmN0aW9uIChmZWF0dXJlLCBjb252ZXJ0VG8pIHtcbiAgICAgICAgdmFyIHVuaXQgPSBjb252ZXJ0VG8gfHwgdGhpcy5nZXRVbml0KGZlYXR1cmUpO1xuICAgICAgICBpZiAoIXVuaXQpIHJldHVybiBmYWxzZTtcblxuICAgICAgICB2YXIgdW5pdHMgPSB0aGlzLmNvbnZlcnRVbml0cyhmZWF0dXJlLCBudWxsLCBjb252ZXJ0VG8pO1xuXG4gICAgICAgIGZlYXR1cmUuZ2VvbWV0cnkudW5pdHMgPSB1bml0cztcbiAgICAgICAgZmVhdHVyZS5nZW9tZXRyeS51bml0ID0gdW5pdDtcbiAgICAgICAgcmV0dXJuIGZlYXR1cmU7XG4gICAgfTtcblxuXG4gICAgdGhpcy5zZWxlY3RGZWF0dXJlcyA9IGZ1bmN0aW9uIChmZWF0dXJlcykge1xuICAgICAgICBpZiAoIWZlYXR1cmVzIHx8ICFmZWF0dXJlcy5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgICAgICB2YXIgc2VsZWN0ZWQgPSBnZW9mbG8uZ2V0U2VsZWN0ZWRGZWF0dXJlcygpO1xuXG4gICAgICAgIGZlYXR1cmVzLmZvckVhY2goZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgICAgIHZhciBpZCA9IGZlYXR1cmUuaWQgfHwgZmVhdHVyZS5wcm9wZXJ0aWVzLmlkO1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gc2VsZWN0ZWQuZmluZEluZGV4KChmKSA9PiB7IHJldHVybiBmLmlkID09PSBpZCB8fCBmLnByb3BlcnRpZXMuaWQgPT09IGlkIH0pO1xuXG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgICBmZWF0dXJlLnByb3BlcnRpZXMuX3NlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHNlbGVjdGVkLnB1c2goZmVhdHVyZSk7XG4gICAgICAgIH0pXG5cbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkO1xuICAgIH1cblxuXG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkZlYXR1cmVzXG5cdCAqIEBuYW1lIHVwZGF0ZUZlYXR1cmVzXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHVwZGF0ZXMgdGhlIGNvb3JkaW5hdGVzIG9mIGZlYXR1cmVzIGluIGEgbWFwIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBjb29yZGluYXRlcy4gSXQgaXRlcmF0ZXMgdGhyb3VnaCB0aGUgZmVhdHVyZXMgYXJyYXksIHJldHJpZXZlcyB0aGUgb3JpZ2luYWwgZmVhdHVyZSBieSBJRCwgYW5kIHVwZGF0ZXMgaXRzIGdlb21ldHJ5IGNvb3JkaW5hdGVzIGJhc2VkIG9uIHRoZSBmZWF0dXJlIHR5cGUuIEl0IHRoZW4gYWRkcyB1bml0cyB0byB0aGUgdXBkYXRlZCBmZWF0dXJlIGFuZCB1cGRhdGVzIHRoZSBzb3VyY2Ugb2YgdGhlIG1hcC5cblx0ICogQHBhcmFtIHtBcnJheX0gZmVhdHVyZXMgLSBBbiBhcnJheSBvZiBmZWF0dXJlcyB0byB1cGRhdGUuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGNvb3JkcyAtIFRoZSBuZXcgY29vcmRpbmF0ZXMgdG8gc2V0IGZvciB0aGUgZmVhdHVyZXMuXG5cdCAqL1xuICAgIHRoaXMudXBkYXRlRmVhdHVyZXMgPSBmdW5jdGlvbihmZWF0dXJlcywgb3B0aW9ucz17fSkge1xuICAgICAgICBmZWF0dXJlcyA9IGZlYXR1cmVzIHx8IGdlb2Zsby5nZXRGZWF0dXJlcygpO1xuXG4gICAgICAgIHZhciBzb3VyY2VzID0gW107XG4gICAgICAgIHZhciBzZWxlY3RlZEZlYXR1cmVzID0gZ2VvZmxvLmdldFNlbGVjdGVkRmVhdHVyZXMoKTtcblxuICAgICAgICB0aGlzLnVwZGF0aW5nRmVhdHVyZXMgPSB0cnVlO1xuXG4gICAgICAgIGZlYXR1cmVzLmZvckVhY2goZnVuY3Rpb24oZmVhdHVyZSkge1xuICAgICAgICAgICAgdmFyIGlkID0gZmVhdHVyZS5pZCB8fCBmZWF0dXJlLnByb3BlcnRpZXMuaWQ7XG4gICAgICAgICAgICBpZiAoIWlkKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgIHZhciBvcmlnaW5hbEZlYXR1cmUgPSB0aGlzLmdldEZlYXR1cmVCeUlkKGlkKTtcbiAgICAgICAgICAgIGlmICghb3JpZ2luYWxGZWF0dXJlIHx8IG9yaWdpbmFsRmVhdHVyZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdGhpcy5hZGRGZWF0dXJlKGZlYXR1cmUpO1xuXG4gICAgICAgICAgICB2YXIgc2VsZWN0ZWQgPSBmZWF0dXJlLnByb3BlcnRpZXMuX3NlbGVjdGVkIHx8IHNlbGVjdGVkRmVhdHVyZXMuZmluZCgoZmVhdHVyZSkgPT4geyByZXR1cm4gZmVhdHVyZS5pZCA9PT0gaWQgfHwgZmVhdHVyZS5wcm9wZXJ0aWVzLmlkID09PSBpZCB9KTtcblxuICAgICAgICAgICAgaWYgKHNlbGVjdGVkICYmICFnZW9mbG8ubm9TZWxlY3QpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZC5nZW9tZXRyeS5jb29yZGluYXRlcyA9IGZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQucHJvcGVydGllcyA9IGZlYXR1cmUucHJvcGVydGllcztcbiAgICAgICAgICAgICAgICBzZWxlY3RlZC5wcm9wZXJ0aWVzLl9zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgLyogZ2VvZmxvLkxheWVycy5nZXRMYXllcihnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5TRUxFQ1QpLmZvckVhY2hMYXllcihmdW5jdGlvbiAobGF5ZXIpIHsgfSkgKi9cbiAgICAgICAgICAgICAgICByZXR1cm4gZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuU0VMRUNUKS5zZXREYXRhKHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oc2VsZWN0ZWRGZWF0dXJlcykpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghc291cmNlcy5pbmNsdWRlcyhvcmlnaW5hbEZlYXR1cmUuc291cmNlKSkge1xuICAgICAgICAgICAgICAgIHNvdXJjZXMucHVzaChvcmlnaW5hbEZlYXR1cmUuc291cmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKG9wdGlvbnMudHlwZSA9PT0gJ3Bpbm5pbmcnKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLmNvb3JkcykgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxGZWF0dXJlLmdlb21ldHJ5LnR5cGUgPT09ICdQb2ludCcgPyBvcmlnaW5hbEZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXMgPSBjb29yZHMgOlxuICAgICAgICAgICAgICAgIG9yaWdpbmFsRmVhdHVyZS5nZW9tZXRyeS50eXBlID09PSAnUG9seWdvbicgJiYgY29vcmRzID8gb3JpZ2luYWxGZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdW2ZlYXR1cmUuaW5kZXhdID0gY29vcmRzIDpcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEZlYXR1cmUuZ2VvbWV0cnkudHlwZSA9PT0gJ0xpbmVTdHJpbmcnICYmIGNvb3JkcyA/IG9yaWdpbmFsRmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlc1tmZWF0dXJlLmluZGV4XSA9IGNvb3JkcyA6XG4gICAgICAgICAgICAgICAgZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9yaWdpbmFsRmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcyA9IGZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgICAgICAgICAgICAgb3JpZ2luYWxGZWF0dXJlLnByb3BlcnRpZXMgPSBmZWF0dXJlLnByb3BlcnRpZXM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9wdGlvbnMuYWRkVW5pdHMgPyB0aGlzLmFkZFVuaXRzKG9yaWdpbmFsRmVhdHVyZSkgOiBmYWxzZTtcbiAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgdGhpcy51cGRhdGluZ0ZlYXR1cmVzID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKCFzb3VyY2VzLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVTb3VyY2Uoc291cmNlcyk7XG4gICAgfTtcblxuICAgIFxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5GZWF0dXJlc1xuXHQgKiBAbmFtZSB1cGRhdGVTb3VyY2Vcblx0ICogQGRlc2NyaXB0aW9uIFVwZGF0ZXMgdGhlIHNvdXJjZSBvZiB0aGUgY3VycmVudCBvYmplY3Qgd2l0aCB0aGUgcHJvdmlkZWQgc291cmNlcy5cblx0ICogQHBhcmFtIHtBcnJheX0gc291cmNlcyAtIEFuIGFycmF5IG9mIHNvdXJjZXMgdG8gdXBkYXRlIHRoZSBjdXJyZW50IG9iamVjdCB3aXRoLlxuXHQgKiBAcmV0dXJucyB7YW55fSBUaGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlIHVwZGF0ZVNvdXJjZSBmdW5jdGlvbiB3aXRoIHRoZSBwcm92aWRlZCBzb3VyY2VzLlxuXHQgKi9cbiAgICB0aGlzLnVwZGF0ZVNvdXJjZSA9IGZ1bmN0aW9uIChzb3VyY2VzKSB7XG4gICAgICAgIHJldHVybiB1cGRhdGVTb3VyY2UuY2FsbCh0aGlzLCBzb3VyY2VzKTtcbiAgICB9O1xuXG5cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uRmVhdHVyZXNcblx0ICogQG5hbWUgcmVtb3ZlRmVhdHVyZXNcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gcmVtb3ZlcyBmZWF0dXJlcyBmcm9tIHRoZSBtYXAgYmFzZWQgb24gdGhlIHByb3ZpZGVkIElEIG9yIGFycmF5IG9mIElEcy4gSXQgdXBkYXRlcyB0aGUgbWFwIHNvdXJjZSBhZnRlciByZW1vdmluZyB0aGUgZmVhdHVyZXMuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBpZCAtIFRoZSBJRCBvciBhcnJheSBvZiBJRHMgb2YgdGhlIGZlYXR1cmVzIHRvIGJlIHJlbW92ZWQuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVtb3ZlIC0gQSBmbGFnIGluZGljYXRpbmcgd2hldGhlciB0byByZW1vdmUgdGhlIGZlYXR1cmVzIG9yIG5vdC5cblx0ICogQHJldHVybnMge09iamVjdFtdfSBBbiBhcnJheSBjb250YWluaW5nIHRoZSByZW1vdmVkIGZlYXR1cmVzLlxuXHQgKi9cbiAgICB0aGlzLnJlbW92ZUZlYXR1cmVzID0gZnVuY3Rpb24gKGlkLCByZW1vdmUpIHtcbiAgICAgICAgY29uc3QgcmVtb3ZlZEZlYXR1cmVzID0gW107XG5cbiAgICAgICAgdmFyIGZlYXR1cmU7XG4gICAgICAgIHZhciBzb3VyY2VzO1xuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGlkKSAmJiByZW1vdmUpIHtcbiAgICAgICAgICAgIHNvdXJjZXMgPSBpZC5tYXAoZnVuY3Rpb24obGF5ZXIpIHsgcmV0dXJuIGxheWVyLmRldGFpbHMgPyBsYXllci5kZXRhaWxzLmlkIDogbGF5ZXIuaWQgPyBsYXllci5pZCA6IGxheWVyIH0pO1xuXG4gICAgICAgICAgICBjb2xkRmVhdHVyZXMuZm9yRWFjaCgoZmVhdHVyZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghc291cmNlcy5pbmNsdWRlcyhmZWF0dXJlLnNvdXJjZSkpIHJldHVybjtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBjb2xkRmVhdHVyZXMuZmluZEluZGV4KChmKSA9PiB7IHJldHVybiBmZWF0dXJlLmlkID09PSBmLmlkIHx8IGZlYXR1cmUucHJvcGVydGllcy5pZCA9PT0gZi5pZCB9KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkgcmVtb3ZlZEZlYXR1cmVzLnB1c2goLi4uY29sZEZlYXR1cmVzLnNwbGljZShpbmRleCwgMSkpO1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgdGhpcy51cGRhdGVTb3VyY2Uoc291cmNlcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmZWF0dXJlID0gcmVtb3ZlID8gY29sZEZlYXR1cmVzLmZpbmRJbmRleCgoZmVhdHVyZSkgPT4geyByZXR1cm4gZmVhdHVyZS5pZCA9PT0gaWQgfHwgZmVhdHVyZS5wcm9wZXJ0aWVzLmlkID09PSBpZCB9KSA6XG4gICAgICAgICAgICBjb2xkRmVhdHVyZXMuZmluZCgoZmVhdHVyZSkgPT4geyByZXR1cm4gZmVhdHVyZS5pZCA9PT0gaWQgfHwgZmVhdHVyZS5wcm9wZXJ0aWVzLmlkID09PSBpZCB9KTtcblxuICAgICAgICAgICAgaWYgKHJlbW92ZSkge1xuICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZEZlYXR1cmVzLnB1c2goLi4uY29sZEZlYXR1cmVzLnNwbGljZShmZWF0dXJlLCAxKSk7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZXMgPSByZW1vdmVkRmVhdHVyZXMubWFwKChmZWF0dXJlKSA9PiB7IHJldHVybiBmZWF0dXJlLnNvdXJjZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTb3VyY2Uoc291cmNlcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlbW92ZWRGZWF0dXJlcy5wdXNoKGZlYXR1cmUpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0RmVhdHVyZVN0YXRlKGlkLCB7IGhpZGRlbjogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW1vdmVkRmVhdHVyZXM7XG4gICAgfTtcblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uRmVhdHVyZXNcblx0ICogQG5hbWUgZGVsZXRlRmVhdHVyZXNcblx0ICogQGRlc2NyaXB0aW9uIERlbGV0ZXMgYWxsIGZlYXR1cmVzIGZyb20gdGhlIGNvbGRGZWF0dXJlcyBhcnJheSBhbmQgdXBkYXRlcyB0aGUgc291cmNlLlxuXHQgKiBAcGFyYW1zIHtBcnJheX0gY29sZEZlYXR1cmVzIC0gVGhlIGFycmF5IG9mIGZlYXR1cmVzIHRvIGJlIGRlbGV0ZWQuXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cbiAgICB0aGlzLmRlbGV0ZUZlYXR1cmVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb2xkRmVhdHVyZXMuc3BsaWNlKDAsIGNvbGRGZWF0dXJlcy5sZW5ndGgpO1xuICAgICAgICB0aGlzLnVwZGF0ZVNvdXJjZSgpO1xuICAgIH07XG4gICAgXG5cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uRmVhdHVyZXNcblx0ICogQG5hbWUgY29udmVydFVuaXRzXG5cdCAqIEBkZXNjcmlwdGlvbiBDb252ZXJ0cyB0aGUgZ2l2ZW4gdW5pdHMgb2YgYSBmZWF0dXJlIHRvIHRoZSBzcGVjaWZpZWQgdGFyZ2V0IHVuaXRzIGJhc2VkIG9uIHRoZSBmZWF0dXJlIHR5cGUgKFBvbHlsaW5lLCBQb2x5Z29uLCBvciBSZWN0YW5nbGUpLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gZmVhdHVyZSAtIFRoZSBmZWF0dXJlIG9iamVjdCBjb250YWluaW5nIHByb3BlcnRpZXMgbGlrZSB0eXBlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdW5pdHMgLSBUaGUgdW5pdHMgdG8gYmUgY29udmVydGVkLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gY29udmVydFRvIC0gVGhlIHRhcmdldCB1bml0cyB0byBjb252ZXJ0IHRvIChvcHRpb25hbCkuXG5cdCAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBjb252ZXJ0ZWQgdW5pdHMgaW4gdGhlIHRhcmdldCB1bml0IGZvcm1hdC5cblx0ICovXG4gICAgdGhpcy5jb252ZXJ0VW5pdHMgPSBmdW5jdGlvbiAoZmVhdHVyZSwgdW5pdHMsIGNvbnZlcnRUbykge1xuICAgICAgICB2YXIgdHlwZSA9IGZlYXR1cmUucHJvcGVydGllcy50eXBlO1xuICAgICAgICB2YXIgdW5pdCA9IGNvbnZlcnRUbyB8fCB0aGlzLmdldFVuaXQoZmVhdHVyZSk7XG5cbiAgICAgICAgdW5pdHMgPSB1bml0cyB8fCB0aGlzLmdldFVuaXRzKGZlYXR1cmUpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHR5cGUgPT09IFwiUG9seWxpbmVcIikge1xuICAgICAgICAgICAgdW5pdHMgPSBNYXRoLnJvdW5kKHR1cmYuY29udmVydExlbmd0aCh1bml0cywgJ21ldGVycycsIHVuaXQpKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnUG9seWdvbicpIHtcbiAgICAgICAgICAgIHVuaXRzID0gTWF0aC5yb3VuZCh0dXJmLmNvbnZlcnRBcmVhKHVuaXRzLCAnbWV0ZXJzJywgdW5pdCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdSZWN0YW5nbGUnKSB7XG4gICAgICAgICAgICB1bml0cyA9IE1hdGgucm91bmQodHVyZi5jb252ZXJ0QXJlYSh1bml0cywgJ21ldGVycycsIHVuaXQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVuaXRzID0gdW5pdHMgPyBOdW1iZXIodW5pdHMudG9GaXhlZCgyKSkgOiAwO1xuICAgICAgICByZXR1cm4gdW5pdHM7XG4gICAgfTtcblxuICAgIFxuXG5cbiAgICBmdW5jdGlvbiBnZXRGZWF0dXJlQnlJZChpZCkge1xuICAgICAgICB2YXIgZmVhdHVyZSA9IGNvbGRGZWF0dXJlcy5maW5kKChmZWF0dXJlKSA9PiB7IHJldHVybiBmZWF0dXJlLmlkID09PSBpZCB8fCBmZWF0dXJlLnByb3BlcnRpZXMuaWQgPT09IGlkIH0pO1xuICAgICAgICBmZWF0dXJlID0gZmVhdHVyZSB8fCBnZW9mbG8uZ2V0U2VsZWN0ZWRGZWF0dXJlcygpLmZpbmQoKGZlYXR1cmUpID0+IHsgcmV0dXJuIGZlYXR1cmUuaWQgPT09IGlkIHx8IGZlYXR1cmUucHJvcGVydGllcy5pZCA9PT0gaWQgfSk7XG4gICAgICAgIHJldHVybiBmZWF0dXJlO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRGZWF0dXJlc0J5UGFyZW50IChpZCkge1xuICAgICAgICB2YXIgZmVhdHVyZSA9IHR5cGVvZiBpZCA9PT0gJ29iamVjdCcgJiYgaWQuaWQgPyBpZCA6IGdldEZlYXR1cmVCeUlkKGlkKTtcbiAgICAgICAgaWYgKCFmZWF0dXJlIHx8ICFmZWF0dXJlLnNvdXJjZSB8fCAhZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZmVhdHVyZS5zb3VyY2UpIHx8ICFnZW9mbG8ubWFwLmdldFNvdXJjZShmZWF0dXJlLnNvdXJjZSkuX2RhdGEpIHJldHVybiBbXTtcbiAgICAgICAgdmFyIGZpZWxkID0gZ2VvZmxvLm9wdGlvbnMub2Zmc2V0T3ZlcmxhcHBpbmdMaW5lcyA/ICdwYXJlbnQnIDogJ2lkJztcbiAgICAgICAgdmFyIGZlYXR1cmVzID0gZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZmVhdHVyZS5zb3VyY2UpLl9kYXRhLmZlYXR1cmVzLmZpbHRlcihmdW5jdGlvbihmKSB7IHJldHVybiBmW2ZpZWxkXSA9PT0gaWQgfHwgZi5wcm9wZXJ0aWVzW2ZpZWxkXSA9PT0gaWQgfSk7XG4gICAgICAgIHJldHVybiBmZWF0dXJlcztcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlVGV4dEZlYXR1cmVzIChmZWF0dXJlKSB7XG4gICAgICAgIHZhciBpc0xpbmUgPSBnZW9mbG8uVXRpbGl0aWVzLmlzVmFsaWRMaW5lU3RyaW5nKGZlYXR1cmUpO1xuICAgICAgICB2YXIgc2VnbWVudHMgPSBbXTtcblxuICAgICAgICBpZiAoaXNMaW5lKSB7XG4gICAgICAgICAgICB0dXJmLnNlZ21lbnRFYWNoKGZlYXR1cmUsIGZ1bmN0aW9uIChjdXJyZW50U2VnbWVudCkge1xuICAgICAgICAgICAgICAgIHZhciBzZWdtZW50ID0gZ2VvZmxvLlV0aWxpdGllcy5jbG9uZURlZXAoY3VycmVudFNlZ21lbnQpO1xuICAgICAgICAgICAgICAgIHZhciBmb290YWdlID0gTWF0aC5yb3VuZCh0dXJmLmxlbmd0aChzZWdtZW50LCB7IHVuaXRzOiAnbWlsZXMnIH0pICogNTI4MCk7XG4gICAgICAgICAgICAgICAgdmFyIG1pbGVhZ2UgPSBOdW1iZXIodHVyZi5sZW5ndGgoc2VnbWVudCwgeyB1bml0czogJ21pbGVzJyB9KS50b0ZpeGVkKDMpKTtcbiAgICAgICAgICAgICAgICBmb290YWdlID0gTnVtYmVyKGZvb3RhZ2UudG9GaXhlZCgyKSk7XG4gICAgICAgICAgICAgICAgbWlsZWFnZSA9IE51bWJlcihtaWxlYWdlLnRvRml4ZWQoMikpO1xuXG4gICAgICAgICAgICAgICAgc2VnbWVudC5wcm9wZXJ0aWVzLmZvb3RhZ2UgPSBmb290YWdlO1xuICAgICAgICAgICAgICAgIHNlZ21lbnQucHJvcGVydGllcy5taWxlYWdlID0gbWlsZWFnZTtcbiAgICAgICAgICAgICAgICBzZWdtZW50LnByb3BlcnRpZXMudGV4dCA9IGAke21pbGVhZ2V9IG1pbGVzYDs7XG4gICAgICAgICAgICAgICAgc2VnbWVudHMucHVzaChzZWdtZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNlZ21lbnRzO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVTb3VyY2UgKHNvdXJjZXM9W10pIHtcbiAgICAgICAgdmFyIHNvdXJjZUZlYXR1cmVzID0ge307XG4gICAgICAgIHZhciB1bnNvdXJjZUZlYXR1cmVzID0gW107XG4gICAgICAgIHZhciB0ZXh0U291cmNlID0gZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuQ09MRFRFWFQpO1xuICAgICAgICB2YXIgY29sZFNvdXJjZSA9IGdlb2Zsby5tYXAuZ2V0U291cmNlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLkNPTEQpO1xuXG4gICAgICAgIGdlb2Zsby51cGRhdGluZ1NvdXJjZSA9IHRydWU7XG5cbiAgICAgICAgdGV4dFNvdXJjZSA/IHRleHRTb3VyY2Uuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtdKSkgOiBmYWxzZTtcbiAgICAgICAgY29sZFNvdXJjZSA/IGNvbGRTb3VyY2Uuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtdKSkgOiBmYWxzZTtcblxuICAgICAgICBnZW9mbG8ubWFwLmdldFNvdXJjZShnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5TRUxFQ1QpLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXSkpO1xuXG4gICAgICAgIGNvbGRGZWF0dXJlcy5mb3JFYWNoKChmZWF0dXJlKSA9PiB7XG4gICAgICAgICAgICBkZWxldGUgZmVhdHVyZS5wcm9wZXJ0aWVzLm5ldztcbiAgICAgICAgICAgIGRlbGV0ZSBmZWF0dXJlLnByb3BlcnRpZXMub2Zmc2V0O1xuXG4gICAgICAgICAgICB2YXIgc291cmNlID0gZmVhdHVyZS5zb3VyY2U7XG4gICAgICAgICAgICBpZiAoc291cmNlcy5sZW5ndGggJiYgIXNvdXJjZXMuaW5jbHVkZXMoc291cmNlKSkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKCFzb3VyY2UpIHJldHVybiB1bnNvdXJjZUZlYXR1cmVzLnB1c2goZmVhdHVyZSk7XG4gICAgICAgICAgICBpZiAoIXNvdXJjZUZlYXR1cmVzW3NvdXJjZV0pIHNvdXJjZUZlYXR1cmVzW3NvdXJjZV0gPSBbXTtcbiAgICAgICAgICAgIHNvdXJjZUZlYXR1cmVzW3NvdXJjZV0ucHVzaChmZWF0dXJlKTtcbiAgICAgICAgfSlcblxuICAgICAgICBpZiAoIWNvbGRGZWF0dXJlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGdlb2Zsby5MYXllcnMuZ2V0Q3VzdG9tTGF5ZXJzKCkuZm9yRWFjaCgobGF5ZXIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWxheWVyLmRldGFpbHMgfHwgIWxheWVyLmRldGFpbHMuc291cmNlKSByZXR1cm47XG4gICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGxheWVyLmRldGFpbHMuc291cmNlO1xuICAgICAgICAgICAgICAgIGlmICghZ2VvZmxvLm1hcC5nZXRTb3VyY2Uoc291cmNlKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIGdlb2Zsby5tYXAuZ2V0U291cmNlKHNvdXJjZSkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtdKSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LmVudHJpZXMoc291cmNlRmVhdHVyZXMpLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gZW50cnlbMF07XG4gICAgICAgICAgICB2YXIgZmVhdHVyZXMgPSBlbnRyeVsxXTtcbiAgICAgICAgICAgIGlmICghZ2VvZmxvLm1hcC5nZXRTb3VyY2Uoc291cmNlKSkgcmV0dXJuIHVuc291cmNlRmVhdHVyZXMucHVzaChmZWF0dXJlcyk7XG4gICAgICAgICAgICBzZXRMaW5lT2Zmc2V0KGZlYXR1cmVzLCBzb3VyY2UpO1xuICAgICAgICB9KVxuXG4gICAgICAgIHNldExpbmVPZmZzZXQodW5zb3VyY2VGZWF0dXJlcy5mbGF0KCksIGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLkNPTEQpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHt0aGlzLnNldEZlYXR1cmVzU3RhdGUoY29sZEZlYXR1cmVzLCB7IGhpZGRlbjogZmFsc2UgfSk7IH0sIDEwMCk7XG4gICAgICAgIGdlb2Zsby5maXJlKCdmZWF0dXJlcy51cGRhdGUnLCB7IGZlYXR1cmVzOiBjb2xkRmVhdHVyZXMgfSk7XG4gICAgICAgIHNvdXJjZUZlYXR1cmVzID0gbnVsbDtcbiAgICAgICAgdW5zb3VyY2VGZWF0dXJlcyA9IG51bGw7XG4gICAgICAgIGdlb2Zsby51cGRhdGluZ1NvdXJjZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gY29sZEZlYXR1cmVzO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBzZXRMaW5lVGV4dCAoc2VnbWVudCkge1xuICAgICAgICBzZWdtZW50ID0gZ2VvZmxvLlV0aWxpdGllcy5jbG9uZURlZXAoc2VnbWVudCk7XG4gICAgICAgIHNlZ21lbnQucHJvcGVydGllcy50eXBlID0gdGhpcy5jdXJyZW50VHlwZTtcbiAgICAgICAgXG4gICAgICAgIHZhciB0ZXh0ID0gdHVyZi5wb2ludChzZWdtZW50Lmdlb21ldHJ5LmNvb3JkaW5hdGVzWzFdKTtcbiAgICAgICAgdmFyIHVuaXRzID0gdGhpcy5nZXRVbml0cyhzZWdtZW50KTtcbiAgICAgICAgdmFyIHVuaXQgPSAnZmVldCc7XG5cbiAgICAgICAgdW5pdHMgPSB0aGlzLmNvbnZlcnRVbml0cyhzZWdtZW50LCB1bml0cywgdW5pdCk7XG5cbiAgICAgICAgdGV4dC5wcm9wZXJ0aWVzLnVuaXRzID0gdW5pdHM7XG4gICAgICAgIHRleHQucHJvcGVydGllcy51bml0ID0gdW5pdDtcbiAgICAgICAgdGV4dC5wcm9wZXJ0aWVzLnRleHQgPSBgJHt1bml0c30gJHt1bml0fWA7XG4gICAgICAgIHRleHQucHJvcGVydGllcy50cmFuc2Zvcm0gPSAndXBwZXJjYXNlJztcbiAgICAgICAgdGV4dC5wcm9wZXJ0aWVzLmFuY2hvciA9ICdib3R0b20tbGVmdCc7XG5cbiAgICAgICAgdGhpcy50ZXh0RmVhdHVyZXMucHVzaCh0ZXh0KTtcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0TGluZU9mZnNldCAoZmVhdHVyZXMsIHNvdXJjZSkge1xuICAgICAgICBpZiAoIWZlYXR1cmVzIHx8ICFmZWF0dXJlcy5sZW5ndGggfHwgIXNvdXJjZSB8fCAhZ2VvZmxvLm1hcC5nZXRTb3VyY2Uoc291cmNlKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoIWdlb2Zsby5vcHRpb25zLm9mZnNldE92ZXJsYXBwaW5nTGluZXMpIHJldHVybiBnZW9mbG8ubWFwLmdldFNvdXJjZShzb3VyY2UpLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihmZWF0dXJlcykpO1xuXG4gICAgICAgIHZhciBtZXNoID0gbmV3IGdlb2Zsby5NZXNoKGZlYXR1cmVzLCB0cnVlKTtcbiAgICAgICAgdmFyIG9mZnNldCA9IG1lc2guZ2V0RmVhdHVyZXMoKTtcblxuICAgICAgICBvZmZzZXQuZm9yRWFjaChmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgdmFyIGYgPSBmZWF0dXJlcy5maW5kKGZ1bmN0aW9uIChmZSkgeyByZXR1cm4gZmUuaWQgPT09IGZlYXR1cmUucGFyZW50IH0pO1xuICAgICAgICAgICAgaWYgKCFmKSByZXR1cm47XG4gICAgICAgICAgICBmZWF0dXJlLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgICAgIGZlYXR1cmUucHJvcGVydGllcy5zdHlsZSA9IGYucHJvcGVydGllcy5zdHlsZSB8fCBmZWF0dXJlLnByb3BlcnRpZXMuc3R5bGU7XG4gICAgICAgICAgICBzZXRPdmVybGFwT2Zmc2V0KG9mZnNldCwgZmVhdHVyZSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZ2VvZmxvLm1hcC5nZXRTb3VyY2Uoc291cmNlKS5zZXREYXRhKHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24ob2Zmc2V0KSk7XG4gICAgICAgIGdlb2Zsby5maXJlKCdmZWF0dXJlcy5vZmZzZXQnLCB7IGZlYXR1cmVzOiBmZWF0dXJlcywgb2Zmc2V0OiBvZmZzZXQsIHNvdXJjZTogc291cmNlIH0pO1xuXG4gICAgICAgIG1lc2ggPSBudWxsO1xuICAgICAgICBvZmZzZXQgPSBudWxsO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBzZXRPdmVybGFwT2Zmc2V0IChmZWF0dXJlcywgZmVhdHVyZSkge1xuICAgICAgICBpZiAoIWdlb2Zsby5vcHRpb25zLm9mZnNldE92ZXJsYXBwaW5nTGluZXMpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKCFpc1BvbHlsaW5lKGZlYXR1cmUpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChmZWF0dXJlLnByb3BlcnRpZXMub2Zmc2V0KSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgdmFyIG9mZnNldCA9IDY7XG4gICAgICAgIHZhciBvdmVybGFwcyA9IFtdO1xuXG4gICAgICAgIGZlYXR1cmVzLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICAgIGlmICghaXNQb2x5bGluZShmKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgaWYgKGYucGFyZW50ID09PSBmZWF0dXJlLnBhcmVudCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgaWYgKGYucHJvcGVydGllcy5vZmZzZXQpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgdmFyIG92ZXJsYXAgPSB0dXJmLmJvb2xlYW5PdmVybGFwKGYsIGZlYXR1cmUpIHx8IHR1cmYuYm9vbGVhbldpdGhpbihmLCBmZWF0dXJlKTtcbiAgICAgICAgICAgIGlmICghb3ZlcmxhcCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgICBvdmVybGFwcy5wdXNoKGYpXG4gICAgICAgIH0sIHRoaXMpXG5cbiAgICAgICAgb3ZlcmxhcHMuZm9yRWFjaChmdW5jdGlvbiAoZikge1xuICAgICAgICAgICAgZi5wcm9wZXJ0aWVzLm9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgICAgIG9mZnNldCA9IG9mZnNldCAqIDI7XG4gICAgICAgIH0sIHRoaXMpXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHNldFdpdGhpbk9mZnNldCAoZmVhdHVyZXMpIHtcbiAgICAgICAgaWYgKCFnZW9mbG8ub3B0aW9ucy5vZmZzZXRPdmVybGFwcGluZ0xpbmVzKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgY29uc3QgYWRkZXIgPSA0O1xuICAgICAgICBjb25zdCBtaWxlcyA9IDAuMDAxODkzOTQ7IC8vIDEwIEZlZXRcbiAgICAgICAgY29uc3QgZXhwbG9kZSA9IHR1cmYuZXhwbG9kZSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKGZlYXR1cmVzKSlcbiAgICAgICAgXG4gICAgICAgIGlmICghZXhwbG9kZSB8fCAhZXhwbG9kZS5mZWF0dXJlcy5sZW5ndGgpIHJldHVybjtcblxuICAgICAgICBleHBsb2RlLmZlYXR1cmVzLmZvckVhY2goZnVuY3Rpb24oZmVhdHVyZSkge1xuICAgICAgICAgICAgaWYgKGZlYXR1cmUucHJvcGVydGllcy5vZmZzZXQpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IHR1cmYuYnVmZmVyKGZlYXR1cmUsIG1pbGVzLCB7dW5pdHM6ICdtaWxlcyd9KTtcbiAgICAgICAgICAgIHZhciB3aXRoaW4gPSB0dXJmLnBvaW50c1dpdGhpblBvbHlnb24oZXhwbG9kZSwgYnVmZmVyKTtcblxuICAgICAgICAgICAgaWYgKCF3aXRoaW4gfHwgIXdpdGhpbi5mZWF0dXJlcy5sZW5ndGgpIHJldHVybjtcblxuICAgICAgICAgICAgdmFyIG9mZnNldCA9IGFkZGVyO1xuXG4gICAgICAgICAgICB3aXRoaW4uZmVhdHVyZXMuZm9yRWFjaChmdW5jdGlvbiAoZikge1xuICAgICAgICAgICAgICAgIGlmIChmLnByb3BlcnRpZXMuaWQgPT09IGZlYXR1cmUucHJvcGVydGllcy5pZCB8fCBmLnByb3BlcnRpZXMub2Zmc2V0KSByZXR1cm47XG4gICAgICAgICAgICAgICAgZi5wcm9wZXJ0aWVzLm9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSBvZmZzZXQgKyBhZGRlcjtcbiAgICAgICAgICAgIH0pICAgICAgICAgICAgXG4gICAgICAgIH0pXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGlzUG9seWxpbmUgKGZlYXR1cmUpIHtcbiAgICAgICAgaWYgKCFmZWF0dXJlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGxldCB0eXBlID0gZ2VvZmxvLkxheWVycy5nZXRMYXllclR5cGUoZmVhdHVyZS5zb3VyY2UpO1xuICAgICAgICByZXR1cm4gdHVyZi5nZXRUeXBlKGZlYXR1cmUpID09PSAnTGluZVN0cmluZyc7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGlzUG9seWdvbiAoZmVhdHVyZSkge1xuICAgICAgICBpZiAoIWZlYXR1cmUpIHJldHVybiBmYWxzZTtcbiAgICAgICAgbGV0IHR5cGUgPSBnZW9mbG8uTGF5ZXJzLmdldExheWVyVHlwZShmZWF0dXJlLnNvdXJjZSk7XG4gICAgICAgIHJldHVybiB0dXJmLmdldFR5cGUoZmVhdHVyZSkgPT09ICdQb2x5Z29uJyB8fCBmZWF0dXJlLnByb3BlcnRpZXMudHlwZSA9PT0gJ1BvbHlnb24nIHx8IHR5cGUgPT09ICdQb2x5Z29uJztcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gaXNSZWN0YW5nbGUgKGZlYXR1cmUpIHtcbiAgICAgICAgaWYgKCFmZWF0dXJlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGxldCB0eXBlID0gZ2VvZmxvLkxheWVycy5nZXRMYXllclR5cGUoZmVhdHVyZS5zb3VyY2UpO1xuICAgICAgICByZXR1cm4gdHVyZi5nZXRUeXBlKGZlYXR1cmUpID09PSAnUG9seWdvbicgJiYgZmVhdHVyZS5wcm9wZXJ0aWVzLnR5cGUgPT09ICdSZWN0YW5nbGUnIHx8IHR5cGUgPT09ICcnO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBpc1BvaW50IChmZWF0dXJlKSB7XG4gICAgICAgIGlmICghZmVhdHVyZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBsZXQgdHlwZSA9IGdlb2Zsby5MYXllcnMuZ2V0TGF5ZXJUeXBlKGZlYXR1cmUuc291cmNlKTtcbiAgICAgICAgaWYgKHR1cmYuZ2V0VHlwZShmZWF0dXJlKSA9PT0gJ1BvaW50JyAmJiAoIWZlYXR1cmUucHJvcGVydGllcy50eXBlIHx8IGZlYXR1cmUucHJvcGVydGllcy50eXBlID09PSAnQ2lyY2xlJykpIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAodHVyZi5nZXRUeXBlKGZlYXR1cmUpID09PSAnUG9pbnQnICYmICh0eXBlID09PSAnUG9pbnQnIHx8IHR5cGUgPT09ICdDaXJjbGUnKSkgcmV0dXJuIHRydWU7XG4gICAgICAgIHJldHVybiB0dXJmLmdldFR5cGUoZmVhdHVyZSkgPT09ICdQb2ludCcgJiYgKGZlYXR1cmUucHJvcGVydGllcy50eXBlICE9PSAnVGV4dCcgJiYgZmVhdHVyZS5wcm9wZXJ0aWVzLnR5cGUgIT09ICdJY29uJyAmJiBmZWF0dXJlLnByb3BlcnRpZXMudHlwZSAhPT0gJ0ltYWdlJyk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGlzVGV4dCAoZmVhdHVyZSkge1xuICAgICAgICBpZiAoIWZlYXR1cmUpIHJldHVybiBmYWxzZTtcbiAgICAgICAgbGV0IHR5cGUgPSBnZW9mbG8uTGF5ZXJzLmdldExheWVyVHlwZShmZWF0dXJlLnNvdXJjZSk7XG4gICAgICAgIGlmICh0eXBlID09PSAnVGV4dCcpIHJldHVybiB0cnVlO1xuICAgICAgICByZXR1cm4gdHVyZi5nZXRUeXBlKGZlYXR1cmUpID09PSAnUG9pbnQnICYmIGZlYXR1cmUucHJvcGVydGllcy50eXBlID09PSAnVGV4dCc7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGlzSWNvbiAoZmVhdHVyZSkge1xuICAgICAgICBpZiAoIWZlYXR1cmUpIHJldHVybiBmYWxzZTtcbiAgICAgICAgbGV0IHR5cGUgPSBnZW9mbG8uTGF5ZXJzLmdldExheWVyVHlwZShmZWF0dXJlLnNvdXJjZSk7XG4gICAgICAgIGlmICh0eXBlID09PSAnSWNvbicpIHJldHVybiB0cnVlO1xuICAgICAgICByZXR1cm4gdHVyZi5nZXRUeXBlKGZlYXR1cmUpID09PSAnUG9pbnQnICYmIGZlYXR1cmUucHJvcGVydGllcy50eXBlID09PSAnSWNvbic7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGlzSW1hZ2UgKGZlYXR1cmUpIHtcbiAgICAgICAgaWYgKCFmZWF0dXJlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGxldCB0eXBlID0gZ2VvZmxvLkxheWVycy5nZXRMYXllclR5cGUoZmVhdHVyZS5zb3VyY2UpO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ0ltYWdlJykgcmV0dXJuIHRydWU7XG4gICAgICAgIHJldHVybiB0dXJmLmdldFR5cGUoZmVhdHVyZSkgPT09ICdQb2ludCcgJiYgZmVhdHVyZS5wcm9wZXJ0aWVzLnR5cGUgPT09ICdJbWFnZSc7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldFR5cGUgKGZlYXR1cmUpIHtcbiAgICAgICAgaWYgKCFmZWF0dXJlKSByZXR1cm4gbnVsbDtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBpc1JlY3RhbmdsZShmZWF0dXJlKSA/ICdSZWN0YW5nbGUnIDpcbiAgICAgICAgaXNQb2x5Z29uKGZlYXR1cmUpID8gJ1BvbHlnb24nIDpcbiAgICAgICAgaXNQb2x5bGluZShmZWF0dXJlKSA/ICdQb2x5bGluZScgOlxuICAgICAgICBpc1RleHQoZmVhdHVyZSkgPyAnVGV4dCcgOlxuICAgICAgICBpc0ljb24oZmVhdHVyZSkgPyAnSWNvbicgOlxuICAgICAgICBpc0ltYWdlKGZlYXR1cmUpID8gJ0ltYWdlJyA6XG4gICAgICAgIGlzUG9pbnQoZmVhdHVyZSkgPyAnQ2lyY2xlJyA6XG4gICAgICAgIG51bGw7XG4gICAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZlYXR1cmVzOyIsIi8qKlxuICogQG1peGluXG4gKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsb1xuICogQG5hbWUgR2FtZXBhZFxuICogQGRlc2NyaXB0aW9uIFRoaXMgbW9kdWxlIHByb3ZpZGVzIHRoZSBnYW1lcGFkIGZ1bmN0aW9uYWxpdHkgZm9yIHRoZSBHZW9mbG8gYXBwbGljYXRpb24uIEl0IGFsbG93cyB1c2VycyB0byBpbnRlcmFjdCB3aXRoIHRoZSBtYXAgdXNpbmcgYSBnYW1lcGFkIGNvbnRyb2xsZXIuXG4gKiBAcGFyYW0ge09iamVjdH0gZ2FtZXBhZCAtIFRoZSBnYW1lcGFkIG9iamVjdCB0byBiZSBpbml0aWFsaXplZC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIGdhbWVwYWQgaW5pdGlhbGl6YXRpb24uIENvbWVzIGZyb20gZ2VvRmxvLm9wdGlvbnMuZ2FtZXBhZC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBjdXJyZW50IG9iamVjdCBpbnN0YW5jZS5cbiAqL1xuY29uc3QgR2FtZXBhZCA9IGZ1bmN0aW9uIChnYW1lcGFkKSB7XG4gICAgY29uc3QgZ2VvZmxvID0gdGhpcy5nZW9mbG87XG5cbiAgICBpZiAoIXN1cHBvcnRlZCgpKSB0aHJvdyBuZXcgRXJyb3IoJ0dhbWVwYWRzIGFyZSBub3Qgc3VwcG9ydGVkIG9uIHlvdXIgYnJvd3NlciEnKTtcbiAgICBcbiAgICBjb25zdCBjb250cm9sID0gdGhpcztcblxuICAgIHRoaXMub3B0aW9ucyA9IGdlb2Zsby5vcHRpb25zLmdhbWVwYWQ7XG5cbiAgICBjb25zdCBsYXlvdXQgPSB7XG4gICAgICAgIFwic2VsZWN0XCI6ICdTZWxlY3QnLFxuICAgICAgICBcInN0YXJ0XCI6ICdTdGFydCcsXG4gICAgICAgIFwicG93ZXJcIjogJ1Bvd2VyJyxcbiAgICAgICAgXCJidXR0b24wXCI6ICdCJyxcbiAgICAgICAgXCJidXR0b24xXCI6ICdBJyxcbiAgICAgICAgXCJidXR0b24yXCI6ICdZJyxcbiAgICAgICAgXCJidXR0b24zXCI6ICdYJyxcbiAgICAgICAgXCJidXR0b240XCI6ICdCdW1wTGVmdCcsXG4gICAgICAgIFwiYnV0dG9uNVwiOiAnQnVtcFJpZ2h0JyxcbiAgICAgICAgXCJidXR0b242XCI6ICdUcmlnTGVmdCcsXG4gICAgICAgIFwiYnV0dG9uN1wiOiAnVHJpZ1JpZ2h0JyxcbiAgICAgICAgXCJidXR0b244XCI6ICdTZWxlY3QnLFxuICAgICAgICBcImJ1dHRvbjlcIjogJ1N0YXJ0JyxcbiAgICAgICAgXCJidXR0b24xMFwiOiAnSm95TGVmdENsaWNrJyxcbiAgICAgICAgXCJidXR0b24xMVwiOiAnSm95UmlnaHRDbGljaycsXG4gICAgICAgIFwiYnV0dG9uMTJcIjogJ0RwYWRVcCcsXG4gICAgICAgIFwiYnV0dG9uMTNcIjogJ0RwYWREb3duJyxcbiAgICAgICAgXCJidXR0b24xNFwiOiAnRHBhZExlZnQnLFxuICAgICAgICBcImJ1dHRvbjE1XCI6ICdEcGFkUmlnaHQnLFxuICAgICAgICBcImJ1dHRvbjE2XCI6ICdQb3dlcicsXG4gICAgICAgIFwiYnV0dG9uMTdcIjogJ01pc2MnLFxuICAgICAgICBcInVwMFwiOiAnSm95TGVmdFVwJyxcbiAgICAgICAgXCJkb3duMFwiOiAnSm95TGVmdERvd24nLFxuICAgICAgICBcInJpZ2h0MFwiOiAnSm95TGVmdFJpZ2h0JyxcbiAgICAgICAgXCJsZWZ0MFwiOiAnSm95TGVmdExlZnQnLFxuICAgICAgICBcInVwMVwiOiAnSm95UmlnaHRVcCcsXG4gICAgICAgIFwiZG93bjFcIjogJ0pveVJpZ2h0RG93bicsXG4gICAgICAgIFwicmlnaHQxXCI6ICdKb3lSaWdodFJpZ2h0JyxcbiAgICAgICAgXCJsZWZ0MVwiOiAnSm95UmlnaHRMZWZ0JyxcbiAgICAgICAgXCJsMVwiOiAnQnVtcExlZnQnLFxuICAgICAgICBcInIxXCI6ICdCdW1wUmlnaHQnLFxuICAgICAgICBcImwyXCI6ICdUcmlnTGVmdCcsXG4gICAgICAgIFwicjJcIjogJ1RyaWdSaWdodCdcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGNsYW1wKHgsIHkpIHtcbiAgICAgICAgbGV0IG0gPSBNYXRoLnNxcnQoeCp4ICsgeSp5KTsgLy8gTWFnbml0dWRlIChsZW5ndGgpIG9mIHZlY3RvclxuXG4gICAgICAgIC8vIElmIHRoZSBsZW5ndGggZ3JlYXRlciB0aGFuIDEsIG5vcm1hbGl6ZSBpdCAoc2V0IGl0IHRvIDEpXG4gICAgICAgIGlmIChtID4gMSkge1xuICAgICAgICAgICAgeCAvPSBtO1xuICAgICAgICAgICAgeSAvPSBtO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFt4LCB5XTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWFkem9uZSh4LCB5LCBkZWFkem9uZT0wLjIpIHtcbiAgICAgICAgbGV0IG0gPSBNYXRoLnNxcnQoeCp4ICsgeSp5KTtcblxuICAgICAgICBpZiAobSA8IGRlYWR6b25lKVxuICAgICAgICAgICAgcmV0dXJuIFswLCAwXTtcblxuICAgICAgICBsZXQgb3ZlciA9IG0gLSBkZWFkem9uZTsgIC8vIDAgLT4gMSAtIERFQURaT05FXG4gICAgICAgIGxldCBub3ZlciA9IG92ZXIgLyAoMSAtIGRlYWR6b25lKTsgIC8vIDAgLT4gMVxuXG4gICAgICAgIGxldCBueCA9IHggLyBtO1xuICAgICAgICBsZXQgbnkgPSB5IC8gbTtcblxuICAgICAgICByZXR1cm4gW254ICogbm92ZXIsIG55ICogbm92ZXJdO1xuICAgICAgICBcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXF1ZXN0KCkge1xuICAgICAgICBjb250cm9sLnJlZnJlc2goKTtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlcXVlc3QpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN1cHBvcnRlZCgpIHtcbiAgICAgICAgcmV0dXJuICh3aW5kb3cubmF2aWdhdG9yLmdldEdhbWVwYWRzICYmIHR5cGVvZiB3aW5kb3cubmF2aWdhdG9yLmdldEdhbWVwYWRzID09PSAnZnVuY3Rpb24nKSB8fFxuICAgICAgICAgICAgKHdpbmRvdy5uYXZpZ2F0b3IuZ2V0R2FtZXBhZHMgJiYgdHlwZW9mIHdpbmRvdy5uYXZpZ2F0b3Iud2Via2l0R2V0R2FtZXBhZHMgPT09ICdmdW5jdGlvbicpIHx8XG4gICAgICAgICAgICBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBxcyhzLCBwKSB7XG4gICAgICAgIGlmIChwKSB7XG4gICAgICAgICAgICByZXR1cm4gcC5xdWVyeVNlbGVjdG9yKHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uKGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIGNvbnRyb2wuYXNzb2NpYXRlRXZlbnQoZXZlbnROYW1lLCBjYWxsYmFjaywgJ2FjdGlvbicpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFmdGVyKGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIGNvbnRyb2wuYXNzb2NpYXRlRXZlbnQoZXZlbnROYW1lLCBjYWxsYmFjaywgJ2FmdGVyJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYmVmb3JlKGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIGNvbnRyb2wuYXNzb2NpYXRlRXZlbnQoZXZlbnROYW1lLCBjYWxsYmFjaywgJ2JlZm9yZScpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXJzKF90aGlzLCBnYW1lcGFkKSB7XG4gICAgICAgIGlmICghZ2FtZXBhZCB8fCAhbGF5b3V0KSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobGF5b3V0KS5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IGVudHJ5WzBdO1xuICAgICAgICAgICAgdmFyIHZhbCA9IGVudHJ5WzFdO1xuXG4gICAgICAgICAgICBiZWZvcmUoa2V5LCBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIF90aGlzLm9uRXZlbnQoJ3ByZXNzJywga2V5LCB2YWwsIHZhbHVlKTsgfSk7XG4gICAgICAgICAgICBvbihrZXksIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gX3RoaXMub25FdmVudCgnaG9sZCcsIGtleSwgdmFsLCB2YWx1ZSk7IH0pO1xuICAgICAgICAgICAgYWZ0ZXIoa2V5LCBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIF90aGlzLm9uRXZlbnQoJ3JlbGVhc2UnLCBrZXksIHZhbCwgdmFsdWUpOyB9KTtcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWVwQXNzaWduKHRhcmdldCwgc291cmNlLCB7aXNNdXRhdGluZ09rID0gZmFsc2UsIGlzU3RyaWN0bHlTYWZlID0gZmFsc2V9ID0ge30pIHtcbiAgICAgICAgdGFyZ2V0ID0gaXNNdXRhdGluZ09rID8gdGFyZ2V0IDogY2xvbmUodGFyZ2V0LCBpc1N0cmljdGx5U2FmZSk7XG5cbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKHNvdXJjZSkpIHtcbiAgICAgICAgICAgIGlmICh2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gYG9iamVjdGApIHtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0W2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IGRlZXBBc3NpZ24odGFyZ2V0W2tleV0sIHZhbCwge2lzTXV0YXRpbmdPazogdHJ1ZSwgaXNTdHJpY3RseVNhZmV9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjbG9uZShvYmosIGlzU3RyaWN0bHlTYWZlID0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSk7XG4gICAgICAgICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChpc1N0cmljdGx5U2FmZSkgeyB0aHJvdyBuZXcgRXJyb3IoKSB9XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBVbnNhZmUgY2xvbmUgb2Ygb2JqZWN0YCwgb2JqKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gey4uLm9ian07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZUludGVybWVkaWF0ZVBvaW50KHBvaW50MSwgcG9pbnQyLCBwZXJjKSB7XG4gICAgICAgIHZhciBsYXQxID0gZGVncmVlc1RvUmFkaWFucyhwb2ludDFbMV0pO1xuICAgICAgICB2YXIgbG5nMSA9IGRlZ3JlZXNUb1JhZGlhbnMocG9pbnQxWzBdKTtcbiAgICAgICAgdmFyIGxhdDIgPSBkZWdyZWVzVG9SYWRpYW5zKHBvaW50MlsxXSk7XG4gICAgICAgIHZhciBsbmcyID0gZGVncmVlc1RvUmFkaWFucyhwb2ludDJbMF0pO1xuXG4gICAgICAgIHZhciBkZWx0YUxhdCA9IGxhdDIgLSBsYXQxO1xuICAgICAgICB2YXIgZGVsdGFMbmcgPSBsbmcyIC0gbG5nMTtcbiAgICAgICAgXG4gICAgICAgIHZhciBjYWxjQSA9IE1hdGguc2luKGRlbHRhTGF0IC8gMikgKiBNYXRoLnNpbihkZWx0YUxhdCAvIDIpICsgTWF0aC5jb3MobGF0MSkgKiBNYXRoLmNvcyhsYXQyKSAqIE1hdGguc2luKGRlbHRhTG5nIC8gMikgKiBNYXRoLnNpbihkZWx0YUxuZyAvIDIpO1xuICAgICAgICB2YXIgY2FsY0IgPSAyICogTWF0aC5hdGFuMihNYXRoLnNxcnQoY2FsY0EpLCBNYXRoLnNxcnQoMSAtIGNhbGNBKSk7XG4gICAgICAgIFxuICAgICAgICB2YXIgQSA9IE1hdGguc2luKCgxIC0gcGVyYykgKiBjYWxjQikgLyBNYXRoLnNpbihjYWxjQik7XG4gICAgICAgIHZhciBCID0gTWF0aC5zaW4ocGVyYyAqIGNhbGNCKSAvIE1hdGguc2luKGNhbGNCKTtcbiAgICAgICAgXG4gICAgICAgIHZhciB4ID0gQSAqIE1hdGguY29zKGxhdDEpICogTWF0aC5jb3MobG5nMSkgKyBCICogTWF0aC5jb3MobGF0MikgKiBNYXRoLmNvcyhsbmcyKTtcbiAgICAgICAgdmFyIHkgPSBBICogTWF0aC5jb3MobGF0MSkgKiBNYXRoLnNpbihsbmcxKSArIEIgKiBNYXRoLmNvcyhsYXQyKSAqIE1hdGguc2luKGxuZzIpO1xuICAgICAgICB2YXIgeiA9IEEgKiBNYXRoLnNpbihsYXQxKSArIEIgKiBNYXRoLnNpbihsYXQyKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBsYXQzID0gTWF0aC5hdGFuMih6LCBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSkpO1xuICAgICAgICB2YXIgbG5nMyA9IE1hdGguYXRhbjIoeSwgeCk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gW3JhZGlhbnNUb0RlZ3JlZXMobG5nMyksIHJhZGlhbnNUb0RlZ3JlZXMobGF0MyldXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9pbnRBdFBlcmNlbnQocDAsIHAxLCBwZXJjZW50KSB7XG4gICAgICAgIHZhciB4O1xuICAgICAgICBpZiAocDAueCAhPT0gcDEueClcbiAgICAgICAgICAgIHggPSBwMC54ICsgcGVyY2VudCAqIChwMS54IC0gcDAueCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHggPSBwMC54O1xuICAgIFxuICAgICAgICB2YXIgeTtcbiAgICAgICAgaWYgKHAwLnkgIT09IHAxLnkpXG4gICAgICAgICAgICB5ID0gcDAueSArIHBlcmNlbnQgKiAocDEueSAtIHAwLnkpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB5ID0gcDAueTtcbiAgICBcbiAgICAgICAgdmFyIHAgPSB7XG4gICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgeTogeVxuICAgICAgICB9O1xuICAgIFxuICAgICAgICByZXR1cm4gcDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWdyZWVzVG9SYWRpYW5zKGRlZ3JlZXMpIHtcbiAgICAgICAgcmV0dXJuIGRlZ3JlZXMgKiAoTWF0aC5QSSAvIDE4MCk7XG4gICAgfVxuICAgICAgICBcbiAgICBmdW5jdGlvbiByYWRpYW5zVG9EZWdyZWVzKHJhZGlhbnMpIHtcbiAgICAgICAgcmV0dXJuIHJhZGlhbnMgKiAoMTgwIC8gTWF0aC5QSSApO1xuICAgIH1cblxuICAgIFxuXG5cblxuXG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkdhbWVwYWRcblx0ICogQG5hbWUgaW5pdFxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBpbml0aWFsaXplcyB0aGUgZ2FtZXBhZCB3aXRoIHRoZSBzcGVjaWZpZWQgb3B0aW9ucy4gSXQgZmlyZXMgYW4gZXZlbnQgdG8gbm90aWZ5IHRoZSBnYW1lcGFkIGluaXRpYWxpemF0aW9uLCBzZXRzIHRoZSBnYW1lcGFkLCBhZGRzIGV2ZW50IGxpc3RlbmVycywgYW5kIHJlcXVlc3RzIGFuaW1hdGlvbiBmcmFtZS5cblx0ICogQHBhcmFtIHtPYmplY3R9IGdhbWVwYWQgLSBUaGUgZ2FtZXBhZCBvYmplY3QgdG8gYmUgaW5pdGlhbGl6ZWQuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIGdhbWVwYWQgaW5pdGlhbGl6YXRpb24uXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBjdXJyZW50IG9iamVjdCBpbnN0YW5jZS5cblx0ICovXG4gICAgdGhpcy5pbml0ID0gZnVuY3Rpb24gKGdhbWVwYWQsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFnYW1lcGFkKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmVuYWJsZSkgcmV0dXJuIGNvbnNvbGUuZXJyb3IoJ0dhbWVwYWQgb3B0aW9uIGlzIG5vdCBlbmFibGVkIScpXG4gICAgICAgIGdlb2Zsby5tYXAuZmlyZShnZW9mbG8uaWQgKyAnOmdhbWVwYWQuaW5pdCcsIHsgZGV0YWlsOiB7IGdhbWVwYWQ6IGdhbWVwYWQgfSB9KTtcbiAgICAgICAgdGhpcy5zZXRHYW1lcGFkKGdhbWVwYWQpO1xuICAgICAgICBhZGRFdmVudExpc3RlbmVycyh0aGlzLCB0aGlzLmdhbWVwYWQpO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVxdWVzdCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uR2FtZXBhZFxuXHQgKiBAbmFtZSByZWZyZXNoXG5cdCAqIEBkZXNjcmlwdGlvbiBSZWZyZXNoZXMgdGhlIGdhbWVwYWQgc3RhdGUgYnkgY2hlY2tpbmcgYnV0dG9uIHByZXNzZXMsIGF4ZXMgdmFsdWVzLCBhbmQgdHJpZ2dlcnMuXG5cdCAqIEBwYXJhbXMge3ZvaWR9XG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cbiAgICB0aGlzLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBnYW1lcGFkcyA9IHdpbmRvdy5uYXZpZ2F0b3IuZ2V0R2FtZXBhZHMoKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdhbWVwYWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgZ2FtZXBhZCA9IGdhbWVwYWRzW3RoaXMuZ2FtZXBhZC5pZF07XG4gICAgICAgICAgICB2YXIgajtcblxuICAgICAgICAgICAgaWYgKCFnYW1lcGFkIHx8ICFnYW1lcGFkLmNvbm5lY3RlZCkgeyBjb250aW51ZTsgfVxuXG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgZ2FtZXBhZC5idXR0b25zLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJ1dHRvbiA9IGdhbWVwYWQuYnV0dG9uc1tqXTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBidXR0b24udmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSB0aGlzLmdhbWVwYWQubGF5b3V0W2BidXR0b24ke2p9YF1cblxuICAgICAgICAgICAgICAgIGlmIChidXR0b24ucHJlc3NlZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZ2FtZXBhZC5wcmVzc2VkW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVwYWQucHJlc3NlZFtuYW1lXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVwYWQuYnV0dG9uQWN0aW9uc1tqXS5iZWZvcmUgPyB0aGlzLmdhbWVwYWQuYnV0dG9uQWN0aW9uc1tqXS5iZWZvcmUodmFsdWUpIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVwYWQuYnV0dG9uQWN0aW9uc1tqXS5hY3Rpb24gPyB0aGlzLmdhbWVwYWQuYnV0dG9uQWN0aW9uc1tqXS5hY3Rpb24odmFsdWUpIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmdhbWVwYWQucHJlc3NlZFtuYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5nYW1lcGFkLnByZXNzZWRbbmFtZV07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZXBhZC5idXR0b25BY3Rpb25zW2pdLmFmdGVyID8gdGhpcy5nYW1lcGFkLmJ1dHRvbkFjdGlvbnNbal0uYWZ0ZXIodmFsdWUpIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgYXhlc0JveENvdW50ID0gKChnYW1lcGFkLmF4ZXMubGVuZ3RoICsgMSkgLyAyKXwwO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGF4ZXNCb3hDb3VudDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlWCwgdmFsdWVZLCB2YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdF9vZGRfYXhpcyA9IGogPT0gYXhlc0JveENvdW50IC0gMSAmJiBnYW1lcGFkLmF4ZXMubGVuZ3RoICUgMiA9PSAxO1xuXG4gICAgICAgICAgICAgICAgdmFsdWVYID0gZ2FtZXBhZC5heGVzW2oqMl07XG4gICAgICAgICAgICAgICAgdmFsdWVZID0gbGFzdF9vZGRfYXhpcyA/IDAgOiBnYW1lcGFkLmF4ZXNbaioyICsgMV07XG4gICAgICAgICAgICAgICAgW3ZhbHVlWCwgdmFsdWVZXSA9IGRlYWR6b25lKHZhbHVlWCwgdmFsdWVZKTsgICAgXG4gICAgICAgICAgICAgICAgW3ZhbHVlWCwgdmFsdWVZXSA9IGNsYW1wKHZhbHVlWCwgdmFsdWVZKTtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IFtOdW1iZXIodmFsdWVYLnRvRml4ZWQoMikpLCBOdW1iZXIodmFsdWVZLnRvRml4ZWQoMikpXTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbCA9IGdhbWVwYWQuYXhlc1tqICsgYXhlc0JveENvdW50XS50b0ZpeGVkKDQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4ZSA9IE1hdGguZmxvb3IoaiAvIDIpO1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZXBhZC5heGVWYWx1ZXNbYXhlXVtqICUgMl0gPSB2YWw7XG5cbiAgICAgICAgICAgICAgICB2YXIgcmlnaHRUcmlnZ2VyID0gdmFsdWVbMF0gPj0gdGhpcy5vcHRpb25zLmpveXN0aWNrLm1pbjtcbiAgICAgICAgICAgICAgICB2YXIgbGVmdFRyaWdnZXIgPSB2YWx1ZVswXSA8PSAtdGhpcy5vcHRpb25zLmpveXN0aWNrLm1pbjtcbiAgICAgICAgICAgICAgICB2YXIgdXBUcmlnZ2VyID0gdmFsdWVbMV0gPD0gLXRoaXMub3B0aW9ucy5qb3lzdGljay5taW47XG4gICAgICAgICAgICAgICAgdmFyIGRvd25UcmlnZ2VyID0gdmFsdWVbMV0gPj0gdGhpcy5vcHRpb25zLmpveXN0aWNrLm1pbjtcblxuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcigncmlnaHQnLCByaWdodFRyaWdnZXIsIGosIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2xlZnQnLCBsZWZ0VHJpZ2dlciwgaiwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignZG93bicsIGRvd25UcmlnZ2VyLCBqLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCd1cCcsIHVwVHJpZ2dlciwgaiwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5HYW1lcGFkXG5cdCAqIEBuYW1lIHRyaWdnZXJcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gaGFuZGxlcyB0cmlnZ2VyaW5nIGFjdGlvbnMgYmFzZWQgb24gZ2FtZXBhZCBpbnB1dC4gSXQgY2hlY2tzIGlmIGEgc3BlY2lmaWMgYnV0dG9uIG9yIGF4aXMgaXMgdHJpZ2dlcmVkIGFuZCBwZXJmb3JtcyBjb3JyZXNwb25kaW5nIGFjdGlvbnMuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBnYW1lcGFkIGlucHV0LlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IHRyaWdnZXJlZCAtIEluZGljYXRlcyBpZiB0aGUgaW5wdXQgaXMgdHJpZ2dlcmVkLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggb2YgdGhlIGlucHV0LlxuXHQgKiBAcGFyYW0ge251bWJlcltdfSB2YWx1ZSAtIFRoZSB2YWx1ZSBvZiB0aGUgaW5wdXQuXG5cdCAqL1xuICAgIHRoaXMudHJpZ2dlciA9IGZ1bmN0aW9uIChpZCwgdHJpZ2dlcmVkLCBpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSB0aGlzLmdhbWVwYWQuYXhlc0FjdGlvbnM7XG4gICAgICAgIHZhciBuYW1lID0gdGhpcy5nYW1lcGFkLmxheW91dFtgJHtpZH0ke2luZGV4fWBdO1xuICAgICAgICB2YXIgcHJlc3NlZCA9IHRoaXMuZ2FtZXBhZC5wcmVzc2VkXG5cbiAgICAgICAgaWYgKHRyaWdnZXJlZCkge1xuICAgICAgICAgICAgaWYgKCFwcmVzc2VkW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgcHJlc3NlZFtuYW1lXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYWN0aW9uc1tpbmRleF1baWRdLmJlZm9yZSA/IGFjdGlvbnNbaW5kZXhdW2lkXS5iZWZvcmUodmFsdWUpIDogZmFsc2VcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFsdWUgPSBbdGhpcy5vcHRpb25zLmpveXN0aWNrLm1heCAqIHZhbHVlWzBdLCB0aGlzLm9wdGlvbnMuam95c3RpY2subWF4ICogdmFsdWVbMV1dXG4gICAgICAgICAgICBhY3Rpb25zW2luZGV4XVtpZF0uYWN0aW9uID8gYWN0aW9uc1tpbmRleF1baWRdLmFjdGlvbih2YWx1ZSkgOiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChwcmVzc2VkW25hbWVdKSB7XG4gICAgICAgICAgICBkZWxldGUgcHJlc3NlZFtuYW1lXTtcblxuICAgICAgICAgICAgaWYgKCFwcmVzc2VkWydKb3lMZWZ0VXAnXSAmJiAhcHJlc3NlZFsnSm95TGVmdERvd24nXSAmJiAhcHJlc3NlZFsnSm95TGVmdExlZnQnXSAmJiAhcHJlc3NlZFsnSm95TGVmdFJpZ2h0J10pIHtcbiAgICAgICAgICAgICAgICBhY3Rpb25zWzBdW2lkXS5hZnRlciA/IGFjdGlvbnNbMF1baWRdLmFmdGVyKHZhbHVlKSA6IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXByZXNzZWRbJ0pveVJpZ2h0VXAnXSAmJiAhcHJlc3NlZFsnSm95UmlnaHREb3duJ10gJiYgIXByZXNzZWRbJ0pveVJpZ2h0TGVmdCddICYmICFwcmVzc2VkWydKb3lSaWdodFJpZ2h0J10pIHtcbiAgICAgICAgICAgICAgICBhY3Rpb25zWzFdW2lkXS5hZnRlciA/IGFjdGlvbnNbMV1baWRdLmFmdGVyKHZhbHVlKSA6IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkdhbWVwYWRcblx0ICogQG5hbWUgcmVtb3ZlXG5cdCAqIEBkZXNjcmlwdGlvbiBEaXNjb25uZWN0cyBhbmQgcmVtb3ZlcyB0aGUgZ2FtZXBhZCBvYmplY3QuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBnYW1lcGFkIC0gVGhlIGdhbWVwYWQgb2JqZWN0IHRvIGJlIGRpc2Nvbm5lY3RlZCBhbmQgcmVtb3ZlZC5cblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuICAgIHRoaXMucmVtb3ZlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZ2FtZXBhZC5kaXNjb25uZWN0ID8gdGhpcy5nYW1lcGFkLmRpc2Nvbm5lY3QoKSA6IGZhbHNlO1xuICAgICAgICB0aGlzLmdhbWVwYWQucmVtb3ZlID8gdGhpcy5nYW1lcGFkLnJlbW92ZSgpIDogZmFsc2U7XG4gICAgICAgIHRoaXMuZ2FtZXBhZCA9IG51bGw7XG4gICAgfVxuXG5cblxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5HYW1lcGFkXG5cdCAqIEBuYW1lIHNldE1hcFxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiB1cGRhdGVzIHRoZSBtYXAgcHJvcGVydGllcyB1c2luZyB0aGUgaGFuZGxlTW92ZSBmdW5jdGlvbiBhbmQgc2V0cyB0aGUgY2VudGVyLCB6b29tLCBwaXRjaCwgYW5kIGJlYXJpbmcgYWNjb3JkaW5nbHkuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZU1vdmUgLSBUaGUgZnVuY3Rpb24gdXNlZCB0byBoYW5kbGUgbWFwIG1vdmVtZW50LlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgdXBkYXRlZCBtYXAgb2JqZWN0IHdpdGggbmV3IHByb3BlcnRpZXMuXG5cdCAqL1xuICAgIHRoaXMuc2V0TWFwID0gZnVuY3Rpb24gKGhhbmRsZU1vdmUpIHtcbiAgICAgICAgY29uc3QgbWFwID0gZ2VvZmxvLm1hcDtcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gbWFwLnRyYW5zZm9ybTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMubWFwID0gdGhpcy5tYXAgfHwge1xuICAgICAgICAgICAgY2VudGVyOiBtYXAuZ2V0Q2VudGVyKCksXG4gICAgICAgICAgICB6b29tOiBtYXAuZ2V0Wm9vbSgpLFxuICAgICAgICAgICAgcGl0Y2g6IG1hcC5nZXRQaXRjaCgpLFxuICAgICAgICAgICAgYmVhcmluZzogbWFwLmdldEJlYXJpbmcoKVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgY2VudGVyID0gdGhpcy5tYXAuY2VudGVyLnggPyB0aGlzLm1hcC5jZW50ZXIgOiB0aGlzLm1hcC5jZW50ZXIubGF0ID8gdGhpcy5tYXAuY2VudGVyIDogbmV3IG1hcGJveGdsLkxuZ0xhdCh0aGlzLm1hcC5jZW50ZXJbMF0sIHRoaXMubWFwLmNlbnRlclsxXSlcbiAgICAgICAgY2VudGVyID0gY2VudGVyLnggPyB0cmFuc2Zvcm0ucG9pbnRMb2NhdGlvbihjZW50ZXIpIDogY2VudGVyO1xuXG4gICAgICAgIHRyYW5zZm9ybS5jZW50ZXIgPSBjZW50ZXI7XG4gICAgICAgIHRyYW5zZm9ybS5iZWFyaW5nID0gdGhpcy5tYXAuYmVhcmluZztcbiAgICAgICAgdHJhbnNmb3JtLnpvb20gPSB0aGlzLm1hcC56b29tO1xuICAgICAgICB0cmFuc2Zvcm0ucGl0Y2ggPSB0aGlzLm1hcC5waXRjaDtcblxuICAgICAgICBtYXAuX3VwZGF0ZSgpO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY3Jvc3NoYWlycyAmJiBnZW9mbG8uY2VudGVyTWFya2VyKSB0aGlzLnNldE1hcmtlcigpO1xuICAgICAgICBpZiAoaGFuZGxlTW92ZSkgZ2VvZmxvLmN1cnJlbnRNb2RlLmhhbmRsZU1vdmUoeyBsbmdMYXQ6ICF0aGlzLm9wdGlvbnMuY2FtZXJhLmZyZWUgPyB0aGlzLm1hcC5jZW50ZXIgOiBtYXAuZ2V0Q2VudGVyKCksIGdhbWVwYWQ6IHRoaXMgfSlcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uR2FtZXBhZFxuXHQgKiBAbmFtZSBzZXRDb250YWluZXJcblx0ICogQGRlc2NyaXB0aW9uIENyZWF0ZXMgYSBuZXcgSFRNTCBlbGVtZW50IHdpdGggdGhlIHNwZWNpZmllZCB0YWcgbmFtZSBhbmQgY2xhc3MgbmFtZSwgYXBwZW5kcyBpdCB0byBhIGNvbnRhaW5lciBpZiBwcm92aWRlZCwgYW5kIHNldHMgaXQgYXMgdGhlIGNvbnRhaW5lciBwcm9wZXJ0eSBvZiB0aGUgY3VycmVudCBvYmplY3QuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lIC0gVGhlIHRhZyBuYW1lIG9mIHRoZSBIVE1MIGVsZW1lbnQgdG8gY3JlYXRlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIC0gVGhlIGNsYXNzIG5hbWUgdG8gYXNzaWduIHRvIHRoZSBjcmVhdGVkIGVsZW1lbnQgKG9wdGlvbmFsKS5cblx0ICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29udGFpbmVyIC0gVGhlIGNvbnRhaW5lciBlbGVtZW50IHRvIGFwcGVuZCB0aGUgY3JlYXRlZCBlbGVtZW50IHRvIChvcHRpb25hbCkuXG5cdCAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH0gVGhlIGNyZWF0ZWQgSFRNTCBlbGVtZW50LlxuXHQgKi9cblx0XG4gICAgdGhpcy5zZXRDb250YWluZXIgPSBmdW5jdGlvbiAodGFnTmFtZSwgY2xhc3NOYW1lLCBjb250YWluZXIpIHtcbiAgICAgICAgY29uc3QgZWwgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcbiAgICAgICAgaWYgKGNsYXNzTmFtZSAhPT0gdW5kZWZpbmVkKSBlbC5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gICAgICAgIGlmIChjb250YWluZXIpIGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbCk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gZWw7XG4gICAgICAgIHJldHVybiBlbDtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkdhbWVwYWQgXG5cdCAqIEBuYW1lIHNldExvY2F0aW9uXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHVwZGF0ZXMgdGhlIHZpc2liaWxpdHksIGxlZnQsIGFuZCB0b3AgcHJvcGVydGllcyBvZiB0aGUgY29udGFpbmVyIGVsZW1lbnQgYmFzZWQgb24gdGhlIHByb3ZpZGVkIHZhbHVlLlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHZhbHVlIC0gQW4gYXJyYXkgY29udGFpbmluZyB0aGUgeCBhbmQgeSBjb29yZGluYXRlcyBmb3IgdGhlIG5ldyBsb2NhdGlvbi5cblx0ICogQHJldHVybnMge0RPTVJlY3R9IFRoZSBib3VuZGluZyByZWN0YW5nbGUgb2YgdGhlIGNvbnRhaW5lciBlbGVtZW50IGFmdGVyIHRoZSBsb2NhdGlvbiBpcyBzZXQuXG5cdCAqL1xuICAgIHRoaXMuc2V0TG9jYXRpb24gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9IHRoaXMub3B0aW9ucy5kZWJ1ZyA/ICd2aXNpYmxlJyA6ICdoaWRkZW4nO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gKHZhbHVlWzBdICsgMSkgLyAyICogMTAwICsgJyUnO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS50b3AgPSAodmFsdWVbMV0gKyAxKSAvIDIgKiAxMDAgKyAnJSc7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkdhbWVwYWRcblx0ICogQG5hbWUgc2V0TWFya2VyXG5cdCAqIEBkZXNjcmlwdGlvbiBTZXRzIGEgbWFya2VyIG9uIHRoZSBtYXAgdXNpbmcgdGhlIGNlbnRlciBjb29yZGluYXRlcyBwcm92aWRlZCBieSB0aGUgY29udGV4dC5cblx0ICogQHJldHVybiB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXJrZXIgb2JqZWN0IGNyZWF0ZWQgb24gdGhlIG1hcC5cblx0ICovXG4gICAgdGhpcy5zZXRNYXJrZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBnZW9mbG8uc2V0Q2VudGVyTWFya2VyKHsgZ2FtZXBhZDogdHJ1ZSB9KTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkdhbWVwYWRcblx0ICogQG5hbWUgc2V0R2FtZXBhZFxuXHQgKiBAZGVzY3JpcHRpb24gSW5pdGlhbGl6ZXMgYSBnYW1lcGFkIG9iamVjdCB3aXRoIHNwZWNpZmljIHByb3BlcnRpZXMgYmFzZWQgb24gdGhlIHByb3ZpZGVkIGdhbWVwYWQgaW5wdXQuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBnYW1lcGFkIC0gVGhlIGdhbWVwYWQgb2JqZWN0IHRvIGJlIHByb2Nlc3NlZC5cblx0ICogQHJldHVybnMge09iamVjdH0gLSBUaGUgcHJvY2Vzc2VkIGdhbWVwYWQgb2JqZWN0IHdpdGggZGVmaW5lZCBwcm9wZXJ0aWVzLlxuXHQgKi9cbiAgICB0aGlzLnNldEdhbWVwYWQgPSBmdW5jdGlvbiAoZ2FtZXBhZCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHR5cGU6IGdhbWVwYWQuaWQsXG4gICAgICAgICAgICBjb25uZWN0ZWQ6IGdhbWVwYWQuY29ubmVjdGVkLFxuICAgICAgICAgICAgaWQ6IGdhbWVwYWQuaW5kZXgsXG4gICAgICAgICAgICBidXR0b25zOiBnYW1lcGFkLmJ1dHRvbnMubGVuZ3RoLFxuICAgICAgICAgICAgbGF5b3V0OiBsYXlvdXQsXG4gICAgICAgICAgICBheGVzOiBNYXRoLmZsb29yKGdhbWVwYWQuYXhlcy5sZW5ndGggLyAyKSxcbiAgICAgICAgICAgIGF4ZVZhbHVlczogW10sXG4gICAgICAgICAgICBoYXB0aWNBY3R1YXRvcjogbnVsbCxcbiAgICAgICAgICAgIHZpYnJhdGlvbk1vZGU6IC0xLFxuICAgICAgICAgICAgdmlicmF0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgIG1hcHBpbmc6IGdhbWVwYWQubWFwcGluZyxcbiAgICAgICAgICAgIGJ1dHRvbkFjdGlvbnM6IHt9LFxuICAgICAgICAgICAgYXhlc0FjdGlvbnM6IHt9LFxuICAgICAgICAgICAgcHJlc3NlZDoge31cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgb3B0aW9ucy5idXR0b25zOyB4KyspIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYnV0dG9uQWN0aW9uc1t4XSA9ICgpID0+ICh7IGFjdGlvbjogKCkgPT4geyB9LCBhZnRlcjogKCkgPT4geyB9LCBiZWZvcmU6ICgpID0+IHsgfSB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgb3B0aW9ucy5heGVzOyB4KyspIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYXhlc0FjdGlvbnNbeF0gPSB7XG4gICAgICAgICAgICAgICAgZG93bjogKCkgPT4gKHsgYWN0aW9uOiAoKSA9PiB7IH0sIGFmdGVyOiAoKSA9PiB7IH0sIGJlZm9yZTogKCkgPT4geyB9IH0pLFxuICAgICAgICAgICAgICAgIGxlZnQ6ICgpID0+ICh7IGFjdGlvbjogKCkgPT4geyB9LCBhZnRlcjogKCkgPT4geyB9LCBiZWZvcmU6ICgpID0+IHsgfSB9KSxcbiAgICAgICAgICAgICAgICByaWdodDogKCkgPT4gKHsgYWN0aW9uOiAoKSA9PiB7IH0sIGFmdGVyOiAoKSA9PiB7IH0sIGJlZm9yZTogKCkgPT4geyB9IH0pLFxuICAgICAgICAgICAgICAgIHVwOiAoKSA9PiAoeyBhY3Rpb246ICgpID0+IHsgfSwgYWZ0ZXI6ICgpID0+IHsgfSwgYmVmb3JlOiAoKSA9PiB7IH0gfSlcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIG9wdGlvbnMuYXhlVmFsdWVzW3hdID0gWzAsIDBdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdhbWVwYWQuaGFwdGljQWN0dWF0b3JzKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGdhbWVwYWQuaGFwdGljQWN0dWF0b3JzLnB1bHNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5oYXB0aWMgPSBnYW1lcGFkLmhhcHRpY0FjdHVhdG9ycztcbiAgICAgICAgICAgICAgICBvcHRpb25zLnZpYnJhdGlvbk1vZGUgPSAwO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMudmlicmF0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZ2FtZXBhZC5oYXB0aWNBY3R1YXRvcnNbMF0gJiYgdHlwZW9mIGdhbWVwYWQuaGFwdGljQWN0dWF0b3JzWzBdLnB1bHNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5oYXB0aWMgPSBnYW1lcGFkLmhhcHRpY0FjdHVhdG9yc1swXTtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnZpYnJhdGlvbk1vZGUgPSAwO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMudmlicmF0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKGdhbWVwYWQudmlicmF0aW9uQWN0dWF0b3IpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZ2FtZXBhZC52aWJyYXRpb25BY3R1YXRvci5wbGF5RWZmZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5oYXB0aWMgPSBnYW1lcGFkLnZpYnJhdGlvbkFjdHVhdG9yO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMudmlicmF0aW9uTW9kZSA9IDE7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy52aWJyYXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5nYW1lcGFkID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5oYXNKb3lzdGlja3MgPSBvcHRpb25zLmF4ZXMgPiAwICYmIE9iamVjdC52YWx1ZXModGhpcy5nYW1lcGFkLmxheW91dCkubWFwKGZ1bmN0aW9uKG0pIHsgcmV0dXJuIG0uaW5jbHVkZXMoJ0pveScpIH0pLmZpbHRlcihmdW5jdGlvbiAoYikgeyByZXR1cm4gYiB9KS5sZW5ndGggPiAwO1xuICAgICAgICByZXR1cm4gdGhpcy5nYW1lcGFkO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uR2FtZXBhZFxuXHQgKiBAbmFtZSBzZXRDZW50ZXJcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gY2FsY3VsYXRlcyB0aGUgbmV3IGNlbnRlciBvZiB0aGUgbWFwIGJhc2VkIG9uIHRoZSBpbnB1dCB2YWx1ZXMgYW5kIGdhbWVwYWQgY29udHJvbHMuIEl0IGhhbmRsZXMgYm90aCBqb3lzdGljayBhbmQgRC1wYWQgaW5wdXRzIHRvIGFkanVzdCB0aGUgbWFwIGNlbnRlciBhY2NvcmRpbmdseS5cblx0ICogQHBhcmFtIHtPYmplY3R9IHZhbHVlIC0gVGhlIHZhbHVlIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSBuZXcgY2VudGVyIG9mIHRoZSBtYXAuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gZnJlZSAtIEEgYm9vbGVhbiBmbGFnIGluZGljYXRpbmcgaWYgdGhlIG1hcCBjZW50ZXIgc2hvdWxkIGJlIHNldCBmcmVlbHkuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gZHBhZCAtIEEgYm9vbGVhbiBmbGFnIGluZGljYXRpbmcgaWYgdGhlIEQtcGFkIGNvbnRyb2xzIGFyZSB1c2VkIGZvciBzZXR0aW5nIHRoZSBtYXAgY2VudGVyLlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGFmdGVyIHNldHRpbmcgdGhlIG1hcCBjZW50ZXIuXG5cdCAqL1xuXHRcbiAgICB0aGlzLnNldENlbnRlciA9IGZ1bmN0aW9uICh2YWx1ZSwgZnJlZSwgZHBhZCkge1xuICAgICAgICB2YXIgY2VudGVyID0gZ2VvZmxvLm1hcC5nZXRDZW50ZXIoKTtcbiAgICAgICAgdmFyIHByZXNzZWQgPSB0aGlzLmdhbWVwYWQucHJlc3NlZDtcbiAgICAgICAgdmFyIHR5cGUgPSB0aGlzLmhhc0pveXN0aWNrcyA/ICdKb3knIDogJ0RwYWQnO1xuICAgICAgICB2YXIgZGlhZyA9IE9iamVjdC5rZXlzKHByZXNzZWQpLmZpbHRlcihmdW5jdGlvbihwKSB7IHJldHVybiBwLmluY2x1ZGVzKHR5cGUpIH0pLmxlbmd0aCA+IDE7XG4gICAgICAgIFxuICAgICAgICB2YXIgc3RhcnQgPSBmcmVlIHx8IGRwYWQgPyBjZW50ZXIgOiBmYWxzZTtcbiAgICAgICAgc3RhcnQgPSBnZW9mbG8uaG90RmVhdHVyZSAmJiAhc3RhcnQgPyBnZW9mbG8ubGFzdE1vdmUgfHwgY2VudGVyIDogZmFsc2U7XG4gICAgICAgIHN0YXJ0ID0gIXN0YXJ0ID8gY2VudGVyIDogc3RhcnQ7XG5cbiAgICAgICAgdmFyIGVuZDtcbiAgICBcbiAgICAgICAgaWYgKGRwYWQpIHtcbiAgICAgICAgICAgIHZhciBiZWFyaW5nID0gdGhpcy5tYXAuYmVhcmluZztcbiAgICAgICAgICAgIGJlYXJpbmcgPSBwcmVzc2VkWydVcCddID8gYmVhcmluZyA6XG4gICAgICAgICAgICBwcmVzc2VkWydEb3duJ10gPyBiZWFyaW5nICsgMTgwIDpcbiAgICAgICAgICAgIHByZXNzZWRbJ0xlZnQnXSA/IGJlYXJpbmcgLSA5MCA6XG4gICAgICAgICAgICBwcmVzc2VkWydSaWdodCddID8gYmVhcmluZyArIDkwIDpcbiAgICAgICAgICAgIGJlYXJpbmc7XG5cbiAgICAgICAgICAgIHZhciBkZXN0ID0gdHVyZi5kZXN0aW5hdGlvbih0dXJmLnBvaW50KHN0YXJ0KSwgZGlzdGFuY2UsIGJlYXJpbmcpLmdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuXG4gICAgICAgICAgICBsbmdMYXRzID0gZnJlZSA/IHsgbG5nOiBkZXN0WzFdLCBsYXQ6IGRlc3RbMF0gfSA6IGRlc3Q7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IHRoaXMuc2V0TG9jYXRpb24odmFsdWUpO1xuICAgICAgICAgICAgdmFyIGNvb3JkcyA9IGxvY2F0aW9uICYmIGxvY2F0aW9uLnggPyBbbG9jYXRpb24ueCwgbG9jYXRpb24ueV0gOiBmYWxzZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZW5kID0gZ2VvZmxvLm1hcC51bnByb2plY3QoY29vcmRzKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIHBlcmNlbnQgPSBkaWFnID8gdGhpcy5vcHRpb25zLnBhbi5zcGVlZCAvIDIgOiB0aGlzLm9wdGlvbnMucGFuLnNwZWVkO1xuICAgICAgICAgICAgdmFyIG1pZCA9IGNhbGN1bGF0ZUludGVybWVkaWF0ZVBvaW50KFtzdGFydC5sbmcsIHN0YXJ0LmxhdF0sIFtlbmQubG5nLCBlbmQubGF0XSwgcGVyY2VudClcbiAgICAgICAgICAgIG1pZCA9IGdlb2Zsby5tYXAuZ2V0UGl0Y2goKSA+IDYwID8gY2FsY3VsYXRlSW50ZXJtZWRpYXRlUG9pbnQoW3N0YXJ0LmxuZywgc3RhcnQubGF0XSwgW21pZFswXSwgbWlkWzFdXSwgMC40KSA6IG1pZDtcblxuICAgICAgICAgICAgZW5kID0gbWlkO1xuICAgICAgICAgICAgZ2VvZmxvLmxhc3RNb3ZlID0gZW5kO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGNvb3JkcyA9IGdlb2Zsby5ob3RGZWF0dXJlID8gZ2VvZmxvLmhvdEZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXMgOiBmYWxzZTtcbiAgICAgICAgICAgIGVuZCA9IGZyZWUgPyBnZW9mbG8ubWFwLmdldENlbnRlcigpIDpcbiAgICAgICAgICAgIGNvb3JkcyA/IHsgbGF0OiBjb29yZHNbY29vcmRzLmxlbmd0aC0xXVsxXSwgbG5nOiBjb29yZHNbY29vcmRzLmxlbmd0aC0xXVswXSB9IDogZ2VvZmxvLm1hcC5nZXRDZW50ZXIoKTtcbiAgICAgICAgICAgIGdlb2Zsby5sYXN0TW92ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5zZXRMb2NhdGlvbihbMCwgMF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tYXAuY2VudGVyID0gZW5kO1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRNYXAodHJ1ZSk7XG4gICAgfVxuICAgIFxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uR2FtZXBhZFxuXHQgKiBAbmFtZSBzZXRCZWFyaW5nXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHVwZGF0ZXMgdGhlIGJlYXJpbmcgb2YgdGhlIG1hcCBieSBhZGp1c3RpbmcgaXQgd2l0aCB0aGUgc3BlY2lmaWVkIHZhbHVlIGFuZCBkaXJlY3Rpb24uXG5cdCAqIEBwYXJhbSB7bnVtYmVyIHwgQXJyYXk8bnVtYmVyPn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gYWRqdXN0IHRoZSBiZWFyaW5nIGJ5LiBJZiBkcGFkIGlzIGZhbHNlLCBpdCBzaG91bGQgYmUgYW4gYXJyYXkgb2YgbnVtYmVycywgb3RoZXJ3aXNlIGEgc2luZ2xlIG51bWJlci5cblx0ICogQHBhcmFtIHtib29sZWFufSBsZWZ0IC0gSW5kaWNhdGVzIHRoZSBkaXJlY3Rpb24gb2YgYWRqdXN0bWVudC4gSWYgdHJ1ZSwgdGhlIGJlYXJpbmcgaXMgZGVjcmVhc2VkOyBvdGhlcndpc2UsIGl0IGlzIGluY3JlYXNlZC5cblx0ICogQHBhcmFtIHtib29sZWFufSBkcGFkIC0gU3BlY2lmaWVzIHdoZXRoZXIgdGhlIHZhbHVlIGlzIGNvbWluZyBmcm9tIGEgZHBhZCBpbnB1dC5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSBzZXRNYXAgZnVuY3Rpb24gYWZ0ZXIgdXBkYXRpbmcgdGhlIGJlYXJpbmcuXG5cdCAqL1xuICAgIHRoaXMuc2V0QmVhcmluZyA9IGZ1bmN0aW9uICh2YWx1ZSwgbGVmdCwgZHBhZCkge1xuICAgICAgICB2YXIgYmVhcmluZyA9IHRoaXMubWFwLmJlYXJpbmc7XG4gICAgICAgIHZhciBiZWFyaW5nTXVsdGkgPSAhZHBhZCA/IE1hdGguYWJzKHZhbHVlWzBdKSA6IHZhbHVlO1xuICAgIFxuICAgICAgICBpZiAobGVmdCkge1xuICAgICAgICAgICAgYmVhcmluZyA9IGJlYXJpbmcgLSAodGhpcy5vcHRpb25zLmJlYXJpbmcuc3BlZWQgKiBiZWFyaW5nTXVsdGkpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiZWFyaW5nID0gYmVhcmluZyArICh0aGlzLm9wdGlvbnMuYmVhcmluZy5zcGVlZCAqIGJlYXJpbmdNdWx0aSlcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubWFwLmJlYXJpbmcgPSBiZWFyaW5nO1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRNYXAoKTtcbiAgICB9XG4gICAgXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5HYW1lcGFkXG5cdCAqIEBuYW1lIHNldFBpdGNoXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGFkanVzdHMgdGhlIHBpdGNoIG9mIHRoZSBtYXAgYnkgYSBzcGVjaWZpZWQgYW1vdW50IGluIHRoZSBnaXZlbiBkaXJlY3Rpb24uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfEFycmF5PG51bWJlcj59IHZhbHVlIC0gVGhlIHZhbHVlIG9yIGFycmF5IG9mIHZhbHVlcyB0byBhZGp1c3QgdGhlIHBpdGNoIGJ5LlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IHVwIC0gQSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgcGl0Y2ggc2hvdWxkIGJlIGluY3JlYXNlZCAodHJ1ZSkgb3IgZGVjcmVhc2VkIChmYWxzZSkuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gZHBhZCAtIEEgYm9vbGVhbiBmbGFnIHRvIGRldGVybWluZSBpZiB0aGUgdmFsdWUgaXMgY29taW5nIGZyb20gYSBELXBhZCBpbnB1dC5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgbWFwIGlzIHN1Y2Nlc3NmdWxseSB1cGRhdGVkIHdpdGggdGhlIG5ldyBwaXRjaC5cblx0ICovXG4gICAgdGhpcy5zZXRQaXRjaCA9IGZ1bmN0aW9uICh2YWx1ZSwgdXAsIGRwYWQpIHtcbiAgICAgICAgdmFyIHBpdGNoID0gdGhpcy5tYXAucGl0Y2g7XG4gICAgICAgIHZhciBwaXRjaE11bHRpID0gIWRwYWQgPyBNYXRoLmFicyh2YWx1ZVsxXSkgOiB2YWx1ZTtcblxuICAgICAgICBpZiAocGl0Y2ggPCAwKSBwaXRjaCA9IDA7XG4gICAgICAgIGlmIChwaXRjaCA+IHRoaXMub3B0aW9ucy5waXRjaC5tYXgpIHBpdGNoID0gdGhpcy5vcHRpb25zLnBpdGNoLm1heDtcbiAgICBcbiAgICAgICAgaWYgKHVwKSB7XG4gICAgICAgICAgICBwaXRjaCA9IHBpdGNoICsgKHRoaXMub3B0aW9ucy5waXRjaC5zcGVlZCAqIHBpdGNoTXVsdGkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGl0Y2ggPSBwaXRjaCAtICh0aGlzLm9wdGlvbnMucGl0Y2guc3BlZWQgKiBwaXRjaE11bHRpKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5tYXAucGl0Y2ggPSBwaXRjaDtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0TWFwKCk7XG4gICAgfVxuICAgIFxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uR2FtZXBhZFxuXHQgKiBAbmFtZSBzZXRab29tXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGFkanVzdHMgdGhlIHpvb20gbGV2ZWwgb2YgYSBtYXAgYmFzZWQgb24gdGhlIHByb3ZpZGVkIHZhbHVlIGFuZCBkaXJlY3Rpb24uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFRoZSBhbW91bnQgYnkgd2hpY2ggdG8gY2hhbmdlIHRoZSB6b29tIGxldmVsLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IG91dCAtIEEgZmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgdG8gem9vbSBvdXQgKHRydWUpIG9yIHpvb20gaW4gKGZhbHNlKS5cblx0ICogQHBhcmFtIHtib29sZWFufSBkcGFkIC0gQSBmbGFnIGluZGljYXRpbmcgdGhlIGRpcmVjdGlvbiBvZiB0aGUgem9vbSBjaGFuZ2UuXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSAtIFJldHVybnMgdGhlIHJlc3VsdCBvZiBzZXR0aW5nIHRoZSBtYXAgd2l0aCB0aGUgbmV3IHpvb20gbGV2ZWwuXG5cdCAqL1xuICAgIHRoaXMuc2V0Wm9vbSA9IGZ1bmN0aW9uICh2YWx1ZSwgb3V0LCBkcGFkKSB7XG4gICAgICAgIHZhciB6b29tID0gdGhpcy5tYXAuem9vbTtcbiAgICBcbiAgICAgICAgaWYgKG91dCkge1xuICAgICAgICAgICAgem9vbSA9IHpvb20gLSAoIHRoaXMub3B0aW9ucy56b29tLnNwZWVkICogTWF0aC5hYnModmFsdWUpIClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHpvb20gPSB6b29tICsgKCB0aGlzLm9wdGlvbnMuem9vbS5zcGVlZCAqIE1hdGguYWJzKHZhbHVlKSApXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMubWFwLnpvb20gPSB6b29tO1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRNYXAoKTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkdhbWVwYWRcblx0ICogQG5hbWUgc2V0U3BlZWRcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gY2FsY3VsYXRlcyB0aGUgc3BlZWQgb2YgcGFubmluZyBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgdmFsdWUgYW5kIGRpcmVjdGlvbi4gSXQgZW5zdXJlcyB0aGF0IHRoZSBzcGVlZCBmYWxscyB3aXRoaW4gdGhlIHNwZWNpZmllZCBtaW5pbXVtIGFuZCBtYXhpbXVtIHZhbHVlcy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIHZhbHVlIHRoYXQgaW5mbHVlbmNlcyB0aGUgc3BlZWQgb2YgcGFubmluZy5cblx0ICogQHBhcmFtIHtib29sZWFufSBkb3duIC0gQSBib29sZWFuIGZsYWcgaW5kaWNhdGluZyB0aGUgZGlyZWN0aW9uIG9mIHBhbm5pbmcgKHRydWUgZm9yIGRvd24sIGZhbHNlIGZvciB1cCkuXG5cdCAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSB1cGRhdGVkIHNwZWVkIG9mIHBhbm5pbmcgYWZ0ZXIgYXBwbHlpbmcgdGhlIGNhbGN1bGF0aW9ucy5cblx0ICovXG4gICAgdGhpcy5zZXRTcGVlZCA9IGZ1bmN0aW9uICh2YWx1ZSwgZG93bikge1xuICAgICAgICB2YXIgc3BlZWQgPSB0aGlzLm9wdGlvbnMucGFuLnNwZWVkID4gdGhpcy5vcHRpb25zLnBhbi5taW4gP1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBhbi5zcGVlZCA6XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMucGFuLm1heCAmJiB0aGlzLm9wdGlvbnMucGFuLnNwZWVkID4gdGhpcy5vcHRpb25zLnBhbi5tYXggP1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBhbi5taW4gOlxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBhbi5taW47XG5cbiAgICAgICAgc3BlZWQgPSBkb3duID8gc3BlZWQgLSB0aGlzLm9wdGlvbnMucGFuLm1pbiA6IHNwZWVkICsgdGhpcy5vcHRpb25zLnBhbi5taW47XG5cbiAgICAgICAgc3BlZWQgPSBzcGVlZCA8IHRoaXMub3B0aW9ucy5wYW4ubWluID8gdGhpcy5vcHRpb25zLnBhbi5taW4gOlxuICAgICAgICB0aGlzLm9wdGlvbnMucGFuLm1heCAmJiBzcGVlZCA+IHRoaXMub3B0aW9ucy5wYW4ubWF4ID8gdGhpcy5vcHRpb25zLnBhbi5tYXggOlxuICAgICAgICBzcGVlZDtcblxuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnBhbi5zcGVlZCA9IHNwZWVkICogTWF0aC5hYnModmFsdWUpO1xuICAgIH1cblxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5HYW1lcGFkIGFzc29jaWF0ZUV2ZW50XG5cdCAqIEBuYW1lIGFzc29jaWF0ZUV2ZW50XG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGFsbG93cyB0aGUgdXNlciB0byBhc3NvY2lhdGUgYW4gZXZlbnQgd2l0aCBhIGNhbGxiYWNrIGZ1bmN0aW9uIGZvciBhIHNwZWNpZmljIGJ1dHRvbiBvciBheGlzIG9uIHRoZSBnYW1lcGFkLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50IHRvIGFzc29jaWF0ZSB3aXRoIHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cblx0ICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiB0aGUgZXZlbnQgb2NjdXJzLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSB0eXBlIG9mIGV2ZW50IChlLmcuLCAncHJlc3MnLCAncmVsZWFzZScpIHRvIGFzc29jaWF0ZSB3aXRoIHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cblx0ICogQHJldHVybnMge29iamVjdH0gVGhlIHVwZGF0ZWQgZ2FtZXBhZCBvYmplY3Qgd2l0aCB0aGUgYXNzb2NpYXRlZCBldmVudCBhbmQgY2FsbGJhY2sgZnVuY3Rpb24uXG5cdCAqL1xuICAgIHRoaXMuYXNzb2NpYXRlRXZlbnQgPSBmdW5jdGlvbihldmVudE5hbWUsIGNhbGxiYWNrLCB0eXBlKSB7XG4gICAgICAgIGlmIChldmVudE5hbWUubWF0Y2goL15idXR0b25cXGQrJC8pKSB7XG4gICAgICAgICAgICBjb25zdCBidXR0b25JZCA9IHBhcnNlSW50KGV2ZW50TmFtZS5tYXRjaCgvXmJ1dHRvbihcXGQrKSQvKVsxXSk7XG5cbiAgICAgICAgICAgIGlmIChidXR0b25JZCA+PSAwICYmIGJ1dHRvbklkIDwgdGhpcy5nYW1lcGFkLmJ1dHRvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWVwYWQuYnV0dG9uQWN0aW9uc1tidXR0b25JZF1bdHlwZV0gPSBjYWxsYmFjaztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYnV0dG9uSWQsICdUaGlzIGJ1dHRvbiBpcyBub3Qgb24gZ2FtZXBhZCcpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIGlmIChldmVudE5hbWUgPT09ICdzdGFydCcpIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZXBhZC5idXR0b25BY3Rpb25zWzldW3R5cGVdID0gY2FsbGJhY2s7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnROYW1lID09PSAnc2VsZWN0Jykge1xuICAgICAgICAgICAgdGhpcy5nYW1lcGFkLmJ1dHRvbkFjdGlvbnNbOF1bdHlwZV0gPSBjYWxsYmFjaztcbiAgICAgICAgfSBlbHNlIGlmIChldmVudE5hbWUgPT09ICdyMScpIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZXBhZC5idXR0b25BY3Rpb25zWzVdW3R5cGVdID0gY2FsbGJhY2s7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnROYW1lID09PSAncjInKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWVwYWQuYnV0dG9uQWN0aW9uc1s3XVt0eXBlXSA9IGNhbGxiYWNrO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50TmFtZSA9PT0gJ2wxJykge1xuICAgICAgICAgICAgdGhpcy5nYW1lcGFkLmJ1dHRvbkFjdGlvbnNbNF1bdHlwZV0gPSBjYWxsYmFjaztcbiAgICAgICAgfSBlbHNlIGlmIChldmVudE5hbWUgPT09ICdsMicpIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZXBhZC5idXR0b25BY3Rpb25zWzZdW3R5cGVdID0gY2FsbGJhY2s7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnROYW1lID09PSAncG93ZXInKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5nYW1lcGFkLmJ1dHRvbnMgPj0gMTcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWVwYWQuYnV0dG9uQWN0aW9uc1sxNl1bdHlwZV0gPSBjYWxsYmFjaztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXJyb3IoTUVTU0FHRVMuSU5WQUxJRF9CVVRUT04pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50TmFtZS5tYXRjaCgvXih1cHxkb3dufGxlZnR8cmlnaHQpKFxcZCspJC8pKSB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVzID0gZXZlbnROYW1lLm1hdGNoKC9eKHVwfGRvd258bGVmdHxyaWdodCkoXFxkKykkLyk7XG4gICAgICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBtYXRjaGVzWzFdO1xuICAgICAgICAgICAgY29uc3QgYXhlID0gcGFyc2VJbnQobWF0Y2hlc1syXSk7XG5cbiAgICAgICAgICAgIGlmIChheGUgPj0gMCAmJiBheGUgPCB0aGlzLmdhbWVwYWQuYXhlcykge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZXBhZC5heGVzQWN0aW9uc1theGVdW2RpcmVjdGlvbl1bdHlwZV0gPSBjYWxsYmFjaztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXJyb3IoTUVTU0FHRVMuSU5WQUxJRF9CVVRUT04pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50TmFtZS5tYXRjaCgvXih1cHxkb3dufGxlZnR8cmlnaHQpJC8pKSB7XG4gICAgICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBldmVudE5hbWUubWF0Y2goL14odXB8ZG93bnxsZWZ0fHJpZ2h0KSQvKVsxXTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZXBhZC5heGVzQWN0aW9uc1swXVtkaXJlY3Rpb25dW3R5cGVdID0gY2FsbGJhY2s7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5nYW1lcGFkO1xuICAgIH1cblxuICAgIHRoaXMub25Jbml0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pbml0aWF0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnNldENvbnRhaW5lcignZGl2JywgJ2dhbWVwYWQnLCBnZW9mbG8ubWFwLmdldENvbnRhaW5lcigpKTtcbiAgICAgICAgdGhpcy5zZXRNYXJrZXIoKTtcbiAgICAgICAgdGhpcy5zZXRNYXAoKTtcbiAgICB9XG5cbiAgICB0aGlzLm9uRXZlbnQgPSBmdW5jdGlvbiAodHlwZSwga2V5LCBhY3Rpb24sIHZhbHVlKSB7XG4gICAgICAgIHZhciBwcmVzc2VkID0ge1thY3Rpb25dOiB0cnVlfTtcbiAgICAgICAgdmFyIGxuZ0xhdCA9IHRoaXMub3B0aW9ucy5jYW1lcmEuZnJlZSA/IGdlb2Zsby5tYXAuZ2V0Q2VudGVyKCkgOiBnZW9mbG8ubGFzdE1vdmUgPyBnZW9mbG8ubGFzdE1vdmUgOiBnZW9mbG8ubWFwLmdldENlbnRlcigpO1xuXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgbmFtZTogYWN0aW9uLFxuICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgbW9kZTogZ2VvZmxvLmN1cnJlbnRNb2RlLFxuICAgICAgICAgICAgZ2FtZXBhZDogdGhpcyxcbiAgICAgICAgICAgIGxuZ0xhdDogbG5nTGF0LFxuICAgICAgICAgICAgZ2VvZmxvOiBnZW9mbG8sXG4gICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiB7fVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmluaXRpYXRlZCkgdGhpcy5vbkluaXQob3B0aW9ucyk7XG5cbiAgICAgICAgZ2VvZmxvLm1hcC5maXJlKGdlb2Zsby5pZCArICc6Z2FtZXBhZC4nICsgdHlwZSwgeyBkZXRhaWw6IG9wdGlvbnMgfSk7XG5cbiAgICAgICAgaWYgKHByZXNzZWRbJ0pveUxlZnRVcCddIHx8IHByZXNzZWRbJ0pveUxlZnREb3duJ10gfHwgcHJlc3NlZFsnSm95TGVmdExlZnQnXSB8fCBwcmVzc2VkWydKb3lMZWZ0UmlnaHQnXSkgdGhpcy5vcHRpb25zLm1hcHBpbmdbJ0pveUxlZnRNb3ZlJ10ob3B0aW9ucyk7XG4gICAgICAgIGlmIChwcmVzc2VkWydKb3lSaWdodFVwJ10gfHwgcHJlc3NlZFsnSm95UmlnaHREb3duJ10gfHwgcHJlc3NlZFsnSm95UmlnaHRMZWZ0J10gfHwgcHJlc3NlZFsnSm95UmlnaHRSaWdodCddKSB0aGlzLm9wdGlvbnMubWFwcGluZ1snSm95UmlnaHRNb3ZlJ10ob3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKHByZXNzZWRbJ0pveUxlZnRDbGljayddKSB0aGlzLm9wdGlvbnMubWFwcGluZ1snSm95TGVmdENsaWNrJ10ob3B0aW9ucyk7XG4gICAgICAgIGlmIChwcmVzc2VkWydKb3lSaWdodENsaWNrJ10pIHRoaXMub3B0aW9ucy5tYXBwaW5nWydKb3lSaWdodENsaWNrJ10ob3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKHByZXNzZWRbJ0J1bXBMZWZ0J10pIHRoaXMub3B0aW9ucy5tYXBwaW5nWydCdW1wTGVmdCddKG9wdGlvbnMpO1xuICAgICAgICBpZiAocHJlc3NlZFsnQnVtcFJpZ2h0J10pIHRoaXMub3B0aW9ucy5tYXBwaW5nWydCdW1wUmlnaHQnXShvcHRpb25zKTtcblxuICAgICAgICBpZiAocHJlc3NlZFsnVHJpZ0xlZnQnXSkgdGhpcy5vcHRpb25zLm1hcHBpbmdbJ1RyaWdMZWZ0J10ob3B0aW9ucyk7XG4gICAgICAgIGlmIChwcmVzc2VkWydUcmlnUmlnaHQnXSkgdGhpcy5vcHRpb25zLm1hcHBpbmdbJ1RyaWdSaWdodCddKG9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChwcmVzc2VkWydBJ10pIHRoaXMub3B0aW9ucy5tYXBwaW5nWydBJ10ob3B0aW9ucyk7XG4gICAgICAgIGlmIChwcmVzc2VkWydCJ10pIHRoaXMub3B0aW9ucy5tYXBwaW5nWydCJ10ob3B0aW9ucyk7XG4gICAgICAgIGlmIChwcmVzc2VkWydYJ10pIHRoaXMub3B0aW9ucy5tYXBwaW5nWydYJ10ob3B0aW9ucyk7XG4gICAgICAgIGlmIChwcmVzc2VkWydZJ10pIHRoaXMub3B0aW9ucy5tYXBwaW5nWydZJ10ob3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKHByZXNzZWRbJ1N0YXJ0J10pIHRoaXMub3B0aW9ucy5tYXBwaW5nWydTdGFydCddKG9wdGlvbnMpO1xuICAgICAgICBpZiAocHJlc3NlZFsnU2VsZWN0J10pIHRoaXMub3B0aW9ucy5tYXBwaW5nWydTZWxlY3QnXShvcHRpb25zKTtcbiAgICAgICAgaWYgKHByZXNzZWRbJ1Bvd2VyJ10pIHRoaXMub3B0aW9ucy5tYXBwaW5nWydQb3dlciddKG9wdGlvbnMpO1xuICAgICAgICBpZiAocHJlc3NlZFsnSG9tZSddKSB0aGlzLm9wdGlvbnMubWFwcGluZ1snSG9tZSddKG9wdGlvbnMpO1xuICAgICAgICBpZiAocHJlc3NlZFsnTWlzYyddKSB0aGlzLm9wdGlvbnMubWFwcGluZ1snTWlzYyddKG9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChwcmVzc2VkWydEcGFkVXAnXSkgdGhpcy5vcHRpb25zLm1hcHBpbmdbJ0RwYWRVcCddKG9wdGlvbnMpO1xuICAgICAgICBpZiAocHJlc3NlZFsnRHBhZERvd24nXSkgdGhpcy5vcHRpb25zLm1hcHBpbmdbJ0RwYWREb3duJ10ob3B0aW9ucyk7XG4gICAgICAgIGlmIChwcmVzc2VkWydEcGFkTGVmdCddKSB0aGlzLm9wdGlvbnMubWFwcGluZ1snRHBhZExlZnQnXShvcHRpb25zKTtcbiAgICAgICAgaWYgKHByZXNzZWRbJ0RwYWRSaWdodCddKSB0aGlzLm9wdGlvbnMubWFwcGluZ1snRHBhZFJpZ2h0J10ob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgdGhpcy5vbkRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoZ2FtZXBhZCkge1xuICAgICAgICBpZiAoIWdhbWVwYWQgfHwgIXRoaXMuZ2FtZXBhZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5nYW1lcGFkLmlkICE9PSBnYW1lcGFkLmlkKSB0aHJvdyBuZXcgRXJyb3IoJ0dhbWVwYWQgaWQgZG9lcyBub3QgbWF0Y2ghJyk7XG4gICAgICAgIHRoaXMuZ2FtZXBhZC5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy5nYW1lcGFkID0gbnVsbDtcbiAgICB9XG5cblxuICAgIHRoaXMuaW5pdChnYW1lcGFkKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEdhbWVwYWQ7IiwiLyoqXG4gKiBAbWl4aW5cbiAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvXG4gKiBAbmFtZSBMYXllcnNcbiAqIEBkZXNjcmlwdGlvbiBUaGlzIG1vZHVsZSBwcm92aWRlcyB0aGUgbGF5ZXIgZnVuY3Rpb25hbGl0eSBmb3IgdGhlIEdlb2ZsbyBhcHBsaWNhdGlvbi4gSXQgYWxsb3dzIHVzZXJzIHRvIGFkZCwgcmVtb3ZlLCBhbmQgbWFuaXB1bGF0ZSBsYXllcnMgb24gdGhlIG1hcC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0IHRvIGNvbmZpZ3VyZSB0aGUgb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgTGF5ZXJzIG9iamVjdC5cbiAqL1xuY29uc3QgTGF5ZXJzID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGdlb2ZsbyA9IHRoaXMuZ2VvZmxvO1xuICAgIGlmICghZ2VvZmxvLm1hcCkgdGhyb3cgbmV3IEVycm9yKCdObyBtYXAgb2JqZWN0IHByb3ZpZGVkIScpO1xuXG4gICAgY29uc3QgTGF5ZXJzID0gdGhpcztcbiAgICBjb25zdCBtYXAgPSBnZW9mbG8ubWFwO1xuICAgIGNvbnN0IGlkID0gZ2VvZmxvLmlkO1xuXG4gICAgY29uc3QgbGF5ZXJUeXBlcyA9IHtcbiAgICAgICAgUG9seWdvbjogWyctZmlsbCcsICctYm9yZGVyJ10sXG4gICAgICAgIFBvbHlsaW5lOiBbJy1saW5lJywgJy1kYXNoJywgJy1idWZmZXInXSxcbiAgICAgICAgUG9pbnQ6IFsnLWNpcmNsZScsICctaWNvbicsICctY2x1c3Rlci1jaXJjbGUnLCAnLWNsdXN0ZXItaWNvbicsICctY291bnQtaWNvbicsICctY291bnQtdGV4dCddLFxuICAgICAgICBJbWFnZTogWyctaW1hZ2UnXVxuICAgIH1cblxuICAgIHRoaXMub3B0aW9ucyA9IHt9O1xuICAgIHRoaXMuc291cmNlcyA9IFtdO1xuICAgIHRoaXMubGF5ZXJzID0gW107XG4gICAgdGhpcy5fbGF5ZXJzID0gW107XG4gICAgdGhpcy5fc291cmNlcyA9IFtdO1xuXG5cdC8qKiBcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uTGF5ZXJzXG5cdCAqIEBuYW1lIGluaXRcblx0ICogQGRlc2NyaXB0aW9uIEluaXRpYWxpemVzIHRoZSBvYmplY3Qgd2l0aCB0aGUgcHJvdmlkZWQgb3B0aW9ucyBhbmQgcmVmcmVzaGVzIGl0LlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIG9iamVjdCB0byBjb25maWd1cmUgdGhlIG9iamVjdC5cblx0ICogQHJldHVybnMge09iamVjdH0gVGhlIHJlZnJlc2hlZCBvYmplY3Qgd2l0aCB0aGUgdXBkYXRlZCBvcHRpb25zLlxuXHQgKi9cbiAgICB0aGlzLmluaXQgPSBmdW5jdGlvbiAob3B0aW9ucz17fSkge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmRlZmF1bHRMYXllcnMgPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgJ3NvdXJjZSc6IGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLkNPTEQsXG4gICAgICAgICAgICAgICAgJ2lkJzogaWQgKyAnLWZpbGwtY29sZCcsXG4gICAgICAgICAgICAgICAgJ3R5cGUnOiAnZmlsbCcsXG4gICAgICAgICAgICAgICAgJ2xheW91dCc6IHt9LFxuICAgICAgICAgICAgICAgICdmaWx0ZXInOiBbXCI9PVwiLCBcIiR0eXBlXCIsIFwiUG9seWdvblwiXSxcbiAgICAgICAgICAgICAgICAncGFpbnQnOiB7XG4gICAgICAgICAgICAgICAgICAgICdmaWxsLWNvbG9yJzogZ2VvZmxvLm9wdGlvbnMuY29sb3JzLnNlY29uZGFyeUNvbGQsXG4gICAgICAgICAgICAgICAgICAgICdmaWxsLW9wYWNpdHknOiBbJ2Nhc2UnLCBbXCJib29sZWFuXCIsIFtcImZlYXR1cmUtc3RhdGVcIiwgXCJoaWRkZW5cIl0sIHRydWVdLCAwLCAwLjNdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAnc291cmNlJzogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuQ09MRCxcbiAgICAgICAgICAgICAgICAnaWQnOiBpZCArICctbGluZS1jb2xkJyxcbiAgICAgICAgICAgICAgICAndHlwZSc6ICdsaW5lJyxcbiAgICAgICAgICAgICAgICAnbGF5b3V0Jzoge1xuICAgICAgICAgICAgICAgICAgICAnbGluZS1jYXAnOiAncm91bmQnLFxuICAgICAgICAgICAgICAgICAgICAnbGluZS1qb2luJzogJ21pdGVyJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ3BhaW50Jzoge1xuICAgICAgICAgICAgICAgICAgICAnbGluZS1jb2xvcic6IGdlb2Zsby5vcHRpb25zLmNvbG9ycy5wcmltYXJ5Q29sZCxcbiAgICAgICAgICAgICAgICAgICAgJ2xpbmUtd2lkdGgnOiA0LFxuICAgICAgICAgICAgICAgICAgICAnbGluZS1nYXAtd2lkdGgnOiBbXCJtYXRjaFwiLCBbXCJnZXRcIiwgXCJ0eXBlXCJdLCBcIlBvbHlnb25cIiwgMCwgMF0sXG4gICAgICAgICAgICAgICAgICAgICdsaW5lLW9mZnNldCc6IFsnY2FzZScsIFtcImJvb2xlYW5cIiwgW1wiaGFzXCIsIFwib2Zmc2V0XCJdLCB0cnVlXSwgW1wiZ2V0XCIsIFwib2Zmc2V0XCJdLCAwXSxcbiAgICAgICAgICAgICAgICAgICAgJ2xpbmUtb3BhY2l0eSc6IFsnY2FzZScsIFtcImJvb2xlYW5cIiwgW1wiZmVhdHVyZS1zdGF0ZVwiLCBcImhpZGRlblwiXSwgdHJ1ZV0sIDAsIDFdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAnc291cmNlJzogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuQ09MRCxcbiAgICAgICAgICAgICAgICAnaWQnOiBpZCArICctY2lyY2xlLWNvbGQnLFxuICAgICAgICAgICAgICAgICdmaWx0ZXInOiBbJ2FsbCcsIFsnPT0nLCBbJ2dldCcsICd0eXBlJ10sICdDaXJjbGUnXSwgW1wiIT1cIiwgW1wiZ2VvbWV0cnktdHlwZVwiXSwgXCJQb2x5Z29uXCJdIF0sXG4gICAgICAgICAgICAgICAgJ3R5cGUnOiAnY2lyY2xlJyxcbiAgICAgICAgICAgICAgICAncGFpbnQnOiB7XG4gICAgICAgICAgICAgICAgICAgICdjaXJjbGUtcmFkaXVzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2Jhc2UnOiA2LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3N0b3BzJzogW1sxMCwgNl0sIFsxNCwgMTBdXVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnY2lyY2xlLXN0cm9rZS13aWR0aCc6IDEsXG4gICAgICAgICAgICAgICAgICAgICdjaXJjbGUtY29sb3InOiBnZW9mbG8ub3B0aW9ucy5jb2xvcnMucHJpbWFyeUNvbGQsXG4gICAgICAgICAgICAgICAgICAgICdjaXJjbGUtc3Ryb2tlLWNvbG9yJzogZ2VvZmxvLm9wdGlvbnMuY29sb3JzLnNlY29uZGFyeUNvbGQsXG4gICAgICAgICAgICAgICAgICAgICdjaXJjbGUtb3BhY2l0eSc6IFsnY2FzZScsIFtcImJvb2xlYW5cIiwgW1wiZmVhdHVyZS1zdGF0ZVwiLCBcImhpZGRlblwiXSwgdHJ1ZV0sIDAsIDFdLFxuICAgICAgICAgICAgICAgICAgICAnY2lyY2xlLXN0cm9rZS1vcGFjaXR5JzogWydjYXNlJywgW1wiYm9vbGVhblwiLCBbXCJmZWF0dXJlLXN0YXRlXCIsIFwiaGlkZGVuXCJdLCB0cnVlXSwgMCwgMV1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNvdXJjZTogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuQ09MRCxcbiAgICAgICAgICAgICAgICBpZDogaWQgKyAnLWljb24tY29sZCcsXG4gICAgICAgICAgICAgICAgdHlwZTogJ3N5bWJvbCcsXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBbJz09JywgWydnZXQnLCAndHlwZSddLCAnSWNvbiddLFxuICAgICAgICAgICAgICAgIGxheW91dDoge1xuICAgICAgICAgICAgICAgICAgICAndmlzaWJpbGl0eSc6ICd2aXNpYmxlJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ljb24tb3B0aW9uYWwnOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1maWVsZCc6IFsnZ2V0JywgJ3ByaW1hcnlJY29uJywgWydnZXQnLCdzdHlsZScsIFsncHJvcGVydGllcyddXV0sXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LXNpemUnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnYmFzZSc6IDE2LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3N0b3BzJzogW1sxMCwgMTZdLCBbMTQsIDEyXV1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtbGluZS1oZWlnaHQnOiAxLFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1wYWRkaW5nJzogMCxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtb2Zmc2V0JzogWzAsIDAuMl0sXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWp1c3RpZnknOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWFuY2hvcic6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1hbGxvdy1vdmVybGFwJzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtZm9udCc6IFsnRm9udCBBd2Vzb21lIDYgUHJvIFNvbGlkJ10sXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWlnbm9yZS1wbGFjZW1lbnQnOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwYWludDoge1xuICAgICAgICAgICAgICAgICAgICAndGV4dC10cmFuc2xhdGUtYW5jaG9yJzogJ3ZpZXdwb3J0JyxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtaGFsby13aWR0aCc6IDAsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWhhbG8tY29sb3InOiBnZW9mbG8ub3B0aW9ucy5jb2xvcnMucHJpbWFyeUNvbGQsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWNvbG9yJzogZ2VvZmxvLm9wdGlvbnMuY29sb3JzLnNlY29uZGFyeUJhY2tncm91bmQsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LW9wYWNpdHknOiBbJ2Nhc2UnLCBbXCJib29sZWFuXCIsIFtcImZlYXR1cmUtc3RhdGVcIiwgXCJoaWRkZW5cIl0sIHRydWVdLCAwLCAxXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgJ3NvdXJjZSc6IGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLkNPTEQsXG4gICAgICAgICAgICAgICAgJ2lkJzogaWQgKyAnLXRleHQtY29sZCcsXG4gICAgICAgICAgICAgICAgJ3R5cGUnOiAnc3ltYm9sJyxcbiAgICAgICAgICAgICAgICAnZmlsdGVyJzogW1wiPT1cIiwgXCIkdHlwZVwiLCBcIlBvaW50XCJdLFxuICAgICAgICAgICAgICAgICdsYXlvdXQnOiB7XG4gICAgICAgICAgICAgICAgICAgIFwic3ltYm9sLXBsYWNlbWVudFwiOiBcInBvaW50XCIsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWZpZWxkJzogWydnZXQnLCAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1mb250JzogWydESU4gUHJvIFJlZ3VsYXInLCAnRElOIFBybyBJdGFsaWMnLCAnQXJpYWwgVW5pY29kZSBNUyBSZWd1bGFyJywgJ0RJTiBPZmZjIFBybyBNZWRpdW0nLCAnQXJpYWwgVW5pY29kZSBNUyBCb2xkJ10sXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWtlZXAtdXByaWdodCc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LXNpemUnOiAxOCxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtanVzdGlmeSc6IFsnZ2V0JywgJ2p1c3RpZnknXSxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtbGV0dGVyLXNwYWNpbmcnOiAwLjA1LFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1saW5lLWhlaWdodCc6IDEuMixcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtbWF4LWFuZ2xlJzogMTAsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LW9mZnNldCc6IFswLDBdLFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1wYWRkaW5nJzogMixcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtcm90YXRlJzogMCxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtdHJhbnNmb3JtJzogWydnZXQnLCAndHJhbnNmb3JtJ11cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICdwYWludCc6IHtcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtY29sb3InOiBnZW9mbG8ub3B0aW9ucy5jb2xvcnMucHJpbWFyeUNvbGQsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWhhbG8tY29sb3InOiBnZW9mbG8ub3B0aW9ucy5jb2xvcnMucHJpbWFyeVRleHQsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWhhbG8td2lkdGgnOiAwLjUsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LW9wYWNpdHknOiAxLFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1vcGFjaXR5JzogWydjYXNlJywgW1wiYm9vbGVhblwiLCBbXCJmZWF0dXJlLXN0YXRlXCIsIFwiaGlkZGVuXCJdLCB0cnVlXSwgMCwgMV1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlkOiBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMubGF5ZXJzLk1FU0ggKyAnLWxpbmUnLFxuICAgICAgICAgICAgICAgIHNvdXJjZTogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuTUVTSCxcbiAgICAgICAgICAgICAgICB0eXBlOiBcImxpbmVcIixcbiAgICAgICAgICAgICAgICBwYWludDoge1xuICAgICAgICAgICAgICAgICAgICBcImxpbmUtY29sb3JcIjogZ2VvZmxvLm9wdGlvbnMuY29sb3JzLnByaW1hcnlCYXNlLFxuICAgICAgICAgICAgICAgICAgICBcImxpbmUtd2lkdGhcIjogMixcbiAgICAgICAgICAgICAgICAgICAgXCJsaW5lLW9wYWNpdHlcIjogMC4zXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLmxheWVycy5NRVNIICsgJy1jaXJjbGUnLFxuICAgICAgICAgICAgICAgIHNvdXJjZTogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuTUVTSCxcbiAgICAgICAgICAgICAgICAndHlwZSc6ICdjaXJjbGUnLFxuICAgICAgICAgICAgICAgICdwYWludCc6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2NpcmNsZS1yYWRpdXMnOiAyLFxuICAgICAgICAgICAgICAgICAgICAnY2lyY2xlLWNvbG9yJzogZ2VvZmxvLm9wdGlvbnMuY29sb3JzLnByaW1hcnlCYXNlLFxuICAgICAgICAgICAgICAgICAgICAnY2lyY2xlLW9wYWNpdHknOiAwLjNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICdzb3VyY2UnOiBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5IT1QsXG4gICAgICAgICAgICAgICAgJ2lkJzogaWQgKyAnLWZpbGwtaG90JyxcbiAgICAgICAgICAgICAgICAndHlwZSc6ICdmaWxsJyxcbiAgICAgICAgICAgICAgICAnbGF5b3V0Jzoge30sXG4gICAgICAgICAgICAgICAgJ2ZpbHRlcic6IFtcIj09XCIsIFwiJHR5cGVcIiwgXCJQb2x5Z29uXCJdLFxuICAgICAgICAgICAgICAgICdwYWludCc6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2ZpbGwtY29sb3InOiBnZW9mbG8ub3B0aW9ucy5jb2xvcnMuc2Vjb25kYXJ5SG90LFxuICAgICAgICAgICAgICAgICAgICAnZmlsbC1vcGFjaXR5JzogWydjYXNlJywgW1wiYm9vbGVhblwiLCBbXCJoYXNcIiwgXCJuZXdcIl0sIHRydWVdLCAwLjUsIDAuMV0sXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAnc291cmNlJzogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuSE9ULFxuICAgICAgICAgICAgICAgICdpZCc6IGlkICsgJy1saW5lLWhvdCcsXG4gICAgICAgICAgICAgICAgJ3R5cGUnOiAnbGluZScsXG4gICAgICAgICAgICAgICAgJ2xheW91dCc6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2xpbmUtY2FwJzogJ3JvdW5kJyxcbiAgICAgICAgICAgICAgICAgICAgJ2xpbmUtam9pbic6ICdyb3VuZCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICdwYWludCc6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2xpbmUtY29sb3InOiBnZW9mbG8ub3B0aW9ucy5jb2xvcnMucHJpbWFyeUhvdCxcbiAgICAgICAgICAgICAgICAgICAgJ2xpbmUtd2lkdGgnOiA0LFxuICAgICAgICAgICAgICAgICAgICAnbGluZS1kYXNoYXJyYXknOiBbMSwyXSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICdzb3VyY2UnOiBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5IT1QsXG4gICAgICAgICAgICAgICAgJ2lkJzogaWQgKyAnLXBvaW50LWhvdCcsXG4gICAgICAgICAgICAgICAgJ2ZpbHRlcic6IFsnPT0nLCAnJHR5cGUnLCAnUG9pbnQnXSxcbiAgICAgICAgICAgICAgICAndHlwZSc6ICdjaXJjbGUnLFxuICAgICAgICAgICAgICAgIC8vJ2ZpbHRlcic6IFtcIj09XCIsIDAsIFsnbnVtYmVyJywgWydnZXQnLCAncGFpbnRpbmcnXV1dLFxuICAgICAgICAgICAgICAgICdwYWludCc6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2NpcmNsZS1yYWRpdXMnOiBbXCJtYXRjaFwiLCBbXCJnZXRcIiwgXCJ0eXBlXCJdLCBcIkNpcmNsZVwiLCA4LCA0XSxcbiAgICAgICAgICAgICAgICAgICAgJ2NpcmNsZS1zdHJva2Utd2lkdGgnOiAxLFxuICAgICAgICAgICAgICAgICAgICAnY2lyY2xlLWNvbG9yJzogZ2VvZmxvLm9wdGlvbnMuY29sb3JzLnByaW1hcnlIb3QsXG4gICAgICAgICAgICAgICAgICAgICdjaXJjbGUtc3Ryb2tlLWNvbG9yJzogZ2VvZmxvLm9wdGlvbnMuY29sb3JzLnNlY29uZGFyeUhvdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc291cmNlOiBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5IT1QsXG4gICAgICAgICAgICAgICAgaWQ6IGlkICsgJy1pY29uLWhvdCcsXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBbJz09JywgWydnZXQnLCAndHlwZSddLCAnSWNvbiddLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdzeW1ib2wnLFxuICAgICAgICAgICAgICAgIGxheW91dDoge1xuICAgICAgICAgICAgICAgICAgICAndmlzaWJpbGl0eSc6ICd2aXNpYmxlJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ljb24tb3B0aW9uYWwnOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1maWVsZCc6IFsnZ2V0JywgJ3ByaW1hcnlJY29uJywgWydnZXQnLCdzdHlsZScsIFsncHJvcGVydGllcyddXV0sXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LXNpemUnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnYmFzZSc6IDE2LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3N0b3BzJzogW1sxMCwgMTZdLCBbMTQsIDEyXV1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtbGluZS1oZWlnaHQnOiAxLFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1wYWRkaW5nJzogMCxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtb2Zmc2V0JzogWzAsIDAuMl0sXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWp1c3RpZnknOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWFuY2hvcic6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1hbGxvdy1vdmVybGFwJzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtZm9udCc6IFsnRm9udCBBd2Vzb21lIDYgUHJvIFNvbGlkJ10sXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWlnbm9yZS1wbGFjZW1lbnQnOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwYWludDoge1xuICAgICAgICAgICAgICAgICAgICAndGV4dC10cmFuc2xhdGUtYW5jaG9yJzogJ3ZpZXdwb3J0JyxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtaGFsby1jb2xvcic6IGdlb2Zsby5vcHRpb25zLmNvbG9ycy5wcmltYXJ5SG90LFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1oYWxvLXdpZHRoJzogMCwgLy9bICdjYXNlJywgWydib29sZWFuJywgWydmZWF0dXJlLXN0YXRlJywgJ2hvdmVyJ10sIGZhbHNlXSwgMC41LCAwIF0sXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWNvbG9yJzogZ2VvZmxvLm9wdGlvbnMuY29sb3JzLnNlY29uZGFyeUhvdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc291cmNlOiBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5IT1QsXG4gICAgICAgICAgICAgICAgaWQ6IGlkICsgJy1pbWFnZS1ob3QnLFxuICAgICAgICAgICAgICAgIGZpbHRlcjogWyc9PScsIFsnZ2V0JywgJ3R5cGUnXSwgJ0ltYWdlJ10sXG4gICAgICAgICAgICAgICAgdHlwZTogJ3N5bWJvbCcsXG4gICAgICAgICAgICAgICAgbGF5b3V0OiB7XG4gICAgICAgICAgICAgICAgICAgICd2aXNpYmlsaXR5JzogJ3Zpc2libGUnLFxuICAgICAgICAgICAgICAgICAgICAnaWNvbi1pbWFnZSc6IFsnZ2V0JywgJ3ByaW1hcnlJbWFnZScsIFsnZ2V0Jywnc3R5bGUnLCBbJ3Byb3BlcnRpZXMnXV1dLFxuICAgICAgICAgICAgICAgICAgICAnaWNvbi1zaXplJzogWydpbnRlcnBvbGF0ZScsIFsnbGluZWFyJ10sIFsnem9vbSddLCAxLCAwLjQsIDE1LCAxXSxcbiAgICAgICAgICAgICAgICAgICAgJ2ljb24tYWxsb3ctb3ZlcmxhcCc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICdpY29uLWFuY2hvcic6ICdib3R0b20nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAnc291cmNlJzogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuSE9UVEVYVCxcbiAgICAgICAgICAgICAgICAnaWQnOiBpZCArICctdGV4dC1ob3QnLFxuICAgICAgICAgICAgICAgICd0eXBlJzogJ3N5bWJvbCcsXG4gICAgICAgICAgICAgICAgJ2xheW91dCc6IHtcbiAgICAgICAgICAgICAgICAgICAgJ3N5bWJvbC1wbGFjZW1lbnQnOiAncG9pbnQnLFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1maWVsZCc6IFsnZ2V0JywgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtZm9udCc6IFsnQXJpYWwgVW5pY29kZSBNUyBSZWd1bGFyJywgJ0RJTiBPZmZjIFBybyBNZWRpdW0nLCAnQXJpYWwgVW5pY29kZSBNUyBCb2xkJ10sXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWtlZXAtdXByaWdodCc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWFuY2hvcic6IFsnZ2V0JywnYW5jaG9yJ10sXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LXNpemUnOiAxOCxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtanVzdGlmeSc6IFsnZ2V0JywnanVzdGlmeSddLFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1sZXR0ZXItc3BhY2luZyc6IDAuMSxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtbGluZS1oZWlnaHQnOiAxLjIsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LW1heC1hbmdsZSc6IDEwLFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1vZmZzZXQnOiBbMCwgMS41XSxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtcGFkZGluZyc6IDIsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LXJvdGF0ZSc6IDAsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LXRyYW5zZm9ybSc6IFsnZ2V0JywgJ3RyYW5zZm9ybSddXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAncGFpbnQnOiB7XG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWNvbG9yJzogZ2VvZmxvLm9wdGlvbnMuY29sb3JzLnByaW1hcnlUZXh0LFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1oYWxvLWNvbG9yJzogZ2VvZmxvLm9wdGlvbnMuY29sb3JzLnByaW1hcnlCYWNrZ3JvdW5kLFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1oYWxvLXdpZHRoJzogMSxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtb3BhY2l0eSc6IDEsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAnc291cmNlJzogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuU05BUCxcbiAgICAgICAgICAgICAgICAnaWQnOiBpZCArICctcG9pbnQtc25hcCcsXG4gICAgICAgICAgICAgICAgJ3R5cGUnOiAnY2lyY2xlJyxcbiAgICAgICAgICAgICAgICAnZmlsdGVyJzogWyc9PScsICckdHlwZScsICdQb2ludCddLFxuICAgICAgICAgICAgICAgICdwYWludCc6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2NpcmNsZS1yYWRpdXMnOiBbXCJtYXRjaFwiLCBbXCJnZXRcIiwgXCJ0eXBlXCJdLCBcIkNpcmNsZVwiLCA2LCBcIkljb25cIiwgMCwgNl0sXG4gICAgICAgICAgICAgICAgICAgICdjaXJjbGUtc3Ryb2tlLXdpZHRoJzogMixcbiAgICAgICAgICAgICAgICAgICAgJ2NpcmNsZS1jb2xvcic6IGdlb2Zsby5vcHRpb25zLmNvbG9ycy5wcmltYXJ5U25hcCxcbiAgICAgICAgICAgICAgICAgICAgJ2NpcmNsZS1zdHJva2UtY29sb3InOiBnZW9mbG8ub3B0aW9ucy5jb2xvcnMuc2Vjb25kYXJ5U25hcFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc291cmNlOiBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5TTkFQLFxuICAgICAgICAgICAgICAgIGlkOiBpZCArICctaWNvbi1zbmFwJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnc3ltYm9sJyxcbiAgICAgICAgICAgICAgICBmaWx0ZXI6IFsnPT0nLCBbJ2dldCcsICd0eXBlJ10sICdJY29uJ10sXG4gICAgICAgICAgICAgICAgbGF5b3V0OiB7XG4gICAgICAgICAgICAgICAgICAgICd2aXNpYmlsaXR5JzogJ3Zpc2libGUnLFxuICAgICAgICAgICAgICAgICAgICAnaWNvbi1vcHRpb25hbCc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWZpZWxkJzogWydnZXQnLCAncHJpbWFyeUljb24nLCBbJ2dldCcsJ3N0eWxlJywgWydwcm9wZXJ0aWVzJ11dXSxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtc2l6ZSc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdiYXNlJzogMTgsXG4gICAgICAgICAgICAgICAgICAgICAgICAnc3RvcHMnOiBbWzEwLCAxOF0sIFsxNCwgMTZdXVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1saW5lLWhlaWdodCc6IDEsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LXBhZGRpbmcnOiAwLFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1vZmZzZXQnOiBbMCwwLjJdLFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1qdXN0aWZ5JzogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1hbmNob3InOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtYWxsb3ctb3ZlcmxhcCc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWZvbnQnOiBbJ0ZvbnQgQXdlc29tZSA2IFBybyBTb2xpZCddLFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1pZ25vcmUtcGxhY2VtZW50JzogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcGFpbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtdHJhbnNsYXRlLWFuY2hvcic6ICd2aWV3cG9ydCcsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWhhbG8tY29sb3InOiBnZW9mbG8ub3B0aW9ucy5jb2xvcnMucHJpbWFyeVNuYXAsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWhhbG8td2lkdGgnOiAwLCAvL1sgJ2Nhc2UnLCBbJ2Jvb2xlYW4nLCBbJ2ZlYXR1cmUtc3RhdGUnLCAnaG92ZXInXSwgZmFsc2VdLCAwLjUsIDAgXSxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtY29sb3InOiBnZW9mbG8ub3B0aW9ucy5jb2xvcnMuc2Vjb25kYXJ5U25hcFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc291cmNlOiBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5TTkFQLFxuICAgICAgICAgICAgICAgIGlkOiBpZCArICctaW1hZ2Utc25hcCcsXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBbJz09JywgWydnZXQnLCAndHlwZSddLCAnSW1hZ2UnXSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnc3ltYm9sJyxcbiAgICAgICAgICAgICAgICBsYXlvdXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgJ3Zpc2liaWxpdHknOiAndmlzaWJsZScsXG4gICAgICAgICAgICAgICAgICAgICdpY29uLWltYWdlJzogWydnZXQnLCAncHJpbWFyeUltYWdlJywgWydnZXQnLCdzdHlsZScsIFsncHJvcGVydGllcyddXV0sXG4gICAgICAgICAgICAgICAgICAgICdpY29uLXNpemUnOiBbJ2ludGVycG9sYXRlJywgWydsaW5lYXInXSwgWyd6b29tJ10sIDEsIDAuNCwgMTUsIDFdLFxuICAgICAgICAgICAgICAgICAgICAnaWNvbi1hbGxvdy1vdmVybGFwJzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgJ2ljb24tYW5jaG9yJzogJ2JvdHRvbSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICdzb3VyY2UnOiBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5TTkFQLFxuICAgICAgICAgICAgICAgICdpZCc6IGlkICsgJy1saW5lLXNuYXAnLFxuICAgICAgICAgICAgICAgICd0eXBlJzogJ2xpbmUnLFxuICAgICAgICAgICAgICAgIC8vJ2ZpbHRlcic6IFtcIj09XCIsIFwiJHR5cGVcIiwgXCJMaW5lU3RyaW5nXCJdLFxuICAgICAgICAgICAgICAgICdsYXlvdXQnOiB7XG4gICAgICAgICAgICAgICAgICAgICd2aXNpYmlsaXR5JzogJ3Zpc2libGUnLFxuICAgICAgICAgICAgICAgICAgICAnbGluZS1jYXAnOiAncm91bmQnLFxuICAgICAgICAgICAgICAgICAgICAnbGluZS1qb2luJzogJ3JvdW5kJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ3BhaW50Jzoge1xuICAgICAgICAgICAgICAgICAgICAnbGluZS1jb2xvcic6IGdlb2Zsby5vcHRpb25zLmNvbG9ycy5zZWNvbmRhcnlTbmFwLFxuICAgICAgICAgICAgICAgICAgICAnbGluZS13aWR0aCc6IDQsXG4gICAgICAgICAgICAgICAgICAgICdsaW5lLWRhc2hhcnJheSc6WzEsMl1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICdzb3VyY2UnOiBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5ST1VURSxcbiAgICAgICAgICAgICAgICAnaWQnOiBpZCArICctbGluZS1yb3V0ZScsXG4gICAgICAgICAgICAgICAgJ3R5cGUnOiAnbGluZScsXG4gICAgICAgICAgICAgICAgJ2ZpbHRlcic6IFtcIj09XCIsIFwiJHR5cGVcIiwgXCJMaW5lU3RyaW5nXCJdLFxuICAgICAgICAgICAgICAgICdsYXlvdXQnOiB7XG4gICAgICAgICAgICAgICAgICAgICd2aXNpYmlsaXR5JzogJ3Zpc2libGUnLFxuICAgICAgICAgICAgICAgICAgICAnbGluZS1jYXAnOiAncm91bmQnLFxuICAgICAgICAgICAgICAgICAgICAnbGluZS1qb2luJzogJ3JvdW5kJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ3BhaW50Jzoge1xuICAgICAgICAgICAgICAgICAgICAnbGluZS1jb2xvcic6IGdlb2Zsby5vcHRpb25zLmNvbG9ycy5lcnJvcixcbiAgICAgICAgICAgICAgICAgICAgJ2xpbmUtd2lkdGgnOiA0LFxuICAgICAgICAgICAgICAgICAgICAnbGluZS1kYXNoYXJyYXknOltdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAnc291cmNlJzogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuVkVSVEVYLFxuICAgICAgICAgICAgICAgICdpZCc6IGlkICsgJy1wb2ludC12ZXJ0ZXgnLFxuICAgICAgICAgICAgICAgICd0eXBlJzogJ2NpcmNsZScsXG4gICAgICAgICAgICAgICAgJ2ZpbHRlcic6IFsnPT0nLCBcIiR0eXBlXCIsICdMaW5lU3RyaW5nJ10sXG4gICAgICAgICAgICAgICAgJ3BhaW50Jzoge1xuICAgICAgICAgICAgICAgICAgICAnY2lyY2xlLXJhZGl1cyc6IDQsXG4gICAgICAgICAgICAgICAgICAgICdjaXJjbGUtc3Ryb2tlLXdpZHRoJzogMyxcbiAgICAgICAgICAgICAgICAgICAgJ2NpcmNsZS1jb2xvcic6IGdlb2Zsby5vcHRpb25zLmNvbG9ycy5wcmltYXJ5VmVydGV4LFxuICAgICAgICAgICAgICAgICAgICAnY2lyY2xlLXN0cm9rZS1jb2xvcic6IGdlb2Zsby5vcHRpb25zLmNvbG9ycy5zZWNvbmRhcnlWZXJ0ZXhcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICdzb3VyY2UnOiBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5HQU1FUEFELFxuICAgICAgICAgICAgICAgICdpZCc6IGlkICsgJy1nYW1lcGFkJyxcbiAgICAgICAgICAgICAgICAndHlwZSc6ICdzeW1ib2wnLFxuICAgICAgICAgICAgICAgICdsYXlvdXQnOiB7XG4gICAgICAgICAgICAgICAgICAgICd2aXNpYmlsaXR5JzogJ3Zpc2libGUnLFxuICAgICAgICAgICAgICAgICAgICAnaWNvbi1pbWFnZSc6ICdnYW1lcGFkJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ljb24tc2l6ZSc6IDAuMjVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICBcbiAgICAgICAgdGhpcy5zZWxlY3RMYXllcnMgPSBbe1xuICAgICAgICAgICAgJ3NvdXJjZSc6IGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLlNFTEVDVCxcbiAgICAgICAgICAgICdpZCc6IGlkICsgJy1saW5lLXNlbGVjdCcsXG4gICAgICAgICAgICAndHlwZSc6ICdsaW5lJyxcbiAgICAgICAgICAgICdzbG90JzogJ3RvcCcsXG4gICAgICAgICAgICAnbGF5b3V0Jzoge1xuICAgICAgICAgICAgICAgICd2aXNpYmlsaXR5JzogJ3Zpc2libGUnLFxuICAgICAgICAgICAgICAgICdsaW5lLWNhcCc6ICdyb3VuZCcsXG4gICAgICAgICAgICAgICAgJ2xpbmUtam9pbic6ICdyb3VuZCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAncGFpbnQnOiB7XG4gICAgICAgICAgICAgICAgJ2xpbmUtY29sb3InOiBnZW9mbG8ub3B0aW9ucy5jb2xvcnMuc2Vjb25kYXJ5U2VsZWN0LFxuICAgICAgICAgICAgICAgICdsaW5lLXdpZHRoJzogNCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnbWV0YWRhdGEnOiB7IHR5cGVzOiBbJ1BvbHlsaW5lJywgJ1BvbHlnb24nLCAnUmVjdGFuZ2xlJ10gfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICAnc291cmNlJzogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuU0VMRUNULFxuICAgICAgICAgICAgJ2lkJzogaWQgKyAnLWZpbGwtc2VsZWN0JyxcbiAgICAgICAgICAgICd0eXBlJzogJ2ZpbGwnLFxuICAgICAgICAgICAgJ2xheW91dCc6IHt9LFxuICAgICAgICAgICAgJ3Nsb3QnOiAndG9wJyxcbiAgICAgICAgICAgICdmaWx0ZXInOiBbXCI9PVwiLCBcIiR0eXBlXCIsIFwiUG9seWdvblwiXSxcbiAgICAgICAgICAgICdwYWludCc6IHtcbiAgICAgICAgICAgICAgICAnZmlsbC1jb2xvcic6IGdlb2Zsby5vcHRpb25zLmNvbG9ycy5wcmltYXJ5U2VsZWN0LFxuICAgICAgICAgICAgICAgICdmaWxsLW9wYWNpdHknOiAwLjRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnbWV0YWRhdGEnOiB7IHR5cGVzOiBbJ1BvbHlnb24nLCAnUmVjdGFuZ2xlJ10gfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICAnc291cmNlJzogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuU0VMRUNULFxuICAgICAgICAgICAgJ2lkJzogaWQgKyAnLXBvaW50LXNlbGVjdCcsXG4gICAgICAgICAgICAnZmlsdGVyJzogWydhbGwnLCBbJyE9JywgWydnZXQnLCAndHlwZSddLCAnVGV4dCddLCBbXCI9PVwiLCBbXCJnZW9tZXRyeS10eXBlXCJdLCBcIlBvaW50XCJdIF0sXG4gICAgICAgICAgICAndHlwZSc6ICdjaXJjbGUnLFxuICAgICAgICAgICAgJ3Nsb3QnOiAndG9wJyxcbiAgICAgICAgICAgICdsYXlvdXQnOiB7XG4gICAgICAgICAgICAgICAgJ3Zpc2liaWxpdHknOiAndmlzaWJsZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ3BhaW50Jzoge1xuICAgICAgICAgICAgICAgICdjaXJjbGUtcmFkaXVzJzogMTIsXG4gICAgICAgICAgICAgICAgJ2NpcmNsZS1zdHJva2Utd2lkdGgnOiAyLFxuICAgICAgICAgICAgICAgICdjaXJjbGUtY29sb3InOiBnZW9mbG8ub3B0aW9ucy5jb2xvcnMucHJpbWFyeVNlbGVjdCxcbiAgICAgICAgICAgICAgICAnY2lyY2xlLXN0cm9rZS1jb2xvcic6IGdlb2Zsby5vcHRpb25zLmNvbG9ycy5zZWNvbmRhcnlTZWxlY3QsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ21ldGFkYXRhJzogeyB0eXBlczogWydQb2ludCcsICdDaXJjbGUnLCAnTWFya2VyJywgJ0ljb24nXSB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgICdzb3VyY2UnOiBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5TRUxFQ1QsXG4gICAgICAgICAgICAnaWQnOiBpZCArICctc3ltYm9sLXNlbGVjdCcsXG4gICAgICAgICAgICAnZmlsdGVyJzogWyc9PScsIFsnZ2V0JywgJ3R5cGUnXSwgJ0ljb24nXSxcbiAgICAgICAgICAgICd0eXBlJzogJ3N5bWJvbCcsXG4gICAgICAgICAgICAnc2xvdCc6ICd0b3AnLFxuICAgICAgICAgICAgJ2xheW91dCc6IHtcbiAgICAgICAgICAgICAgICAndmlzaWJpbGl0eSc6ICd2aXNpYmxlJyxcbiAgICAgICAgICAgICAgICAnaWNvbi1vcHRpb25hbCc6IHRydWUsXG4gICAgICAgICAgICAgICAgJ3N5bWJvbC1wbGFjZW1lbnQnOiAncG9pbnQnLFxuICAgICAgICAgICAgICAgICd0ZXh0LXJvdGF0aW9uLWFsaWdubWVudCc6ICd2aWV3cG9ydCcsXG4gICAgICAgICAgICAgICAgJ3RleHQtZmllbGQnOiBbJ2dldCcsICdwcmltYXJ5SWNvbicsIFsnZ2V0Jywnc3R5bGUnLCBbJ3Byb3BlcnRpZXMnXV1dLFxuICAgICAgICAgICAgICAgICd0ZXh0LXJvdGF0ZSc6IFsnZ2V0JywgJ3JvdGF0ZScsIFsnZ2V0Jywnc3R5bGUnLCBbJ3Byb3BlcnRpZXMnXV1dLFxuICAgICAgICAgICAgICAgICd0ZXh0LXNpemUnOiAxNCxcbiAgICAgICAgICAgICAgICAndGV4dC1saW5lLWhlaWdodCc6IDEsXG4gICAgICAgICAgICAgICAgJ3RleHQtcGFkZGluZyc6IDAsXG4gICAgICAgICAgICAgICAgJ3RleHQtb2Zmc2V0JzogWzAsIDAuMl0sXG4gICAgICAgICAgICAgICAgJ3RleHQtanVzdGlmeSc6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAndGV4dC1hbmNob3InOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAndGV4dC1hbGxvdy1vdmVybGFwJzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAndGV4dC1mb250JzogWydGb250IEF3ZXNvbWUgNiBQcm8gU29saWQnXSxcbiAgICAgICAgICAgICAgICAndGV4dC1pZ25vcmUtcGxhY2VtZW50JzogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdwYWludCc6IHtcbiAgICAgICAgICAgICAgICAndGV4dC10cmFuc2xhdGUtYW5jaG9yJzogJ3ZpZXdwb3J0JyxcbiAgICAgICAgICAgICAgICAndGV4dC1oYWxvLWNvbG9yJzogZ2VvZmxvLm9wdGlvbnMuY29sb3JzLnNlY29uZGFyeVNlbGVjdCxcbiAgICAgICAgICAgICAgICAndGV4dC1oYWxvLXdpZHRoJzogMixcbiAgICAgICAgICAgICAgICAndGV4dC1jb2xvcic6IGdlb2Zsby5vcHRpb25zLmNvbG9ycy5wcmltYXJ5QmFja2dyb3VuZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnbWV0YWRhdGEnOiB7IHR5cGVzOiBbJ0ljb24nXSB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgICdzb3VyY2UnOiBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5TRUxFQ1QsXG4gICAgICAgICAgICAnaWQnOiBpZCArICctdGV4dC1zZWxlY3QnLFxuICAgICAgICAgICAgJ2ZpbHRlcic6IFsnPT0nLCBbJ2dldCcsICd0eXBlJ10sICdUZXh0J10sXG4gICAgICAgICAgICAndHlwZSc6ICdzeW1ib2wnLFxuICAgICAgICAgICAgJ3Nsb3QnOiAndG9wJyxcbiAgICAgICAgICAgICdsYXlvdXQnOiB7XG4gICAgICAgICAgICAgICAgJ3Zpc2liaWxpdHknOiAndmlzaWJsZScsXG4gICAgICAgICAgICAgICAgXCJzeW1ib2wtcGxhY2VtZW50XCI6IFwicG9pbnRcIixcbiAgICAgICAgICAgICAgICAndGV4dC1yb3RhdGlvbi1hbGlnbm1lbnQnOiAndmlld3BvcnQnLFxuICAgICAgICAgICAgICAgICd0ZXh0LWZpZWxkJzogWydnZXQnLCAndGV4dCddLFxuICAgICAgICAgICAgICAgICd0ZXh0LWZvbnQnOiBbJ0RJTiBQcm8gUmVndWxhcicsICdESU4gUHJvIEl0YWxpYycsICdBcmlhbCBVbmljb2RlIE1TIFJlZ3VsYXInLCAnRElOIE9mZmMgUHJvIE1lZGl1bScsICdBcmlhbCBVbmljb2RlIE1TIEJvbGQnXSxcbiAgICAgICAgICAgICAgICAndGV4dC1rZWVwLXVwcmlnaHQnOiB0cnVlLFxuICAgICAgICAgICAgICAgICd0ZXh0LWFsbG93LW92ZXJsYXAnOiB0cnVlLFxuICAgICAgICAgICAgICAgICd0ZXh0LXNpemUnOiAxOCxcbiAgICAgICAgICAgICAgICAndGV4dC1qdXN0aWZ5JzogWydnZXQnLCAnanVzdGlmeSddLFxuICAgICAgICAgICAgICAgICd0ZXh0LWxldHRlci1zcGFjaW5nJzogMC4xMixcbiAgICAgICAgICAgICAgICAndGV4dC1saW5lLWhlaWdodCc6IDEuMixcbiAgICAgICAgICAgICAgICAndGV4dC1tYXgtYW5nbGUnOiAxMCxcbiAgICAgICAgICAgICAgICAndGV4dC1vZmZzZXQnOiBbMCwxLjVdLFxuICAgICAgICAgICAgICAgICd0ZXh0LXBhZGRpbmcnOiAyLFxuICAgICAgICAgICAgICAgICd0ZXh0LXJvdGF0ZSc6IDAsXG4gICAgICAgICAgICAgICAgJ3RleHQtdHJhbnNmb3JtJzogWydnZXQnLCAndHJhbnNmb3JtJ11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAncGFpbnQnOiB7XG4gICAgICAgICAgICAgICAgJ3RleHQtY29sb3InOiBnZW9mbG8ub3B0aW9ucy5jb2xvcnMucHJpbWFyeUJhY2tncm91bmQsXG4gICAgICAgICAgICAgICAgJ3RleHQtaGFsby1jb2xvcic6IGdlb2Zsby5vcHRpb25zLmNvbG9ycy5wcmltYXJ5Q29sb3IsXG4gICAgICAgICAgICAgICAgJ3RleHQtaGFsby13aWR0aCc6IDIsXG4gICAgICAgICAgICAgICAgJ3RleHQtb3BhY2l0eSc6IDEsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ21ldGFkYXRhJzogeyB0eXBlczogWydUZXh0J10gfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICAnc291cmNlJzogZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuU0VMRUNULFxuICAgICAgICAgICAgJ2lkJzogaWQgKyAnLWltYWdlLXNlbGVjdCcsXG4gICAgICAgICAgICAnZmlsdGVyJzogWyc9PScsIFsnZ2V0JywgJ3R5cGUnXSwgJ0ltYWdlJ10sXG4gICAgICAgICAgICAndHlwZSc6ICdzeW1ib2wnLFxuICAgICAgICAgICAgJ3Nsb3QnOiAndG9wJyxcbiAgICAgICAgICAgICdsYXlvdXQnOiB7XG4gICAgICAgICAgICAgICAgJ3Zpc2liaWxpdHknOiAndmlzaWJsZScsXG4gICAgICAgICAgICAgICAgJ2ljb24taW1hZ2UnOiBbJ2dldCcsICdwcmltYXJ5SW1hZ2UnLCBbJ2dldCcsJ3N0eWxlJywgWydwcm9wZXJ0aWVzJ11dXSxcbiAgICAgICAgICAgICAgICAnaWNvbi1zaXplJzogWydpbnRlcnBvbGF0ZScsIFsnbGluZWFyJ10sIFsnem9vbSddLCAxLCAwLjQsIDE1LCAxXSxcbiAgICAgICAgICAgICAgICAnaWNvbi1hbGxvdy1vdmVybGFwJzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAnaWNvbi1hbmNob3InOiAnYm90dG9tJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdtZXRhZGF0YSc6IHsgdHlwZXM6IFsnSW1hZ2UnXSB9XG4gICAgICAgIH1dXG5cbiAgICAgICAgcmV0dXJuIHRoaXMucmVmcmVzaCh7IGluaXQ6IHRydWV9KTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkxheWVyc1xuXHQgKiBAbmFtZSByZWZyZXNoXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHJlZnJlc2hlcyB0aGUgbWFwIGJ5IHJlbW92aW5nIGV4aXN0aW5nIGxheWVycyBhbmQgc291cmNlcywgYWRkaW5nIGRlZmF1bHQgbGF5ZXJzIGFuZCBzb3VyY2VzLCBhbmQgcmVidWlsZGluZyB0aGUgbGF5ZXJzLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE9wdGlvbmFsIHBhcmFtZXRlciBmb3IgYWRkaXRpb25hbCBvcHRpb25zLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IC0gQW4gYXJyYXkgb2YgbGF5ZXJzIGFmdGVyIHRoZSByZWZyZXNoIG9wZXJhdGlvbi5cblx0ICovXG4gICAgdGhpcy5yZWZyZXNoID0gYXN5bmMgZnVuY3Rpb24gKG9wdGlvbnM9e30pIHtcbiAgICAgICAgaWYgKCFvcHRpb25zLmluaXQpIHJldHVybiB0aGlzLmluaXQob3B0aW9ucyk7XG4gICAgICAgIFxuICAgICAgICB2YXIgbGF5ZXJzID0gZ2VvZmxvLlV0aWxpdGllcy5jbG9uZURlZXAodGhpcy5fbGF5ZXJzKTtcblxuICAgICAgICB0aGlzLl9sYXllcnMgPSBbXTtcbiAgICAgICAgdGhpcy5fc291cmNlcyA9IFtdO1xuXG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5yZW1vdmVMYXllcnModGhpcy5kZWZhdWx0TGF5ZXJzKTtcbiAgICAgICAgdGhpcy5yZW1vdmVMYXllcnModGhpcy5zZWxlY3RMYXllcnMpO1xuICAgICAgICB0aGlzLnJlbW92ZVNvdXJjZXMoT2JqZWN0LnZhbHVlcyhnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlcykpO1xuXG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5hZGRTb3VyY2VzKE9iamVjdC52YWx1ZXMoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMpKTtcbiAgICAgICAgdGhpcy5hZGRMYXllcnModGhpcy5kZWZhdWx0TGF5ZXJzLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICBhd2FpdCBidWlsZExheWVycy5jYWxsKHRoaXMsIGxheWVycyk7XG4gICAgICAgIHRoaXMuYWRkTGF5ZXJzKHRoaXMuc2VsZWN0TGF5ZXJzLCB0aGlzLm9wdGlvbnMpO1xuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGdlb2Zsby5MYXllcnMubW92ZUxheWVycygpOyB9LCAyNTApO1xuICAgICAgICAvL3NldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGdlb2Zsby56b29tVG9GZWF0dXJlcyhnZW9mbG8uZ2V0UmVuZGVyZWREcmF3bkZlYXR1cmVzKCkpOyB9LCAzNTApO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRMYXllcnMoKTtcbiAgICB9XG5cblxuXG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkxheWVyc1xuXHQgKiBAbmFtZSBzZXRDdXN0b21MYXllcnNcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gdGFrZXMgYW4gYXJyYXkgb2YgY3VzdG9tIGxheWVycyBhbmQgb3B0aW9ucywgYnVpbGRzIHRoZSBsYXllcnMgdXNpbmcgdGhlIGJ1aWxkTGF5ZXJzIGZ1bmN0aW9uLCBhbmQgcmV0dXJucyB0aGUgcmVzdWx0aW5nIGxheWVycy5cblx0ICogQHBhcmFtIHtBcnJheX0gbGF5ZXJzIC0gQW4gYXJyYXkgb2YgY3VzdG9tIGxheWVycyB0byBiZSBwcm9jZXNzZWQuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gQWRkaXRpb25hbCBvcHRpb25zIGZvciBidWlsZGluZyB0aGUgbGF5ZXJzLlxuXHQgKiBAcmV0dXJucyB7UHJvbWlzZTxBcnJheT59IFRoZSBwcm9jZXNzZWQgY3VzdG9tIGxheWVycy5cblx0ICovXG4gICAgdGhpcy5zZXRDdXN0b21MYXllcnMgPSBhc3luYyBmdW5jdGlvbiAobGF5ZXJzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghbGF5ZXJzKSByZXR1cm4gW107XG4gICAgICAgIHJldHVybiBhd2FpdCBidWlsZExheWVycy5jYWxsKHRoaXMsIGxheWVycywgb3B0aW9ucyk7XG4gICAgfVxuXG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkxheWVyc1xuXHQgKiBAbmFtZSBnZXRDdXN0b21MYXllcnNcblx0ICogQGRlc2NyaXB0aW9uIFJldHJpZXZlcyB0aGUgY3VzdG9tIGxheWVycyBzdG9yZWQgaW4gdGhlIG9iamVjdC5cblx0ICogQHJldHVybnMge0FycmF5fSBBbiBhcnJheSBjb250YWluaW5nIHRoZSBjdXN0b20gbGF5ZXJzLlxuXHQgKi9cbiAgICB0aGlzLmdldEN1c3RvbUxheWVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xheWVycztcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkxheWVyc1xuXHQgKiBAbmFtZSBoYXNDdXN0b21MYXllcnNcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gZGV0ZXJtaW5lcyBpZiB0aGVyZSBhcmUgYW55IGN1c3RvbSBsYXllcnMgcHJlc2VudCBpbiB0aGUgYXBwbGljYXRpb24uXG5cdCAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgY3VzdG9tIGxheWVycyBhdmFpbGFibGUuXG5cdCAqL1xuICAgIHRoaXMuaGFzQ3VzdG9tTGF5ZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDdXN0b21MYXllcnMoKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgXG5cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uTGF5ZXJzXG5cdCAqIEBuYW1lIGdldEZlYXR1cmVzXG5cdCAqIEBkZXNjcmlwdGlvbiBSZXRyaWV2ZXMgdGhlIGZlYXR1cmVzIGZyb20gYSBzb3VyY2UgYmFzZWQgb24gdGhlIHByb3ZpZGVkIElELlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBUaGUgSUQgb2YgdGhlIHNvdXJjZSB0byByZXRyaWV2ZSBmZWF0dXJlcyBmcm9tLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEFuIGFycmF5IG9mIGZlYXR1cmVzIGZyb20gdGhlIHNwZWNpZmllZCBzb3VyY2UsIG9yIGFuIGVtcHR5IGFycmF5IGlmIHRoZSBzb3VyY2Ugb3IgZmVhdHVyZXMgYXJlIG5vdCBmb3VuZC5cblx0ICovXG4gICAgdGhpcy5nZXRGZWF0dXJlcyA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgc291cmNlID0gdGhpcy5nZXRTb3VyY2UoaWQpO1xuICAgICAgICBpZiAoIXNvdXJjZSB8fCAhc291cmNlLl9kYXRhKSByZXR1cm4gW107XG4gICAgICAgIHJldHVybiBzb3VyY2UuX2RhdGEuZmVhdHVyZXM7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5MYXllcnNcblx0ICogQG5hbWUgZ2V0U2VsZWN0aW9uXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGRldGVybWluZXMgdGhlIHNlbGVjdGVkIGZlYXR1cmUgYmFzZWQgb24gdGhlIHByb3ZpZGVkIGZlYXR1cmVzIGFycmF5IGFuZCBjb29yZGluYXRlcy5cblx0ICogQHBhcmFtIHtBcnJheX0gZmVhdHVyZXMgLSBBbiBhcnJheSBvZiBmZWF0dXJlcyB0byBzZWxlY3QgZnJvbS5cblx0ICogQHBhcmFtIHtPYmplY3R9IGNvb3JkcyAtIFRoZSBjb29yZGluYXRlcyBvZiB0aGUgc2VsZWN0ZWQgZmVhdHVyZS5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBhIGZlYXR1cmUgaXMgc2VsZWN0ZWQsIGZhbHNlIG90aGVyd2lzZS5cblx0ICovXG4gICAgdGhpcy5nZXRTZWxlY3Rpb24gPSBmdW5jdGlvbiAoZmVhdHVyZXM9W10sIGNvb3Jkcykge1xuICAgICAgICB2YXIgZmVhdHVyZSA9IGZlYXR1cmVzICYmIGZlYXR1cmVzLmxlbmd0aCA/IGZlYXR1cmVzWzBdIDogZmFsc2U7XG4gICAgICAgIGlmICghZmVhdHVyZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoZmVhdHVyZS5wcm9wZXJ0aWVzLmNsdXN0ZXIpIHJldHVybiBMYXllcnMub25DbHVzdGVyQ2xpY2soZmVhdHVyZSwgY29vcmRzKSwgZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uTGF5ZXJzXG5cdCAqIEBuYW1lIGdldFR5cGVcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gdGFrZXMgYSBnZW9tZXRyeSB0eXBlIGFzIGlucHV0IGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIGdlbmVyYWwgdHlwZSAoUG9seWdvbiwgUG9seWxpbmUsIG9yIFBvaW50KS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdHlwZSBvZiBnZW9tZXRyeSB0byBiZSBldmFsdWF0ZWQuXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd8Ym9vbGVhbn0gUmV0dXJucyB0aGUgZ2VuZXJhbCB0eXBlIG9mIHRoZSBnZW9tZXRyeSAoUG9seWdvbiwgUG9seWxpbmUsIFBvaW50KSBvciBmYWxzZSBpZiB0aGUgdHlwZSBpcyBub3QgcmVjb2duaXplZC5cblx0ICovXG4gICAgdGhpcy5nZXRUeXBlID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGUgPT09ICdQb2x5Z29uJyB8fCB0eXBlID09PSAnUmVjdGFuZ2xlJyA/ICdQb2x5Z29uJyA6XG4gICAgICAgIHR5cGUgPT09ICdQb2x5bGluZScgfHwgdHlwZSA9PT0gJ0xpbmVTdHJpbmcnIHx8IHR5cGUgPT09ICdMaW5lJyA/ICdQb2x5bGluZScgOlxuICAgICAgICB0eXBlID09PSAnUG9pbnQnIHx8IHR5cGUgPT09ICdDaXJjbGUnIHx8IHR5cGUgPT09ICdNYXJrZXInIHx8IHR5cGUgPT09ICdJY29uJyB8fCB0eXBlID09PSAnVGV4dCcgPyAnUG9pbnQnIDpcbiAgICAgICAgdHlwZSA9PT0gJ0ltYWdlJyA/ICdJbWFnZScgOlxuICAgICAgICBmYWxzZTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkxheWVyc1xuXHQgKiBAbmFtZSBnZXRTb3VyY2VzXG5cdCAqIEBkZXNjcmlwdGlvbiBSZXRyaWV2ZXMgdGhlIHNvdXJjZXMgc3RvcmVkIGluIHRoZSBvYmplY3QuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gQW4gYXJyYXkgY29udGFpbmluZyB0aGUgc291cmNlcy5cblx0ICovXG4gICAgdGhpcy5nZXRTb3VyY2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VzO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uTGF5ZXJzXG5cdCAqIEBuYW1lIGdldFNvdXJjZVxuXHQgKiBAZGVzY3JpcHRpb24gUmV0cmlldmVzIGEgc3BlY2lmaWMgc291cmNlIG9iamVjdCBieSBpdHMgSUQgZnJvbSB0aGUgbGlzdCBvZiBzb3VyY2VzLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBUaGUgSUQgb2YgdGhlIHNvdXJjZSB0byByZXRyaWV2ZS5cblx0ICogQHJldHVybnMge29iamVjdHxib29sZWFufSBUaGUgc291cmNlIG9iamVjdCB3aXRoIHRoZSBzcGVjaWZpZWQgSUQgaWYgZm91bmQsIG90aGVyd2lzZSBmYWxzZS5cblx0ICovXG4gICAgdGhpcy5nZXRTb3VyY2UgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgaWYgKCFpZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgc291cmNlcyA9IHRoaXMuZ2V0U291cmNlcygpO1xuICAgICAgICByZXR1cm4gc291cmNlcy5maW5kKGZ1bmN0aW9uKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmlkID09PSBpZCB9KVxuICAgIH1cblxuXHQvKiogXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkxheWVyc1xuXHQgKiBAbmFtZSBnZXRTb3VyY2VJZHNcblx0ICogQGRlc2NyaXB0aW9uIFJldHJpZXZlcyB0aGUgSURzIG9mIGFsbCBzb3VyY2VzLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEFuIGFycmF5IG9mIHNvdXJjZSBJRHMuXG5cdCAqL1xuICAgIHRoaXMuZ2V0U291cmNlSWRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTb3VyY2VzKCkubWFwKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLmlkIH0pO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uTGF5ZXJzXG5cdCAqIEBuYW1lIGdldExheWVyc1xuXHQgKiBAZGVzY3JpcHRpb24gUmV0cmlldmVzIHRoZSBsYXllcnMgYXJyYXkgZnJvbSB0aGUgb2JqZWN0LlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBsYXllcnMgYXJyYXkuXG5cdCAqL1xuICAgIHRoaXMuZ2V0TGF5ZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sYXllcnM7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5MYXllcnNcblx0ICogQG5hbWUgZ2V0TGF5ZXJcblx0ICogQGRlc2NyaXB0aW9uIFJldHJpZXZlcyBhIGxheWVyIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBJRCBvciBzb3VyY2UgSUQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIFRoZSBJRCBvZiB0aGUgbGF5ZXIgdG8gcmV0cmlldmUuXG5cdCAqIEByZXR1cm5zIHtvYmplY3R8Ym9vbGVhbn0gVGhlIGxheWVyIG9iamVjdCBpZiBmb3VuZCwgb3IgZmFsc2UgaWYgbm90IGZvdW5kLlxuXHQgKi9cbiAgICB0aGlzLmdldExheWVyID0gZnVuY3Rpb24gKGlkLCBjdXN0b20pIHtcbiAgICAgICAgaWYgKCFpZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgbGF5ZXJzID0gY3VzdG9tID8gdGhpcy5nZXRDdXN0b21MYXllcnMoKSA6IHRoaXMuZ2V0TGF5ZXJzKCk7XG4gICAgICAgIHZhciBsYXllciA9IGxheWVycy5maW5kKGZ1bmN0aW9uKGxheWVyKSB7IHJldHVybiBsYXllci5pZCA9PT0gaWQgfSk7XG4gICAgICAgIGlmICghbGF5ZXIpIGxheWVyID0gbGF5ZXJzLmZpbHRlcihmdW5jdGlvbihsYXllcikgeyByZXR1cm4gbGF5ZXIuc291cmNlID09PSBpZCB9KTtcbiAgICAgICAgcmV0dXJuIGxheWVyO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uTGF5ZXJzXG5cdCAqIEBuYW1lIGdldExheWVySWRzXG5cdCAqIEBkZXNjcmlwdGlvbiBSZXRyaWV2ZXMgdGhlIElEcyBvZiB0aGUgbGF5ZXJzIHByb3ZpZGVkIG9yIHRoZSBkZWZhdWx0IGxheWVycyBpZiBub25lIGFyZSBwcm92aWRlZC5cblx0ICogQHBhcmFtIHtBcnJheX0gbGF5ZXJzIC0gQW4gYXJyYXkgb2YgbGF5ZXIgb2JqZWN0cy5cblx0ICogQHJldHVybnMge0FycmF5fSBBbiBhcnJheSBvZiBsYXllciBJRHMuXG5cdCAqL1xuICAgIHRoaXMuZ2V0TGF5ZXJJZHMgPSBmdW5jdGlvbiAobGF5ZXJzKSB7XG4gICAgICAgIHZhciBfbGF5ZXJzID0gbGF5ZXJzIHx8IHRoaXMuZ2V0Q3VzdG9tTGF5ZXJzKCk7XG4gICAgICAgIHJldHVybiBfbGF5ZXJzLm1hcChmdW5jdGlvbiAobCkgeyByZXR1cm4gbC5pZCB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmdldExheWVyVHlwZSA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICBsZXQgdHlwZSA9ICcnO1xuICAgICAgICBjb25zdCBsYXllciA9IHRoaXMuZ2V0TGF5ZXIoaWQsIHRydWUpO1xuICAgICAgICBpZiAobGF5ZXIgJiYgbGF5ZXIuZGV0YWlscykgdHlwZSA9IGxheWVyLmRldGFpbHMudHlwZTtcbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxuXG5cblxuICAgIFxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5MYXllcnNcblx0ICogQG5hbWUgYWRkU291cmNlc1xuXHQgKiBAZGVzY3JpcHRpb24gQWRkcyBtdWx0aXBsZSBzb3VyY2VzIHRvIHRoZSBjb250ZXh0IHdpdGggdGhlIGdpdmVuIG9wdGlvbnMuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZXMgLSBBbiBhcnJheSBvZiBzb3VyY2VzIHRvIGJlIGFkZGVkLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIEFkZGl0aW9uYWwgb3B0aW9ucyBmb3IgYWRkaW5nIHRoZSBzb3VyY2VzLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IC0gQW4gYXJyYXkgb2YgYWxsIHRoZSBhZGRlZCBzb3VyY2VzLlxuXHQgKi9cbiAgICB0aGlzLmFkZFNvdXJjZXMgPSBmdW5jdGlvbiAoc291cmNlcz1bXSwgb3B0aW9ucz17fSkge1xuICAgICAgICBzb3VyY2VzLmZvckVhY2goZnVuY3Rpb24oc291cmNlKSB7IHRoaXMuYWRkU291cmNlKHNvdXJjZSwgZmFsc2UsIG9wdGlvbnMpIH0sIHRoaXMpO1xuICAgICAgICBnZW9mbG8uZmlyZSgnc291cmNlcy5hZGQnLCB7IHNvdXJjZXM6IHRoaXMuZ2V0U291cmNlcygpIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTb3VyY2VzKCk7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5MYXllcnNcblx0ICogQG5hbWUgYWRkU291cmNlXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGFkZHMgYSBuZXcgc291cmNlIHRvIHRoZSBtYXAgdXNpbmcgdGhlIHByb3ZpZGVkIElEIGFuZCB0eXBlLiBJdCBhbHNvIGFjY2VwdHMgb3B0aW9uYWwgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgc291cmNlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBzb3VyY2UuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIHR5cGUgb2YgdGhlIHNvdXJjZSAoZS5nLiwgJ2dlb2pzb24nLCAndmVjdG9yJywgJ3Jhc3RlcicsIGV0Yy4pLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIC0gQWRkaXRpb25hbCBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBzb3VyY2UgKGUuZy4sIGZlYXR1cmVzLCBwcm9tb3RlSWQsIGNsdXN0ZXJNYXhab29tLCBjbHVzdGVyUmFkaXVzKS5cblx0ICogQHJldHVybnMge09iamVjdH0gVGhlIG5ld2x5IGFkZGVkIHNvdXJjZSBvYmplY3QuXG5cdCAqL1xuICAgIHRoaXMuYWRkU291cmNlID0gZnVuY3Rpb24gKGlkLCB0eXBlLCBvcHRpb25zPXt9KSB7XG4gICAgICAgIGlmICghaWQpIHRocm93IG5ldyBFcnJvcignTm8gc291cmNlIHdhcyBwcm92aWRlZCEnKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBvcHRzID0geyB0eXBlOiBvcHRpb25zLnR5cGUgfHwgXCJnZW9qc29uXCIsIGRhdGE6IHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24ob3B0aW9ucy5mZWF0dXJlcyB8fCBbXSksIHByb21vdGVJZDogb3B0aW9ucy5wcm9tb3RlSWQgfHwgJ2lkJyB9O1xuICAgICAgICBpZiAodHlwZSAmJiB0eXBlID09PSAnUG9pbnQnICYmICFvcHRpb25zLm5vQ2x1c3RlcikgeyBvcHRzID0gT2JqZWN0LmFzc2lnbihvcHRzLCB7IGNsdXN0ZXI6IHRydWUsIGNsdXN0ZXJNYXhab29tOiBvcHRpb25zLmNsdXN0ZXJNYXhab29tIHx8IDE0LCBjbHVzdGVyUmFkaXVzOiBvcHRpb25zLmNsdXN0ZXJSYWRpdXMgfHwgNTAgfSkgfVxuXG4gICAgICAgIG1hcC5hZGRTb3VyY2UoaWQsIG9wdHMpO1xuICAgICAgICB0aGlzLnNvdXJjZXMucHVzaChtYXAuZ2V0U291cmNlKGlkKSk7XG4gICAgICAgIGdlb2Zsby5maXJlKCdzb3VyY2UuYWRkJywgeyBpZDogaWQsIHNvdXJjZTogdGhpcy5nZXRTb3VyY2UoaWQpIH0pXG4gICAgICAgIHJldHVybiB0aGlzLmdldFNvdXJjZShpZCk7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5MYXllcnNcblx0ICogQG5hbWUgYWRkTGF5ZXJzXG5cdCAqIEBkZXNjcmlwdGlvbiBBZGRzIG11bHRpcGxlIGxheWVycyB0byB0aGUgbWFwLlxuXHQgKiBAcGFyYW0ge0FycmF5fSBsYXllcnMgLSBBbiBhcnJheSBvZiBsYXllcnMgdG8gYmUgYWRkZWQgdG8gdGhlIG1hcC5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBBZGRpdGlvbmFsIG9wdGlvbnMgZm9yIGFkZGluZyB0aGUgbGF5ZXJzLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IC0gQW4gYXJyYXkgb2YgbGF5ZXJzIHRoYXQgaGF2ZSBiZWVuIGFkZGVkIHRvIHRoZSBtYXAuXG5cdCAqL1xuICAgIHRoaXMuYWRkTGF5ZXJzID0gZnVuY3Rpb24gKGxheWVycz1bXSwgb3B0aW9ucz17fSkge1xuICAgICAgICBsYXllcnMuZm9yRWFjaChmdW5jdGlvbihsYXllciwgaW5kZXgpIHsgdGhpcy5hZGRMYXllcihsYXllciwgb3B0aW9ucywgaW5kZXgpIH0sIHRoaXMpO1xuICAgICAgICBnZW9mbG8uZmlyZSgnbGF5ZXJzLmFkZCcsIHsgbGF5ZXJzOiB0aGlzLmdldExheWVycygpIH0pO1xuICAgICAgICBidWlsZEV2ZW50cy5jYWxsKHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRMYXllcnMoKTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkxheWVyc1xuXHQgKiBAbmFtZSBhZGRMYXllclxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBhZGRzIGEgbGF5ZXIgdG8gdGhlIG1hcCB3aXRoIHRoZSBwcm92aWRlZCBvcHRpb25zLiBJdCBhbHNvIHVwZGF0ZXMgdGhlIGxheWVyJ3MgbWV0YWRhdGEsIGFkZHMgdGhlIGxheWVyIHRvIHRoZSBtYXAsIGFuZCBwdXNoZXMgdGhlIGxheWVyIHRvIHRoZSBsYXllcnMgYXJyYXkuIEl0IHRyaWdnZXJzIGEgJ2xheWVyLmFkZCcgZXZlbnQgYW5kIHJldHVybnMgdGhlIGFkZGVkIGxheWVyLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gbGF5ZXIgLSBUaGUgbGF5ZXIgb2JqZWN0IHRvIGJlIGFkZGVkIHRvIHRoZSBtYXAuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gLSBBZGRpdGlvbmFsIG9wdGlvbnMgZm9yIHRoZSBsYXllci5cblx0ICogQHJldHVybnMge09iamVjdH0gVGhlIGFkZGVkIGxheWVyLlxuXHQgKi9cbiAgICB0aGlzLmFkZExheWVyID0gZnVuY3Rpb24gKGxheWVyLCBvcHRpb25zPXt9LCBpbmRleCkge1xuICAgICAgICBpZiAoIWxheWVyIHx8ICFsYXllci5pZCkgcmV0dXJuIGZhbHNlOyAgICAgICAgXG4gICAgICAgIGxheWVyLm1ldGFkYXRhID0gbGF5ZXIubWV0YWRhdGEgfHwgb3B0aW9ucztcblxuICAgICAgICBtYXAuYWRkTGF5ZXIobGF5ZXIpO1xuXG4gICAgICAgIGxheWVyID0gbWFwLmdldExheWVyKGxheWVyLmlkKTtcbiAgICAgICAgaWYgKCFsYXllcikgcmV0dXJuIGNvbnNvbGUuZXJyb3IoaWQsICdMYXllciBOb3QgQWRkZWQhJyk7XG5cbiAgICAgICAgdGhpcy5sYXllcnMucHVzaChsYXllcik7XG4gICAgICAgIGdlb2Zsby5maXJlKCdsYXllci5hZGQnLCB7IGlkOiBsYXllci5pZCwgbGF5ZXI6IHRoaXMuZ2V0TGF5ZXIobGF5ZXIuaWQpIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRMYXllcihsYXllci5pZCk7XG4gICAgfVxuXG4gICAgdGhpcy5hZGRUZXh0TGF5ZXIgPSBmdW5jdGlvbiAob3B0aW9ucz17fSkge1xuICAgICAgICB2YXIgbGF5ZXJzID0gb3B0aW9ucy5zZWxlY3QgPyBnZW9mbG8uTGF5ZXJzLmdldExheWVyKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLlNFTEVDVCkgOiB0aGlzLmdldEN1c3RvbUxheWVycygpO1xuICAgICAgICB2YXIgZmllbGQgPSBvcHRpb25zLmZpZWxkIHx8ICd0ZXh0JztcblxuICAgICAgICB0aGlzLnJlbW92ZVRleHRMYXllcihvcHRpb25zKTtcblxuICAgICAgICBsYXllcnMuZm9yRWFjaChmdW5jdGlvbihsYXllcikge1xuICAgICAgICAgICAgdmFyIGlkID0gbGF5ZXIuaWQgKyAnLVRleHQnO1xuXG4gICAgICAgICAgICB2YXIgZmlsdGVyID0gWydhbGwnLCBbJz09JywgW1wiZ2VvbWV0cnktdHlwZVwiXSwgJ1BvaW50J10sIFtcImhhc1wiLCBmaWVsZF0gXTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmZpbHRlcikgZmlsdGVyID0gb3B0aW9ucy5maWx0ZXI7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuc2VsZWN0ICYmIG9wdGlvbnMuaWRzKSBmaWx0ZXIgPSBbJ2luJywgJ2lkJywgLi4ub3B0aW9ucy5pZHNdO1xuXG4gICAgICAgICAgICB2YXIgbGF5b3V0ID0gT2JqZWN0LmFzc2lnbih7fSwge1xuICAgICAgICAgICAgICAgICd2aXNpYmlsaXR5JzogJ3Zpc2libGUnLFxuICAgICAgICAgICAgICAgICdzeW1ib2wtcGxhY2VtZW50JzogJ3BvaW50JyxcbiAgICAgICAgICAgICAgICAndGV4dC1yb3RhdGlvbi1hbGlnbm1lbnQnOiAndmlld3BvcnQnLFxuICAgICAgICAgICAgICAgICd0ZXh0LWZpZWxkJzogWydnZXQnLCBmaWVsZF0sXG4gICAgICAgICAgICAgICAgJ3RleHQta2VlcC11cHJpZ2h0JzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAndGV4dC1hbGxvdy1vdmVybGFwJzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAndGV4dC1hbmNob3InOiAndG9wJyxcbiAgICAgICAgICAgICAgICAndGV4dC1zaXplJzogMTIsXG4gICAgICAgICAgICAgICAgJ3RleHQtanVzdGlmeSc6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICd0ZXh0LWxldHRlci1zcGFjaW5nJzogMC4yNSxcbiAgICAgICAgICAgICAgICAndGV4dC1saW5lLWhlaWdodCc6IDEuMixcbiAgICAgICAgICAgICAgICAndGV4dC1tYXgtYW5nbGUnOiAxMCxcbiAgICAgICAgICAgICAgICAndGV4dC1vZmZzZXQnOiBbMCwgMC41XSxcbiAgICAgICAgICAgICAgICAndGV4dC1wYWRkaW5nJzogMixcbiAgICAgICAgICAgICAgICAndGV4dC1yb3RhdGUnOiAwLFxuICAgICAgICAgICAgICAgICd0ZXh0LXRyYW5zZm9ybSc6ICdub25lJyxcbiAgICAgICAgICAgICAgICAndGV4dC1mb250JzogWydBcmlhbCBVbmljb2RlIE1TIFJlZ3VsYXInLCAnRElOIE9mZmMgUHJvIE1lZGl1bScsICdBcmlhbCBVbmljb2RlIE1TIEJvbGQnXSxcbiAgICAgICAgICAgICAgICAndGV4dC1pZ25vcmUtcGxhY2VtZW50JzogZmFsc2UsXG4gICAgICAgICAgICAgICAgJ3RleHQtbWF4LXdpZHRoJzogMTVcbiAgICAgICAgICAgIH0sIGxheWVyLnRleHQgPyBsYXllci50ZXh0LmxheW91dCB8fCB7fSA6IHt9LCBvcHRpb25zLmxheW91dCk7XG5cbiAgICAgICAgICAgIHZhciBwYWludCA9IE9iamVjdC5hc3NpZ24oe30sIHtcbiAgICAgICAgICAgICAgICAndGV4dC10cmFuc2xhdGUtYW5jaG9yJzogJ3ZpZXdwb3J0JyxcbiAgICAgICAgICAgICAgICAndGV4dC1oYWxvLWNvbG9yJzogWydnZXQnLCAncHJpbWFyeUNvbG9yJywgWydnZXQnLCdzdHlsZScsIFsncHJvcGVydGllcyddXV0sXG4gICAgICAgICAgICAgICAgJ3RleHQtaGFsby13aWR0aCc6IDEuMixcbiAgICAgICAgICAgICAgICAndGV4dC1jb2xvcic6IFsnZ2V0JywgJ3NlY29uZGFyeUNvbG9yJywgWydnZXQnLCdzdHlsZScsIFsncHJvcGVydGllcyddXV0sXG4gICAgICAgICAgICAgICAgJ3RleHQtb3BhY2l0eSc6IFsnY2FzZScsIFtcImJvb2xlYW5cIiwgW1wiZmVhdHVyZS1zdGF0ZVwiLCBcImhpZGRlblwiXSwgdHJ1ZV0sIDAsIFsnZ2V0JywgJ29wYWNpdHknLCBbJ2dldCcsJ3N0eWxlJywgWydwcm9wZXJ0aWVzJ11dXV1cbiAgICAgICAgICAgIH0sIGxheWVyLnRleHQgPyBsYXllci50ZXh0LnBhaW50IHx8IHt9IDoge30sIG9wdGlvbnMucGFpbnQpO1xuXG4gICAgICAgICAgICB2YXIgc3R5bGUgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdzeW1ib2wnLFxuICAgICAgICAgICAgICAgIHNvdXJjZTogbGF5ZXIuc291cmNlIHx8IGxheWVyLmRldGFpbHMuc291cmNlIHx8IGlkLFxuICAgICAgICAgICAgICAgIHNsb3Q6ICd0b3AnLFxuICAgICAgICAgICAgICAgIGZpbHRlcjogZmlsdGVyLFxuICAgICAgICAgICAgICAgIGxheW91dDogbGF5b3V0LFxuICAgICAgICAgICAgICAgIHBhaW50OiBwYWludCxcbiAgICAgICAgICAgICAgICBtZXRhZGF0YTogeyB0ZXh0OiB0cnVlLCBuYW1lOiBpZCB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghbWFwLmdldExheWVyKGlkKSkgbWFwLmFkZExheWVyKHN0eWxlKTtcbiAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgdGhpcy5zaG93VGV4dExheWVycyA9IHRydWU7XG4gICAgfVxuXG5cblxuXG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkxheWVyc1xuXHQgKiBAbmFtZSByZW1vdmVTb3VyY2VzXG5cdCAqIEBkZXNjcmlwdGlvbiBSZW1vdmVzIHNvdXJjZXMgZnJvbSB0aGUgbWFwLlxuXHQgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2VzIC0gQW4gYXJyYXkgb2Ygc291cmNlIElEcyB0byBiZSByZW1vdmVkLiBJZiBub3QgcHJvdmlkZWQsIGl0IGRlZmF1bHRzIHRvIGFsbCBzb3VyY2UgSURzLlxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG4gICAgdGhpcy5yZW1vdmVTb3VyY2VzID0gZnVuY3Rpb24gKHNvdXJjZXMpIHtcbiAgICAgICAgc291cmNlcyA9IHNvdXJjZXMgfHwgdGhpcy5nZXRTb3VyY2VJZHMoKTtcbiAgICAgICAgc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uKGlkKSB7IHRoaXMucmVtb3ZlU291cmNlKGlkKSB9LCB0aGlzKTtcbiAgICAgICAgZ2VvZmxvLmZpcmUoJ3NvdXJjZXMucmVtb3ZlJywgeyByZW1vdmVkOiB0cnVlIH0pXG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5MYXllcnNcblx0ICogQG5hbWUgcmVtb3ZlU291cmNlXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHJlbW92ZXMgYSBzb3VyY2UgZnJvbSB0aGUgbWFwIGFuZCB0aGUgaW50ZXJuYWwgc291cmNlcyBhcnJheSBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgaWQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIFRoZSBpZCBvZiB0aGUgc291cmNlIHRvIGJlIHJlbW92ZWQuXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBpZCBvZiB0aGUgcmVtb3ZlZCBzb3VyY2UuXG5cdCAqL1xuICAgIHRoaXMucmVtb3ZlU291cmNlID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIGlmICghaWQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKG1hcC5nZXRTb3VyY2UoaWQpKSBtYXAucmVtb3ZlU291cmNlKGlkKTtcblxuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgaW5kZXggPSB0aGlzLnNvdXJjZXMuZmluZEluZGV4KGZ1bmN0aW9uKGwpIHsgcmV0dXJuIGwuaWQgPT09IGlkIH0pO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkgdGhpcy5zb3VyY2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIFxuICAgICAgICBnZW9mbG8uZmlyZSgnc291cmNlLnJlbW92ZScsIHsgcmVtb3ZlZDogaWQgfSk7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkxheWVyc1xuXHQgKiBAbmFtZSByZW1vdmVMYXllcnNcblx0ICogQGRlc2NyaXB0aW9uIFJlbW92ZXMgbXVsdGlwbGUgbGF5ZXJzIGZyb20gdGhlIGNvbnRleHQuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGxheWVycyAtIEFuIGFycmF5IG9mIGxheWVyIG9iamVjdHMgdG8gYmUgcmVtb3ZlZC5cblx0ICogQHJldHVybnMge0FycmF5fSAtIEFuIGFycmF5IG9mIElEcyBvZiB0aGUgcmVtb3ZlZCBsYXllcnMuXG5cdCAqL1xuICAgIHRoaXMucmVtb3ZlTGF5ZXJzID0gZnVuY3Rpb24gKGxheWVycykge1xuICAgICAgICB2YXIgaWRzID0gdGhpcy5nZXRMYXllcklkcyhsYXllcnMpO1xuICAgICAgICB0aGlzLnJlbW92ZVRleHRMYXllcigpO1xuICAgICAgICBpZHMuZm9yRWFjaChmdW5jdGlvbihpZCkgeyB0aGlzLnJlbW92ZUxheWVyKGlkKSB9LCB0aGlzKTtcbiAgICAgICAgZ2VvZmxvLmZpcmUoJ2xheWVycy5yZW1vdmUnLCB7IHJlbW92ZWQ6IGlkcyB9KTtcbiAgICAgICAgcmV0dXJuIGlkcztcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkxheWVyc1xuXHQgKiBAbmFtZSByZW1vdmVMYXllclxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiByZW1vdmVzIGEgbGF5ZXIgZnJvbSB0aGUgbWFwIGFuZCB0aGUgbGF5ZXJzIGFycmF5IGJhc2VkIG9uIHRoZSBwcm92aWRlZCBpZC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGlkIC0gVGhlIGlkIG9mIHRoZSBsYXllciB0byBiZSByZW1vdmVkLlxuXHQgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgaWQgb2YgdGhlIHJlbW92ZWQgbGF5ZXIuXG5cdCAqL1xuICAgIHRoaXMucmVtb3ZlTGF5ZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgaWYgKCFpZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zb2xlLmxvZygnUmVtb3ZpbmcgTGF5ZXI6JywgaWQpO1xuICAgICAgICBpZiAobWFwLmdldExheWVyKGlkKSkgbWFwLnJlbW92ZUxheWVyKGlkKTtcblxuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgaW5kZXggPSB0aGlzLmxheWVycy5maW5kSW5kZXgoZnVuY3Rpb24obCkgeyByZXR1cm4gbC5pZCA9PT0gaWQgfSk7XG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB0aGlzLmxheWVycy5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgICAgIGdlb2Zsby5maXJlKCdsYXllci5yZW1vdmUnLCB7IHJlbW92ZWQ6IGlkIH0pO1xuICAgICAgICByZXR1cm4gaWQ7XG4gICAgfVxuXG4gICAgdGhpcy5yZW1vdmVUZXh0TGF5ZXIgPSBmdW5jdGlvbiAob3B0aW9ucz17fSkge1xuICAgICAgICB2YXIgbGF5ZXJzID0gdGhpcy5nZXRMYXllcnMoKTtcbiAgICAgICAgbGF5ZXJzLmZvckVhY2goZnVuY3Rpb24obGF5ZXIpIHsgaWYgKGxheWVyLm1ldGFkYXRhLnRleHQgJiYgbWFwLmdldExheWVyKGxheWVyLmlkKSkgbWFwLnJlbW92ZUxheWVyKGxheWVyLmlkKSB9LCB0aGlzKTtcbiAgICAgICAgdGhpcy5zaG93VGV4dExheWVycyA9IGZhbHNlO1xuICAgIH1cblxuXG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkxheWVyc1xuXHQgKiBAbmFtZSBtb3ZlTGF5ZXJzXG5cdCAqIEBkZXNjcmlwdGlvbiBNb3ZlcyB0aGUgc3BlY2lmaWVkIGxheWVycyBvbiB0aGUgbWFwLlxuXHQgKiBAcGFyYW0ge0FycmF5fSBsYXllcnMgLSBBbiBhcnJheSBvZiBsYXllciBvYmplY3RzIHRvIGJlIG1vdmVkIG9uIHRoZSBtYXAuXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cbiAgICB0aGlzLm1vdmVMYXllcnMgPSBmdW5jdGlvbiAobGF5ZXJzKSB7XG4gICAgICAgIGxheWVycyA9ICFsYXllcnMgPyB0aGlzLmRlZmF1bHRMYXllcnMgOiBsYXllcnM7XG4gICAgICAgIGxheWVycy5mb3JFYWNoKGZ1bmN0aW9uIChsYXllcikgeyBpZiAoZ2VvZmxvLm1hcC5nZXRMYXllcihsYXllci5pZCkpIGdlb2Zsby5tYXAubW92ZUxheWVyKGxheWVyLmlkKSB9KVxuICAgIH1cblxuXG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkxheWVyc1xuXHQgKiBAbmFtZSBhZGRFdmVudExpc3RlbmVyc1xuXHQgKiBAZGVzY3JpcHRpb24gQXR0YWNoZXMgZXZlbnQgbGlzdGVuZXJzIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBvcHRpb25zLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIEFuIG9iamVjdCBjb250YWluaW5nIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgZXZlbnQgbGlzdGVuZXJzLlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSAtIFRoZSByZXN1bHQgb2YgdGhlIGJ1aWxkRXZlbnRzIGZ1bmN0aW9uIHdpdGggdGhlIHByb3ZpZGVkIG9wdGlvbnMuXG5cdCAqL1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAob3B0aW9ucz17fSkge1xuICAgICAgICByZXR1cm4gYnVpbGRFdmVudHMuY2FsbCh0aGlzLCB7IG9uOiB0cnVlIH0pXG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5MYXllcnNcblx0ICogQG5hbWUgcmVtb3ZlRXZlbnRMaXN0ZW5lcnNcblx0ICogQGRlc2NyaXB0aW9uIFJlbW92ZXMgZXZlbnQgbGlzdGVuZXJzIGZyb20gdGhlIGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgb3B0aW9ucyBmb3IgcmVtb3ZpbmcgZXZlbnQgbGlzdGVuZXJzLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMub2ZmIC0gQSBib29sZWFuIGZsYWcgdG8gaW5kaWNhdGUgd2hldGhlciB0byB0dXJuIG9mZiBldmVudCBsaXN0ZW5lcnMuXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gKG9wdGlvbnM9e30pIHtcbiAgICAgICAgcmV0dXJuIGJ1aWxkRXZlbnRzLmNhbGwodGhpcywgeyBvZmY6IHRydWUgfSlcbiAgICB9XG5cbiAgICB0aGlzLm9uQ2x1c3RlckNsaWNrID0gZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgaWYgKCFmZWF0dXJlLnNvdXJjZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIHZhciBzb3VyY2UgPSBtYXAuZ2V0U291cmNlKGZlYXR1cmUuc291cmNlKTtcblxuICAgICAgICBzb3VyY2UuZ2V0Q2x1c3RlckV4cGFuc2lvblpvb20oZmVhdHVyZS5wcm9wZXJ0aWVzLmNsdXN0ZXJfaWQsIGZ1bmN0aW9uKGVycix6b29tKSB7XG4gICAgICAgICAgICBpZiAoIWVycikgbWFwLmVhc2VUbyh7IGNlbnRlcjogZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcywgem9vbTogem9vbSArIDIgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMub25MYXllck1vdXNlb3ZlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBcblxuICAgICAgICB2YXIgTWFwID0gYXBwLk1hcDtcbiAgICAgICAgaWYgKE1hcC5nZXRBY3Rpb25zKCkuZWRpdGluZyB8fCBNYXAuZ2V0QWN0aW9ucygpLmRyYXdpbmcgfHwgTWFwLmdldEFjdGlvbnMoKS52aWV3aW5nKSB7IHJldHVybiBmYWxzZSB9O1xuICAgICAgICBpZiAoYXBwW2FwcC5ucygnbGF5ZXInKV0uX2ltcG9ydGluZykgeyByZXR1cm4gZmFsc2UgfVxuICAgICAgICBpZiAoIWV2ZW50LmZlYXR1cmVzLmxlbmd0aCkgeyByZXR1cm4gZmFsc2UgfVxuXG4gICAgICAgIE1hcC5zZXRIaWdobGlnaHQoeyBjbGVhcjogdHJ1ZSwgZmVhdHVyZXM6IGV2ZW50LmZlYXR1cmVzfSk7XG4gICAgfVxuXG4gICAgdGhpcy5vbkxheWVyTW91c2VvdXQgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICByZXR1cm4gXG5cbiAgICAgICAgdmFyIE1hcCA9IGFwcC5NYXA7XG4gICAgICAgIGlmIChNYXAuZ2V0QWN0aW9ucygpLmVkaXRpbmcgfHwgTWFwLmdldEFjdGlvbnMoKS5kcmF3aW5nIHx8IE1hcC5nZXRBY3Rpb25zKCkudmlld2luZykgeyByZXR1cm4gZmFsc2UgfTtcbiAgICAgICAgaWYgKGFwcFthcHAubnMoJ2xheWVyJyldLl9pbXBvcnRpbmcpIHsgcmV0dXJuIGZhbHNlIH1cbiAgICAgICAgXG4gICAgICAgIE1hcC5fcmVtb3ZlSGlnaGxpZ2h0KCk7XG4gICAgfVxuXG5cbiAgICB0aGlzLmluaXQob3B0aW9ucyk7XG5cblxuICAgIGFzeW5jIGZ1bmN0aW9uIGJ1aWxkTGF5ZXJzIChsYXllcnM9W10sIG9wdGlvbnM9e30pIHtcbiAgICAgICAgYXdhaXQgYnVpbGRUZXh0LmNhbGwodGhpcyk7XG4gICAgICAgIGlmICghbGF5ZXJzLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IGxheWVyIG9mIGxheWVycykgYXdhaXQgYnVpbGRMYXllci5jYWxsKHRoaXMsIGxheWVyLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5tb3ZlTGF5ZXJzKCk7XG4gICAgICAgIGlmICh0aGlzLnNob3dUZXh0TGF5ZXJzKSB0aGlzLmFkZFRleHRMYXllcigpO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRMYXllcnMoKTtcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBidWlsZExheWVyIChsYXllciwgb3B0cykge1xuICAgICAgICB2YXIgZGV0YWlscyA9IGxheWVyLmRldGFpbHMgfHwge307XG4gICAgICAgIHZhciBvcHRpb25zID0gbGF5ZXIub3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdmFyIGxheWVycyA9IGxheWVyLmxheWVycyB8fCBbXTtcbiAgICAgICAgdmFyIGZlYXR1cmVzID0gbGF5ZXIuZmVhdHVyZXMgfHwgW107XG4gICAgICAgIHZhciBoYXNGZWF0dXJlcyA9IGZlYXR1cmVzICYmIGZlYXR1cmVzLmxlbmd0aDtcbiAgICAgICAgdmFyIGVycm9yO1xuXG4gICAgICAgIGlmICghZGV0YWlscy5pZCB8fCAhZGV0YWlscy50eXBlKSBlcnJvciA9IHRydWU7XG5cbiAgICAgICAgY29uc3QgdHlwZSA9IHRoaXMuZ2V0VHlwZShkZXRhaWxzLnR5cGUpO1xuICAgICAgICBpZiAoIXR5cGUpIGVycm9yID0gdHJ1ZTtcblxuICAgICAgICB2YXIgbWV0YWRhdGEgPSB7IHR5cGU6IGRldGFpbHMudHlwZX0gO1xuICAgICAgICBkZXRhaWxzLmRlZmF1bHQgPyBtZXRhZGF0YS5kZWZhdWx0ID0gdHJ1ZSA6IG1ldGFkYXRhLmN1c3RvbSA9IHRydWU7XG4gICAgICAgIGRldGFpbHMubmFtZSA/IG1ldGFkYXRhLm5hbWUgPSBkZXRhaWxzLm5hbWUgOiBmYWxzZTtcblxuICAgICAgICB2YXIgc291cmNlID0gZGV0YWlscy5zb3VyY2UgfHwgZGV0YWlscy5pZDtcbiAgICAgICAgbWV0YWRhdGEuc291cmNlID0gc291cmNlO1xuXG4gICAgICAgIHZhciBzZXR0aW5ncyA9IHtcbiAgICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgICAgIGlkOiBkZXRhaWxzLmlkLFxuICAgICAgICAgICAgdHlwZXM6IGxheWVyVHlwZXNbdHlwZV0sXG4gICAgICAgICAgICBzdHlsZTogbGF5ZXIuc3R5bGUgfHwge30sXG4gICAgICAgICAgICBmaWx0ZXI6IGxheWVyLmZpbHRlcixcbiAgICAgICAgICAgIGltYWdlczogbGF5ZXIuaW1hZ2VzLFxuICAgICAgICAgICAgZGV0YWlsczogZGV0YWlscyxcbiAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgICAgICAgICBsYXllcnM6IGxheWVyc1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBsYXllcnMgPSB0eXBlID09PSAnSW1hZ2UnID8gYXdhaXQgYnVpbGRJbWFnZS5jYWxsKHRoaXMsIHNldHRpbmdzLCBvcHRpb25zKSA6XG4gICAgICAgIHR5cGUgPT09ICdQb2x5Z29uJyA/IGF3YWl0IGJ1aWxkUG9seWdvbi5jYWxsKHRoaXMsIHNldHRpbmdzLCBvcHRpb25zKSA6XG4gICAgICAgIHR5cGUgPT09ICdQb2x5bGluZScgPyBhd2FpdCBidWlsZFBvbHlsaW5lLmNhbGwodGhpcywgc2V0dGluZ3MsIG9wdGlvbnMpIDpcbiAgICAgICAgdHlwZSA9PT0gJ1BvaW50JyA/IGF3YWl0IGJ1aWxkUG9pbnQuY2FsbCh0aGlzLCBzZXR0aW5ncywgb3B0aW9ucykgOiBbXTtcblxuICAgICAgICB0aGlzLnJlbW92ZUxheWVycyhsYXllcnMpO1xuICAgICAgICB0aGlzLnJlbW92ZVNvdXJjZShzb3VyY2UpO1xuICAgICAgICB0aGlzLmFkZFNvdXJjZShzb3VyY2UsIHR5cGUsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmFkZExheWVycyhsYXllcnMsIG1ldGFkYXRhKTtcblxuICAgICAgICByZW1vdmVMYXllci5jYWxsKHRoaXMsIHsgbGF5ZXI6IGRldGFpbHMuaWQsIHNvdXJjZTogc291cmNlIH0pO1xuXG4gICAgICAgIHNldHRpbmdzLm1ldGFkYXRhID0gbWV0YWRhdGE7XG4gICAgICAgIHRoaXMuX2xheWVycy5wdXNoKHNldHRpbmdzKTtcbiAgICAgICAgdGhpcy5fc291cmNlcy5wdXNoKHsgaWQ6IHNvdXJjZSwgdHlwZTogdHlwZSwgb3B0aW9uczogb3B0aW9ucyB9KTtcblxuICAgICAgICBpZiAoaGFzRmVhdHVyZXMpIGdlb2Zsby5GZWF0dXJlcy5hZGRGZWF0dXJlcyhmZWF0dXJlcyk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm4gcmVzb2x2ZShlcnJvcik7XG5cbiAgICAgICAgICAgIHZhciByZWFkeSA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBmZWF0cyA9IGdlb2Zsby5MYXllcnMuZ2V0RmVhdHVyZXMoc291cmNlKTtcbiAgICAgICAgICAgICAgICBpZiAoaGFzRmVhdHVyZXMgJiYgIWZlYXRzLmxlbmd0aCkgcmV0dXJuOyBcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHJlYWR5KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh7IGxheWVyOiBsYXllciwgZmVhdHVyZXM6IGZlYXRzIH0pO1xuICAgICAgICAgICAgfSwgMSk7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gYnVpbGRUZXh0ICgpIHtcbiAgICAgICAgY29uc3QgbWFwID0gZ2VvZmxvLm1hcDtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgY29uc3QgdXJsID0gJ2h0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9hc3NldHMvcG9wdXAucG5nJztcblxuICAgICAgICAgICAgaWYgKG1hcC5oYXNJbWFnZSgndGV4dC1tYXJrZXInKSkgcmV0dXJuIHJlc29sdmUodHJ1ZSk7XG5cbiAgICAgICAgICAgIG1hcC5sb2FkSW1hZ2UodXJsLCBhc3luYyBmdW5jdGlvbihlcnJvciwgaW1hZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybiByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIGlmIChtYXAuaGFzSW1hZ2UoJ3RleHQtbWFya2VyJykpIHJldHVybiByZXNvbHZlKGltYWdlKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBtYXAuYWRkSW1hZ2UoJ3RleHQtbWFya2VyJywgaW1hZ2UsIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogWzI1LCAyNSwgMTE1LCAxMDBdLFxuICAgICAgICAgICAgICAgICAgICBzdHJldGNoWDogW1syNSwgMTE1XV0sXG4gICAgICAgICAgICAgICAgICAgIHN0cmV0Y2hZOiBbWzI1LCAxMDBdXSxcbiAgICAgICAgICAgICAgICAgICAgcGl4ZWxSYXRpbzogMixcbiAgICAgICAgICAgICAgICAgICAgc2RmOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGltYWdlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBidWlsZEltYWdlIChzZXR0aW5ncz17fSwgb3B0aW9ucz17fSkge1xuICAgICAgICBpZiAoIXNldHRpbmdzLnNvdXJjZSkgcmV0dXJuIFtdO1xuXG4gICAgICAgIHZhciBsYXllcnMgPSBbXTtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHNldHRpbmdzLnNvdXJjZTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNldHRpbmdzLnR5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IHNldHRpbmdzLnR5cGVzW2ldO1xuICAgICAgICAgICAgdmFyIHN0eWxlID0gc2V0dGluZ3Muc3R5bGU7XG4gICAgICAgICAgICB2YXIgaWQgPSBzZXR0aW5ncy5pZCArIHR5cGU7XG4gICAgICAgICAgICB2YXIgbGF5b3V0LCBwYWludDtcblxuICAgICAgICAgICAgaWYgKCFzZXR0aW5ncy5pbWFnZXMgfHwgIXNldHRpbmdzLmltYWdlcy5sZW5ndGgpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNldHRpbmdzLmltYWdlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBpbWFnZSA9IHNldHRpbmdzLmltYWdlc1tqXTtcbiAgICAgICAgICAgICAgICBpZiAoIWltYWdlKSBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgIHZhciBpbWcgPSBhd2FpdCBsb2FkSW1hZ2UoaW1hZ2UpO1xuICAgICAgICAgICAgICAgIGlmICghaW1nKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBtYXAuaGFzSW1hZ2UoaW1hZ2UuaWQpID9cbiAgICAgICAgICAgICAgICBtYXAudXBkYXRlSW1hZ2UoaW1hZ2UuaWQsIGltZywge3BpeGVsUmF0aW86IDJ9KSA6XG4gICAgICAgICAgICAgICAgbWFwLmFkZEltYWdlKGltYWdlLmlkLCBpbWcsIHtwaXhlbFJhdGlvOiAyfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxheW91dCA9IE9iamVjdC5hc3NpZ24oe30sIHtcbiAgICAgICAgICAgICAgICAndmlzaWJpbGl0eSc6IG9wdGlvbnMudmlzaWJpbGl0eSB8fCAndmlzaWJsZScsXG4gICAgICAgICAgICAgICAgJ2ljb24taW1hZ2UnOiBbJ2dldCcsICdwcmltYXJ5SW1hZ2UnLCBbJ2dldCcsJ3N0eWxlJywgWydwcm9wZXJ0aWVzJ11dXSxcbiAgICAgICAgICAgICAgICAnaWNvbi1zaXplJzogWydpbnRlcnBvbGF0ZScsIFsnbGluZWFyJ10sIFsnem9vbSddLCAxLCAwLjYsIDEwLCAwLjgsIDE1LCAxXSxcbiAgICAgICAgICAgICAgICAnaWNvbi1hbGxvdy1vdmVybGFwJzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAnaWNvbi1hbmNob3InOiAnYm90dG9tJ1xuICAgICAgICAgICAgfSwgc3R5bGUuaW1hZ2UgPyBzdHlsZS5pbWFnZS5sYXlvdXQgfHwge30gOiB7fSk7XG5cbiAgICAgICAgICAgIHBhaW50ID0gT2JqZWN0LmFzc2lnbih7fSwge1xuICAgICAgICAgICAgICAgICdpY29uLW9wYWNpdHknOiBbJ2Nhc2UnLCBbXCJib29sZWFuXCIsIFtcImZlYXR1cmUtc3RhdGVcIiwgXCJoaWRkZW5cIl0sIHRydWVdLCAwLFxuICAgICAgICAgICAgICAgICAgICBbJ2Nhc2UnLCBbXCJib29sZWFuXCIsIFtcImZlYXR1cmUtc3RhdGVcIiwgXCJoaWRkZW5cIl0sIHRydWVdLCAwLFxuICAgICAgICAgICAgICAgICAgICBbJ2dldCcsICdvcGFjaXR5JywgWydnZXQnLCdzdHlsZScsIFsncHJvcGVydGllcyddXV1dXVxuICAgICAgICAgICAgfSwgc3R5bGUuaW1hZ2UgPyBzdHlsZS5pbWFnZS5wYWludCB8fCB7fSA6IHt9KTtcblxuICAgICAgICAgICAgc3R5bGUgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdzeW1ib2wnLFxuICAgICAgICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgICAgICAgIHNsb3Q6IHN0eWxlLnNsb3QgfHwgJ3RvcCcsXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBzZXR0aW5ncy5maWx0ZXIgfHwgWyc9PScsIFwiJHR5cGVcIiwgXCJQb2ludFwiXSxcbiAgICAgICAgICAgICAgICBsYXlvdXQ6IGxheW91dCxcbiAgICAgICAgICAgICAgICBwYWludDogcGFpbnRcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFzdHlsZSkgY29udGludWU7XG4gICAgICAgICAgICBsYXllcnMucHVzaChzdHlsZSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsYXllcnM7XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gYnVpbGRQb2x5Z29uIChzZXR0aW5ncz17fSwgb3B0aW9ucz17fSkge1xuICAgICAgICBpZiAoIXNldHRpbmdzLnNvdXJjZSkgcmV0dXJuIFtdO1xuXG4gICAgICAgIHZhciBsYXllcnMgPSBbXTtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHNldHRpbmdzLnNvdXJjZTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNldHRpbmdzLnR5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IHNldHRpbmdzLnR5cGVzW2ldO1xuICAgICAgICAgICAgdmFyIHN0eWxlID0gc2V0dGluZ3Muc3R5bGU7XG4gICAgICAgICAgICB2YXIgaWQgPSBzZXR0aW5ncy5pZCArIHR5cGU7XG4gICAgICAgICAgICB2YXIgbGF5b3V0LCBwYWludDtcblxuICAgICAgICAgICAgaWYgKHR5cGUuaW5jbHVkZXMoJ2JvcmRlcicpKSB7XG4gICAgICAgICAgICAgICAgbGF5b3V0ID0gT2JqZWN0LmFzc2lnbih7fSwge1xuICAgICAgICAgICAgICAgICAgICAndmlzaWJpbGl0eSc6IG9wdGlvbnMudmlzaWJpbGl0eSB8fCAndmlzaWJsZScsXG4gICAgICAgICAgICAgICAgfSwgc3R5bGUuYm9yZGVyID8gc3R5bGUuYm9yZGVyLmxheW91dCB8fCB7fSA6IHt9KTtcblxuICAgICAgICAgICAgICAgIHBhaW50ID0gT2JqZWN0LmFzc2lnbih7fSwge1xuICAgICAgICAgICAgICAgICAgICAnbGluZS1jb2xvcic6IFsnZ2V0JywgJ3ByaW1hcnlDb2xvcicsIFsnZ2V0Jywnc3R5bGUnLCBbJ3Byb3BlcnRpZXMnXV1dLFxuICAgICAgICAgICAgICAgICAgICAnbGluZS13aWR0aCc6IFsnY2FzZScsIFtcImJvb2xlYW5cIiwgWydoYXMnLCAnd2lkdGgnLCBbJ2dldCcsJ3N0eWxlJywgWydwcm9wZXJ0aWVzJ11dXSwgdHJ1ZV0sIFsnZ2V0JywgJ3dpZHRoJywgWydnZXQnLCdzdHlsZScsIFsncHJvcGVydGllcyddXV0sIDJdLFxuICAgICAgICAgICAgICAgICAgICAnbGluZS1vcGFjaXR5JzogWydjYXNlJywgW1wiYm9vbGVhblwiLCBbXCJmZWF0dXJlLXN0YXRlXCIsIFwiaGlkZGVuXCJdLCB0cnVlXSwgMCwgMC44XVxuICAgICAgICAgICAgICAgIH0sIHN0eWxlLmJvcmRlciA/IHN0eWxlLmJvcmRlci5wYWludCB8fCB7fSA6IHt9KTtcblxuICAgICAgICAgICAgICAgIHN0eWxlID0ge1xuICAgICAgICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lJyxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgIHNsb3Q6IHN0eWxlLnNsb3QgfHwgJ2JvdHRvbScsXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjogc3R5bGUuYm9yZGVyID8gc3R5bGUuYm9yZGVyLmZpbHRlciB8fCBbJz09JywgXCIkdHlwZVwiLCBcIlBvbHlnb25cIl0gOiBbJz09JywgJyR0eXBlJywgJ1BvbHlnb24nXSxcbiAgICAgICAgICAgICAgICAgICAgbGF5b3V0OiBsYXlvdXQsXG4gICAgICAgICAgICAgICAgICAgIHBhaW50OiBwYWludFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZS5pbmNsdWRlcygnZmlsbCcpKSB7XG4gICAgICAgICAgICAgICAgbGF5b3V0ID0gT2JqZWN0LmFzc2lnbih7fSwge1xuICAgICAgICAgICAgICAgICAgICAndmlzaWJpbGl0eSc6IG9wdGlvbnMudmlzaWJpbGl0eSB8fCAndmlzaWJsZScsXG4gICAgICAgICAgICAgICAgfSwgc3R5bGUuZmlsbCA/IHN0eWxlLmZpbGwubGF5b3V0IHx8IHt9IDoge30pO1xuXG4gICAgICAgICAgICAgICAgcGFpbnQgPSBPYmplY3QuYXNzaWduKHt9LCB7XG4gICAgICAgICAgICAgICAgICAgICdmaWxsLWNvbG9yJzogWydnZXQnLCAnc2Vjb25kYXJ5Q29sb3InLCBbJ2dldCcsJ3N0eWxlJywgWydwcm9wZXJ0aWVzJ11dXSxcbiAgICAgICAgICAgICAgICAgICAgJ2ZpbGwtb3BhY2l0eSc6IFsnY2FzZScsIFtcImJvb2xlYW5cIiwgW1wiZmVhdHVyZS1zdGF0ZVwiLCBcImhpZGRlblwiXSwgdHJ1ZV0sIDAsIDAuNV1cbiAgICAgICAgICAgICAgICB9LCBzdHlsZS5maWxsID8gc3R5bGUuZmlsbC5wYWludCB8fCB7fSA6IHt9KTtcblxuICAgICAgICAgICAgICAgIHN0eWxlID0ge1xuICAgICAgICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdmaWxsJyxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgIHNsb3Q6IHN0eWxlLnNsb3QgfHwgJ2JvdHRvbScsXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjogc3R5bGUuZmlsbCA/IHN0eWxlLmZpbGwuZmlsdGVyIHx8IFsnPT0nLCBcIiR0eXBlXCIsIFwiUG9seWdvblwiXSA6IFsnPT0nLCAnJHR5cGUnLCAnUG9seWdvbiddLFxuICAgICAgICAgICAgICAgICAgICBsYXlvdXQ6IGxheW91dCxcbiAgICAgICAgICAgICAgICAgICAgcGFpbnQ6IHBhaW50XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXN0eWxlKSBjb250aW51ZTtcbiAgICAgICAgICAgIGxheWVycy5wdXNoKHN0eWxlKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxheWVycztcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBidWlsZFBvbHlsaW5lIChzZXR0aW5ncz17fSwgb3B0aW9ucz17fSkge1xuICAgICAgICBpZiAoIXNldHRpbmdzLnNvdXJjZSkgcmV0dXJuIFtdO1xuXG4gICAgICAgIHZhciBsYXllcnMgPSBbXTtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHNldHRpbmdzLnNvdXJjZTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNldHRpbmdzLnR5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IHNldHRpbmdzLnR5cGVzW2ldO1xuICAgICAgICAgICAgdmFyIHN0eWxlID0gc2V0dGluZ3Muc3R5bGU7XG4gICAgICAgICAgICB2YXIgaWQgPSBzZXR0aW5ncy5pZCArIHR5cGU7XG4gICAgICAgICAgICB2YXIgbGF5b3V0LCBwYWludDtcblxuICAgICAgICAgICAgaWYgKHR5cGUuaW5jbHVkZXMoJ2xpbmUnKSkge1xuICAgICAgICAgICAgICAgIGxheW91dCA9IE9iamVjdC5hc3NpZ24oe30sIHtcbiAgICAgICAgICAgICAgICAgICAgJ3Zpc2liaWxpdHknOiBvcHRpb25zLnZpc2liaWxpdHkgfHwgJ3Zpc2libGUnLFxuICAgICAgICAgICAgICAgICAgICAnbGluZS1taXRlci1saW1pdCc6IDIsXG4gICAgICAgICAgICAgICAgICAgICdsaW5lLWpvaW4nOiAncm91bmQnLFxuICAgICAgICAgICAgICAgICAgICAnbGluZS1jYXAnOiAncm91bmQnXG4gICAgICAgICAgICAgICAgfSwgc3R5bGUubGluZSA/IHN0eWxlLmxpbmUubGF5b3V0IHx8IHt9IDoge30pO1xuXG4gICAgICAgICAgICAgICAgcGFpbnQgPSBPYmplY3QuYXNzaWduKHt9LCB7XG4gICAgICAgICAgICAgICAgICAgICdsaW5lLWNvbG9yJzogWydnZXQnLCAncHJpbWFyeUNvbG9yJywgWydnZXQnLCdzdHlsZScsIFsncHJvcGVydGllcyddXV0sXG4gICAgICAgICAgICAgICAgICAgICdsaW5lLXdpZHRoJzogWydjYXNlJywgW1wiYm9vbGVhblwiLCBbJ2hhcycsICd3aWR0aCcsIFsnZ2V0Jywnc3R5bGUnLCBbJ3Byb3BlcnRpZXMnXV1dLCB0cnVlXSwgWydnZXQnLCAnd2lkdGgnLCBbJ2dldCcsJ3N0eWxlJywgWydwcm9wZXJ0aWVzJ11dXSwgNF0sXG4gICAgICAgICAgICAgICAgICAgICdsaW5lLW9mZnNldCc6IFsnY2FzZScsIFtcImJvb2xlYW5cIiwgW1wiaGFzXCIsIFwib2Zmc2V0XCJdLCB0cnVlXSwgW1wiZ2V0XCIsIFwib2Zmc2V0XCJdLCAwXSxcbiAgICAgICAgICAgICAgICAgICAgJ2xpbmUtb3BhY2l0eSc6IFsnY2FzZScsIFtcImJvb2xlYW5cIiwgW1wiZmVhdHVyZS1zdGF0ZVwiLCBcImhpZGRlblwiXSwgdHJ1ZV0sIDAsIDFdXG4gICAgICAgICAgICAgICAgfSwgc3R5bGUubGluZSA/IHN0eWxlLmxpbmUucGFpbnQgfHwge30gOiB7fSk7XG5cbiAgICAgICAgICAgICAgICBzdHlsZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbGluZScsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgICAgICAgICAgICBzbG90OiBzdHlsZS5zbG90IHx8ICdtaWRkbGUnLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHN0eWxlLmxpbmUgPyBzdHlsZS5saW5lLmZpbHRlciB8fCBbJz09JywgXCIkdHlwZVwiLCBcIkxpbmVTdHJpbmdcIl0gOiBbJz09JywgJyR0eXBlJywgJ0xpbmVTdHJpbmcnXSxcbiAgICAgICAgICAgICAgICAgICAgbGF5b3V0OiBsYXlvdXQsXG4gICAgICAgICAgICAgICAgICAgIHBhaW50OiBwYWludFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFzdHlsZSkgY29udGludWU7XG4gICAgICAgICAgICBsYXllcnMucHVzaChzdHlsZSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsYXllcnM7XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gYnVpbGRQb2ludCAoc2V0dGluZ3M9e30sIG9wdGlvbnM9e30pIHtcbiAgICAgICAgaWYgKCFzZXR0aW5ncy5zb3VyY2UpIHJldHVybiBbXTtcblxuICAgICAgICB2YXIgbGF5ZXJzID0gW107XG4gICAgICAgIHZhciBzb3VyY2UgPSBzZXR0aW5ncy5zb3VyY2U7XG4gICAgICAgIHZhciBkb250UmVuZGVyID0gbWFwLmdldFN0eWxlKCkuaW1wb3J0cyAmJiBtYXAuZ2V0U3R5bGUoKS5pbXBvcnRzLmxlbmd0aDtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNldHRpbmdzLnR5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IHNldHRpbmdzLnR5cGVzW2ldO1xuICAgICAgICAgICAgdmFyIHN0eWxlID0gc2V0dGluZ3Muc3R5bGU7XG4gICAgICAgICAgICB2YXIgaWQgPSBzZXR0aW5ncy5pZCArIHR5cGU7XG4gICAgICAgICAgICB2YXIgbGF5b3V0LCBwYWludDtcblxuICAgICAgICAgICAgaWYgKHR5cGUuaW5jbHVkZXMoJ2NpcmNsZScpKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMubm9DaXJjbGUpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgbGF5b3V0ID0gT2JqZWN0LmFzc2lnbih7fSwge1xuICAgICAgICAgICAgICAgICAgICAndmlzaWJpbGl0eSc6IG9wdGlvbnMudmlzaWJpbGl0eSB8fCAndmlzaWJsZScsXG4gICAgICAgICAgICAgICAgfSwgc3R5bGUuY2lyY2xlID8gc3R5bGUuY2lyY2xlLmxheW91dCB8fCB7fSA6IHt9KTtcblxuICAgICAgICAgICAgICAgIHBhaW50ID0gT2JqZWN0LmFzc2lnbih7fSwge1xuICAgICAgICAgICAgICAgICAgICAnY2lyY2xlLXJhZGl1cyc6IDEwLFxuICAgICAgICAgICAgICAgICAgICAnY2lyY2xlLXN0cm9rZS13aWR0aCc6IDIsXG4gICAgICAgICAgICAgICAgICAgICdjaXJjbGUtY29sb3InOiBbJ2dldCcsICdzZWNvbmRhcnlDb2xvcicsIFsnZ2V0Jywnc3R5bGUnLCBbJ3Byb3BlcnRpZXMnXV1dLFxuICAgICAgICAgICAgICAgICAgICAnY2lyY2xlLXN0cm9rZS1jb2xvcic6IFsnZ2V0JywgJ3ByaW1hcnlDb2xvcicsIFsnZ2V0Jywnc3R5bGUnLCBbJ3Byb3BlcnRpZXMnXV1dLFxuICAgICAgICAgICAgICAgICAgICAnY2lyY2xlLW9wYWNpdHknOiBbJ2Nhc2UnLCBbXCJib29sZWFuXCIsIFtcImZlYXR1cmUtc3RhdGVcIiwgXCJoaWRkZW5cIl0sIHRydWVdLCAwLCBbJ2Nhc2UnLCBbXCJib29sZWFuXCIsIFtcImZlYXR1cmUtc3RhdGVcIiwgXCJoaWRkZW5cIl0sIHRydWVdLCAwLCBbJ2dldCcsICdvcGFjaXR5JywgWydnZXQnLCdzdHlsZScsIFsncHJvcGVydGllcyddXV1dXSxcbiAgICAgICAgICAgICAgICAgICAgJ2NpcmNsZS1zdHJva2Utb3BhY2l0eSc6IFsnY2FzZScsIFtcImJvb2xlYW5cIiwgW1wiZmVhdHVyZS1zdGF0ZVwiLCBcImhpZGRlblwiXSwgdHJ1ZV0sIDAsIFsnY2FzZScsIFtcImJvb2xlYW5cIiwgW1wiZmVhdHVyZS1zdGF0ZVwiLCBcImhpZGRlblwiXSwgdHJ1ZV0sIDAsIFsnZ2V0JywgJ29wYWNpdHknLCBbJ2dldCcsJ3N0eWxlJywgWydwcm9wZXJ0aWVzJ11dXV1dXG4gICAgICAgICAgICAgICAgfSwgc3R5bGUuY2lyY2xlID8gc3R5bGUuY2lyY2xlLnBhaW50IHx8IHt9IDoge30pO1xuXG4gICAgICAgICAgICAgICAgc3R5bGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2NpcmNsZScsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgICAgICAgICAgICBzbG90OiBzdHlsZS5zbG90IHx8ICd0b3AnLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHN0eWxlLmNpcmNsZSA/IHN0eWxlLmNpcmNsZS5maWx0ZXIgfHwgWyc9PScsIFwiJHR5cGVcIiwgXCJQb2ludFwiXSA6IFsnPT0nLCBcIiR0eXBlXCIsIFwiUG9pbnRcIl0sXG4gICAgICAgICAgICAgICAgICAgIGxheW91dDogbGF5b3V0LFxuICAgICAgICAgICAgICAgICAgICBwYWludDogcGFpbnRcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZS5pbmNsdWRlcygnY2x1c3RlcicpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm5vQ2x1c3RlcikgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLmZpbHRlciA9IFsnaGFzJywgJ3BvaW50X2NvdW50J107XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLnBhaW50WydjaXJjbGUtY29sb3InXSA9IG9wdGlvbnMuc2Vjb25kYXJ5Q29sb3IgfHwgZ2VvZmxvLm9wdGlvbnMuY29sb3JzLnNlY29uZGFyeUNvbG9yO1xuICAgICAgICAgICAgICAgICAgICBzdHlsZS5wYWludFsnY2lyY2xlLXN0cm9rZS1jb2xvciddID0gb3B0aW9ucy5wcmltYXJ5Q29sb3IgfHwgZ2VvZmxvLm9wdGlvbnMuY29sb3JzLnByaW1hcnlDb2xvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUuaW5jbHVkZXMoJ2ljb24nKSkge1xuICAgICAgICAgICAgICAgIGlmIChkb250UmVuZGVyKSBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgIGxheW91dCA9IE9iamVjdC5hc3NpZ24oe30sIHtcbiAgICAgICAgICAgICAgICAgICAgJ3Zpc2liaWxpdHknOiBvcHRpb25zLnZpc2liaWxpdHkgfHwgJ3Zpc2libGUnLFxuICAgICAgICAgICAgICAgICAgICAnaWNvbi1vcHRpb25hbCc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWZpZWxkJzogWydnZXQnLCAncHJpbWFyeUljb24nLCBbJ2dldCcsJ3N0eWxlJywgWydwcm9wZXJ0aWVzJ11dXSxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtcm90YXRlJzogWydnZXQnLCAncm90YXRlJywgWydnZXQnLCdzdHlsZScsIFsncHJvcGVydGllcyddXV0sXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LXJvdGF0aW9uLWFsaWdubWVudCc6ICd2aWV3cG9ydCcsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LXNpemUnOiAxNCxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtbGluZS1oZWlnaHQnOiAxLFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1wYWRkaW5nJzogMCxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtb2Zmc2V0JzogWzAsIDAuMl0sXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWp1c3RpZnknOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWFuY2hvcic6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1hbGxvdy1vdmVybGFwJzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQtZm9udCc6IFsnRm9udCBBd2Vzb21lIDYgUHJvIFNvbGlkJ10sXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWlnbm9yZS1wbGFjZW1lbnQnOiB0cnVlXG4gICAgICAgICAgICAgICAgfSwgc3R5bGUuaWNvbiA/IHN0eWxlLmljb24ubGF5b3V0IHx8IHt9IDoge30pO1xuXG4gICAgICAgICAgICAgICAgcGFpbnQgPSBPYmplY3QuYXNzaWduKHt9LCB7XG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LXRyYW5zbGF0ZS1hbmNob3InOiAndmlld3BvcnQnLFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1oYWxvLWNvbG9yJzogWydnZXQnLCAncHJpbWFyeUNvbG9yJywgWydnZXQnLCdzdHlsZScsIFsncHJvcGVydGllcyddXV0sXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LWhhbG8td2lkdGgnOiAwLFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1jb2xvcic6IFsnZ2V0JywgJ3ByaW1hcnlDb2xvcicsIFsnZ2V0Jywnc3R5bGUnLCBbJ3Byb3BlcnRpZXMnXV1dLFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1vcGFjaXR5JzogWydjYXNlJywgW1wiYm9vbGVhblwiLCBbXCJmZWF0dXJlLXN0YXRlXCIsIFwiaGlkZGVuXCJdLCB0cnVlXSwgMCwgWydjYXNlJywgW1wiYm9vbGVhblwiLCBbXCJmZWF0dXJlLXN0YXRlXCIsIFwiaGlkZGVuXCJdLCB0cnVlXSwgMCwgWydnZXQnLCAnb3BhY2l0eScsIFsnZ2V0Jywnc3R5bGUnLCBbJ3Byb3BlcnRpZXMnXV1dXV1cbiAgICAgICAgICAgICAgICB9LCBzdHlsZS5pY29uID8gc3R5bGUuaWNvbi5wYWludCB8fCB7fSA6IHt9KTtcblxuICAgICAgICAgICAgICAgIHN0eWxlID0ge1xuICAgICAgICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzeW1ib2wnLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgc2xvdDogc3R5bGUuc2xvdCB8fCAndG9wJyxcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiBzdHlsZS5pY29uID8gc3R5bGUuaWNvbi5maWx0ZXIgfHwgWyc9PScsIFwiJHR5cGVcIiwgXCJQb2ludFwiXSA6IFsnPT0nLCBcIiR0eXBlXCIsIFwiUG9pbnRcIl0sXG4gICAgICAgICAgICAgICAgICAgIGxheW91dDogbGF5b3V0LFxuICAgICAgICAgICAgICAgICAgICBwYWludDogcGFpbnRcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZS5pbmNsdWRlcygnY2x1c3RlcicpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm5vQ2x1c3RlcikgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLmZpbHRlciA9IFsnaGFzJywgJ3BvaW50X2NvdW50J107XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLmxheW91dFsndGV4dC1maWVsZCddID0gb3B0aW9ucy5wcmltYXJ5SWNvbiB8fCAnJztcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUucGFpbnRbJ3RleHQtaGFsby1jb2xvciddID0gb3B0aW9ucy5zZWNvbmRhcnlDb2xvciB8fCBnZW9mbG8ub3B0aW9ucy5jb2xvcnMuc2Vjb25kYXJ5Q29sZDtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUucGFpbnRbJ3RleHQtY29sb3InXSA9IG9wdGlvbnMucHJpbWFyeUNvbG9yIHx8IGdlb2Zsby5vcHRpb25zLmNvbG9ycy5zZWNvbmRhcnlUZXh0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZS5pbmNsdWRlcygnY291bnQnKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5ub0NsdXN0ZXIpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICBzdHlsZS5maWx0ZXIgPSBbJ2hhcycsICdwb2ludF9jb3VudCddO1xuXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLmxheW91dCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICd2aXNpYmlsaXR5Jzogb3B0aW9ucy52aXNpYmlsaXR5IHx8ICd2aXNpYmxlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdpY29uLW9wdGlvbmFsJzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0LWZpZWxkJzogb3B0aW9ucy5jb3VudEljb24gfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAndGV4dC1zaXplJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdiYXNlJzogMTQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N0b3BzJzogW1sxMCwgMTZdLCBbMTQsIDE0XV1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAndGV4dC1saW5lLWhlaWdodCc6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAndGV4dC1wYWRkaW5nJzogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0LW9mZnNldCc6IFswLjUsIC0wLjZdLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHQtanVzdGlmeSc6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0LWFuY2hvcic6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHQtYWxsb3ctb3ZlcmxhcCc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAndGV4dC1mb250JzogWydGb250IEF3ZXNvbWUgNiBQcm8gU29saWQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0LWlnbm9yZS1wbGFjZW1lbnQnOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzdHlsZS5wYWludCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0LXRyYW5zbGF0ZS1hbmNob3InOiAndmlld3BvcnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHQtY29sb3InOiBvcHRpb25zLmNvdW50SWNvbkNvbG9yIHx8IGdlb2Zsby5vcHRpb25zLmNvbG9ycy5wcmltYXJ5VGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0LW9wYWNpdHknOiBbJ2Nhc2UnLCBbXCJib29sZWFuXCIsIFtcImZlYXR1cmUtc3RhdGVcIiwgXCJoaWRkZW5cIl0sIHRydWVdLCAwLCBbJ2dldCcsICdvcGFjaXR5JywgWydnZXQnLCdzdHlsZScsIFsncHJvcGVydGllcyddXV1dXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUuaW5jbHVkZXMoJ3RleHQnKSkge1xuICAgICAgICAgICAgICAgIGlmIChkb250UmVuZGVyKSBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlLmluY2x1ZGVzKCdjb3VudCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm5vQ2x1c3RlcikgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICAgICAgbGF5b3V0ID0gT2JqZWN0LmFzc2lnbih7fSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHQtZmllbGQnOiBbJ2dldCcsICdwb2ludF9jb3VudF9hYmJyZXZpYXRlZCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHQtZm9udCc6IFsnRElOIE9mZmMgUHJvIE1lZGl1bScsICdBcmlhbCBVbmljb2RlIE1TIEJvbGQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0LXNpemUnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Jhc2UnOiAxNCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3RvcHMnOiBbWzEwLCAxNF0sIFsxNCwgMTJdXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0LW9mZnNldCc6IFswLjU1LCAtMC45XSxcbiAgICAgICAgICAgICAgICAgICAgfSwgc3R5bGUudGV4dCA/IHN0eWxlLnRleHQubGF5b3V0IHx8IHt9IDoge30pO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBwYWludCA9IE9iamVjdC5hc3NpZ24oe30sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0LWNvbG9yJzogb3B0aW9ucy5jb3VudFRleHRDb2xvciB8fCBnZW9mbG8ub3B0aW9ucy5jb2xvcnMuc2Vjb25kYXJ5VGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0LW9wYWNpdHknOiBbJ2Nhc2UnLCBbXCJib29sZWFuXCIsIFtcImZlYXR1cmUtc3RhdGVcIiwgXCJoaWRkZW5cIl0sIHRydWVdLCAwLCBbJ2dldCcsICdvcGFjaXR5JywgWydnZXQnLCdzdHlsZScsIFsncHJvcGVydGllcyddXV1dXG4gICAgICAgICAgICAgICAgICAgIH0sIHN0eWxlLnRleHQgPyBzdHlsZS50ZXh0LnBhaW50IHx8IHt9IDoge30pO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzdHlsZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzeW1ib2wnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBzbG90OiBzdHlsZS5zbG90IHx8ICd0b3AnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiBbJ2hhcycsICdwb2ludF9jb3VudCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5b3V0OiBsYXlvdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWludDogcGFpbnRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFzdHlsZSkgY29udGludWU7XG4gICAgICAgICAgICBsYXllcnMucHVzaChzdHlsZSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsYXllcnM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYnVpbGRFdmVudHMgKG9wdGlvbnM9e30pIHtcbiAgICAgICAgdmFyIGlkcyA9IHRoaXMuZ2V0TGF5ZXJJZHMoKTtcbiAgICAgICAgaWYgKCFpZHMubGVuZ3RoKSByZXR1cm47XG5cbiAgICAgICAgaWYgKG9wdGlvbnMub2ZmKSB7XG4gICAgICAgICAgICBtYXAub2ZmKCdtb3VzZW1vdmUnLCBpZHMsIHRoaXMub25MYXllck1vdXNlb3Zlcik7XG4gICAgICAgICAgICBtYXAub2ZmKCdtb3VzZWxlYXZlJywgaWRzLCB0aGlzLm9uTGF5ZXJNb3VzZW91dCk7XG4gICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5vbikge1xuICAgICAgICAgICAgbWFwLm9uKCdtb3VzZW1vdmUnLCBpZHMsIHRoaXMub25MYXllck1vdXNlb3Zlcik7XG4gICAgICAgICAgICBtYXAub24oJ21vdXNlbGVhdmUnLCBpZHMsIHRoaXMub25MYXllck1vdXNlb3V0KTtcbiAgICAgICAgfSBlbHNlIGlmICghb3B0aW9ucykge1xuICAgICAgICAgICAgYnVpbGRFdmVudHMoeyBvZmY6IHRydWUgfSk7XG4gICAgICAgICAgICBidWlsZEV2ZW50cyh7IG9uOiB0cnVlIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVMYXllciAob3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGxheWVyID0gdGhpcy5fbGF5ZXJzLmZpbmRJbmRleCgoZSkgPT4geyByZXR1cm4gZS5pZCA9PT0gb3B0aW9ucy5sYXllciB9KTtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuX3NvdXJjZXMuZmluZEluZGV4KChlKSA9PiB7IHJldHVybiBlLmlkID09PSBvcHRpb25zLnNvdXJjZSB9KTtcbiAgICAgICAgaWYgKGxheWVyICE9PSAtMSkgdGhpcy5fbGF5ZXJzLnNwbGljZShsYXllciwgMSk7XG4gICAgICAgIGlmIChzb3VyY2UgIT09IC0xKSB0aGlzLl9zb3VyY2VzLnNwbGljZShzb3VyY2UsIDEpO1xuICAgIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uIGxvYWRJbWFnZSAob3B0aW9ucz17fSkge1xuICAgICAgICBpZiAoIW9wdGlvbnMudXJsIHx8ICFvcHRpb25zLmlkKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyBmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBjb25zdCB1cmwgPSBvcHRpb25zLnVybCArICc/JyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICAgICAgbWFwLmxvYWRJbWFnZSh1cmwsIGZ1bmN0aW9uKGVycm9yLCBpbWFnZSkgeyByZXR1cm4gZXJyb3IgPyByZWplY3QoZXJyb3IpIDogcmVzb2x2ZShpbWFnZSk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkSW1hZ2VBc0RhdGFVUkwoaW1hZ2VVcmwsIGNhbGxiYWNrKSB7XG4gICAgICAgIC8qIGxvYWRJbWFnZUFzRGF0YVVSTChvcHRpb25zLnVybCwgKGRhdGEpID0+IHtcbiAgICAgICAgICAgIG9wdGlvbnMuZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICBjb25zdCBzdmdNYXJrZXIgPSBjcmVhdGVTVkdNYXJrZXIob3B0aW9ucyk7XG4gICAgICAgICAgICBzdmdUb0ltYWdlKHN2Z01hcmtlciwgKGltZykgPT4gcmVzb2x2ZShpbWcpICk7XG4gICAgICAgIH0pOyAqL1xuICAgICAgICBcbiAgICAgICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoJ2Nyb3NzT3JpZ2luJywgJ2Fub255bW91cycpO1xuICAgICAgICBpbWcub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IGltZy53aWR0aDtcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBpbWcuaGVpZ2h0O1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCAwLCAwKTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGFVUkwgPSBjYW52YXMudG9EYXRhVVJMKFwiaW1hZ2UvcG5nXCIpO1xuICAgICAgICAgICAgY2FsbGJhY2soZGF0YVVSTCk7XG4gICAgICAgIH07XG4gICAgICAgIGltZy5zcmMgPSBpbWFnZVVybCArICc/JyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVNWR01hcmtlcihvcHRpb25zPXt9KSB7XG4gICAgICAgIGNvbnN0IHN2Z05TID0gXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO1xuXG4gICAgICAgIGNvbnN0IGRhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQ7XG4gICAgICAgIGNvbnN0IGJvcmRlcldpZHRoID0gb3B0aW9uc1tcInN0cm9rZS13aWR0aFwiXSB8fCA1O1xuXG4gICAgICAgIGNvbnN0IHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmdOUywgXCJzdmdcIik7XG4gICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCB3aWR0aCk7XG4gICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgaGVpZ2h0KTtcbiAgICAgICAgc3ZnLnNldEF0dHJpYnV0ZShcInZpZXdCb3hcIiwgYDAgMCAke3dpZHRoICsgMiAqIGJvcmRlcldpZHRofSAke2hlaWdodCArIDIgKiBib3JkZXJXaWR0aH1gKTtcbiAgICBcbiAgICAgICAgY29uc3QgbWFya2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z05TLCBcImVsbGlwc2VcIik7XG4gICAgICAgIG1hcmtlci5zZXRBdHRyaWJ1dGUoXCJjeFwiLCAod2lkdGggKyAyICogYm9yZGVyV2lkdGgpIC8gMik7XG4gICAgICAgIG1hcmtlci5zZXRBdHRyaWJ1dGUoXCJjeVwiLCAoaGVpZ2h0ICsgMiAqIGJvcmRlcldpZHRoKSAvIDIpO1xuICAgICAgICBtYXJrZXIuc2V0QXR0cmlidXRlKFwicnhcIiwgd2lkdGggLyAyKTtcbiAgICAgICAgbWFya2VyLnNldEF0dHJpYnV0ZShcInJ5XCIsIGhlaWdodCAvIDIpO1xuICAgICAgICBtYXJrZXIuc2V0QXR0cmlidXRlKFwiZmlsbFwiLCAndHJhbnNwYXJlbnQnKTtcbiAgICAgICAgbWFya2VyLnNldEF0dHJpYnV0ZShcInN0cm9rZVwiLCBvcHRpb25zLnN0cm9rZSB8fCBnZW9mbG8uZ2V0Q29sb3JzKCkuc2Vjb25kYXJ5QmFja2dyb3VuZCk7XG4gICAgICAgIG1hcmtlci5zZXRBdHRyaWJ1dGUoXCJzdHJva2Utd2lkdGhcIiwgYm9yZGVyV2lkdGgpO1xuICAgIFxuICAgICAgICBjb25zdCBpbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmdOUywgXCJpbWFnZVwiKTtcbiAgICAgICAgaW1hZ2Uuc2V0QXR0cmlidXRlTlMoXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsIFwiaHJlZlwiLCBkYXRhKTtcbiAgICAgICAgaW1hZ2Uuc2V0QXR0cmlidXRlKFwieFwiLCBib3JkZXJXaWR0aCk7XG4gICAgICAgIGltYWdlLnNldEF0dHJpYnV0ZShcInlcIiwgYm9yZGVyV2lkdGgpO1xuICAgICAgICBpbWFnZS5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCB3aWR0aCk7XG4gICAgICAgIGltYWdlLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCBoZWlnaHQpO1xuICAgICAgICBpbWFnZS5zZXRBdHRyaWJ1dGUoXCJwcmVzZXJ2ZUFzcGVjdFJhdGlvXCIsIFwieE1pZFlNaWQgc2xpY2VcIik7XG4gICAgICAgIGltYWdlLnNldEF0dHJpYnV0ZShcImNsaXAtcGF0aFwiLCBcImVsbGlwc2UoKVwiKTtcbiAgICBcbiAgICAgICAgc3ZnLmFwcGVuZENoaWxkKG1hcmtlcik7XG4gICAgICAgIHN2Zy5hcHBlbmRDaGlsZChpbWFnZSk7XG4gICAgXG4gICAgICAgIHJldHVybiBzdmc7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIHN2Z1RvSW1hZ2Uoc3ZnRWxlbWVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3Qgc3ZnRGF0YSA9IG5ldyBYTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcoc3ZnRWxlbWVudCk7XG4gICAgICAgIGNvbnN0IHN2Z0Jsb2IgPSBuZXcgQmxvYihbc3ZnRGF0YV0sIHsgdHlwZTogXCJpbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmLThcIiB9KTtcbiAgICAgICAgY29uc3QgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChzdmdCbG9iKTtcbiAgICAgICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG5cbiAgICAgICAgaW1nLm9ubG9hZCA9ICgpID0+IHsgVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpLCBjYWxsYmFjayhpbWcpOyB9O1xuICAgICAgICBpbWcuc3JjID0gdXJsO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IExheWVyczsiLCIvKipcbiAqIEBtaXhpblxuICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG9cbiAqIEBuYW1lIExvY2F0ZVxuICogQGRlc2NyaXB0aW9uIFRoaXMgbW9kdWxlIHByb3ZpZGVzIHRoZSBnZW9sb2NhdGlvbiBmdW5jdGlvbmFsaXR5IGZvciB0aGUgR2VvZmxvIGFwcGxpY2F0aW9uLiBJdCBhbGxvd3MgdXNlcnMgdG8gbG9jYXRlIHRoZWlyIGN1cnJlbnQgcG9zaXRpb24gb24gdGhlIG1hcCBhbmQgdHJhY2sgdGhlaXIgbG9jYXRpb24uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBMb2NhdGUgb2JqZWN0LlxuICovXG5jb25zdCBMb2NhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZ2VvZmxvID0gdGhpcy5nZW9mbG87XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkxvY2F0ZVxuXHQgKiBAbmFtZSBpbml0XG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGluaXRpYWxpemVzIHRoZSBnZW9sb2NhdGlvbiBjb250cm9sIG9uIHRoZSBtYXAgd2l0aCB0aGUgc3BlY2lmaWVkIG9wdGlvbnMuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIGNvbmZpZ3VyaW5nIHRoZSBnZW9sb2NhdGlvbiBjb250cm9sLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmVuYWJsZUhpZ2hBY2N1cmFjeT10cnVlXSAtIFdoZXRoZXIgdG8gZW5hYmxlIGhpZ2ggYWNjdXJhY3kgZm9yIGdlb2xvY2F0aW9uLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWNrVXNlckxvY2F0aW9uPXRydWVdIC0gV2hldGhlciB0byB0cmFjayB0aGUgdXNlcidzIGxvY2F0aW9uLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnNob3dVc2VySGVhZGluZz10cnVlXSAtIFdoZXRoZXIgdG8gc2hvdyB0aGUgdXNlcidzIGhlYWRpbmcuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuc2hvd0FjY3VyYWN5Q2lyY2xlPWZhbHNlXSAtIFdoZXRoZXIgdG8gc2hvdyB0aGUgYWNjdXJhY3kgY2lyY2xlLlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgY3VycmVudCBpbnN0YW5jZSBvZiB0aGUgbWFwIHdpdGggdGhlIGdlb2xvY2F0aW9uIGNvbnRyb2wgYWRkZWQuXG5cdCAqL1xuICAgIHRoaXMuaW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zPXt9KSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGdlb2Zsby5VdGlsaXRpZXMuZXh0ZW5kKHt9LCBvcHRpb25zKTtcblxuICAgICAgICB0aGlzLmNvbnRyb2wgPSBuZXcgbWFwYm94Z2wuR2VvbG9jYXRlQ29udHJvbCh7XG4gICAgICAgICAgICBwb3NpdGlvbk9wdGlvbnM6IHsgZW5hYmxlSGlnaEFjY3VyYWN5OiB0cnVlIH0sXG4gICAgICAgICAgICB0cmFja1VzZXJMb2NhdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgIHNob3dVc2VySGVhZGluZzogdHJ1ZSxcbiAgICAgICAgICAgIHNob3dBY2N1cmFjeUNpcmNsZTogZmFsc2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5jb250cm9sLm9uKCdnZW9sb2NhdGUnLCB0aGlzLm9uQ29udHJvbEV2ZW50LmJpbmQodGhpcykpXG4gICAgICAgIGdlb2Zsby5tYXAuYWRkQ29udHJvbCh0aGlzLmNvbnRyb2wsICd0b3AtcmlnaHQnKTtcbiAgICAgICAgLy90aGlzLnJlYWR5KCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jb250cm9sLl9jb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9XG5cbiAgICB0aGlzLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY29udHJvbC5fY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uTG9jYXRlXG5cdCAqIEBuYW1lIHJlYWR5XG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGNoZWNrcyBpZiB0aGUgZ2VvbG9jYXRlIGJ1dHRvbiBpcyBhdmFpbGFibGUgaW4gdGhlIGNvbnRyb2wgYW5kIHRoZW4gY2FsbHMgdGhlIGJ1aWxkIGZ1bmN0aW9uLlxuXHQgKiBAcGFyYW1zIHtPYmplY3R9IGNvbnRyb2wgLSBUaGUgY29udHJvbCBvYmplY3QgY29udGFpbmluZyB0aGUgZ2VvbG9jYXRlIGJ1dHRvbi5cblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuICAgIHRoaXMucmVhZHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBjb250cm9sID0gdGhpcy5jb250cm9sO1xuXG4gICAgICAgIHZhciByZWFkeSA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCFjb250cm9sLl9nZW9sb2NhdGVCdXR0b24pIHJldHVybjtcbiAgICAgICAgICAgIF90aGlzLmJ1aWxkKCk7XG4gICAgICAgICAgICByZXR1cm4gY2xlYXJJbnRlcnZhbChyZWFkeSk7XG4gICAgICAgIH0sIDEpO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uTG9jYXRlXG5cdCAqIEBuYW1lIGJ1aWxkXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGhpZGVzIHRoZSB1c2VyIGxvY2F0aW9uIGRvdCBtYXJrZXIgYW5kIHRoZSBhc3NvY2lhdGVkIGJ1dHRvbi5cblx0ICogQHBhcmFtcyB7dm9pZH0gTm9uZVxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG4gICAgdGhpcy5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5idXR0b24gPSB0aGlzLmNvbnRyb2wuX2dlb2xvY2F0ZUJ1dHRvbjtcbiAgICAgICAgdGhpcy5tYXJrZXIgPSB0aGlzLmNvbnRyb2wuX3VzZXJMb2NhdGlvbkRvdE1hcmtlcjtcbiAgICAgICAgdGhpcy5idXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ29udHJvbEV2ZW50LmJpbmQodGhpcykpO1xuICAgICAgICAvL3RoaXMuZ2V0QnV0dG9uKCkuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkxvY2F0ZVxuXHQgKiBAbmFtZSB1cGRhdGVcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gdXBkYXRlcyB0aGUgbWFwIGJlYXJpbmcgYW5kIGNlbnRlciBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgb3B0aW9ucy5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBvcHRpb25zLmFscGhhIC0gVGhlIGFscGhhIHZhbHVlLlxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG4gICAgdGhpcy51cGRhdGUgPSBmdW5jdGlvbiAob3B0aW9ucz17fSkge1xuICAgICAgICBjb25zdCBhbHBoYSA9IG9wdGlvbnMuYWxwaGE7XG4gICAgICAgIGNvbnN0IGhlYWRpbmcgPSB0aGlzLmhlYWRpbmcoKTtcbiAgICAgICAgY29uc3QgYmVhcmluZyA9IHRoaXMuYmVhcmluZygpO1xuICAgICAgICBjb25zdCBmb2xsb3dpbmcgPSB0aGlzLmZvbGxvd2luZztcbiAgICAgICAgaWYgKCFoZWFkaW5nIHx8ICFmb2xsb3dpbmcgfHwgZ2VvZmxvLm1hcE1vdmluZykgcmV0dXJuO1xuICAgICAgICBnZW9mbG8ubWFwLnNldEJlYXJpbmcoaGVhZGluZyAtIDEpO1xuICAgICAgICBnZW9mbG8ubWFwLnNldENlbnRlcih0aGlzLm1hcmtlci5fbG5nTGF0KTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkxvY2F0ZVxuXHQgKiBAbmFtZSBoZWFkaW5nXG5cdCAqIEBkZXNjcmlwdGlvbiBSZXRyaWV2ZXMgdGhlIGhlYWRpbmcgdmFsdWUgZnJvbSB0aGUgY29udHJvbCBvYmplY3QuXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBoZWFkaW5nIHZhbHVlIGZyb20gdGhlIGNvbnRyb2wgb2JqZWN0LlxuXHQgKi9cbiAgICB0aGlzLmhlYWRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRyb2wuX2hlYWRpbmc7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5Mb2NhdGVcblx0ICogQG5hbWUgYmVhcmluZ1xuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiByZXRyaWV2ZXMgdGhlIGN1cnJlbnQgYmVhcmluZyBvZiB0aGUgbWFwLlxuXHQgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgYmVhcmluZyBvZiB0aGUgbWFwLlxuXHQgKi9cbiAgICB0aGlzLmJlYXJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBnZW9mbG8ubWFwLmdldEJlYXJpbmcoKTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkxvY2F0ZVxuXHQgKiBAbmFtZSBsb2NhdGVcblx0ICogQGRlc2NyaXB0aW9uIEluaXRpYXRlcyB0aGUgcHJvY2VzcyBvZiBsb2NhdGluZyB0aGUgdXNlcidzIGN1cnJlbnQgcG9zaXRpb24gb24gdGhlIG1hcC5cblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuICAgIHRoaXMubG9jYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxvY2F0aW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy51bmxvY2F0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb250cm9sLl9mb2xsb3cgPSB0aGlzLmZvbGxvd2luZyA9IGZhbHNlO1xuICAgICAgICBhZGRDbGFzc2VzKHRoaXMuYnV0dG9uLCBbJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLXdhaXRpbmcnXSk7XG4gICAgICAgIGdlb2Zsby5maXJlKCdsb2NhdGUub24nLCB7IHN0YXRlOiB0aGlzLnN0YXRlKCkgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRyb2wudHJpZ2dlcigpO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uTG9jYXRlXG5cdCAqIEBuYW1lIHJlbG9jYXRlXG5cdCAqIEBkZXNjcmlwdGlvbiBSZWxvY2F0ZXMgdGhlIGdlb2xvY2F0aW9uIGNvbnRyb2wgdG8gdGhlIHVzZXIncyBjdXJyZW50IGxvY2F0aW9uLiBJZiB0aGUgY29udHJvbCBpcyBzZXQgdG8gZm9sbG93IHRoZSB1c2VyJ3MgbG9jYXRpb24sIGl0IGNoYW5nZXMgdGhlIHN0YXRlIHRvICdBQ1RJVkVfTE9DSycuIEFkZHMgdGhlICdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS1hY3RpdmUnIGNsYXNzIHRvIHRoZSBidXR0b24gZWxlbWVudC4gVHJpZ2dlcnMgdGhlIGNvbnRyb2xcblx0ICogQHBhcmFtcyB7dm9pZH1cblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuICAgIHRoaXMucmVsb2NhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmZvbGxvd2luZykgdGhpcy5zdGF0ZSgnQUNUSVZFX0xPQ0snKTtcbiAgICAgICAgYWRkQ2xhc3Nlcyh0aGlzLmJ1dHRvbiwgWydtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS1hY3RpdmUnXSk7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRyb2wudHJpZ2dlcigpO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uTG9jYXRlXG5cdCAqIEBuYW1lIHVubG9jYXRlXG5cdCAqIEBkZXNjcmlwdGlvbiBTZXRzIHRoZSBzdGF0ZSB0byAnQUNUSVZFX0xPQ0snLCBkaXNhYmxlcyBmb2xsb3dpbmcsIGVuYWJsZXMgZHJhZyBwYW4gb24gdGhlIG1hcCwgYW5kIHRyaWdnZXJzIHRoZSBjb250cm9sLlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcmVzdWx0IG9mIHRyaWdnZXJpbmcgdGhlIGNvbnRyb2wuXG5cdCAqL1xuICAgIHRoaXMudW5sb2NhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc3RhdGUoJ0FDVElWRV9MT0NLJyk7XG4gICAgICAgIHRoaXMuY29udHJvbC5fZm9sbG93ID0gdGhpcy5mb2xsb3dpbmcgPSBmYWxzZTtcbiAgICAgICAgZ2VvZmxvLm1hcC5kcmFnUGFuLmVuYWJsZSgpO1xuICAgICAgICB0aGlzLnVubG9jYXRlZCA9IHRydWU7XG4gICAgICAgIGdlb2Zsby5maXJlKCdsb2NhdGUub2ZmJywgeyBzdGF0ZTogdGhpcy5zdGF0ZSgpIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5jb250cm9sLnRyaWdnZXIoKTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkxvY2F0ZVxuXHQgKiBAbmFtZSBmb2xsb3dcblx0ICogQGRlc2NyaXB0aW9uIEVuYWJsZXMgdGhlIGZvbGxvdyBmdW5jdGlvbmFsaXR5IGZvciB0aGUgZ2VvbG9jYXRlIGNvbnRyb2wuIFdoZW4gYWN0aXZhdGVkLCBhZGRzIGEgc3BlY2lmaWMgY2xhc3MgdG8gdGhlIGJ1dHRvbiwgZGlzYWJsZXMgZHJhZyBwYW5uaW5nIG9uIHRoZSBtYXAsIGFuZCBzZXRzIHRoZSBmb2xsb3cgc3RhdGUgdG8gdHJ1ZS5cblx0ICogQHBhcmFtcyB7T2JqZWN0fSBnZW9mbG8gLSBUaGUgY29udGV4dCBvYmplY3QgY29udGFpbmluZyB0aGUgbWFwIGFuZCBjb250cm9sIHJlZmVyZW5jZXMuXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSAtIFJldHVybnMgdHJ1ZSB0byBpbmRpY2F0ZSB0aGF0IHRoZSBmb2xsb3cgZnVuY3Rpb25hbGl0eSBoYXMgYmVlbiBlbmFibGVkLlxuXHQgKi9cbiAgICB0aGlzLmZvbGxvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWRkQ2xhc3Nlcyh0aGlzLmJ1dHRvbiwgWydtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS1mb2xsb3cnXSk7XG4gICAgICAgIGdlb2Zsby5tYXAuZHJhZ1Bhbi5kaXNhYmxlKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRyb2wuX2ZvbGxvdyA9IHRoaXMuZm9sbG93aW5nID0gdHJ1ZTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLkxvY2F0ZVxuXHQgKiBAbmFtZSBzdGF0ZVxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGdldCBvciBzZXQgdGhlIHN0YXRlIG9mIHRoZSBjb250cm9sLiBJZiBhIHN0YXRlIHBhcmFtZXRlciBpcyBwcm92aWRlZCwgaXQgc2V0cyB0aGUgY29udHJvbCdzIHdhdGNoIHN0YXRlIHRvIHRoYXQgdmFsdWUuIElmIG5vIHN0YXRlIHBhcmFtZXRlciBpcyBwcm92aWRlZCwgaXQgcmV0dXJucyB0aGUgY3VycmVudCB3YXRjaCBzdGF0ZSBvZiB0aGUgY29udHJvbC5cblx0ICogQHBhcmFtIHtib29sZWFufSBzdGF0ZSAtIFRoZSBzdGF0ZSB0byBzZXQgZm9yIHRoZSBjb250cm9sLlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBUaGUgY3VycmVudCB3YXRjaCBzdGF0ZSBvZiB0aGUgY29udHJvbC5cblx0ICovXG4gICAgdGhpcy5zdGF0ZSA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICByZXR1cm4gc3RhdGUgPyB0aGlzLmNvbnRyb2wuX3dhdGNoU3RhdGUgPSBzdGF0ZSA6IHRoaXMuY29udHJvbC5fd2F0Y2hTdGF0ZTtcbiAgICB9XG5cblxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5Mb2NhdGVcblx0ICogQG5hbWUgZ2V0QnV0dG9uXG5cdCAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIHRoZSBnZW9sb2NhdGUgYnV0dG9uIGVsZW1lbnQgZnJvbSB0aGUgY29udHJvbC5cblx0ICogQHJldHVybnMge0VsZW1lbnR9IFRoZSBnZW9sb2NhdGUgYnV0dG9uIGVsZW1lbnQuXG5cdCAqL1xuICAgIHRoaXMuZ2V0QnV0dG9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250cm9sLl9nZW9sb2NhdGVCdXR0b247XG4gICAgfVxuXG5cbiAgICBcblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uTG9jYXRlXG5cdCAqIEBuYW1lIHJlbW92ZUNsYXNzZXNcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gcmVtb3ZlcyBjbGFzc2VzIHJlbGF0ZWQgdG8gZ2VvbG9jYXRpb24gY29udHJvbCBmcm9tIGEgYnV0dG9uIGVsZW1lbnQuXG5cdCAqIEBwYXJhbXMge0VsZW1lbnR9IGJ1dHRvbiAtIFRoZSBidXR0b24gZWxlbWVudCBmcm9tIHdoaWNoIGNsYXNzZXMgd2lsbCBiZSByZW1vdmVkLlxuXHQgKi9cbiAgICB0aGlzLnJlbW92ZUNsYXNzZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBidXR0b24gPSB0aGlzLmJ1dHRvbjtcbiAgICAgICAgaWYgKCFidXR0b24pIHJldHVybjtcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLXdhaXRpbmcnKTtcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLWFjdGl2ZScpO1xuICAgICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtYWN0aXZlLWVycm9yJyk7XG4gICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS1iYWNrZ3JvdW5kJyk7XG4gICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS1iYWNrZ3JvdW5kLWVycm9yJyk7XG4gICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS1mb2xsb3cnKTtcbiAgICB9XG5cblxuICAgIHRoaXMub25BZGQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXZlbnQpXG4gICAgfVxuXG5cbiAgICB0aGlzLm9uQ29udHJvbEV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vdGhpcy5idXR0b24gPSB0aGlzLmJ1dHRvbiB8fCBldmVudC5idXR0b247XG4gICAgICAgIHRoaXMubWFya2VyID0gdGhpcy5jb250cm9sLl91c2VyTG9jYXRpb25Eb3RNYXJrZXI7XG5cbiAgICAgICAgdGhpcy5yZW1vdmVDbGFzc2VzKCk7XG5cbiAgICAgICAgaWYgKGV2ZW50LmNvb3Jkcykge1xuICAgICAgICAgICAgdGhpcy5vbkxvY2F0ZShldmVudClcbiAgICAgICAgfSBlbHNlIGlmIChldmVudC50YXJnZXQgPT09IHRoaXMuYnV0dG9uKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdMb2NhdGU6ICcsIHRoaXMuc3RhdGUoKSwgZXZlbnQsIHRoaXMuYnV0dG9uKTtcbiAgICAgICAgICAgIGdlb2Zsby5tYXAuZHJhZ1Bhbi5lbmFibGUoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlKCkgPT09ICdPRkYnKSByZXR1cm4gdGhpcy5sb2NhdGUoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlKCkgPT09ICdCQUNLR1JPVU5EJyAmJiAhdGhpcy5mb2xsb3dpbmcpIHJldHVybiB0aGlzLnJlbG9jYXRlKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZSgpID09PSAnQUNUSVZFX0xPQ0snICYmICF0aGlzLmZvbGxvd2luZykgcmV0dXJuIHRoaXMuZm9sbG93KCk7XG4gICAgICAgICAgICB0aGlzLnVubG9jYXRlKCk7XG4gICAgICAgIH0gXG4gICAgfVxuXG4gICAgdGhpcy5vbkxvY2F0ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSgpID09PSAnQUNUSVZFX0xPQ0snICYmIHRoaXMubG9jYXRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMubG9jYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudExvY2F0aW9uID0gZXZlbnQuY29vcmRzO1xuICAgICAgICAgICAgYWRkQ2xhc3Nlcyh0aGlzLmJ1dHRvbiwgWydtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS1hY3RpdmUnXSk7XG4gICAgICAgIH1cblxuICAgICAgICBnZW9mbG8uZmlyZSgnbG9jYXRlLnVwZGF0ZScsIHsgbG9jYXRpbmc6IHRoaXMubG9jYXRpbmcsIGNvb3JkczogZXZlbnQuY29vcmRzLCBzdGF0ZTogdGhpcy5zdGF0ZSgpIH0pO1xuICAgIH1cblxuICAgIHRoaXMub25NYXBNb3ZlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5idXR0b24gfHwgdGhpcy5mb2xsb3dpbmcgfHwgdGhpcy51bmxvY2F0ZWQpIHJldHVybjtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUoKSA9PT0gJ0FDVElWRV9MT0NLJykgcmV0dXJuIGFkZENsYXNzZXModGhpcy5idXR0b24sIFsnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtYWN0aXZlJ10pO1xuICAgICAgICBhZGRDbGFzc2VzKHRoaXMuYnV0dG9uLCBbJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLWJhY2tncm91bmQnXSk7XG4gICAgfVxuXG4gICAgdGhpcy5pbml0KCk7XG5cbiAgICBmdW5jdGlvbiBhZGRDbGFzc2VzIChidXR0b24sIGNsYXNzZXM9W10pIHtcbiAgICAgICAgaWYgKCFidXR0b24pIHJldHVybjtcbiAgICAgICAgY2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uKGMpIHsgYyA/IGJ1dHRvbi5jbGFzc0xpc3QuYWRkKGMpIDogZmFsc2UgfSlcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExvY2F0ZTsiLCIvKipcbiAqIEBtaXhpblxuICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG9cbiAqIEBuYW1lIE1lc2hcbiAqIEBkZXNjcmlwdGlvbiBUaGlzIG1vZHVsZSBwcm92aWRlcyB0aGUgbWVzaCBmdW5jdGlvbmFsaXR5IGZvciB0aGUgR2VvZmxvIGFwcGxpY2F0aW9uLiBJdCBhbGxvd3MgdXNlcnMgdG8gY3JlYXRlIGEgbWVzaCBvZiBmZWF0dXJlcyBieSBzcGxpdHRpbmcgdGhlbSBpbnRvIHNlZ21lbnRzIGFuZCBjaGVja2luZyBmb3IgaW50ZXJzZWN0aW9ucy5cbiAqIEBwYXJhbSB7QXJyYXl9IG9yaWdpbmFsRmVhdHVyZXMgLSBBbiBhcnJheSBvZiBmZWF0dXJlcyB0byBiZSBhZGRlZCB0byB0aGUgbWVzaC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gbGluZXNPbmx5IC0gQSBmbGFnIGluZGljYXRpbmcgd2hldGhlciBvbmx5IGxpbmVzIHNob3VsZCBiZSBhZGRlZCB0byB0aGUgbWVzaC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIE1lc2ggb2JqZWN0LlxuICovXG5jb25zdCBNZXNoID0gZnVuY3Rpb24gKG9yaWdpbmFsRmVhdHVyZXMsIGxpbmVzT25seSkge1xuICAgIHZhciBzZWdtZW50SWQgPSAxO1xuICAgIHZhciBhbGxTZWdtZW50cyA9IFtdO1xuICAgIHZhciBmZWF0dXJlSW5kZXggPSB7fTtcblxuICAgIGNvbnN0IGdlb2ZsbyA9IHRoaXMuZ2VvZmxvO1xuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5NZXNoXG5cdCAqIEBuYW1lIGFkZE5ld0ZlYXR1cmVzXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHRha2VzIG5ldyBmZWF0dXJlcywgc3BsaXRzIHRoZW0gaW50byBzZWdtZW50cywgY2hlY2tzIGZvciBpbnRlcnNlY3Rpb25zLCBhbmQgdXBkYXRlcyB0aGUgZXhpc3Rpbmcgc2VnbWVudHMgYWNjb3JkaW5nbHkuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGZlYXR1cmVzIC0gQW4gYXJyYXkgb2YgbmV3IGZlYXR1cmVzIHRvIGJlIGFkZGVkLlxuXHQgKiBAcmV0dXJuIHtBcnJheX0gUmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIGFsbCBtZXNoIHNlZ21lbnRzLlxuXHQgKi9cbiAgICB0aGlzLmFkZE5ld0ZlYXR1cmVzID0gZnVuY3Rpb24oZmVhdHVyZXMpIHtcbiAgICAgICAgdmFyIGFsbE5ld0ZlYXR1cmVzID0gc3BsaXRBbmRDaGVja0ZvckludGVyc2VjdGlvbnMoZmVhdHVyZXMpO1xuICAgICAgICB2YXIgbmV3U2VnbWVudHMgPSBzcGxpdEludG9Ud29Qb2ludFNlZ21lbnRzQW5kQWRkSWRzKGFsbE5ld0ZlYXR1cmVzKTtcbiAgICAgICAgdmFyIHNlZ21lbnRzV2l0aEN1dFBvaW50cyA9IGNoZWNrRm9ySW50ZXJzZWN0aW9ucyhuZXdTZWdtZW50cywgYWxsU2VnbWVudHMpO1xuICAgICAgICBhbGxTZWdtZW50cyA9IFtdLmNvbmNhdChnZW9mbG8uVXRpbGl0aWVzLmNvbnN1bWFibGVBcnJheShjdXRTZWdtZW50cyhhbGxTZWdtZW50cywgc2VnbWVudHNXaXRoQ3V0UG9pbnRzKSksIGdlb2Zsby5VdGlsaXRpZXMuY29uc3VtYWJsZUFycmF5KGN1dFNlZ21lbnRzKG5ld1NlZ21lbnRzLCBzZWdtZW50c1dpdGhDdXRQb2ludHMpKSk7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEZlYXR1cmVzKCk7XG4gICAgfTtcblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uTWVzaFxuXHQgKiBAbmFtZSBnZXRGZWF0dXJlc1xuXHQgKiBAZGVzY3JpcHRpb24gUmV0dXJucyBhbGwgb2YgdGhlIGZlYXR1cmVzIGluIHRoZSBtZXNoLlxuXHQgKiBAcmV0dXJuIHtBcnJheX0gUmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIGFsbCBmZWF0dXJlIHNlZ21lbnRzLlxuXHQgKi9cbiAgICB0aGlzLmdldEZlYXR1cmVzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhbGxTZWdtZW50cztcbiAgICB9O1xuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5NZXNoXG5cdCAqIEBuYW1lIHNwbGl0U2VnbWVudEF0UG9pbnRcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gdGFrZXMgYSBzZWdtZW50IElEIGFuZCBjb29yZGluYXRlcyBvZiBhIHBvaW50IHRvIHNwbGl0IHRoZSBzZWdtZW50LiBJdCBjcmVhdGVzIHR3byBuZXcgc2VnbWVudHMgYnkgc3BsaXR0aW5nIHRoZSBvcmlnaW5hbCBzZWdtZW50IGF0IHRoZSBzcGVjaWZpZWQgcG9pbnQgYW5kIHVwZGF0ZXMgdGhlIGZlYXR1cmUgaW5kZXguXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzZWdtZW50SWQgLSBUaGUgSUQgb2YgdGhlIHNlZ21lbnQgdG8gYmUgc3BsaXQuXG5cdCAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gcG9pbnRDb29yZHMgLSBUaGUgY29vcmRpbmF0ZXMgb2YgdGhlIHBvaW50IHdoZXJlIHRoZSBzZWdtZW50IHNob3VsZCBiZSBzcGxpdC5cblx0ICovXG4gICAgdGhpcy5zcGxpdFNlZ21lbnRBdFBvaW50ID0gZnVuY3Rpb24oc2VnbWVudElkLCBwb2ludENvb3Jkcykge1xuICAgICAgICB2YXIgZmVhdHVyZSA9IGZlYXR1cmVJbmRleFtzZWdtZW50SWRdO1xuICAgICAgICBpZiAoZmVhdHVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgcG9zID0gYWxsU2VnbWVudHMuaW5kZXhPZihmZWF0dXJlKTtcbiAgICAgICAgICAgIGFsbFNlZ21lbnRzLnNwbGljZShwb3MsIDEpO1xuICAgICAgICAgICAgdmFyIGxpbmUxID0gZ2VvZmxvLlV0aWxpdGllcy5jcmVhdGVMaW5lV2l0aExlbmd0aChbcG9pbnRDb29yZHMsIGZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF1dKTtcbiAgICAgICAgICAgIHZhciBsaW5lMiA9IGdlb2Zsby5VdGlsaXRpZXMuY3JlYXRlTGluZVdpdGhMZW5ndGgoW3BvaW50Q29vcmRzLCBmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzFdXSk7XG4gICAgICAgICAgICBhZGRGZWF0dXJlVG9JbmRleChsaW5lMSk7XG4gICAgICAgICAgICBhZGRGZWF0dXJlVG9JbmRleChsaW5lMik7XG4gICAgICAgICAgICBhbGxTZWdtZW50cy5wdXNoKGxpbmUxLCBsaW5lMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwic3BsaXRTZWdtZW50QXRQb2ludDogbm8gb3JpZ2luYWwgZmVhdHVyZSBmb3IgaWQgXCIsIHNlZ21lbnRJZCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5NZXNoXG5cdCAqIEBuYW1lIGdldEZlYXR1cmVzRnJvbUluZGV4XG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHRha2VzIGFuIGFycmF5IG9mIGZlYXR1cmVzIGFuZCByZXRyaWV2ZXMgdGhlIGNvcnJlc3BvbmRpbmcgZmVhdHVyZXMgZnJvbSBhbiBpbmRleCBiYXNlZCBvbiB0aGVpciBJRHMuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGZlYXR1cmVzIC0gVGhlIGFycmF5IG9mIGZlYXR1cmVzIHRvIHJldHJpZXZlIGZyb20gdGhlIGluZGV4LlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBhcnJheSBvZiBmZWF0dXJlcyByZXRyaWV2ZWQgZnJvbSB0aGUgaW5kZXguXG5cdCAqL1xuICAgIHRoaXMuZ2V0RmVhdHVyZXNGcm9tSW5kZXggPSBmdW5jdGlvbihmZWF0dXJlcykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgIGZlYXR1cmVzLmZvckVhY2goZnVuY3Rpb24oZmVhdHVyZSkge1xuICAgICAgICAgICAgdmFyIGlkID0gZmVhdHVyZS5pZCB8fCBmZWF0dXJlLnByb3BlcnRpZXMuaWQ7XG4gICAgICAgICAgICB2YXIgb3JpZ2luYWxGZWF0dXJlID0gZmVhdHVyZUluZGV4W2lkXTtcbiAgICAgICAgICAgIGlmIChvcmlnaW5hbEZlYXR1cmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9yaWdpbmFsRmVhdHVyZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLk1lc2hcblx0ICogQG5hbWUgZ2V0RmVhdHVyZUJ5SWRcblx0ICogQGRlc2NyaXB0aW9uIFJldHJpZXZlcyBhIGZlYXR1cmUgYnkgaXRzIElELlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaWQgLSBUaGUgSUQgb2YgdGhlIGZlYXR1cmUgdG8gcmV0cmlldmUuXG5cdCAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSBmZWF0dXJlIG9iamVjdCBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm92aWRlZCBJRC5cblx0ICovXG4gICAgdGhpcy5nZXRGZWF0dXJlQnlJZCA9IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgIHJldHVybiBnZXRGZWF0dXJlQnlJZChpZCk7XG4gICAgfTtcblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uTWVzaFxuXHQgKiBAbmFtZSBnZXRGZWF0dXJlc0J5UGFyZW50SWRcblx0ICogQGRlc2NyaXB0aW9uIFJldHJpZXZlcyBmZWF0dXJlcyBiYXNlZCBvbiB0aGUgcGFyZW50IElELiBUaGUgcGFyZW50IElEIGlzIHVzZWQgdG8gcmV0cmlldmUgY29sZCBmZWF0dXJlcyBhc3NvY2lhdGVkIHdpdGggdGhlIHNlZ21lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpZCAtIFRoZSBwYXJlbnQgSUQgdG8gcmV0cmlldmUgZmVhdHVyZXMgZm9yLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IC0gQW4gYXJyYXkgb2YgZmVhdHVyZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBwYXJlbnQgSUQuXG5cdCAqL1xuICAgIHRoaXMuZ2V0RmVhdHVyZXNCeVBhcmVudElkID0gZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgcmV0dXJuIGdldEZlYXR1cmVzQnlQYXJlbnRJZChpZCk7XG4gICAgfTtcblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uTWVzaFxuXHQgKiBAbmFtZSByZW1vdmVGZWF0dXJlXG5cdCAqIEBkZXNjcmlwdGlvbiBSZW1vdmVzIGEgZmVhdHVyZSB3aXRoIHRoZSBzcGVjaWZpZWQgSUQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpZCAtIFRoZSBJRCBvZiB0aGUgZmVhdHVyZSB0byBiZSByZW1vdmVkLlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBSZXR1cm5zIHRydWUgaWYgdGhlIGZlYXR1cmUgd2FzIHN1Y2Nlc3NmdWxseSByZW1vdmVkLCBmYWxzZSBvdGhlcndpc2UuXG5cdCAqL1xuICAgIHRoaXMucmVtb3ZlRmVhdHVyZSA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICByZXR1cm4gcmVtb3ZlRmVhdHVyZShpZCk7XG4gICAgfTtcblxuXG4gICAgaWYgKG9yaWdpbmFsRmVhdHVyZXMpIGFsbFNlZ21lbnRzID0gc3BsaXRBbmRDaGVja0ZvckludGVyc2VjdGlvbnMob3JpZ2luYWxGZWF0dXJlcyk7XG5cblxuICAgIGZ1bmN0aW9uIGFkZEZlYXR1cmVUb0luZGV4KGZlYXR1cmUsIHBhcmVudCkge1xuICAgICAgICBpZiAoZmVhdHVyZUluZGV4W3NlZ21lbnRJZF0gfHwgZ2V0RmVhdHVyZUJ5SWQoc2VnbWVudElkKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGZlYXR1cmVJbmRleFtzZWdtZW50SWRdID0gZmVhdHVyZTtcbiAgICAgICAgZmVhdHVyZS5pZCA9IHNlZ21lbnRJZDtcbiAgICAgICAgZmVhdHVyZS5wYXJlbnQgPSBwYXJlbnQ7XG5cbiAgICAgICAgZ2VvZmxvLlV0aWxpdGllcy5zZXRQcm9wZXJ0eShmZWF0dXJlLCAnaWQnLCBzZWdtZW50SWQpO1xuICAgICAgICBnZW9mbG8uVXRpbGl0aWVzLnNldFByb3BlcnR5KGZlYXR1cmUsICdwYXJlbnQnLCBwYXJlbnQpO1xuXG4gICAgICAgIHNlZ21lbnRJZCsrO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRDbGlja1NlZ2VtZW50c1RvTWVzaCgpIHtcbiAgICAgICAgaWYgKCFnZW9mbG8ub3B0aW9ucy5zbmFwcGluZy5lbmFibGUpIHJldHVybiBmYWxzZTtcbiAgICBcbiAgICAgICAgdmFyIG1lc2hGZWF0dXJlcyA9IFtdO1xuICAgIFxuICAgICAgICBpZiAoZ2VvZmxvLmNsb3Nlc3RQb2ludCAmJiBnZW9mbG8uY2xvc2VzdFBvaW50LmJvcmRlcnMgJiYgZ2VvZmxvLmNsb3Nlc3RQb2ludC5pZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBnZW9mbG8ubWVzaEluZGV4LnNwbGl0U2VnbWVudEF0UG9pbnQoZ2VvZmxvLmNsb3Nlc3RQb2ludC5pZCwgZ2VvZmxvLmNsb3Nlc3RQb2ludC5jb29yZHMpO1xuICAgICAgICAgICAgZ2VvZmxvLnVwZGF0ZU1lc2hEYXRhKCk7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgaWYgKGdlb2Zsby5zbmFwRmVhdHVyZSkge1xuICAgICAgICAgICAgaWYgKGdlb2Zsby5zbmFwRmVhdHVyZS5nZW9tZXRyeS50eXBlID09PSBcIkxpbmVTdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIGlmICghZ2VvZmxvLlV0aWxpdGllcy5pc0VtcHR5TGluZVN0cmluZyhnZW9mbG8uc25hcEZlYXR1cmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc2hGZWF0dXJlcy5wdXNoKGdlb2Zsby5zbmFwRmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChnZW9mbG8uc25hcEZlYXR1cmUuZ2VvbWV0cnkudHlwZSA9PT0gXCJQb2ludFwiKSB7XG4gICAgICAgICAgICAgICAgZ2VvZmxvLlV0aWxpdGllcy5zZXRQcm9wZXJ0eShnZW9mbG8uc25hcEZlYXR1cmUsICdzdGFydFBvaW50JywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgZ2VvZmxvLnN0YXJ0UG9pbnQgPSBnZW9mbG8uVXRpbGl0aWVzLmNsb25lRGVlcChnZW9mbG8uc25hcEZlYXR1cmUpO1xuICAgICAgICAgICAgICAgIG1lc2hGZWF0dXJlcy5wdXNoKGdlb2Zsby5zbmFwRmVhdHVyZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgaWYgKG1lc2hGZWF0dXJlcy5sZW5ndGggPiAwKSBnZW9mbG8uYWRkRmVhdHVyZXNUb01lc2gobWVzaEZlYXR1cmVzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb29yZGluYXRlc1RvTGluZVN0cmluZ3MoY29vcmRzLCByZXN1bHQsIHBhcmVudCkge1xuICAgICAgICB2YXIgZmlyc3RQb2ludCA9IHR1cmYudHJ1bmNhdGUodHVyZi5wb2ludChjb29yZHNbMF0pLCB7IHByZWNpc2lvbjogNywgY29vcmRpbmF0ZXM6IDIsIG11dGF0ZTogdHJ1ZSB9KTtcbiAgICAgICAgdmFyIHNlY29uZFBvaW50ID0gbnVsbDtcblxuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDE7IGluZGV4IDwgY29vcmRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgc2Vjb25kUG9pbnQgPSB0dXJmLnRydW5jYXRlKHR1cmYucG9pbnQoY29vcmRzW2luZGV4XSksIHsgcHJlY2lzaW9uOiA3LCBjb29yZGluYXRlczogMiwgbXV0YXRlOiB0cnVlIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIWdlb2Zsby5VdGlsaXRpZXMuaXNQb2ludEVxdWFsKGZpcnN0UG9pbnQuZ2VvbWV0cnkuY29vcmRpbmF0ZXMsIHNlY29uZFBvaW50Lmdlb21ldHJ5LmNvb3JkaW5hdGVzKSkge1xuICAgICAgICAgICAgICAgIHZhciBsaW5lID0gdHVyZi5saW5lU3RyaW5nKFtmaXJzdFBvaW50Lmdlb21ldHJ5LmNvb3JkaW5hdGVzLCBzZWNvbmRQb2ludC5nZW9tZXRyeS5jb29yZGluYXRlc10pO1xuICAgICAgICAgICAgICAgIHZhciBhZGRlZCA9IGFkZEZlYXR1cmVUb0luZGV4KGxpbmUsIHBhcmVudCk7XG4gICAgICAgICAgICAgICAgYWRkZWQgPyByZXN1bHQucHVzaChsaW5lKSA6IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmaXJzdFBvaW50ID0gc2Vjb25kUG9pbnQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzcGxpdEludG9Ud29Qb2ludFNlZ21lbnRzQW5kQWRkSWRzKGZlYXR1cmVzKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgaWYgKCFmZWF0dXJlcyB8fCAhZmVhdHVyZXMubGVuZ3RoKSByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgIGZlYXR1cmVzLmZvckVhY2goZnVuY3Rpb24oZmVhdHVyZSkge1xuICAgICAgICAgICAgdmFyIHR5cGUgPSBmZWF0dXJlLmdlb21ldHJ5LnR5cGU7XG4gICAgICAgICAgICB2YXIgaWQgPSBmZWF0dXJlLnBhcmVudCB8fCBmZWF0dXJlLnByb3BlcnRpZXMucGFyZW50IHx8IGZlYXR1cmUuaWQgfHwgZmVhdHVyZS5wcm9wZXJ0aWVzLmlkO1xuICAgICAgICAgICAgdmFyIGFkZGVkO1xuXG4gICAgICAgICAgICBpZiAobGluZXNPbmx5ICYmIHR5cGUgIT09IFwiTGluZVN0cmluZ1wiICYmICFmZWF0dXJlLnByb3BlcnRpZXMudW5maWxsKSB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZSA9IGdlb2Zsby5VdGlsaXRpZXMuY2xvbmVEZWVwKGZlYXR1cmUpO1xuICAgICAgICAgICAgICAgIGFkZGVkID0gYWRkRmVhdHVyZVRvSW5kZXgoZmVhdHVyZSwgaWQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBhZGRlZCA/IHJlc3VsdC5wdXNoKGZlYXR1cmUpIDogZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlID09PSBcIk11bHRpUG9seWdvblwiKSB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcy5mb3JFYWNoKGZ1bmN0aW9uKGNvb3Jkcykge1xuICAgICAgICAgICAgICAgICAgICBjb29yZHMuZm9yRWFjaChmdW5jdGlvbihzdWJDb29yZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzVG9MaW5lU3RyaW5ncyhzdWJDb29yZHMsIHJlc3VsdCwgaWQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJQb2x5Z29uXCIpIHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzLmZvckVhY2goZnVuY3Rpb24oY29vcmRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzVG9MaW5lU3RyaW5ncyhjb29yZHMsIHJlc3VsdCwgaWQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBcIk11bHRpTGluZVN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcy5mb3JFYWNoKGZ1bmN0aW9uKGNvb3Jkcykge1xuICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlc1RvTGluZVN0cmluZ3MoY29vcmRzLCByZXN1bHQsIGlkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJMaW5lU3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBjb29yZGluYXRlc1RvTGluZVN0cmluZ3MoZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcywgcmVzdWx0LCBpZCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiUG9pbnRcIikge1xuICAgICAgICAgICAgICAgIGZlYXR1cmUgPSBnZW9mbG8uVXRpbGl0aWVzLmNsb25lRGVlcChmZWF0dXJlKTtcbiAgICAgICAgICAgICAgICBhZGRlZCA9IGFkZEZlYXR1cmVUb0luZGV4KGZlYXR1cmUsIGlkKTtcbiAgICAgICAgICAgICAgICBhZGRlZCA/IHJlc3VsdC5wdXNoKGZlYXR1cmUpIDogZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwZW5kQ3V0RmVhdHVyZXMoc2VnbWVudHNXaXRoQ3V0UG9pbnRzLCBmZWF0dXJlLCBjdXRQb2ludEZlYXR1cmVzKSB7XG4gICAgICAgIHZhciBpZCA9IGZlYXR1cmUuaWQgfHwgZmVhdHVyZS5wcm9wZXJ0aWVzLmlkO1xuICAgICAgICB2YXIgc2VnQ3V0UG9pbnRzID0gc2VnbWVudHNXaXRoQ3V0UG9pbnRzW2lkXTtcbiAgICBcbiAgICAgICAgaWYgKHNlZ0N1dFBvaW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzZWdDdXRQb2ludHMgPSBbXTtcbiAgICAgICAgICAgIHNlZ21lbnRzV2l0aEN1dFBvaW50c1tpZF0gPSBzZWdDdXRQb2ludHM7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgY3V0UG9pbnRGZWF0dXJlcy5mb3JFYWNoKGZ1bmN0aW9uKGZlYXR1cmUpIHtcbiAgICAgICAgICAgIHZhciBuZXdDdXRQb2ludCA9IGdlb2Zsby5VdGlsaXRpZXMucmVkdWNlUHJlY2lzaW9uKGZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXMpO1xuICAgICAgICAgICAgdmFyIGN1dFBvaW50ID0gc2VnQ3V0UG9pbnRzLmZpbmRJbmRleChmdW5jdGlvbihlbGVtZW50KSB7IHJldHVybiBlbGVtZW50WzBdID09PSBuZXdDdXRQb2ludFswXSAmJiBlbGVtZW50WzFdID09PSBuZXdDdXRQb2ludFsxXTsgfSk7XG4gICAgICAgICAgICBpZiAoY3V0UG9pbnQgPT09IC0xKSB7IHNlZ0N1dFBvaW50cy5wdXNoKG5ld0N1dFBvaW50KTsgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY2hlY2tGb3JJbnRlcnNlY3Rpb25zKGtub3duU2VnbWVudHMsIG5ld1NlZ21lbnRzKSB7XG4gICAgICAgIHZhciBzZWdtZW50c1dpdGhDdXRQb2ludHMgPSB7fTtcblxuICAgICAgICB2YXIgcHJvY2Vzc0ludGVyc2VjdGlvblBvaW50ID0gZnVuY3Rpb24gcHJvY2Vzc0ludGVyc2VjdGlvblBvaW50KHBvaW50LCBmZWF0dXJlMSwgZmVhdHVyZTIpIHtcbiAgICAgICAgICAgIHZhciBwb2ludENvb3JkcyA9IHBvaW50Lmdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICAgICAgICAgICAgdmFyIHNlZzFDb29yZHMgPSBmZWF0dXJlMS5nZW9tZXRyeS5jb29yZGluYXRlcztcbiAgICAgICAgICAgIHZhciBzZWcyQ29vcmRzID0gZmVhdHVyZTIuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgICAgICAgICB2YXIgYWRkRmVhdHVyZTFQb2ludCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGFkZEZlYXR1cmUyUG9pbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBjbG9zZXN0UG9pbnRBZGRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoIWdlb2Zsby5VdGlsaXRpZXMuaXNQb2ludEVxdWFsKHBvaW50Q29vcmRzLCBzZWcxQ29vcmRzWzBdKSAmJiAhZ2VvZmxvLlV0aWxpdGllcy5pc1BvaW50RXF1YWwocG9pbnRDb29yZHMsIHNlZzFDb29yZHNbMV0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVuZHBvaW50MSA9IHR1cmYucG9pbnQoc2VnMUNvb3Jkc1swXSk7XG4gICAgICAgICAgICAgICAgdmFyIGVuZHBvaW50MiA9IHR1cmYucG9pbnQoc2VnMUNvb3Jkc1sxXSk7XG4gICAgICAgICAgICAgICAgdmFyIGRpc3RhbmNlRW5kcG9pbnQxID0gdHVyZi5kaXN0YW5jZShwb2ludCwgZW5kcG9pbnQxKTtcbiAgICAgICAgICAgICAgICB2YXIgZGlzdGFuY2VFbmRwb2ludDIgPSB0dXJmLmRpc3RhbmNlKHBvaW50LCBlbmRwb2ludDIpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGNsb3Nlc3RFbmRwb2ludCA9IGRpc3RhbmNlRW5kcG9pbnQxIDwgZGlzdGFuY2VFbmRwb2ludDIgPyBlbmRwb2ludDEgOiBlbmRwb2ludDI7XG5cbiAgICAgICAgICAgICAgICB2YXIgcG9pbnRPbkxpbmUgPSB0dXJmLnBvaW50T25MaW5lKGZlYXR1cmUyLCBjbG9zZXN0RW5kcG9pbnQpO1xuICAgICAgICAgICAgICAgIGlmIChwb2ludE9uTGluZS5wcm9wZXJ0aWVzLmRpc3QgPCBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuTUlOX0RJU1RBTkNFKSB7XG4gICAgICAgICAgICAgICAgICAgIGFwcGVuZEN1dEZlYXR1cmVzKHNlZ21lbnRzV2l0aEN1dFBvaW50cywgZmVhdHVyZTIsIFtjbG9zZXN0RW5kcG9pbnRdKTtcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VzdFBvaW50QWRkZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZEZlYXR1cmUxUG9pbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZ2VvZmxvLlV0aWxpdGllcy5pc1BvaW50RXF1YWwocG9pbnRDb29yZHMsIHNlZzJDb29yZHNbMF0pICYmICFnZW9mbG8uVXRpbGl0aWVzLmlzUG9pbnRFcXVhbChwb2ludENvb3Jkcywgc2VnMkNvb3Jkc1sxXSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2VuZHBvaW50ID0gdHVyZi5wb2ludChzZWcyQ29vcmRzWzBdKTtcbiAgICAgICAgICAgICAgICB2YXIgX2VuZHBvaW50MiA9IHR1cmYucG9pbnQoc2VnMkNvb3Jkc1sxXSk7XG4gICAgICAgICAgICAgICAgdmFyIF9kaXN0YW5jZUVuZHBvaW50ID0gdHVyZi5kaXN0YW5jZShwb2ludCwgX2VuZHBvaW50KTtcbiAgICAgICAgICAgICAgICB2YXIgX2Rpc3RhbmNlRW5kcG9pbnQyID0gdHVyZi5kaXN0YW5jZShwb2ludCwgX2VuZHBvaW50Mik7XG5cbiAgICAgICAgICAgICAgICB2YXIgX2Nsb3Nlc3RFbmRwb2ludCA9IF9kaXN0YW5jZUVuZHBvaW50IDwgX2Rpc3RhbmNlRW5kcG9pbnQyID8gX2VuZHBvaW50IDogX2VuZHBvaW50MjtcblxuICAgICAgICAgICAgICAgIHZhciBfcG9pbnRPbkxpbmUgPSB0dXJmLnBvaW50T25MaW5lKGZlYXR1cmUxLCBfY2xvc2VzdEVuZHBvaW50KTtcbiAgICAgICAgICAgICAgICBpZiAoX3BvaW50T25MaW5lLnByb3BlcnRpZXMuZGlzdCA8IGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5NSU5fRElTVEFOQ0UpIHtcbiAgICAgICAgICAgICAgICAgICAgYXBwZW5kQ3V0RmVhdHVyZXMoc2VnbWVudHNXaXRoQ3V0UG9pbnRzLCBmZWF0dXJlMSwgW19jbG9zZXN0RW5kcG9pbnRdKTtcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VzdFBvaW50QWRkZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZEZlYXR1cmUyUG9pbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFjbG9zZXN0UG9pbnRBZGRlZCkge1xuICAgICAgICAgICAgICAgIGlmIChhZGRGZWF0dXJlMVBvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGFwcGVuZEN1dEZlYXR1cmVzKHNlZ21lbnRzV2l0aEN1dFBvaW50cywgZmVhdHVyZTEsIFtwb2ludF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYWRkRmVhdHVyZTJQb2ludCkge1xuICAgICAgICAgICAgICAgICAgICBhcHBlbmRDdXRGZWF0dXJlcyhzZWdtZW50c1dpdGhDdXRQb2ludHMsIGZlYXR1cmUyLCBbcG9pbnRdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNoZWNrSWZQb2ludEluQ2xvc2VSYW5nZSA9IGZ1bmN0aW9uIGNoZWNrSWZQb2ludEluQ2xvc2VSYW5nZShmZWF0dXJlLCBjb29yZHMpIHtcbiAgICAgICAgICAgIHZhciBwb2ludE9ubGluZSA9IHR1cmYucG9pbnRPbkxpbmUoZmVhdHVyZSwgdHVyZi5wb2ludChjb29yZHMpKTtcbiAgICAgICAgICAgIGlmIChwb2ludE9ubGluZS5wcm9wZXJ0aWVzLmRpc3QgPCBnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuTUlOX0RJU1RBTkNFKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFnZW9mbG8uVXRpbGl0aWVzLmlzUG9pbnRBdFZlcnRleChmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzLCBjb29yZHMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFwcGVuZEN1dEZlYXR1cmVzKHNlZ21lbnRzV2l0aEN1dFBvaW50cywgZmVhdHVyZSwgW3BvaW50T25saW5lXSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgc2FtZVNlZ21lbnRzID0ga25vd25TZWdtZW50cyA9PT0gbmV3U2VnbWVudHM7XG5cbiAgICAgICAgZm9yICh2YXIga25vd25JbmRleCA9IDA7IGtub3duSW5kZXggPCBrbm93blNlZ21lbnRzLmxlbmd0aDsga25vd25JbmRleCsrKSB7XG4gICAgICAgICAgICB2YXIgc2VnbWVudEZlYXR1cmUxID0ga25vd25TZWdtZW50c1trbm93bkluZGV4XTtcbiAgICAgICAgICAgIHZhciBmZWF0dXJlMVR5cGUgPSBzZWdtZW50RmVhdHVyZTEuZ2VvbWV0cnkudHlwZTtcblxuICAgICAgICAgICAgZm9yICh2YXIgbmV3SW5kZXggPSBzYW1lU2VnbWVudHMgPyBrbm93bkluZGV4ICsgMSA6IDA7IG5ld0luZGV4IDwgbmV3U2VnbWVudHMubGVuZ3RoOyBuZXdJbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlZ21lbnRGZWF0dXJlMiA9IG5ld1NlZ21lbnRzW25ld0luZGV4XTtcbiAgICAgICAgICAgICAgICB2YXIgZmVhdHVyZTJUeXBlID0gc2VnbWVudEZlYXR1cmUyLmdlb21ldHJ5LnR5cGU7XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gc2VnbWVudEZlYXR1cmUyLmlkIHx8IHNlZ21lbnRGZWF0dXJlMi5wcm9wZXJ0aWVzLmlkO1xuXG4gICAgICAgICAgICAgICAgaWYgKGZlYXR1cmUxVHlwZSA9PT0gXCJMaW5lU3RyaW5nXCIgJiYgZmVhdHVyZTJUeXBlID09PSBcIkxpbmVTdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2VvZmxvLlV0aWxpdGllcy5pc092ZXJsYXBwaW5nKHNlZ21lbnRGZWF0dXJlMSwgc2VnbWVudEZlYXR1cmUyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGludGVyc2VjdGlvblBvaW50cyA9IHR1cmYubGluZUludGVyc2VjdChzZWdtZW50RmVhdHVyZTEsIHNlZ21lbnRGZWF0dXJlMikuZmVhdHVyZXM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnRlcnNlY3Rpb25Qb2ludHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnRlcnNlY3Rpb25Qb2ludHMubGVuZ3RoID4gMSkgY29uc29sZS5lcnJvcihpbnRlcnNlY3Rpb25Qb2ludHMubGVuZ3RoICsgXCIgaW50ZXJzZWN0aW9uIHBvaW50cyByZWNlaXZlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9pbnQgPSBpbnRlcnNlY3Rpb25Qb2ludHNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0ludGVyc2VjdGlvblBvaW50KHBvaW50LCBzZWdtZW50RmVhdHVyZTEsIHNlZ21lbnRGZWF0dXJlMik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWcxQ29vcmRzID0gc2VnbWVudEZlYXR1cmUxLmdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWcyQ29vcmRzID0gc2VnbWVudEZlYXR1cmUyLmdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrSWZQb2ludEluQ2xvc2VSYW5nZShzZWdtZW50RmVhdHVyZTEsIHNlZzJDb29yZHNbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrSWZQb2ludEluQ2xvc2VSYW5nZShzZWdtZW50RmVhdHVyZTEsIHNlZzJDb29yZHNbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrSWZQb2ludEluQ2xvc2VSYW5nZShzZWdtZW50RmVhdHVyZTIsIHNlZzFDb29yZHNbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrSWZQb2ludEluQ2xvc2VSYW5nZShzZWdtZW50RmVhdHVyZTIsIHNlZzFDb29yZHNbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0RmVhdHVyZUJ5SWQoaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0V4aXN0aW5nIExpbmU6ICcsIHNlZ21lbnRGZWF0dXJlMilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zID0gYWxsU2VnbWVudHMuaW5kZXhPZihnZXRGZWF0dXJlQnlJZChpZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbFNlZ21lbnRzLnNwbGljZShwb3MsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmZWF0dXJlMVR5cGUgPT09IFwiUG9pbnRcIiB8fCBmZWF0dXJlMlR5cGUgPT09IFwiUG9pbnRcIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZTJUeXBlID09PSBcIlBvaW50XCIgJiYgZmVhdHVyZTJUeXBlID09PSBcIlBvaW50XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUG9pbnQgJiBQb2ludFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUG9pbnQgJiBMaW5lU3RyaW5nXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9wb2ludCA9IGZlYXR1cmUxVHlwZSA9PT0gXCJQb2ludFwiID8gc2VnbWVudEZlYXR1cmUxIDogc2VnbWVudEZlYXR1cmUyO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmUgPSBmZWF0dXJlMVR5cGUgPT09IFwiTGluZVN0cmluZ1wiID8gc2VnbWVudEZlYXR1cmUxIDogc2VnbWVudEZlYXR1cmUyO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZCA9IF9wb2ludC5pZCB8fCBfcG9pbnQucHJvcGVydGllcy5pZDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrSWZQb2ludEluQ2xvc2VSYW5nZShsaW5lLCBfcG9pbnQuZ2VvbWV0cnkuY29vcmRpbmF0ZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudHNXaXRoQ3V0UG9pbnRzW2lkXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGdldEZlYXR1cmVCeUlkKGlkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0V4aXN0aW5nIFBvaW50OiAnLCBzZWdtZW50RmVhdHVyZTIpXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zID0gYWxsU2VnbWVudHMuaW5kZXhPZihnZXRGZWF0dXJlQnlJZChpZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxsU2VnbWVudHMuc3BsaWNlKHBvcywgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VnbWVudHNXaXRoQ3V0UG9pbnRzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGN1dFNlZ21lbnRzKG5ld1NlZ21lbnRzLCBzZWdtZW50c1dpdGhDdXRQb2ludHMpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICAgIG5ld1NlZ21lbnRzLmZvckVhY2goZnVuY3Rpb24oc2VnbWVudCkge1xuICAgICAgICAgICAgdmFyIGlkID0gc2VnbWVudC5pZCB8fCBzZWdtZW50LnByb3BlcnRpZXMuaWQ7XG5cbiAgICAgICAgICAgIGlmIChzZWdtZW50Lmdlb21ldHJ5LnR5cGUgPT09IFwiTGluZVN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1dFBvaW50cyA9IHNlZ21lbnRzV2l0aEN1dFBvaW50c1tpZF07XG5cbiAgICAgICAgICAgICAgICBpZiAoY3V0UG9pbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZjID0gdHVyZi5saW5lU3BsaXQoc2VnbWVudCwgdHVyZi5tdWx0aVBvaW50KGN1dFBvaW50cykpO1xuICAgICAgICAgICAgICAgICAgICB0dXJmLmZlYXR1cmVFYWNoKGZjLCBmdW5jdGlvbihmZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gdHVyZi5saW5lRGlzdGFuY2UoZmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVuZ3RoID4gZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLk1JTl9TRUdNRU5UX0xFTkdUSCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb2Zsby5VdGlsaXRpZXMuc2V0UHJvcGVydGllcyhmZWF0dXJlLCB7IGxlbmd0aDogbGVuZ3RoIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEZlYXR1cmVUb0luZGV4KGZlYXR1cmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGZlYXR1cmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiMCBsZW5ndGggZmVhdHVyZSAoXCIsIGxlbmd0aCwgXCIpIGFmdGVyIGxpbmUgc3BsaXQ6IFwiLCBKU09OLnN0cmluZ2lmeShmZWF0dXJlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSB0dXJmLmxpbmVEaXN0YW5jZShzZWdtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxlbmd0aCA+IGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5NSU5fU0VHTUVOVF9MRU5HVEgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlb2Zsby5VdGlsaXRpZXMuc2V0UHJvcGVydGllcyhzZWdtZW50LCB7IGxlbmd0aDogbGVuZ3RoIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goc2VnbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiMCBsZW5ndGggZmVhdHVyZSAoXCIsIGxlbmd0aCwgXCIpIGV4aXN0aW5nIHNlZ21lbnQ6IFwiLCBKU09OLnN0cmluZ2lmeShzZWdtZW50KSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBfY3V0UG9pbnRzID0gc2VnbWVudHNXaXRoQ3V0UG9pbnRzW2lkXTtcblxuICAgICAgICAgICAgICAgIGlmIChfY3V0UG9pbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goc2VnbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNwbGl0QW5kQ2hlY2tGb3JJbnRlcnNlY3Rpb25zKG5ld0ZlYXR1cmVzKSB7XG4gICAgICAgIHZhciBuZXdGZWF0dXJlc1NlZ21lbnRzID0gc3BsaXRJbnRvVHdvUG9pbnRTZWdtZW50c0FuZEFkZElkcyhuZXdGZWF0dXJlcyk7XG4gICAgICAgIGlmIChsaW5lc09ubHkpIHJldHVybiBuZXdGZWF0dXJlc1NlZ21lbnRzO1xuICAgICAgICB2YXIgbmV3RmVhdHVyZXNXaXRoQ3V0UG9pbnRzID0gY2hlY2tGb3JJbnRlcnNlY3Rpb25zKG5ld0ZlYXR1cmVzU2VnbWVudHMsIG5ld0ZlYXR1cmVzU2VnbWVudHMpO1xuICAgICAgICByZXR1cm4gY3V0U2VnbWVudHMobmV3RmVhdHVyZXNTZWdtZW50cywgbmV3RmVhdHVyZXNXaXRoQ3V0UG9pbnRzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRGZWF0dXJlQnlJZChpZCkge1xuICAgICAgICByZXR1cm4gYWxsU2VnbWVudHMuZmluZChmdW5jdGlvbihmKSB7IHJldHVybiBmLmlkID09PSBpZCB8fCBmLnByb3BlcnRpZXMuaWQgPT09IGlkIH0pIFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEZlYXR1cmVzQnlQYXJlbnRJZChpZCkge1xuICAgICAgICByZXR1cm4gYWxsU2VnbWVudHMuZmlsdGVyKGZ1bmN0aW9uKGYpIHsgcmV0dXJuIGYucGFyZW50ID09PSBpZCB8fCBmLnByb3BlcnRpZXMucGFyZW50ID09PSBpZCB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUZlYXR1cmUoaWQpIHtcbiAgICAgICAgdmFyIGZlYXR1cmVzID0gZ2V0RmVhdHVyZXNCeVBhcmVudElkKGlkKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChmZWF0dXJlcyAmJiBmZWF0dXJlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZlYXR1cmVzLmZvckVhY2goZnVuY3Rpb24oZmVhdHVyZSkge1xuICAgICAgICAgICAgICAgIHZhciBwb3MgPSBhbGxTZWdtZW50cy5pbmRleE9mKGZlYXR1cmUpO1xuICAgICAgICAgICAgICAgIGFsbFNlZ21lbnRzLnNwbGljZShwb3MsIDEpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZ2VvZmxvLnVwZGF0ZU1lc2hEYXRhKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYWxsU2VnbWVudHM7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgTWVzaDsiLCJjb25zdCBPcHRpb25zID0ge1xuICAgIHRoZW1lOiAnZGFyaycsXG4gICAgc2hvd0xpbmVVbml0czogZmFsc2UsXG4gICAgc2hvd0ZlYXR1cmVUZXh0OiB0cnVlLFxuICAgIGNvbnRyb2xzOiB7XG4gICAgICAgIG9wdGlvbnM6IHRydWUsXG4gICAgICAgIG1vZGVzOiB0cnVlLFxuICAgICAgICB1dGlsczogdHJ1ZSxcbiAgICAgICAgdHlwZXM6IHRydWUsXG4gICAgICAgIGFjdGlvbnM6IHRydWVcbiAgICB9LFxuICAgIG1hcDoge1xuICAgICAgICBjb250YWluZXI6ICdtYXAnLFxuICAgICAgICBjZW50ZXI6IFstOTUuNTI4MTY2ODAyMzY4OTIsIDM5LjU2NDMxMTQzOTg2MDM1XSxcbiAgICAgICAgem9vbTogMy41LFxuICAgICAgICBtYXhQaXRjaDogNTAsXG4gICAgICAgIHByb2plY3Rpb246ICdtZXJjYXRvcicsXG4gICAgICAgIHN0eWxlOiAnbWFwYm94Oi8vc3R5bGVzL21hcGJveC9kYXJrLXYxMScsXG4gICAgICAgIGhhc2g6IHRydWUsXG4gICAgICAgIGV4dGVudDogW1tbLTEyNy4zNjM4NDU5LDQ5LjYyMTI3NTJdLFstNzMuNzI5NTEzNiw0OS42MjEyNzUyXSxbLTczLjcyOTUxMzYsMjQuNzQ3MzIwMV0sWy0xMjcuMzYzODQ1OSwyNC43NDczMjAxXSxbLTEyNy4zNjM4NDU5LDQ5LjYyMTI3NTJdXV0sXG4gICAgfSxcbiAgICBrZXlzOiB7XG4gICAgICAgIGltcG9ydDogJ3UnLFxuICAgICAgICBleHBvcnQ6ICdkJyxcbiAgICAgICAgZGVsZXRlOiAnRGVsZXRlJyxcbiAgICAgICAgY2FuY2VsOiAnRXNjYXBlJyxcbiAgICAgICAgc2VsZWN0OiAnRXNjYXBlJyxcbiAgICAgICAgZWRpdDogJ0VudGVyJyxcbiAgICAgICAgcmVmcmVzaDogJ3EnLFxuICAgICAgICB6b29tOiAneicsXG4gICAgICAgIGxvY2F0ZTogJ2wnLFxuICAgICAgICBzbmFwcGluZzogJyEnLFxuICAgICAgICBwaW5uaW5nOiAnQCcsXG4gICAgICAgIHJvdXRpbmc6ICcjJyxcbiAgICAgICAgZXhwbG9yaW5nOiAnJCcsXG4gICAgICAgIHBhaW50aW5nOiAnJScsXG4gICAgICAgIExpbmVTdHJpbmc6ICcxJyxcbiAgICAgICAgUG9seWdvbjogJzInLFxuICAgICAgICBSZWN0YW5nbGU6ICczJyxcbiAgICAgICAgQ2lyY2xlOiAnNCcsXG4gICAgICAgIFRleHQ6ICc1JyxcbiAgICAgICAgSWNvbjogJzYnXG4gICAgfSxcbiAgICBjb21tYW5kczogW3tcbiAgICAgICAga2V5OiAnLicsXG4gICAgICAgIG1vZGlmaWVyOiBmYWxzZSxcbiAgICAgICAgY29tbWFuZDogZnVuY3Rpb24gKGV2ZW50LCBnZW9mbG8sIGNvbW1hbmQpIHtcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0geyBsbmdMYXQ6IGdlb2Zsby5tYXAuZ2V0Q2VudGVyKCkgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZ2VvZmxvLmN1cnJlbnRNb2RlLmlkID09PSAnZHJhdycpIHtcbiAgICAgICAgICAgICAgICBnZW9mbG8uY3VycmVudE1vZGUuaGFuZGxlVXAob3B0aW9ucyk7IFxuICAgICAgICAgICAgICAgIGdlb2Zsby5jdXJyZW50TW9kZS5oYW5kbGVDbGljayhvcHRpb25zKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2VvZmxvLmN1cnJlbnRNb2RlLmhhbmRsZUNsaWNrKG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfV0sXG4gICAgdW5pdHM6IHtcbiAgICAgICAgUG9seWxpbmU6ICdmZWV0JyxcbiAgICAgICAgUG9seWdvbjogJ2FjcmVzJyxcbiAgICAgICAgUmVjdGFuZ2xlOiAnYWNyZXMnLFxuICAgICAgICBJY29uOiAnZmVhdHVyZScsXG4gICAgICAgIENpcmNsZTogJ2ZlYXR1cmUnLFxuICAgICAgICBNYXJrZXI6ICdmZWF0dXJlJ1xuICAgIH0sXG4gICAgY29sb3JzOiB7XG4gICAgICAgIGVycm9yOiAnI2ZmNzY3NicsXG5cbiAgICAgICAgcHJpbWFyeUNvbG9yOiBcIiNkN2VmN2VcIixcbiAgICAgICAgcHJpbWFyeUJhY2tncm91bmQ6IFwiIzVhNWE1YVwiLFxuICAgICAgICBwcmltYXJ5VGV4dDogXCIjYzVjNWM1XCIsXG4gICAgICAgIHByaW1hcnlCb3JkZXI6IFwiIzZmYWZkYlwiLFxuICAgICAgICBcbiAgICAgICAgc2Vjb25kYXJ5Q29sb3I6IFwiIzZmYWZkYlwiLFxuICAgICAgICBzZWNvbmRhcnlCYWNrZ3JvdW5kOiBcIiMzMzMzMzNcIixcbiAgICAgICAgc2Vjb25kYXJ5VGV4dDogXCIjMzMzMzMzXCIsXG4gICAgICAgIHNlY29uZGFyeUJvcmRlcjogXCIjNDA0MDQwXCIsXG5cblxuICAgICAgICBwcmltYXJ5U2VsZWN0OiBcIiMzMzMzMzNcIixcbiAgICAgICAgcHJpbWFyeUVkaXQ6IFwiI2Q3ZWY3ZVwiLFxuICAgICAgICBwcmltYXJ5SG90OiBcIiNkN2VmN2VcIixcbiAgICAgICAgcHJpbWFyeUNvbGQ6IFwiIzZmYWZkYlwiLFxuICAgICAgICBwcmltYXJ5U25hcDogXCIjYzVjNWM1XCIsXG4gICAgICAgIHByaW1hcnlCYXNlOiBcIiNjNWM1YzVcIixcbiAgICAgICAgcHJpbWFyeURlYnVnOiBcIiNmZjc2NzZcIixcbiAgICAgICAgcHJpbWFyeVZlcnRleDogXCIjYzVjNWM1XCIsXG5cbiAgICAgICAgc2Vjb25kYXJ5U2VsZWN0OiBcIiNkN2VmN2VcIixcbiAgICAgICAgc2Vjb25kYXJ5RWRpdDogXCIjYzVjNWM1XCIsXG4gICAgICAgIHNlY29uZGFyeUhvdDogXCIjMzMzMzMzXCIsXG4gICAgICAgIHNlY29uZGFyeUNvbGQ6IFwiI2M1YzVjNVwiLFxuICAgICAgICBzZWNvbmRhcnlTbmFwOiBcIiNkN2VmN2VcIixcbiAgICAgICAgc2Vjb25kYXJ5QmFzZTogXCIjMjQyNDI0XCIsXG4gICAgICAgIHNlY29uZGFyeURlYnVnOiBcIiNkN2VmN2VcIixcbiAgICAgICAgc2Vjb25kYXJ5VmVydGV4OiBcIiMzMzMzMzNcIlxuICAgIH0sXG4gICAgc2VsZWN0OiB7XG4gICAgICAgIHBvcHVwOiBmYWxzZSxcbiAgICAgICAgbXVsdGlwbGU6IGZhbHNlXG4gICAgfSxcbiAgICBzbmFwcGluZzoge1xuICAgICAgICBlbmFibGU6IGZhbHNlLCAvLyBFbmFibGVzIHNuYXBwaW5nIHRvIGZlYXR1cmVzXG4gICAgICAgIHBpeGVsczogZmFsc2UsIC8vIHN0aWxsIHdvcmtpbmcgb24gdGhpc1xuICAgICAgICBkaXN0YW5jZTogMjAwICogMS42MDkzNDQsIC8vIDIwMCBtaWxlcyB0byBraWxvbWV0ZXJzLiBDYWxjdWxhdGVkIGJ5IHpvb20gbGV2ZWw6IChkaXN0YW5jZSAqIE1hdGgucG93KDIsIE1hdGgubWF4KDEsIDE5IC0gbWFwLmdldFpvb20oKSkpKSAvIDEwMDAwMFxuICAgICAgICB0b2xlcmFuY2U6IDAuMDAyIC8vIGtpbG9tZXRlcnMuIERpc3RhbmNlIGZyb20gdGhlIGxhc3QgY2xpY2sgdG8gaGlkZS9zaG93IG1vdXNlIGxpbmVcbiAgICB9LFxuICAgIHJvdXRpbmc6IHtcbiAgICAgICAgZW5hYmxlOiBmYWxzZSwgLy8gZmluZCBzaG9ydGVzdCBwYXRoXG4gICAgICAgIHByZWNpc2lvbjogMC4wMDAwMDE1IC8vIHJvdW5kaW5nIGNvb3JkcyB0byBjcmVhdGUgdG9wb2xvZ3kuIEhpZ2hlciB0aGUgbnVtYmVyIHdpbGwgY2xvc2UgZ2FwcyBpbiBsaW5lcyBhbmQgYWxsb3cgdG8gZmluZCBwYXRoXG4gICAgfSxcbiAgICBwaW5uaW5nOiB7XG4gICAgICAgIGVuYWJsZTogZmFsc2UsIC8vIEVuYWJsZXMgcGlubmluZyAoZ2x1ZWluZykgZmVhdHVyZXMgdG9nZXRoZXIgYXQgdmVydGljZXMvcG9pbnRzLiBXaGVuIGVkaXRpbmcvZHJhZ2dpbmcgYSBwb2ludCwgYWxsIHBpbm5lZCBwb2ludHMgd2lsbCBtb3ZlIHRvZ2V0aGVyLlxuICAgICAgICBidWZmZXI6ICg1MCAvIDUyODApICogMS42MDkzNDQsIC8vIDUwIGZlZXQgdG8gbWlsZXMgdG8ga2lsb21ldGVyLiBQaW4gZmVhdHVyZXMgd2l0aGluIGEgNTAgZm9vdCByYWRpdXMuIEZhbHNlIGZvciBleGFjdCBwb2ludCBsb2NhdGlvbi5cbiAgICAgICAgaWRsZTogMjAgLy8gbWlsbGlzZWNvbmRzIG9mIGhvdyBsb25nIHRvIGlkbGUgYWZ0ZXIgdXBkYXRpbmcgcGlubmVkIGZlYXR1cmVzIGJlZm9yZSBjaGVja2luZyBmb3IgbmVhcmJ5IGZlYXR1cmVzIHRvIHNuYXAgdG8gKGhlbHBzIHdpdGggZWRpdGluZyBwZXJmb3JtYW5jZSlcbiAgICB9LFxuICAgIGV4cGxvcmluZzoge1xuICAgICAgICBlbmFibGU6IGZhbHNlLFxuICAgICAgICBtaW5ab29tOiAxMixcbiAgICAgICAgYnVmZmVyOiAoNTAwMCAvIDUyODApICogMS42MDkzNDQsIC8vIDMwMCBmZWV0IHRvIG1pbGVzIHRvIGtpbG9tZXRlci4gRG93bmxvYWQgcm9hZHdheXMgd2l0aGluIGEgMzAwIGZvb3QgcmFkaXVzLlxuICAgICAgICB0b2xlcmFuY2U6IDAuMDAwMDEgLy8gSG93IG11Y2ggdG9sZXJhbmNlIHRvIHNpbXBsaWZ5IGNvb3JkaW5hdGVzLiBDYW4gYmUgYSBmdW5jdGlvbiB3aXRoIG1hcCBhcmd1bWVudC5cbiAgICB9LFxuICAgIG1vdmluZzoge1xuICAgICAgICBlbmFibGU6IGZhbHNlLCAvLyBFbmFibGVzIG1vdmluZyBmZWF0dXJlXG4gICAgICAgIGRpc3RhbmNlOiAoMyAvIDUyODApICogMS42MDkzNDQgLy8gMyBmZWV0IHRvIG1pbGVzIHRvIGtpbG9tZXRlci4gVGhlIGRpc3RhbmNlIGluIHdoaWNoIHRvIG1vdmUgdGhlIGZlYXR1cmVcbiAgICB9LFxuICAgIHBhaW50aW5nOiB7XG4gICAgICAgIGVuYWJsZTogZmFsc2UsIC8vIEVuYWJsZXMgcGFpbnRpbmcgZHJhd2luZyBmb3IgbGluZXN0cmluZ3MgYW5kIHBvbHlnb25zXG4gICAgICAgIHRvbGVyYW5jZTogMC4wMDAwMDUgLy8gSG93IG11Y2ggdG9sZXJhbmNlIHRvIHNpbXBsaWZ5IGNvb3JkaW5hdGVzLiBDYW4gYmUgYSBmdW5jdGlvbiB3aXRoIG1hcCBhcmd1bWVudC5cbiAgICB9LFxuICAgIGdhbWVwYWQ6IHtcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxuICAgICAgICBkZWJ1ZzogZmFsc2UsXG4gICAgICAgIGNyb3NzaGFpcnM6IHRydWUsXG4gICAgICAgIGpveXN0aWNrOiB7XG4gICAgICAgICAgICBtaW46IDAuMixcbiAgICAgICAgICAgIG1heDogMC43XG4gICAgICAgIH0sXG4gICAgICAgIGNhbWVyYToge1xuICAgICAgICAgICAgZnJlZTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBwYW46IHtcbiAgICAgICAgICAgIHNwZWVkOiAwLjAwMSxcbiAgICAgICAgICAgIG1pbjogMC4wMDEsXG4gICAgICAgICAgICBtYXg6IDAuMDVcbiAgICAgICAgfSxcbiAgICAgICAgYmVhcmluZzoge1xuICAgICAgICAgICAgc3BlZWQ6IDAuOFxuICAgICAgICB9LFxuICAgICAgICBwaXRjaDoge1xuICAgICAgICAgICAgc3BlZWQ6IDEuNSxcbiAgICAgICAgICAgIG1heDogNzBcbiAgICAgICAgfSxcbiAgICAgICAgem9vbToge1xuICAgICAgICAgICAgc3BlZWQ6IDAuMDA4XG4gICAgICAgIH0sXG4gICAgICAgIHJ1bWJsZToge1xuICAgICAgICAgICAgc3RhcnREZWxheTogMCxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAyMDAsXG4gICAgICAgICAgICB3ZWFrTWFnbml0dWRlOiAxLjAsXG4gICAgICAgICAgICBzdHJvbmdNYWduaXR1ZGU6IDEuMFxuICAgICAgICB9LFxuICAgICAgICBtYXBwaW5nOiB7XG4gICAgICAgICAgICAnU2VsZWN0JzogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdwcmVzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC50eXBlID09PSAnaG9sZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC50eXBlID09PSAncmVsZWFzZScpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuY3R4LmdldEJ1dHRvbnMoJ2NsZWFyJykuYnV0dG9uLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdTdGFydCc6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSAncHJlc3MnKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQudHlwZSA9PT0gJ2hvbGQnKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQudHlwZSA9PT0gJ3JlbGVhc2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5nYW1lcGFkLmhhc0pveXN0aWNrcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1dHRvbiA9IGV2ZW50Lm1vZGUuaWQgPT09ICdzZWxlY3QnID8gJ2VkaXQnIDogJ3NlbGVjdCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5jdHguZ2V0QnV0dG9ucyhidXR0b24pLmJ1dHRvbi5jbGljaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdQb3dlcic6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSAncHJlc3MnKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQudHlwZSA9PT0gJ2hvbGQnKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQudHlwZSA9PT0gJ3JlbGVhc2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmN0eC5nZXRCdXR0b25zKCdzYXZlJykuYnV0dG9uLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdNZW51JzogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdwcmVzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC50eXBlID09PSAnaG9sZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC50eXBlID09PSAncmVsZWFzZScpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdNaXNjJzogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdwcmVzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC50eXBlID09PSAnaG9sZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC50eXBlID09PSAncmVsZWFzZScpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmdhbWVwYWQuaGFzSm95c3RpY2tzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5jdHguZ2V0QnV0dG9ucygnem9vbScpLmJ1dHRvbi5jbGljaygpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlYWR5ID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjdHgubWFwTW92aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocmVhZHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5nYW1lcGFkLm1hcC5jZW50ZXIgPSBldmVudC5jdHgubWFwLmdldENlbnRlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5nYW1lcGFkLm1hcC56b29tID0gZXZlbnQuY3R4Lm1hcC5nZXRab29tKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ0EnOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3ByZXNzJykge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnR5cGUgPT09ICdob2xkJykge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnR5cGUgPT09ICdyZWxlYXNlJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWV2ZW50LmdhbWVwYWQuaGFzSm95c3RpY2tzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWV2ZW50LmdhbWVwYWQucHJlc3NlZFsnQnVtcExlZnQnXSAmJiAhZXZlbnQuZ2FtZXBhZC5wcmVzc2VkWydCdW1wUmlnaHQnXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzWydKb3lMZWZ0Q2xpY2snXShldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5jdHguZ2V0QnV0dG9ucygncm91dGluZycpLmJ1dHRvbi5jbGljaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdCJzogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdwcmVzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC50eXBlID09PSAnaG9sZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC50eXBlID09PSAncmVsZWFzZScpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFldmVudC5nYW1lcGFkLmhhc0pveXN0aWNrcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFldmVudC5nYW1lcGFkLnByZXNzZWRbJ0J1bXBMZWZ0J10gJiYgIWV2ZW50LmdhbWVwYWQucHJlc3NlZFsnQnVtcFJpZ2h0J10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1snSm95UmlnaHRDbGljayddKGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LmN0eC5nZXRCdXR0b25zKCdwYWludGluZycpLmJ1dHRvbi5jbGljaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdZJzogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdwcmVzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFldmVudC5nYW1lcGFkLmhhc0pveXN0aWNrcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChldmVudC5nYW1lcGFkLnByZXNzZWRbJ0J1bXBMZWZ0J10gfHwgZXZlbnQuZ2FtZXBhZC5wcmVzc2VkWydCdW1wUmlnaHQnXSkpIGV2ZW50LmdhbWVwYWQuc2V0U3BlZWQoZXZlbnQudmFsdWUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQudHlwZSA9PT0gJ2hvbGQnKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQudHlwZSA9PT0gJ3JlbGVhc2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5nYW1lcGFkLmhhc0pveXN0aWNrcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuY3R4LmdldEJ1dHRvbnMoJ3NuYXBwaW5nJykuYnV0dG9uLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ1gnOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3ByZXNzJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWV2ZW50LmdhbWVwYWQuaGFzSm95c3RpY2tzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGV2ZW50LmdhbWVwYWQucHJlc3NlZFsnQnVtcExlZnQnXSB8fCBldmVudC5nYW1lcGFkLnByZXNzZWRbJ0J1bXBSaWdodCddKSkgZXZlbnQuZ2FtZXBhZC5zZXRTcGVlZChldmVudC52YWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnR5cGUgPT09ICdob2xkJykge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnR5cGUgPT09ICdyZWxlYXNlJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZ2FtZXBhZC5oYXNKb3lzdGlja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LmN0eC5nZXRCdXR0b25zKCdwaW5uaW5nJykuYnV0dG9uLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ0pveUxlZnRNb3ZlJzogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdwcmVzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC50eXBlID09PSAnaG9sZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuZ2FtZXBhZC5zZXRDZW50ZXIoZXZlbnQudmFsdWUsIGV2ZW50LmdhbWVwYWQub3B0aW9ucy5jYW1lcmEuZnJlZSkgLy8gUGFuIG1hcFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQudHlwZSA9PT0gJ3JlbGVhc2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmdhbWVwYWQuc2V0Q2VudGVyKGZhbHNlLCBldmVudC5nYW1lcGFkLm9wdGlvbnMuY2FtZXJhLmZyZWUpIC8vIFJlc2V0IG1hcCBjZW50ZXJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ0pveVJpZ2h0TW92ZSc6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSAncHJlc3MnKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQudHlwZSA9PT0gJ2hvbGQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5uYW1lLmluY2x1ZGVzKCdVcCcpIHx8IGV2ZW50Lm5hbWUuaW5jbHVkZXMoJ0Rvd24nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuZ2FtZXBhZC5zZXRQaXRjaChldmVudC52YWx1ZSwgZXZlbnQubmFtZS5pbmNsdWRlcygnVXAnKSk7IC8vIFBpdGNoIG1hcFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50Lm5hbWUuaW5jbHVkZXMoJ0xlZnQnKSB8fCBldmVudC5uYW1lLmluY2x1ZGVzKCdSaWdodCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5nYW1lcGFkLnNldEJlYXJpbmcoZXZlbnQudmFsdWUsIGV2ZW50Lm5hbWUuaW5jbHVkZXMoJ0xlZnQnKSk7IC8vIFJvdGF0ZSBtYXBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQudHlwZSA9PT0gJ3JlbGVhc2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnSm95TGVmdENsaWNrJzogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdwcmVzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC50eXBlID09PSAnaG9sZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC50eXBlID09PSAncmVsZWFzZScpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50Lm1vZGUuaWQgPT09ICdkcmF3Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQubW9kZS5kZWxldGVWZXJ0ZXgoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnSm95UmlnaHRDbGljayc6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSAncHJlc3MnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5tb2RlLmlkID09PSAnZHJhdycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXZlbnQubG5nTGF0KSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQubW9kZS5oYW5kbGVEb3duKGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQudHlwZSA9PT0gJ2hvbGQnKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQudHlwZSA9PT0gJ3JlbGVhc2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZXZlbnQubG5nTGF0KSByZXR1cm4gZmFsc2U7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5tb2RlLmlkID09PSAnZHJhdycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Lm1vZGUuaGFuZGxlVXAoZXZlbnQpOyBcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Lm1vZGUuaGFuZGxlQ2xpY2soZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQubW9kZS5oYW5kbGVDbGljayhldmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ0J1bXBMZWZ0JzogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdwcmVzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFldmVudC5nYW1lcGFkLmhhc0pveXN0aWNrcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmdhbWVwYWQucHJlc3NlZFsnQnVtcFJpZ2h0J10pIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50LmdhbWVwYWQuc2V0U3BlZWQoZXZlbnQudmFsdWUsIHRydWUpOyAvLyBQYW4gc3BlZWQgZG93blxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC50eXBlID09PSAnaG9sZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFldmVudC5nYW1lcGFkLmhhc0pveXN0aWNrcykge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC50eXBlID09PSAncmVsZWFzZScpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdCdW1wUmlnaHQnOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3ByZXNzJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWV2ZW50LmdhbWVwYWQuaGFzSm95c3RpY2tzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZ2FtZXBhZC5wcmVzc2VkWydCdW1wTGVmdCddKSByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudC5nYW1lcGFkLnNldFNwZWVkKGV2ZW50LnZhbHVlLCBmYWxzZSk7IC8vIFBhbiBzcGVlZCBkb3duXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnR5cGUgPT09ICdob2xkJykge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnR5cGUgPT09ICdyZWxlYXNlJykge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ1RyaWdMZWZ0JzogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdwcmVzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC50eXBlID09PSAnaG9sZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuZ2FtZXBhZC5zZXRab29tKGV2ZW50LnZhbHVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnR5cGUgPT09ICdyZWxlYXNlJykge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ1RyaWdSaWdodCc6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSAncHJlc3MnKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQudHlwZSA9PT0gJ2hvbGQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmdhbWVwYWQuc2V0Wm9vbShldmVudC52YWx1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQudHlwZSA9PT0gJ3JlbGVhc2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnRHBhZFVwJzogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdwcmVzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC50eXBlID09PSAnaG9sZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFldmVudC5nYW1lcGFkLmhhc0pveXN0aWNrcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmdhbWVwYWQucHJlc3NlZFsnQnVtcExlZnQnXSAmJiBldmVudC5nYW1lcGFkLnByZXNzZWRbJ0J1bXBSaWdodCddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuZ2FtZXBhZC5zZXRQaXRjaChldmVudC52YWx1ZSwgdHJ1ZSk7IC8vIFBpdGNoIG1hcFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5nYW1lcGFkLnNldENlbnRlcihldmVudC52YWx1ZSwgZXZlbnQuZ2FtZXBhZC5vcHRpb25zLmNhbWVyYS5mcmVlKSAvLyBQYW4gbWFwXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnR5cGUgPT09ICdyZWxlYXNlJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZ2FtZXBhZC5oYXNKb3lzdGlja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LmN0eC5nZXRCdXR0b25zKCdQb2x5Z29uJykuYnV0dG9uLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ0RwYWREb3duJzogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdwcmVzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC50eXBlID09PSAnaG9sZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFldmVudC5nYW1lcGFkLmhhc0pveXN0aWNrcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmdhbWVwYWQucHJlc3NlZFsnQnVtcExlZnQnXSAmJiBldmVudC5nYW1lcGFkLnByZXNzZWRbJ0J1bXBSaWdodCddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuZ2FtZXBhZC5zZXRQaXRjaChldmVudC52YWx1ZSwgZmFsc2UpOyAvLyBQaXRjaCBtYXBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuZ2FtZXBhZC5zZXRDZW50ZXIoZXZlbnQudmFsdWUsIGV2ZW50LmdhbWVwYWQub3B0aW9ucy5jYW1lcmEuZnJlZSkgLy8gUGFuIG1hcFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC50eXBlID09PSAncmVsZWFzZScpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmdhbWVwYWQuaGFzSm95c3RpY2tzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5jdHguZ2V0QnV0dG9ucygnQ2lyY2xlJykuYnV0dG9uLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ0RwYWRMZWZ0JzogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdwcmVzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC50eXBlID09PSAnaG9sZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFldmVudC5nYW1lcGFkLmhhc0pveXN0aWNrcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmdhbWVwYWQucHJlc3NlZFsnQnVtcExlZnQnXSAmJiBldmVudC5nYW1lcGFkLnByZXNzZWRbJ0J1bXBSaWdodCddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuZ2FtZXBhZC5zZXRCZWFyaW5nKGV2ZW50LnZhbHVlLCB0cnVlKTsgLy8gUm90YXRlIG1hcFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5nYW1lcGFkLnNldENlbnRlcihldmVudC52YWx1ZSwgZXZlbnQuZ2FtZXBhZC5vcHRpb25zLmNhbWVyYS5mcmVlKSAvLyBQYW4gbWFwXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnR5cGUgPT09ICdyZWxlYXNlJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZ2FtZXBhZC5oYXNKb3lzdGlja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LmN0eC5nZXRCdXR0b25zKCdQb2x5bGluZScpLmJ1dHRvbi5jbGljaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdEcGFkUmlnaHQnOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3ByZXNzJykge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnR5cGUgPT09ICdob2xkJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWV2ZW50LmdhbWVwYWQuaGFzSm95c3RpY2tzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZ2FtZXBhZC5wcmVzc2VkWydCdW1wTGVmdCddICYmIGV2ZW50LmdhbWVwYWQucHJlc3NlZFsnQnVtcFJpZ2h0J10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5nYW1lcGFkLnNldEJlYXJpbmcoZXZlbnQudmFsdWUsIGZhbHNlKTsgLy8gUm90YXRlIG1hcFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5nYW1lcGFkLnNldENlbnRlcihldmVudC52YWx1ZSwgZXZlbnQuZ2FtZXBhZC5vcHRpb25zLmNhbWVyYS5mcmVlKSAvLyBQYW4gbWFwXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnR5cGUgPT09ICdyZWxlYXNlJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZ2FtZXBhZC5oYXNKb3lzdGlja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LmN0eC5nZXRCdXR0b25zKCdSZWN0YW5nbGUnKS5idXR0b24uY2xpY2soKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgT3B0aW9uczsiLCIvKipcbiAqIEBtaXhpblxuICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG9cbiAqIEBuYW1lIFBhaW50aW5nXG4gKiBAZGVzY3JpcHRpb24gVGhpcyBtb2R1bGUgcHJvdmlkZXMgdGhlIHBhaW50aW5nIGZ1bmN0aW9uYWxpdHkgZm9yIHRoZSBHZW9mbG8gYXBwbGljYXRpb24uIEl0IGFsbG93cyB1c2VycyB0byBwYWludCBmZWF0dXJlcyBvbiB0aGUgbWFwIGJ5IGNyZWF0aW5nIGEgYnVmZmVyIGFyb3VuZCB0aGUgZmVhdHVyZSBhbmQgc25hcHBpbmcgdG8gbmVhcmJ5IGZlYXR1cmVzLlxuICogQHBhcmFtIHtPYmplY3R9IG1vZGUgLSBUaGUgbW9kZSBvYmplY3QgY29udGFpbmluZyB0aGUgdHlwZSBvZiBtb2RlLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgUGFpbnRpbmcgb2JqZWN0LlxuICovXG5jb25zdCBQYWludGluZyA9IGZ1bmN0aW9uIChtb2RlKSB7XG4gICAgY29uc3QgZ2VvZmxvID0gdGhpcy5nZW9mbG87XG5cbiAgICB0aGlzLnR5cGUgPSBtb2RlLnR5cGU7XG4gICAgdGhpcy5mZWF0dXJlID0gZmFsc2U7XG4gICAgdGhpcy5jdXJyZW50Q29vcmRzID0gW107XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlBhaW50aW5nXG5cdCAqIEBuYW1lIGFjdGl2YXRlXG5cdCAqIEBkZXNjcmlwdGlvbiBBY3RpdmF0ZXMgdGhlIHBhaW50aW5nIGZ1bmN0aW9uYWxpdHkgYnkgZW5hYmxpbmcgcGFpbnRpbmcgbW9kZSBhbmQgY2xlYXJpbmcgdGhlIHNvdXJjZSBkYXRhLlxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG4gICAgdGhpcy5hY3RpdmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kZWFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XG4gICAgICAgIGdlb2Zsby5vcHRpb25zWydwYWludGluZyddLmVuYWJsZSA9IHRydWU7XG4gICAgICAgIGdlb2Zsby5tYXAuZ2V0U291cmNlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLlNOQVApLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXSkpO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uUGFpbnRpbmdcblx0ICogQG5hbWUgZGVhY3RpdmF0ZVxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBkZWFjdGl2YXRlcyB0aGUgY3VycmVudCBmZWF0dXJlIGJ5IHNldHRpbmcgdGhlICdlbmFibGVkJyBwcm9wZXJ0eSB0byBmYWxzZSwgZGlzYWJsaW5nIHRoZSBwYWludGluZyB0b29sLCBlbmFibGluZyBkcmFnIHBhbiBvbiB0aGUgbWFwLCBhbmQgZGVsZXRpbmcgdGhlIGZlYXR1cmUuXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cbiAgICB0aGlzLmRlYWN0aXZhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICBnZW9mbG8ub3B0aW9uc1sncGFpbnRpbmcnXS5lbmFibGUgPSBmYWxzZTtcbiAgICAgICAgZ2VvZmxvLm1hcC5kcmFnUGFuLmVuYWJsZSgpO1xuICAgICAgICBkZWxldGUgdGhpcy5mZWF0dXJlO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uUGFpbnRpbmcgZ2V0RmVhdHVyZVxuXHQgKiBAbmFtZSBnZXRGZWF0dXJlXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHJldHJpZXZlcyB0aGUgY3VycmVudCBwYWludGVkIGZlYXR1cmUuXG5cdCAqIEByZXR1cm5zIHthbnl9IFRoZSBwYWludGVkIGZlYXR1cmUuXG5cdCAqL1xuICAgIHRoaXMuZ2V0RmVhdHVyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmVhdHVyZTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlBhaW50aW5nXG5cdCAqIEBuYW1lIHNldEZlYXR1cmVcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gY3JlYXRlcyBhIGZlYXR1cmUgYmFzZWQgb24gdGhlIGdpdmVuIHR5cGUgYW5kIGNvb3JkaW5hdGVzLiBJdCB1cGRhdGVzIHRoZSBjdXJyZW50Q29vcmRzIGFycmF5LCBzZXRzIHRoZSBmZWF0dXJlLCBhbmQgdHJpZ2dlcnMgYSAncGFpbnRpbmcuc3RhcnQnIGV2ZW50LlxuXHQgKiBAcGFyYW0ge0FycmF5fSBjb29yZHMgLSBUaGUgY29vcmRpbmF0ZXMgdG8gc2V0IHRoZSBmZWF0dXJlIGF0LlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgY3JlYXRlZCBmZWF0dXJlLlxuXHQgKi9cbiAgICB0aGlzLnNldEZlYXR1cmUgPSBmdW5jdGlvbiAoY29vcmRzKSB7XG4gICAgICAgIGlmICghdGhpcy50eXBlIHx8ICFjb29yZHMpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKCFnZW9mbG8ubW91c2VJc0Rvd24pIHJldHVybiBnZW9mbG8uaG90RmVhdHVyZTtcbiAgICAgICAgXG4gICAgICAgIHZhciB0eXBlID0gdGhpcy50eXBlO1xuICAgICAgICB2YXIgZmVhdHVyZSA9IHNldEZlYXR1cmUodHlwZSwgY29vcmRzKTtcblxuICAgICAgICBpZiAoIXRoaXMuZmVhdHVyZSkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50Q29vcmRzID0gW107XG4gICAgICAgICAgICBnZW9mbG8uc3RhcnRQb2ludCA9IGNvb3JkcztcbiAgICAgICAgICAgIGdlb2Zsby5tYXAuZ2V0U291cmNlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLlNOQVApLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbZmVhdHVyZV0pKTtcbiAgICAgICAgICAgIGdlb2Zsby5maXJlKCdwYWludGluZy5zdGFydCcsIHsgdHlwZTogdHlwZSwgY29vcmRzOiBjb29yZHMsIGZlYXR1cmU6IGZlYXR1cmUgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmN1cnJlbnRDb29yZHMucHVzaChjb29yZHMpO1xuICAgICAgICB0aGlzLmZlYXR1cmUgPSBmZWF0dXJlO1xuICAgICAgICByZXR1cm4gdGhpcy5mZWF0dXJlO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uUGFpbnRpbmdcblx0ICogQG5hbWUgdXBkYXRlRmVhdHVyZVxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiB1cGRhdGVzIHRoZSBmZWF0dXJlIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBjb29yZGluYXRlcy4gSXQgaGFuZGxlcyBkaWZmZXJlbnQgdHlwZXMgb2YgZmVhdHVyZXMgbGlrZSBSZWN0YW5nbGUsIENpcmNsZSwgYW5kIG90aGVycy5cblx0ICogQHBhcmFtIHtBcnJheX0gY29vcmRzIC0gVGhlIGNvb3JkaW5hdGVzIHRvIHVwZGF0ZSB0aGUgZmVhdHVyZSB3aXRoLlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgdXBkYXRlZCBmZWF0dXJlIG9iamVjdC5cblx0ICovXG4gICAgdGhpcy51cGRhdGVGZWF0dXJlID0gZnVuY3Rpb24gKGNvb3Jkcykge1xuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlZCkgcmV0dXJuIGdlb2Zsby5ob3RGZWF0dXJlO1xuICAgICAgICBpZiAoIXRoaXMuZmVhdHVyZSkgcmV0dXJuIHRoaXMuc2V0RmVhdHVyZShjb29yZHMpO1xuXG4gICAgICAgIHZhciBmZWF0dXJlID0gdGhpcy5mZWF0dXJlO1xuICAgICAgICB2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuICAgICAgICB0aGlzLmN1cnJlbnRDb29yZHMucHVzaChjb29yZHMpO1xuXG4gICAgICAgIGlmICh0eXBlID09PSAnUmVjdGFuZ2xlJykge1xuICAgICAgICAgICAgdXBkYXRlQ29vcmRpbmF0ZShmZWF0dXJlLCBcIjAuMVwiLCBjb29yZHNbMF0sIGdlb2Zsby5tb3VzZUlzRG93blsxXSk7XG4gICAgICAgICAgICB1cGRhdGVDb29yZGluYXRlKGZlYXR1cmUsIFwiMC4yXCIsIGNvb3Jkc1swXSwgY29vcmRzWzFdKTtcbiAgICAgICAgICAgIHVwZGF0ZUNvb3JkaW5hdGUoZmVhdHVyZSwgXCIwLjNcIiwgZ2VvZmxvLm1vdXNlSXNEb3duWzBdLCBjb29yZHNbMV0pO1xuICAgICAgICAgICAgdXBkYXRlQ29vcmRpbmF0ZShmZWF0dXJlLCBcIjAuNFwiLCBnZW9mbG8ubW91c2VJc0Rvd25bMF0sIGdlb2Zsby5tb3VzZUlzRG93blsxXSApO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdDaXJjbGUnKSB7XG4gICAgICAgICAgICB2YXIgY2VudGVyID0gZmVhdHVyZS5wcm9wZXJ0aWVzLmNlbnRlcjtcbiAgICAgICAgICAgIGlmICghY2VudGVyIHx8ICFjZW50ZXIubGVuZ3RoKSByZXR1cm4gZmVhdHVyZTtcblxuICAgICAgICAgICAgY29uc3QgZGlzdGFuY2VJbkttID0gdHVyZi5kaXN0YW5jZSh0dXJmLnBvaW50KGNlbnRlciksIHR1cmYucG9pbnQoY29vcmRzKSwgeyB1bml0cyA6ICdraWxvbWV0ZXJzJ30pO1xuICAgICAgICAgICAgY29uc3QgY2lyY2xlRmVhdHVyZSA9IHR1cmYuY2lyY2xlKGNlbnRlciwgZGlzdGFuY2VJbkttKTtcblxuICAgICAgICAgICAgZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcyA9IGNpcmNsZUZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgICAgICAgICBnZW9mbG8uVXRpbGl0aWVzLnNldFByb3BlcnR5KGZlYXR1cmUsICdyYWRpdXNJbkttJywgZGlzdGFuY2VJbkttKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXMucHVzaChjb29yZHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuU05BUCkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFt0aGlzLmZlYXR1cmVdKSk7XG4gICAgICAgIGdlb2Zsby5maXJlKCdwYWludGluZy51cGRhdGUnLCB7IHR5cGU6IHR5cGUsIGNvb3JkczogY29vcmRzLCBmZWF0dXJlOiBmZWF0dXJlIH0pO1xuICAgICAgICByZXR1cm4gZmVhdHVyZTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlBhaW50aW5nXG5cdCAqIEBuYW1lIGhhbmRsZVVwXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHVwZGF0ZXMgdGhlIGZlYXR1cmUgYmFzZWQgb24gdGhlICdtb3VzZSB1cCcgZXZlbnQuIEl0IHJldHJpZXZlcyB0aGUgY3VycmVudCBmZWF0dXJlLCB1cGRhdGVzIHRoZSBob3Qgc291cmNlLCBjbG9uZXMgdGhlIHVwZGF0ZWQgZmVhdHVyZSwgYW5kIHNldHMgdGhlIGxhc3QgY2xpY2sgY29vcmRpbmF0ZXMuXG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IHRyaWdnZXJpbmcgdGhlIGZ1bmN0aW9uLlxuXHQgKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBUaGUgdXBkYXRlZCBmZWF0dXJlIG9iamVjdC5cblx0ICovXG5cdFxuICAgIHRoaXMuaGFuZGxlVXAgPSBhc3luYyBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmZlYXR1cmUpIHJldHVybiBmYWxzZTtcblxuICAgICAgICB2YXIgZmVhdHVyZTtcblxuICAgICAgICBpZiAoZ2VvZmxvLkV4cGxvcmluZy5lbmFibGVkKSB0aGlzLmZlYXR1cmUgPSBhd2FpdCBnZW9mbG8uRXhwbG9yaW5nLmdldE1hdGNoKHRoaXMuY3VycmVudENvb3JkcywgeyBzZXQ6IHRydWUsIHN0YXJ0OiBnZW9mbG8uc3RhcnRQb2ludCB9KTtcblxuICAgICAgICBmZWF0dXJlID0gbW9kZS51cGRhdGVIb3RTb3VyY2UodGhpcy5mZWF0dXJlKTtcbiAgICAgICAgZmVhdHVyZSA9IGdlb2Zsby5VdGlsaXRpZXMuY2xvbmVEZWVwKGZlYXR1cmUpO1xuXG4gICAgICAgIGdlb2Zsby5sYXN0Q2xpY2sgPSB7IGNvb3JkczogZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlc1tmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzLmxlbmd0aCAtIDFdIH07XG4gICAgICAgIHRoaXMuY3VycmVudENvb3JkcyA9IFtdO1xuICAgICAgICB0aGlzLmZlYXR1cmUgPSBmZWF0dXJlO1xuICAgICAgICByZXR1cm4gZmVhdHVyZTtcbiAgICB9XG5cblxuXG4gICAgaWYgKGdlb2Zsby5vcHRpb25zWydwYWludGluZyddLmVuYWJsZSkgdGhpcy5hY3RpdmF0ZSgpO1xuXG5cblxuICAgIGZ1bmN0aW9uIHNldEZlYXR1cmUgKHR5cGUsIGNvb3Jkcykge1xuICAgICAgICB2YXIgZmVhdHVyZTtcblxuICAgICAgICBpZiAodHlwZSA9PT0gJ1JlY3RhbmdsZScpIHtcbiAgICAgICAgICAgIGZlYXR1cmUgPSB0dXJmLnBvbHlnb24oW1tcbiAgICAgICAgICAgICAgICBnZW9mbG8ubW91c2VJc0Rvd24sXG4gICAgICAgICAgICAgICAgY29vcmRzLFxuICAgICAgICAgICAgICAgIGNvb3JkcyxcbiAgICAgICAgICAgICAgICBnZW9mbG8ubW91c2VJc0Rvd25cbiAgICAgICAgICAgIF1dKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnQ2lyY2xlJykge1xuICAgICAgICAgICAgZmVhdHVyZSA9IHR1cmYucG9seWdvbihbW1xuICAgICAgICAgICAgICAgIGdlb2Zsby5tb3VzZUlzRG93bixcbiAgICAgICAgICAgICAgICBjb29yZHMsXG4gICAgICAgICAgICAgICAgY29vcmRzLFxuICAgICAgICAgICAgICAgIGdlb2Zsby5tb3VzZUlzRG93blxuICAgICAgICAgICAgXV0pO1xuXG4gICAgICAgICAgICBnZW9mbG8uVXRpbGl0aWVzLnNldFByb3BlcnR5KGZlYXR1cmUsICdjZW50ZXInLCBnZW9mbG8ubW91c2VJc0Rvd24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmVhdHVyZSA9IHR1cmYubGluZVN0cmluZyhbZ2VvZmxvLm1vdXNlSXNEb3duLCBjb29yZHNdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdlb2Zsby5VdGlsaXRpZXMuc2V0UHJvcGVydHkoZmVhdHVyZSwgJ3R5cGUnLCB0eXBlKTtcbiAgICAgICAgZ2VvZmxvLlV0aWxpdGllcy5zZXRQcm9wZXJ0eShmZWF0dXJlLCAncGFpbnRpbmcnLCAxKTtcbiAgICAgICAgcmV0dXJuIGZlYXR1cmU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlQ29vcmRpbmF0ZSAoZiwgdCwgZSwgbikge1xuICAgICAgICB2YXIgbyA9IHQuc3BsaXQoXCIuXCIpXG4gICAgICAgICAgICAsIHIgPSBwYXJzZUludChvWzBdLCAxMClcbiAgICAgICAgICAgICwgaSA9IHBhcnNlSW50KG9bMV0sIDEwKTtcbiAgICAgICAgdm9pZCAwID09PSBmLmdlb21ldHJ5LmNvb3JkaW5hdGVzW3JdICYmIChmLmdlb21ldHJ5LmNvb3JkaW5hdGVzW3JdID0gW10pLFxuICAgICAgICBmLmdlb21ldHJ5LmNvb3JkaW5hdGVzW3JdW2ldID0gW2UsIG5dXG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUGFpbnRpbmc7IiwiLyoqXG4gKiBAbWl4aW5cbiAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvXG4gKiBAbmFtZSBQaW5uaW5nXG4gKiBAZGVzY3JpcHRpb24gVGhpcyBtb2R1bGUgcHJvdmlkZXMgdGhlIHBpbm5pbmcgZnVuY3Rpb25hbGl0eSBmb3IgdGhlIEdlb2ZsbyBhcHBsaWNhdGlvbi4gSXQgYWxsb3dzIHVzZXJzIHRvIHBpbiBmZWF0dXJlcyB0byB0aGUgbWFwIGJ5IGNyZWF0aW5nIGEgYnVmZmVyIGFyb3VuZCB0aGUgZmVhdHVyZSBhbmQgc25hcHBpbmcgdG8gbmVhcmJ5IGZlYXR1cmVzLlxuICogQHBhcmFtIHtPYmplY3R9IG1vZGUgLSBUaGUgbW9kZSBvYmplY3QgY29udGFpbmluZyB0aGUgdHlwZSBvZiBtb2RlLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgUGlubmluZyBvYmplY3QuXG4gKi9cbmNvbnN0IFBpbm5pbmcgPSBmdW5jdGlvbiAobW9kZSkge1xuICAgIGNvbnN0IGdlb2ZsbyA9IHRoaXMuZ2VvZmxvO1xuXG4gICAgdGhpcy50eXBlID0gbW9kZS50eXBlO1xuICAgIHRoaXMudXBkYXRlZEZlYXR1cmVzID0gW107XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlBpbm5pbmdcblx0ICogQG5hbWUgYWN0aXZhdGVcblx0ICogQGRlc2NyaXB0aW9uIEFjdGl2YXRlcyB0aGUgZmVhdHVyZSBieSBzZXR0aW5nIHRoZSBlbmFibGVkIGZsYWcgdG8gdHJ1ZSBhbmQgZW5hYmxpbmcgcGlubmluZyBpbiB0aGUgb3B0aW9ucy5cblx0ICogQHBhcmFtcyB7dm9pZH0gTm9uZVxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG4gICAgdGhpcy5hY3RpdmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVkRmVhdHVyZXMgPSBbXTtcbiAgICAgICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgZ2VvZmxvLm9wdGlvbnNbJ3Bpbm5pbmcnXS5lbmFibGUgPSB0cnVlO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uUGlubmluZ1xuXHQgKiBAbmFtZSBkZWFjdGl2YXRlXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGRlYWN0aXZhdGVzIHRoZSBwaW5uaW5nIGZlYXR1cmUgYnkgc2V0dGluZyBlbmFibGVkIHRvIGZhbHNlLCBkaXNhYmxpbmcgcGlubmluZyBpbiBvcHRpb25zLCBjbGVhcmluZyBidWZmZXIsIHBpbmFibGVGZWF0dXJlcywgYW5kIHBpbm5pbmdGZWF0dXJlcywgYW5kIHJlc2V0dGluZyB1cGRhdGVkRmVhdHVyZXMuXG5cdCAqL1xuICAgIHRoaXMuZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgIGdlb2Zsby5vcHRpb25zWydwaW5uaW5nJ10uZW5hYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVzZXRGZWF0dXJlcygpO1xuICAgICAgICBkZWxldGUgdGhpcy5idWZmZXI7XG4gICAgICAgIGRlbGV0ZSBnZW9mbG8ucGluYWJsZUZlYXR1cmVzO1xuICAgICAgICBkZWxldGUgZ2VvZmxvLnBpbm5pbmdGZWF0dXJlcztcbiAgICAgICAgdGhpcy51cGRhdGVkRmVhdHVyZXMgPSBbXTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlBpbm5pbmdcblx0ICogQG5hbWUgZ2V0RmVhdHVyZXNcblx0ICogQGRlc2NyaXB0aW9uIFJldHJpZXZlcyB0aGUgZmVhdHVyZXMgZnJvbSB0aGUgcGlubmVkRmVhdHVyZXMgYXJyYXkgaW4gdGhlIGNvbnRleHQgb2JqZWN0LlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEFuIGFycmF5IG9mIGZlYXR1cmVzIGV4dHJhY3RlZCBmcm9tIHRoZSBwaW5uZWRGZWF0dXJlcyBhcnJheS5cblx0ICovXG4gICAgdGhpcy5nZXRGZWF0dXJlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGZlYXR1cmVzID0gZ2VvZmxvLnBpbm5lZEZlYXR1cmVzICYmIGdlb2Zsby5waW5uZWRGZWF0dXJlcy5sZW5ndGggPyBnZW9mbG8ucGlubmVkRmVhdHVyZXMubWFwKGZ1bmN0aW9uIChmZWF0dXJlKSB7IHJldHVybiBmZWF0dXJlLmZlYXR1cmUgfSkgOiBbXTtcbiAgICAgICAgcmV0dXJuIGZlYXR1cmVzO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uUGlubmluZ1xuXHQgKiBAbmFtZSBzZXRCdWZmZXJcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gY3JlYXRlcyBhIGJ1ZmZlciBhcm91bmQgdGhlIHByb3ZpZGVkIGNvb3JkaW5hdGVzIGJhc2VkIG9uIHRoZSBwaW5uaW5nIGJ1ZmZlciBvcHRpb24uXG5cdCAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gY29vcmRzIC0gVGhlIGNvb3JkaW5hdGVzIFtsb25naXR1ZGUsIGxhdGl0dWRlXSB0byBjcmVhdGUgdGhlIGJ1ZmZlciBhcm91bmQuXG5cdCAqIEByZXR1cm5zIHtPYmplY3R8Ym9vbGVhbn0gUmV0dXJucyB0aGUgYnVmZmVyIG9iamVjdCBjb250YWluaW5nIHRoZSBmZWF0dXJlLCByYWRpdXMsIGFuZCBjb29yZGluYXRlcyBpZiBzdWNjZXNzZnVsLCBvdGhlcndpc2UgZmFsc2UuXG5cdCAqL1xuICAgIHRoaXMuc2V0QnVmZmVyID0gZnVuY3Rpb24gKGNvb3Jkcykge1xuICAgICAgICBkZWxldGUgdGhpcy5idWZmZXI7XG5cbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKCFjb29yZHMgfHwgIWdlb2Zsby5vcHRpb25zLnBpbm5pbmcuYnVmZmVyKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgdmFyIGJ1ZmZlciA9IHR1cmYuYnVmZmVyKHR1cmYucG9pbnQoY29vcmRzKSwgZ2VvZmxvLm9wdGlvbnMucGlubmluZy5idWZmZXIpO1xuICAgICAgICB2YXIgcmFkaXVzID0gdHVyZi5wb2x5Z29uKGJ1ZmZlci5nZW9tZXRyeS5jb29yZGluYXRlcyk7XG5cbiAgICAgICAgdGhpcy5idWZmZXIgPSB7XG4gICAgICAgICAgICBmZWF0dXJlOiBidWZmZXIsXG4gICAgICAgICAgICByYWRpdXM6IHJhZGl1cyxcbiAgICAgICAgICAgIGNvb3JkczogY29vcmRzXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXI7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5QaW5uaW5nXG5cdCAqIEBuYW1lIHNldEZlYXR1cmVzXG5cdCAqIEBkZXNjcmlwdGlvbiBTZXRzIHRoZSBwaW5hYmxlIGZlYXR1cmVzIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBjb29yZGluYXRlcyBhbmQgZmlyZXMgYW4gZXZlbnQuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBjb29yZHMgLSBUaGUgY29vcmRpbmF0ZXMgdG8gZGV0ZXJtaW5lIG5lYXJieSBmZWF0dXJlcy5cblx0ICogQHJldHVybnMge0FycmF5fSAtIEFuIGFycmF5IG9mIHBpbmFibGUgZmVhdHVyZXMuXG5cdCAqL1xuICAgIHRoaXMuc2V0RmVhdHVyZXMgPSBmdW5jdGlvbiAoY29vcmRzKSB7XG4gICAgICAgIGdlb2Zsby5waW5hYmxlRmVhdHVyZXMgPSBbXTtcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQgfHwgIWNvb3JkcykgcmV0dXJuIGZhbHNlO1xuICAgICAgICBnZW9mbG8ucGluYWJsZUZlYXR1cmVzID0gdGhpcy5nZXROZWFyQnlGZWF0dXJlcyhjb29yZHMpO1xuICAgICAgICBnZW9mbG8uZmlyZSgncGlubmluZy5hZGQnLCB7IGZlYXR1cmVzOiBnZW9mbG8ucGluYWJsZUZlYXR1cmVzLCBidWZmZXI6IHRoaXMuYnVmZmVyIH0pO1xuICAgICAgICByZXR1cm4gZ2VvZmxvLnBpbmFibGVGZWF0dXJlcztcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlBpbm5pbmdcblx0ICogQG5hbWUgcmVzZXRGZWF0dXJlc1xuXHQgKiBAZGVzY3JpcHRpb24gUmVzZXRzIHRoZSB1cGRhdGVkIGZlYXR1cmVzIGJ5IGFkZGluZyB0aGVtIHRvIHRoZSBjYW52YXMgY29udGV4dC5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgZmFsc2UgaWYgdGhlcmUgYXJlIG5vIHVwZGF0ZWQgZmVhdHVyZXMgdG8gcmVzZXQuXG5cdCAqL1xuICAgIHRoaXMucmVzZXRGZWF0dXJlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnVwZGF0ZWRGZWF0dXJlcy5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgICAgZ2VvZmxvLmFkZEZlYXR1cmVzKHRoaXMudXBkYXRlZEZlYXR1cmVzLCB0cnVlKTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlBpbm5pbmdcblx0ICogQG5hbWUgdXBkYXRlRmVhdHVyZXNcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gdXBkYXRlcyB0aGUgZmVhdHVyZXMgaWYgdGhlIHBpbm5pbmcgZnVuY3Rpb25hbGl0eSBpcyBlbmFibGVkLiBJdCB1cGRhdGVzIHRoZSBwaW5hYmxlIGZlYXR1cmVzLCBwaW5uZWQgZmVhdHVyZXMsIGFuZCB0cmlnZ2VycyBldmVudHMgYWNjb3JkaW5nbHkuXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGZhbHNlIGlmIHRoZSBwaW5uaW5nIGZ1bmN0aW9uYWxpdHkgaXMgbm90IGVuYWJsZWQsIG90aGVyd2lzZSByZXR1cm5zIHRoZSB1cGRhdGVkIHBpbm5pbmcgZmVhdHVyZXMuXG5cdCAqL1xuICAgIHRoaXMudXBkYXRlRmVhdHVyZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICghZ2VvZmxvLnBpbmFibGVGZWF0dXJlcyB8fCAhZ2VvZmxvLnBpbmFibGVGZWF0dXJlcy5sZW5ndGgpIHJldHVybiBkZWxldGUgZ2VvZmxvLnBpbm5pbmdGZWF0dXJlcywgZmFsc2U7XG4gICAgICAgIHVwZGF0ZUZlYXR1cmVzLmNhbGwodGhpcywgZ2VvZmxvLnBpbmFibGVGZWF0dXJlcyk7XG4gICAgICAgIGdlb2Zsby5GZWF0dXJlcy51cGRhdGVGZWF0dXJlcyhnZW9mbG8ucGluYWJsZUZlYXR1cmVzLCB7IHR5cGU6ICdwaW5uaW5nJywgY29vcmRzOiBnZW9mbG8uc25hcHBlZFZlcnRleCwgYWRkVW5pdHM6IHRydWUgfSk7XG4gICAgICAgIGdlb2Zsby5waW5uZWRGZWF0dXJlcyA9IGdlb2Zsby5VdGlsaXRpZXMuY2xvbmVEZWVwKGdlb2Zsby5waW5hYmxlRmVhdHVyZXMpO1xuICAgICAgICBnZW9mbG8uZmlyZSgncGlubmluZy51cGRhdGUnLCB7IGZlYXR1cmU6IGdlb2Zsby5ob3RGZWF0dXJlLCB2ZXJ0ZXg6IHR1cmYucG9pbnQoZ2VvZmxvLnNuYXBwZWRWZXJ0ZXgpLCBmZWF0dXJlczogZ2VvZmxvLnBpbm5lZEZlYXR1cmVzIH0pO1xuICAgICAgICByZXR1cm4gZ2VvZmxvLnBpbm5pbmdGZWF0dXJlcztcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlBpbm5pbmdcblx0ICogQG5hbWUgZ2V0TmVhckJ5RmVhdHVyZXNcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gY2FsY3VsYXRlcyB0aGUgcmFkaXVzIGJhc2VkIG9uIHRoZSBtYXAgem9vbSBsZXZlbCBhbmQgcmV0cmlldmVzIG5lYXJieSBmZWF0dXJlcyB3aXRoaW4gdGhhdCByYWRpdXMuXG5cdCAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gY29vcmRzIC0gVGhlIGNvb3JkaW5hdGVzIFtsb25naXR1ZGUsIGxhdGl0dWRlXSB0byBmaW5kIG5lYXJieSBmZWF0dXJlcy5cblx0ICogQHJldHVybnMge0FycmF5PE9iamVjdD59IEFuIGFycmF5IG9mIG5lYXJieSBmZWF0dXJlcyB3aXRoIHRoZWlyIElEcywgdHlwZXMsIGluZGljZXMsIGFuZCBmZWF0dXJlIG9iamVjdHMuXG5cdCAqL1xuICAgIHRoaXMuZ2V0TmVhckJ5RmVhdHVyZXMgPSBmdW5jdGlvbiAoY29vcmRzKSB7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkIHx8ICFjb29yZHMpIHJldHVybiBmYWxzZTtcblxuICAgICAgICB2YXIgaG90RmVhdHVyZSA9IGdlb2Zsby5ob3RGZWF0dXJlO1xuICAgICAgICB2YXIgY2FsY3VsYXRlZFJhZGl1cyA9IGdlb2Zsby5vcHRpb25zLnNuYXBwaW5nLmRpc3RhbmNlICogTWF0aC5wb3coMiwgTWF0aC5tYXgoMSwgMTkgLSBnZW9mbG8ubWFwLmdldFpvb20oKSkpO1xuICAgICAgICB2YXIgcmFkaXVzSW5LbSA9IGNhbGN1bGF0ZWRSYWRpdXMgLyAxMDAwMDA7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLnNldEJ1ZmZlcihjb29yZHMpO1xuICAgICAgICB2YXIgZmVhdHVyZXMgPSBnZW9mbG8uZ2V0UmVuZGVyZWREcmF3bkZlYXR1cmVzKHtsbmc6IGNvb3Jkc1swXSwgbGF0OiBjb29yZHNbMV19LCByYWRpdXNJbkttKTtcbiAgICAgICAgdmFyIG5lYXJieSA9IFtdO1xuXG4gICAgICAgIGZlYXR1cmVzLmZvckVhY2goZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgICAgIHR1cmYuY29vcmRFYWNoKGZlYXR1cmUsIGZ1bmN0aW9uIChjb29yZCwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXNOZWFyYnkgPSBmYWxzZTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoYnVmZmVyLnJhZGl1cyAmJiB0dXJmLmJvb2xlYW5XaXRoaW4odHVyZi5wb2ludChjb29yZCksIGJ1ZmZlci5yYWRpdXMpKSBpc05lYXJieSA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05lYXJieSAmJiBidWZmZXIuY29vcmRzICYmIGdlb2Zsby5VdGlsaXRpZXMuaXNQb2ludEVxdWFsKGNvb3JkLCBidWZmZXIuY29vcmRzKSkgaXNOZWFyYnkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmICghaXNOZWFyYnkpIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoaG90RmVhdHVyZSAmJiBob3RGZWF0dXJlLmlkID09PSBmZWF0dXJlLmlkKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIG5lYXJieS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGZlYXR1cmUuaWQgfHwgZmVhdHVyZS5wcm9wZXJ0aWVzLmlkLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBmZWF0dXJlLnByb3BlcnRpZXMudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlOiBmZWF0dXJlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbmVhcmJ5O1xuICAgIH1cbiAgICBcbiAgICBpZiAoZ2VvZmxvLm9wdGlvbnNbJ3Bpbm5pbmcnXS5lbmFibGUpIHRoaXMuYWN0aXZhdGUoKTtcblxuXG4gICAgZnVuY3Rpb24gdXBkYXRlRmVhdHVyZXMoZmVhdHVyZXMpIHtcbiAgICAgICAgaWYgKCFmZWF0dXJlcyB8fCAhZmVhdHVyZXMubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgZmVhdHVyZXMuZm9yRWFjaChmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgdmFyIHBpbm5lZCA9IHRoaXMudXBkYXRlZEZlYXR1cmVzLmZpbmQoZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGYuaWQgPT09IGZlYXR1cmUuaWQgfSk7XG4gICAgICAgICAgICBpZiAocGlubmVkKSByZXR1cm47XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZWRGZWF0dXJlcy5wdXNoKGdlb2Zsby5VdGlsaXRpZXMuY2xvbmVEZWVwKGZlYXR1cmUuZmVhdHVyZSkpO1xuICAgICAgICB9LCB0aGlzKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQaW5uaW5nOyIsIi8qKlxuICogQG1peGluXG4gKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsb1xuICogQG5hbWUgUm91dGluZ1xuICogQGRlc2NyaXB0aW9uIFRoaXMgbW9kdWxlIHByb3ZpZGVzIHRoZSByb3V0aW5nIGZ1bmN0aW9uYWxpdHkgZm9yIHRoZSBHZW9mbG8gYXBwbGljYXRpb24uIEl0IGFsbG93cyB1c2VycyB0byBjYWxjdWxhdGUgcm91dGVzIGJldHdlZW4gdHdvIHBvaW50cyBvbiB0aGUgbWFwIHVzaW5nIGEgUGF0aEZpbmRlciBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gbW9kZSAtIFRoZSBtb2RlIG9iamVjdCBjb250YWluaW5nIHRoZSB0eXBlIG9mIG1vZGUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBSb3V0aW5nIG9iamVjdC5cbiAqL1xuY29uc3QgUm91dGluZyA9IGZ1bmN0aW9uIChtb2RlKSB7XG4gICAgY29uc3QgZ2VvZmxvID0gdGhpcy5nZW9mbG87XG5cbiAgICB0aGlzLnR5cGUgPSBtb2RlLnR5cGU7XG4gICAgdGhpcy5ncmFwaERhdGEgPSB7fTtcbiAgICB0aGlzLmZlYXR1cmVzID0gZ2VvZmxvLkZlYXR1cmVzLmdldENvbGRGZWF0dXJlcygpO1xuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5Sb3V0aW5nXG5cdCAqIEBuYW1lIGFjdGl2YXRlXG5cdCAqIEBkZXNjcmlwdGlvbiBBY3RpdmF0ZXMgdGhlIGZ1bmN0aW9uYWxpdHkgYnkgc2V0dGluZyB0aGUgJ2VuYWJsZWQnIHByb3BlcnR5IHRvIHRydWUgYW5kIGVuYWJsaW5nIHJvdXRpbmcgaW4gdGhlIG9wdGlvbnMuXG5cdCAqIEBwYXJhbXMge3ZvaWR9IE5vbmVcblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuICAgIHRoaXMuYWN0aXZhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XG4gICAgICAgIGdlb2Zsby5vcHRpb25zWydyb3V0aW5nJ10uZW5hYmxlID0gdHJ1ZTtcbiAgICB9O1xuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5Sb3V0aW5nXG5cdCAqIEBuYW1lIGRlYWN0aXZhdGVcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gZGVhY3RpdmF0ZXMgdGhlIHJvdXRpbmcgZmVhdHVyZSBieSBzZXR0aW5nIHRoZSBlbmFibGVkIGZsYWcgdG8gZmFsc2UsIGRpc2FibGluZyByb3V0aW5nIGluIHRoZSBvcHRpb25zLCBhbmQgY2xlYXJpbmcgdGhlIHJvdXRlIGRhdGEgb24gdGhlIG1hcC5cblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuICAgIHRoaXMuZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgIGdlb2Zsby5vcHRpb25zWydyb3V0aW5nJ10uZW5hYmxlID0gZmFsc2U7XG4gICAgICAgIGdlb2Zsby5tYXAuZ2V0U291cmNlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzWydST1VURSddKS5zZXREYXRhKHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW10pKTtcbiAgICB9O1xuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5Sb3V0aW5nXG5cdCAqIEBuYW1lIGdldFJvdXRlXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGNhbGN1bGF0ZXMgYSByb3V0ZSBiZXR3ZWVuIHR3byBwb2ludHMgb24gYSBtYXAgdXNpbmcgYSBQYXRoRmluZGVyIG9iamVjdC4gSXQgY2hlY2tzIGlmIHRoZSByb3V0aW5nIGZlYXR1cmUgaXMgZW5hYmxlZCBhbmQgaWYgdGhlIG1hcCBpcyBub3QgY3VycmVudGx5IG1vdmluZy4gSXQgdGhlbiBjcmVhdGVzIGEgZmVhdHVyZSBjb2xsZWN0aW9uIGZyb20gdGhlIGV4aXN0aW5nIGZlYXR1cmVzLCBpbml0aWFsaXplcyBhIFBhdGhGaW5kZXIgb2JqZWN0LCBhbmQgZmluZHMgYSBwYXRoIGJldHdlZW4gdGhlIHR3byBwb2ludHMuIFRoZSBwYXRoIGlzIHZhbGlkYXRlZCBhbmQgdGhlbiBhZGRlZCB0byB0aGUgbWFwIHdpdGggYSAncm91dGluZy5hZGQnIGV2ZW50LlxuXHQgKiBAcGFyYW0ge09iamVjdH0gZnJvbVBvaW50IC0gVGhlIHN0YXJ0aW5nIHBvaW50IGZvciB0aGUgcm91dGUuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSB0b1BvaW50IC0gVGhlIGRlc3RpbmF0aW9uIHBvaW50IGZvciB0aGUgcm91dGUuXG5cdCAqIEByZXR1cm5zIHtBcnJheXxib29sZWFufSBUaGUgY2FsY3VsYXRlZCByb3V0ZSBwYXRoIGFzIGFuIGFycmF5IG9mIHBvaW50cywgb3IgZmFsc2UgaWYgdGhlIHJvdXRlIGNvdWxkIG5vdCBiZSBjYWxjdWxhdGVkLlxuXHQgKi9cbiAgICB0aGlzLmdldFJvdXRlID0gZnVuY3Rpb24gKGZyb21Qb2ludCwgdG9Qb2ludCkge1xuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlZCB8fCBnZW9mbG8ubWFwTW92aW5nKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBmZWF0dXJlcyA9IHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24odGhpcy5nZXRGZWF0dXJlcygpKTtcbiAgICAgICAgdmFyIHBhdGhmaW5kZXIgPSBuZXcgUGF0aEZpbmRlcihmZWF0dXJlcywgZ2VvZmxvLm9wdGlvbnMucm91dGluZyk7XG4gICAgICAgIHZhciBwYXRoID0gcGF0aGZpbmRlci5maW5kUGF0aCA/IHBhdGhmaW5kZXIuZmluZFBhdGgoZnJvbVBvaW50LCB0b1BvaW50KSA6IGZhbHNlO1xuICAgICAgICBwYXRoID0gdmFsaWRhdGVQYXRoKGZyb21Qb2ludCwgdG9Qb2ludCwgcGF0aCk7XG4gICAgICAgIGdlb2Zsby5maXJlKCdyb3V0aW5nLmFkZCcsIHsgZnJvbTogZnJvbVBvaW50LCB0bzogdG9Qb2ludCwgcGF0aDogcGF0aCB9KTtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfTtcblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uUm91dGluZ1xuXHQgKiBAbmFtZSBnZXRNYXRjaFxuXHQgKiBAZGVzY3JpcHRpb24gUmV0cmlldmVzIGEgbWF0Y2ggZm9yIHRoZSBnaXZlbiBjb29yZGluYXRlcyB1c2luZyB0aGUgRXhwbG9yaW5nIHNlcnZpY2UuIFNldHMgdGhlIG1hdGNoIGFzIGEgc3RhcnRpbmcgcG9pbnQgZm9yIHJvdXRpbmcuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBjb29yZHMgLSBUaGUgY29vcmRpbmF0ZXMgZm9yIHdoaWNoIHRvIGZpbmQgYSBtYXRjaC5cblx0ICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gVGhlIG1hdGNoZWQgZmVhdHVyZSB3aXRoIHJvdXRpbmcgcHJvcGVydHkgc2V0IHRvIHRydWUuXG5cdCAqL1xuICAgIHRoaXMuZ2V0TWF0Y2ggPSBhc3luYyBmdW5jdGlvbiAoY29vcmRzKSB7XG4gICAgICAgIHZhciBmZWF0dXJlID0gYXdhaXQgZ2VvZmxvLkV4cGxvcmluZy5nZXRNYXRjaChjb29yZHMsIHsgc2V0OiB0cnVlLCBzdGFydDogZ2VvZmxvLnN0YXJ0UG9pbnQgfSk7XG4gICAgICAgIGZlYXR1cmUucHJvcGVydGllcy5yb3V0aW5nID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZlYXR1cmU7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5Sb3V0aW5nXG5cdCAqIEBuYW1lIGdldENsb3Nlc3Rcblx0ICogQGRlc2NyaXB0aW9uIENhbGN1bGF0ZXMgdGhlIGNsb3Nlc3QgcG9pbnQgb24gYSByb3V0ZSBiYXNlZCBvbiB0aGUgbGFzdCBjbGljayBhbmQgdGhlIGNsb3Nlc3QgcG9pbnQgdG8gaXQuXG5cdCAqIEByZXR1cm5zIHtPYmplY3R8Ym9vbGVhbn0gUmV0dXJucyBhIEdlb0pTT04gTGluZVN0cmluZyBmZWF0dXJlIHdpdGggcm91dGluZyBwcm9wZXJ0eSBzZXQgdG8gdHJ1ZSBpZiBzdWNjZXNzZnVsLCBvdGhlcndpc2UgZmFsc2UuXG5cdCAqL1xuICAgIHRoaXMuZ2V0Q2xvc2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFnZW9mbG8uY2xvc2VzdFBvaW50IHx8ICFnZW9mbG8ubGFzdENsaWNrKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciByb3V0ZSA9IHRoaXMuZ2V0Um91dGUoZ2VvZmxvLmxhc3RDbGljaywgZ2VvZmxvLmNsb3Nlc3RQb2ludCk7XG4gICAgICAgIGlmICghcm91dGUgfHwgIXJvdXRlLnBhdGgpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGZlYXR1cmUgPSB0dXJmLmxpbmVTdHJpbmcocm91dGUucGF0aCk7XG4gICAgICAgIGZlYXR1cmUucHJvcGVydGllcy5yb3V0aW5nID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZlYXR1cmU7XG4gICAgfTtcblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uUm91dGluZ1xuXHQgKiBAbmFtZSBnZXRGZWF0dXJlc1xuXHQgKiBAZGVzY3JpcHRpb24gUmV0cmlldmVzIGZlYXR1cmVzIG9mIHR5cGUgJ0xpbmVTdHJpbmcnIGZyb20gdGhlIG1lc2ggaW5kZXguXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gQW4gYXJyYXkgb2YgZmVhdHVyZXMgb2YgdHlwZSAnTGluZVN0cmluZycuXG5cdCAqL1xuICAgIHRoaXMuZ2V0RmVhdHVyZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBtZXNoID0gZ2VvZmxvLm1lc2hJbmRleC5nZXRGZWF0dXJlcygpO1xuICAgICAgICB2YXIgZmVhdHVyZXMgPSBbbWVzaCwgdGhpcy5mZWF0dXJlc10uZmxhdCgpO1xuICAgICAgICByZXR1cm4gZmVhdHVyZXMuZmlsdGVyKGZ1bmN0aW9uKGZlYXR1cmUpIHsgcmV0dXJuIGZlYXR1cmUuZ2VvbWV0cnkudHlwZSA9PT0gJ0xpbmVTdHJpbmcnIH0pO1xuICAgIH07XG5cbiAgICBcbiAgICBpZiAoZ2VvZmxvLm9wdGlvbnNbJ3JvdXRpbmcnXS5lbmFibGUpIHRoaXMuYWN0aXZhdGUoKTtcblxuXG4gICAgZnVuY3Rpb24gUGF0aEZpbmRlcihmZWF0dXJlcywgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgXG4gICAgICAgIGlmICghZmVhdHVyZXMuY29tcGFjdGVkVmVydGljZXMpIHsgZmVhdHVyZXMgPSBwcmVwcm9jZXNzKGZlYXR1cmVzLCBvcHRpb25zKTsgfVxuXG4gICAgICAgIHRoaXMuX2dyYXBoID0gZmVhdHVyZXM7XG4gICAgICAgIHRoaXMuX2tleUZuID0gb3B0aW9ucy5rZXlGbiB8fCBmdW5jdGlvbihjKSB7IHJldHVybiBjLmpvaW4oJywnKTsgfTtcbiAgICAgICAgdGhpcy5fcHJlY2lzaW9uID0gb3B0aW9ucy5wcmVjaXNpb24gfHwgMWUtNTtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLl9ncmFwaC5jb21wYWN0ZWRWZXJ0aWNlcykuZmlsdGVyKGZ1bmN0aW9uKGspIHsgcmV0dXJuIGsgIT09ICdlZGdlRGF0YSc7IH0pLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmZpbmRQYXRoID0gZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5fa2V5Rm4ocm91bmRDb29yZChhLmNvb3JkcywgdGhpcy5fcHJlY2lzaW9uKSksXG4gICAgICAgICAgICAgICAgZmluaXNoID0gdGhpcy5fa2V5Rm4ocm91bmRDb29yZChiLmNvb3JkcywgdGhpcy5fcHJlY2lzaW9uKSk7XG4gICAgXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2dyYXBoLnZlcnRpY2VzW3N0YXJ0XSB8fCAhdGhpcy5fZ3JhcGgudmVydGljZXNbZmluaXNoXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgdmFyIHBoYW50b21TdGFydCA9IHRoaXMuX2NyZWF0ZVBoYW50b20oc3RhcnQpO1xuICAgICAgICAgICAgdmFyIHBoYW50b21FbmQgPSB0aGlzLl9jcmVhdGVQaGFudG9tKGZpbmlzaCk7XG4gICAgXG4gICAgICAgICAgICB2YXIgcGF0aCA9IGZpbmRQYXRoKHRoaXMuX2dyYXBoLmNvbXBhY3RlZFZlcnRpY2VzLCBzdGFydCwgZmluaXNoKTtcbiAgICBcbiAgICAgICAgICAgIGlmIChwYXRoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdlaWdodCA9IHBhdGhbMF07XG4gICAgICAgICAgICAgICAgcGF0aCA9IHBhdGhbMV07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZnVsbFBhdGg6IHBhdGgsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IHBhdGgucmVkdWNlKGZ1bmN0aW9uIGJ1aWxkUGF0aChjcywgdiwgaSwgdnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzID0gY3MuY29uY2F0KHRoaXMuX2dyYXBoLmNvbXBhY3RlZENvb3JkaW5hdGVzW3ZzW2kgLSAxXV1bdl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNzO1xuICAgICAgICAgICAgICAgICAgICB9LmJpbmQodGhpcyksIFtdKS5jb25jYXQoW3RoaXMuX2dyYXBoLnNvdXJjZVZlcnRpY2VzW2ZpbmlzaF1dKSxcbiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiB3ZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIGVkZ2VEYXRhczogdGhpcy5fZ3JhcGguY29tcGFjdGVkRWRnZXMgXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHBhdGgucmVkdWNlKGZ1bmN0aW9uIGJ1aWxkRWRnZURhdGEoZWRzLCB2LCBpLCB2cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWR1Y2VkRWRnZTogdGhpcy5fZ3JhcGguY29tcGFjdGVkRWRnZXNbdnNbaSAtIDFdXVt2XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVkcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSwgW10pXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlUGhhbnRvbShwaGFudG9tU3RhcnQpO1xuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlUGhhbnRvbShwaGFudG9tRW5kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2VyaWFsaXplID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ3JhcGg7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jcmVhdGVQaGFudG9tID0gZnVuY3Rpb24obikge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2dyYXBoLmNvbXBhY3RlZFZlcnRpY2VzW25dKSByZXR1cm4gbnVsbDtcbiAgICBcbiAgICAgICAgICAgIHZhciBwaGFudG9tID0gY29tcGFjdE5vZGUobiwgdGhpcy5fZ3JhcGgudmVydGljZXMsIHRoaXMuX2dyYXBoLmNvbXBhY3RlZFZlcnRpY2VzLCB0aGlzLl9ncmFwaC5zb3VyY2VWZXJ0aWNlcywgdGhpcy5fZ3JhcGguZWRnZURhdGEsIHRydWUsIHRoaXMuX29wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5fZ3JhcGguY29tcGFjdGVkVmVydGljZXNbbl0gPSBwaGFudG9tLmVkZ2VzO1xuICAgICAgICAgICAgdGhpcy5fZ3JhcGguY29tcGFjdGVkQ29vcmRpbmF0ZXNbbl0gPSBwaGFudG9tLmNvb3JkaW5hdGVzO1xuICAgIFxuICAgICAgICAgICAgaWYgKHRoaXMuX2dyYXBoLmNvbXBhY3RlZEVkZ2VzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZ3JhcGguY29tcGFjdGVkRWRnZXNbbl0gPSBwaGFudG9tLnJlZHVjZWRFZGdlcztcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHBoYW50b20uaW5jb21pbmdFZGdlcykuZm9yRWFjaChmdW5jdGlvbihuZWlnaGJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2dyYXBoLmNvbXBhY3RlZFZlcnRpY2VzW25laWdoYm9yXVtuXSA9IHBoYW50b20uaW5jb21pbmdFZGdlc1tuZWlnaGJvcl07XG4gICAgICAgICAgICAgICAgdGhpcy5fZ3JhcGguY29tcGFjdGVkQ29vcmRpbmF0ZXNbbmVpZ2hib3JdW25dID0gW3RoaXMuX2dyYXBoLnNvdXJjZVZlcnRpY2VzW25laWdoYm9yXV0uY29uY2F0KHBoYW50b20uaW5jb21pbmdDb29yZGluYXRlc1tuZWlnaGJvcl0uc2xpY2UoMCwgLTEpKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZ3JhcGguY29tcGFjdGVkRWRnZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ3JhcGguY29tcGFjdGVkRWRnZXNbbmVpZ2hib3JdW25dID0gcGhhbnRvbS5yZWR1Y2VkRWRnZXNbbmVpZ2hib3JdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICBcbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcmVtb3ZlUGhhbnRvbSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIGlmICghbikgcmV0dXJuO1xuICAgIFxuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5fZ3JhcGguY29tcGFjdGVkVmVydGljZXNbbl0pLmZvckVhY2goZnVuY3Rpb24obmVpZ2hib3IpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fZ3JhcGguY29tcGFjdGVkVmVydGljZXNbbmVpZ2hib3JdW25dO1xuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMuX2dyYXBoLmNvbXBhY3RlZENvb3JkaW5hdGVzW25dKS5mb3JFYWNoKGZ1bmN0aW9uKG5laWdoYm9yKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2dyYXBoLmNvbXBhY3RlZENvb3JkaW5hdGVzW25laWdoYm9yXVtuXTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgICAgICBpZiAodGhpcy5fZ3JhcGguY29tcGFjdGVkRWRnZXMpIHtcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLl9ncmFwaC5jb21wYWN0ZWRFZGdlc1tuXSkuZm9yRWFjaChmdW5jdGlvbihuZWlnaGJvcikge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fZ3JhcGguY29tcGFjdGVkRWRnZXNbbmVpZ2hib3JdW25dO1xuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fZ3JhcGguY29tcGFjdGVkVmVydGljZXNbbl07XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fZ3JhcGguY29tcGFjdGVkQ29vcmRpbmF0ZXNbbl07XG4gICAgXG4gICAgICAgICAgICBpZiAodGhpcy5fZ3JhcGguY29tcGFjdGVkRWRnZXMpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fZ3JhcGguY29tcGFjdGVkRWRnZXNbbl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gU2hvcnRlc3RQYXRoICgpIHtcbiAgICAgICAgdmFyIElORklOSVRZID0gMSAvIDA7XG4gICAgICAgIHRoaXMudmVydGljZXMgPSB7fTtcbiAgICBcbiAgICAgICAgdGhpcy5hZGRWZXJ0ZXggPSBmdW5jdGlvbiAobmFtZSwgZWRnZXMpIHtcbiAgICAgICAgICAgIHRoaXMudmVydGljZXNbbmFtZV0gPSBlZGdlcztcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgdGhpcy5zZXRWZXJ0aWNlcyA9IGZ1bmN0aW9uIChncmFwaCkge1xuICAgICAgICAgICAgdGhpcy52ZXJ0aWNlcyA9IGdyYXBoO1xuICAgICAgICB9O1xuICAgIFxuICAgICAgICB0aGlzLnNob3J0ZXN0UGF0aCA9IGZ1bmN0aW9uIChzdGFydCwgZmluaXNoKSB7XG4gICAgICAgICAgICB2YXIgbm9kZXMgPSBuZXcgUHJpb3JpdHlRdWV1ZSgpLFxuICAgICAgICAgICAgICAgIGRpc3RhbmNlcyA9IHt9LFxuICAgICAgICAgICAgICAgIHByZXZpb3VzID0ge30sXG4gICAgICAgICAgICAgICAgcGF0aCA9IFtdLFxuICAgICAgICAgICAgICAgIHNtYWxsZXN0LCB2ZXJ0ZXgsIG5laWdoYm9yLCBhbHQ7XG4gICAgICAgIFxuICAgICAgICAgICAgZm9yICh2ZXJ0ZXggaW4gdGhpcy52ZXJ0aWNlcykge1xuICAgICAgICAgICAgICAgIGlmICh2ZXJ0ZXggPT09IHN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlc1t2ZXJ0ZXhdID0gMDtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMuZW5xdWV1ZSgwLCB2ZXJ0ZXgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlc1t2ZXJ0ZXhdID0gSU5GSU5JVFk7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLmVucXVldWUoSU5GSU5JVFksIHZlcnRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgICAgICBwcmV2aW91c1t2ZXJ0ZXhdID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICB3aGlsZSAoIW5vZGVzLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgIHNtYWxsZXN0ID0gbm9kZXMuZGVxdWV1ZSgpO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoc21hbGxlc3QgPT09IGZpbmlzaCkge1xuICAgICAgICAgICAgICAgICAgICBwYXRoID0gW107XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHByZXZpb3VzW3NtYWxsZXN0XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5wdXNoKHNtYWxsZXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNtYWxsZXN0ID0gcHJldmlvdXNbc21hbGxlc3RdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoIXNtYWxsZXN0IHx8IGRpc3RhbmNlc1tzbWFsbGVzdF0gPT09IElORklOSVRZKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgZm9yIChuZWlnaGJvciBpbiB0aGlzLnZlcnRpY2VzW3NtYWxsZXN0XSkge1xuICAgICAgICAgICAgICAgICAgICBhbHQgPSBkaXN0YW5jZXNbc21hbGxlc3RdICsgdGhpcy52ZXJ0aWNlc1tzbWFsbGVzdF1bbmVpZ2hib3JdO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsdCA8IGRpc3RhbmNlc1tuZWlnaGJvcl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlc1tuZWlnaGJvcl0gPSBhbHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1tuZWlnaGJvcl0gPSBzbWFsbGVzdDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXMuZW5xdWV1ZShhbHQsIG5laWdoYm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIFxuICAgIGZ1bmN0aW9uIFByaW9yaXR5UXVldWUoKSB7XG4gICAgICAgIHRoaXMuX25vZGVzID0gW107XG4gICAgXG4gICAgICAgIHRoaXMuZW5xdWV1ZSA9IGZ1bmN0aW9uIChwcmlvcml0eSwga2V5KSB7XG4gICAgICAgICAgICB0aGlzLl9ub2Rlcy5wdXNoKHtrZXk6IGtleSwgcHJpb3JpdHk6IHByaW9yaXR5fSk7XG4gICAgICAgICAgICB0aGlzLnNvcnQoKTtcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgdGhpcy5kZXF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25vZGVzLnNoaWZ0KCkua2V5O1xuICAgICAgICB9O1xuICAgIFxuICAgICAgICB0aGlzLnNvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLl9ub2Rlcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGEucHJpb3JpdHkgLSBiLnByaW9yaXR5O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIHRoaXMuaXNFbXB0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAhdGhpcy5fbm9kZXMubGVuZ3RoO1xuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBUaW55UXVldWUoZGF0YSwgY29tcGFyZSkge1xuICAgICAgICBpZiAoIGRhdGEgPT09IHZvaWQgMCApIGRhdGEgPSBbXTtcbiAgICAgICAgaWYgKCBjb21wYXJlID09PSB2b2lkIDAgKSBjb21wYXJlID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogMDtcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5sZW5ndGggPSB0aGlzLmRhdGEubGVuZ3RoO1xuICAgICAgICB0aGlzLmNvbXBhcmUgPSBjb21wYXJlO1xuICAgIFxuICAgICAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gKHRoaXMubGVuZ3RoID4+IDEpIC0gMTsgaSA+PSAwOyBpLS0pIHsgdGhpcy5fZG93bihpKTsgfVxuICAgICAgICB9XG4gICAgXG4gICAgICAgIHRoaXMucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKGl0ZW0pIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgICAgICAgIHRoaXMuX3VwKHRoaXMubGVuZ3RoIC0gMSk7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICB0aGlzLnBvcCA9IGZ1bmN0aW9uIHBvcCAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHsgcmV0dXJuIHVuZGVmaW5lZDsgfVxuICAgICAgICBcbiAgICAgICAgICAgIHZhciB0b3AgPSB0aGlzLmRhdGFbMF07XG4gICAgICAgICAgICB2YXIgYm90dG9tID0gdGhpcy5kYXRhLnBvcCgpO1xuICAgICAgICAgICAgdGhpcy5sZW5ndGgtLTtcbiAgICAgICAgXG4gICAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhWzBdID0gYm90dG9tO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Rvd24oMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRvcDtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMucGVlayA9IGZ1bmN0aW9uIHBlZWsgKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVswXTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3VwID0gZnVuY3Rpb24gX3VwIChwb3MpIHtcbiAgICAgICAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gcmVmLmRhdGE7XG4gICAgICAgICAgICAgICAgdmFyIGNvbXBhcmUgPSByZWYuY29tcGFyZTtcbiAgICAgICAgICAgIHZhciBpdGVtID0gZGF0YVtwb3NdO1xuICAgICAgICBcbiAgICAgICAgICAgIHdoaWxlIChwb3MgPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IChwb3MgLSAxKSA+PiAxO1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gZGF0YVtwYXJlbnRdO1xuICAgICAgICAgICAgICAgIGlmIChjb21wYXJlKGl0ZW0sIGN1cnJlbnQpID49IDApIHsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICBkYXRhW3Bvc10gPSBjdXJyZW50O1xuICAgICAgICAgICAgICAgIHBvcyA9IHBhcmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICBkYXRhW3Bvc10gPSBpdGVtO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgdGhpcy5fZG93biA9IGZ1bmN0aW9uIF9kb3duIChwb3MpIHtcbiAgICAgICAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gcmVmLmRhdGE7XG4gICAgICAgICAgICAgICAgdmFyIGNvbXBhcmUgPSByZWYuY29tcGFyZTtcbiAgICAgICAgICAgIHZhciBoYWxmTGVuZ3RoID0gdGhpcy5sZW5ndGggPj4gMTtcbiAgICAgICAgICAgIHZhciBpdGVtID0gZGF0YVtwb3NdO1xuICAgICAgICBcbiAgICAgICAgICAgIHdoaWxlIChwb3MgPCBoYWxmTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxlZnQgPSAocG9zIDw8IDEpICsgMTtcbiAgICAgICAgICAgICAgICB2YXIgYmVzdCA9IGRhdGFbbGVmdF07XG4gICAgICAgICAgICAgICAgdmFyIHJpZ2h0ID0gbGVmdCArIDE7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChyaWdodCA8IHRoaXMubGVuZ3RoICYmIGNvbXBhcmUoZGF0YVtyaWdodF0sIGJlc3QpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gcmlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIGJlc3QgPSBkYXRhW3JpZ2h0XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNvbXBhcmUoYmVzdCwgaXRlbSkgPj0gMCkgeyBicmVhazsgfVxuICAgICAgICBcbiAgICAgICAgICAgICAgICBkYXRhW3Bvc10gPSBiZXN0O1xuICAgICAgICAgICAgICAgIHBvcyA9IGxlZnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgZGF0YVtwb3NdID0gaXRlbTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZmluZE5leHRFbmQocHJldiwgdiwgdmVydGljZXMsIGVuZHMsIHZlcnRleENvb3JkcywgZWRnZURhdGEsIHRyYWNrSW5jb21pbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHdlaWdodCA9IHZlcnRpY2VzW3ByZXZdW3ZdLFxuICAgICAgICAgICAgcmV2ZXJzZVdlaWdodCA9IHZlcnRpY2VzW3ZdW3ByZXZdLFxuICAgICAgICAgICAgY29vcmRpbmF0ZXMgPSBbXSxcbiAgICAgICAgICAgIHBhdGggPSBbXSxcbiAgICAgICAgICAgIHJlZHVjZWRFZGdlID0gb3B0aW9ucy5lZGdlRGF0YVNlZWQ7XG4gICAgICAgICAgICBcbiAgICAgICAgaWYgKG9wdGlvbnMuZWRnZURhdGFSZWR1Y2VGbikge1xuICAgICAgICAgICAgcmVkdWNlZEVkZ2UgPSBvcHRpb25zLmVkZ2VEYXRhUmVkdWNlRm4ocmVkdWNlZEVkZ2UsIGVkZ2VEYXRhW3ZdW3ByZXZdKTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICB3aGlsZSAoIWVuZHNbdl0pIHtcbiAgICAgICAgICAgIHZhciBlZGdlcyA9IHZlcnRpY2VzW3ZdO1xuICAgIFxuICAgICAgICAgICAgaWYgKCFlZGdlcykgeyBicmVhazsgfVxuICAgIFxuICAgICAgICAgICAgdmFyIG5leHQgPSBPYmplY3Qua2V5cyhlZGdlcykuZmlsdGVyKGZ1bmN0aW9uIG5vdFByZXZpb3VzKGspIHsgcmV0dXJuIGsgIT09IHByZXY7IH0pWzBdO1xuICAgICAgICAgICAgd2VpZ2h0ICs9IGVkZ2VzW25leHRdO1xuICAgIFxuICAgICAgICAgICAgaWYgKHRyYWNrSW5jb21pbmcpIHtcbiAgICAgICAgICAgICAgICByZXZlcnNlV2VpZ2h0ICs9IHZlcnRpY2VzW25leHRdW3ZdO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmIChwYXRoLmluZGV4T2YodikgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBlbmRzW3ZdID0gdmVydGljZXNbdl07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXRoLnB1c2godik7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5lZGdlRGF0YVJlZHVjZUZuKSB7XG4gICAgICAgICAgICAgICAgcmVkdWNlZEVkZ2UgPSBvcHRpb25zLmVkZ2VEYXRhUmVkdWNlRm4ocmVkdWNlZEVkZ2UsIGVkZ2VEYXRhW3ZdW25leHRdKTtcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzLnB1c2godmVydGV4Q29vcmRzW3ZdKTtcbiAgICAgICAgICAgIHByZXYgPSB2O1xuICAgICAgICAgICAgdiA9IG5leHQ7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZlcnRleDogdixcbiAgICAgICAgICAgIHdlaWdodDogd2VpZ2h0LFxuICAgICAgICAgICAgcmV2ZXJzZVdlaWdodDogcmV2ZXJzZVdlaWdodCxcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlcyxcbiAgICAgICAgICAgIHJlZHVjZWRFZGdlOiByZWR1Y2VkRWRnZVxuICAgICAgICB9O1xuICAgIH07XG4gICAgXG4gICAgZnVuY3Rpb24gY29tcGFjdE5vZGUoaywgdmVydGljZXMsIGVuZHMsIHZlcnRleENvb3JkcywgZWRnZURhdGEsIHRyYWNrSW5jb21pbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHZhciBuZWlnaGJvcnMgPSB2ZXJ0aWNlc1trXTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG5laWdoYm9ycykucmVkdWNlKGZ1bmN0aW9uIGNvbXBhY3RFZGdlKHJlc3VsdCwgaikge1xuICAgICAgICAgICAgdmFyIG5laWdoYm9yID0gZmluZE5leHRFbmQoaywgaiwgdmVydGljZXMsIGVuZHMsIHZlcnRleENvb3JkcywgZWRnZURhdGEsIHRyYWNrSW5jb21pbmcsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdmFyIHdlaWdodCA9IG5laWdoYm9yLndlaWdodDtcbiAgICAgICAgICAgIHZhciByZXZlcnNlV2VpZ2h0ID0gbmVpZ2hib3IucmV2ZXJzZVdlaWdodDtcbiAgICAgICAgICAgIGlmIChuZWlnaGJvci52ZXJ0ZXggIT09IGspIHtcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdC5lZGdlc1tuZWlnaGJvci52ZXJ0ZXhdIHx8IHJlc3VsdC5lZGdlc1tuZWlnaGJvci52ZXJ0ZXhdID4gd2VpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5lZGdlc1tuZWlnaGJvci52ZXJ0ZXhdID0gd2VpZ2h0O1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuY29vcmRpbmF0ZXNbbmVpZ2hib3IudmVydGV4XSA9IFt2ZXJ0ZXhDb29yZHNba11dLmNvbmNhdChuZWlnaGJvci5jb29yZGluYXRlcyk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5yZWR1Y2VkRWRnZXNbbmVpZ2hib3IudmVydGV4XSA9IG5laWdoYm9yLnJlZHVjZWRFZGdlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHJhY2tJbmNvbWluZyAmJiBcbiAgICAgICAgICAgICAgICAgICAgIWlzTmFOKHJldmVyc2VXZWlnaHQpICYmICghcmVzdWx0LmluY29taW5nRWRnZXNbbmVpZ2hib3IudmVydGV4XSB8fCByZXN1bHQuaW5jb21pbmdFZGdlc1tuZWlnaGJvci52ZXJ0ZXhdID4gcmV2ZXJzZVdlaWdodCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmluY29taW5nRWRnZXNbbmVpZ2hib3IudmVydGV4XSA9IHJldmVyc2VXZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb29yZGluYXRlcyA9IFt2ZXJ0ZXhDb29yZHNba11dLmNvbmNhdChuZWlnaGJvci5jb29yZGluYXRlcyk7XG4gICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzLnJldmVyc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmluY29taW5nQ29vcmRpbmF0ZXNbbmVpZ2hib3IudmVydGV4XSA9IGNvb3JkaW5hdGVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sIHtlZGdlczoge30sIGluY29taW5nRWRnZXM6IHt9LCBjb29yZGluYXRlczoge30sIGluY29taW5nQ29vcmRpbmF0ZXM6IHt9LCByZWR1Y2VkRWRnZXM6IHt9fSk7XG4gICAgfTtcbiAgICBcbiAgICBmdW5jdGlvbiBjb21wYWN0R3JhcGgodmVydGljZXMsIHZlcnRleENvb3JkcywgZWRnZURhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHZhciBwcm9ncmVzcyA9IG9wdGlvbnMucHJvZ3Jlc3M7XG4gICAgICAgIHZhciBlbmRzID0gT2JqZWN0LmtleXModmVydGljZXMpLnJlZHVjZShmdW5jdGlvbiBmaW5kRW5kcyhlcywgaywgaSwgdnMpIHtcbiAgICAgICAgICAgIHZhciB2ZXJ0ZXggPSB2ZXJ0aWNlc1trXTtcbiAgICAgICAgICAgIHZhciBlZGdlcyA9IE9iamVjdC5rZXlzKHZlcnRleCk7XG4gICAgICAgICAgICB2YXIgbnVtYmVyRWRnZXMgPSBlZGdlcy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgcmVtb3ZlO1xuICAgIFxuICAgICAgICAgICAgaWYob3B0aW9ucy5jb21wYWN0ID09PSBmYWxzZSkgIHtcbiAgICAgICAgICAgICAgICByZW1vdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyRWRnZXMgPT09IDEpIHtcbiAgICAgICAgICAgICAgICB2YXIgb3RoZXIgPSB2ZXJ0aWNlc1tlZGdlc1swXV07XG4gICAgICAgICAgICAgICAgcmVtb3ZlID0gIW90aGVyW2tdO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXJFZGdlcyA9PT0gMikge1xuICAgICAgICAgICAgICAgIHJlbW92ZSA9IGVkZ2VzLmZpbHRlcihmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2ZXJ0aWNlc1tuXVtrXTtcbiAgICAgICAgICAgICAgICB9KS5sZW5ndGggPT09IG51bWJlckVkZ2VzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZW1vdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCFyZW1vdmUpIHtcbiAgICAgICAgICAgICAgICBlc1trXSA9IHZlcnRleDtcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGlmIChpICUgMTAwMCA9PT0gMCAmJiBwcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIHByb2dyZXNzKCdjb21wYWN0OmVuZHMnLCBpLCB2cy5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIGVzO1xuICAgICAgICB9LCB7fSk7XG4gICAgXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhlbmRzKS5yZWR1Y2UoZnVuY3Rpb24gY29tcGFjdEVuZChyZXN1bHQsIGssIGksIGVzKSB7XG4gICAgICAgICAgICB2YXIgY29tcGFjdGVkID0gY29tcGFjdE5vZGUoaywgdmVydGljZXMsIGVuZHMsIHZlcnRleENvb3JkcywgZWRnZURhdGEsIGZhbHNlLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJlc3VsdC5ncmFwaFtrXSA9IGNvbXBhY3RlZC5lZGdlcztcbiAgICAgICAgICAgIHJlc3VsdC5jb29yZGluYXRlc1trXSA9IGNvbXBhY3RlZC5jb29yZGluYXRlcztcbiAgICBcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmVkZ2VEYXRhUmVkdWNlRm4pIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucmVkdWNlZEVkZ2VzW2tdID0gY29tcGFjdGVkLnJlZHVjZWRFZGdlcztcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGlmIChpICUgMTAwMCA9PT0gMCAmJiBwcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIHByb2dyZXNzKCdjb21wYWN0Om5vZGVzJywgaSwgZXMubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sIHtncmFwaDoge30sIGNvb3JkaW5hdGVzOiB7fSwgcmVkdWNlZEVkZ2VzOiB7fX0pO1xuICAgIH07XG4gICAgXG4gICAgZnVuY3Rpb24gZmluZFBhdGgoZ3JhcGgsIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgdmFyIGNvc3RzID0ge307XG4gICAgICAgIGNvc3RzW3N0YXJ0XSA9IDA7XG4gICAgICAgIHZhciBpbml0aWFsU3RhdGUgPSBbMCwgW3N0YXJ0XSwgc3RhcnRdO1xuICAgICAgICB2YXIgcXVldWUgPSBuZXcgVGlueVF1ZXVlKFtpbml0aWFsU3RhdGVdLCBmdW5jdGlvbihhLCBiKSB7IHJldHVybiBhWzBdIC0gYlswXTsgfSk7XG4gICAgICAgIHZhciBleHBsb3JlZCA9IHt9O1xuICAgIFxuICAgICAgICB3aGlsZSAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBxdWV1ZS5wb3AoKTtcbiAgICAgICAgICAgIHZhciBjb3N0ID0gc3RhdGVbMF07XG4gICAgICAgICAgICB2YXIgbm9kZSA9IHN0YXRlWzJdO1xuICAgICAgICAgICAgaWYgKG5vZGUgPT09IGVuZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZS5zbGljZSgwLCAyKTtcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHZhciBuZWlnaGJvdXJzID0gZ3JhcGhbbm9kZV07XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhuZWlnaGJvdXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV3Q29zdCA9IGNvc3QgKyBuZWlnaGJvdXJzW25dO1xuICAgICAgICAgICAgICAgIGlmICghKG4gaW4gY29zdHMpIHx8IG5ld0Nvc3QgPCBjb3N0c1tuXSkge1xuICAgICAgICAgICAgICAgICAgICBjb3N0c1tuXSA9IG5ld0Nvc3Q7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdTdGF0ZSA9IFtuZXdDb3N0LCBzdGF0ZVsxXS5jb25jYXQoW25dKSwgbl07XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2gobmV3U3RhdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgXG4gICAgZnVuY3Rpb24gcHJlcHJvY2VzcyhncmFwaCwgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICB2YXIgdG9wbztcblxuICAgICAgICB2YXIgd2VpZ2h0Rm4gPSBvcHRpb25zLndlaWdodEZuIHx8IGZ1bmN0aW9uIGRlZmF1bHRXZWlnaHRGbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gdHVyZi5kaXN0YW5jZSh0dXJmLnBvaW50KGEpLCB0dXJmLnBvaW50KGIpKTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBpZiAoZ3JhcGgudHlwZSA9PT0gJ0ZlYXR1cmVDb2xsZWN0aW9uJykge1xuICAgICAgICAgICAgLy8gR3JhcGggaXMgR2VvSlNPTiBkYXRhLCBjcmVhdGUgYSB0b3BvbG9neSBmcm9tIGl0XG4gICAgICAgICAgICB0b3BvID0gdG9wb2xvZ3koZ3JhcGgsIG9wdGlvbnMpO1xuICAgICAgICB9IGVsc2UgaWYgKGdyYXBoLmVkZ2VzKSB7XG4gICAgICAgICAgICAvLyBHcmFwaCBpcyBhIHByZXByb2Nlc3NlZCB0b3BvbG9neVxuICAgICAgICAgICAgdG9wbyA9IGdyYXBoO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHZhciBncmFwaCA9IHRvcG8uZWRnZXMucmVkdWNlKGZ1bmN0aW9uIGJ1aWxkR3JhcGgoZywgZWRnZSwgaSwgZXMpIHtcbiAgICAgICAgICAgIHZhciBhID0gZWRnZVswXSxcbiAgICAgICAgICAgICAgICBiID0gZWRnZVsxXSxcbiAgICAgICAgICAgICAgICBwcm9wcyA9IGVkZ2VbMl0sXG4gICAgICAgICAgICAgICAgdyA9IHdlaWdodEZuKHRvcG8udmVydGljZXNbYV0sIHRvcG8udmVydGljZXNbYl0sIHByb3BzKSxcbiAgICAgICAgICAgICAgICBtYWtlRWRnZUxpc3QgPSBmdW5jdGlvbiBtYWtlRWRnZUxpc3Qobm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWcudmVydGljZXNbbm9kZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGcudmVydGljZXNbbm9kZV0gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmVkZ2VEYXRhUmVkdWNlRm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnLmVkZ2VEYXRhW25vZGVdID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbmNhdEVkZ2UgPSBmdW5jdGlvbiBjb25jYXRFZGdlKHN0YXJ0Tm9kZSwgZW5kTm9kZSwgd2VpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2ID0gZy52ZXJ0aWNlc1tzdGFydE5vZGVdO1xuICAgICAgICAgICAgICAgICAgICB2W2VuZE5vZGVdID0gd2VpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5lZGdlRGF0YVJlZHVjZUZuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnLmVkZ2VEYXRhW3N0YXJ0Tm9kZV1bZW5kTm9kZV0gPSBvcHRpb25zLmVkZ2VEYXRhUmVkdWNlRm4ob3B0aW9ucy5lZGdlRGF0YVNlZWQsIHByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICBpZiAodykge1xuICAgICAgICAgICAgICAgIG1ha2VFZGdlTGlzdChhKTtcbiAgICAgICAgICAgICAgICBtYWtlRWRnZUxpc3QoYik7XG4gICAgICAgICAgICAgICAgaWYgKHcgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHcuZm9yd2FyZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uY2F0RWRnZShhLCBiLCB3LmZvcndhcmQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh3LmJhY2t3YXJkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25jYXRFZGdlKGIsIGEsIHcuYmFja3dhcmQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uY2F0RWRnZShhLCBiLCB3KTtcbiAgICAgICAgICAgICAgICAgICAgY29uY2F0RWRnZShiLCBhLCB3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBpZiAoaSAlIDEwMDAgPT09IDAgJiYgb3B0aW9ucy5wcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMucHJvZ3Jlc3MoJ2VkZ2V3ZWlnaHRzJywgaSxlcy5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIGc7XG4gICAgICAgIH0sIHtlZGdlRGF0YToge30sIHZlcnRpY2VzOiB7fX0pO1xuICAgIFxuICAgICAgICB2YXIgY29tcGFjdCA9IGNvbXBhY3RHcmFwaChncmFwaC52ZXJ0aWNlcywgdG9wby52ZXJ0aWNlcywgZ3JhcGguZWRnZURhdGEsIG9wdGlvbnMpO1xuICAgIFxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmVydGljZXM6IGdyYXBoLnZlcnRpY2VzLFxuICAgICAgICAgICAgZWRnZURhdGE6IGdyYXBoLmVkZ2VEYXRhLFxuICAgICAgICAgICAgc291cmNlVmVydGljZXM6IHRvcG8udmVydGljZXMsXG4gICAgICAgICAgICBjb21wYWN0ZWRWZXJ0aWNlczogY29tcGFjdC5ncmFwaCxcbiAgICAgICAgICAgIGNvbXBhY3RlZENvb3JkaW5hdGVzOiBjb21wYWN0LmNvb3JkaW5hdGVzLFxuICAgICAgICAgICAgY29tcGFjdGVkRWRnZXM6IG9wdGlvbnMuZWRnZURhdGFSZWR1Y2VGbiA/IGNvbXBhY3QucmVkdWNlZEVkZ2VzIDogbnVsbFxuICAgICAgICB9O1xuICAgIH07XG4gICAgXG4gICAgZnVuY3Rpb24gcm91bmRDb29yZChjLCBwcmVjaXNpb24pIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIE1hdGgucm91bmQoY1swXSAvIHByZWNpc2lvbikgKiBwcmVjaXNpb24sXG4gICAgICAgICAgICBNYXRoLnJvdW5kKGNbMV0gLyBwcmVjaXNpb24pICogcHJlY2lzaW9uLFxuICAgICAgICBdO1xuICAgIH07XG4gICAgXG4gICAgZnVuY3Rpb24gZ2VvSnNvblJlZHVjZShnZW9qc29uLCBmbiwgc2VlZCkge1xuICAgICAgICBpZiAoZ2VvanNvbi50eXBlID09PSAnRmVhdHVyZUNvbGxlY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2VvanNvbi5mZWF0dXJlcy5yZWR1Y2UoZnVuY3Rpb24gcmVkdWNlRmVhdHVyZXMoYSwgZikge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZW9Kc29uUmVkdWNlKGYsIGZuLCBhKTtcbiAgICAgICAgICAgIH0sIHNlZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZuKHNlZWQsIGdlb2pzb24pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBcbiAgICBmdW5jdGlvbiBnZW9Kc29uRmlsdGVyRmVhdHVyZXMoZ2VvanNvbiwgZm4pIHtcbiAgICAgICAgdmFyIGZlYXR1cmVzID0gW107XG4gICAgICAgIGlmIChnZW9qc29uLnR5cGUgPT09ICdGZWF0dXJlQ29sbGVjdGlvbicpIHtcbiAgICAgICAgICAgIGZlYXR1cmVzID0gZmVhdHVyZXMuY29uY2F0KGdlb2pzb24uZmVhdHVyZXMuZmlsdGVyKGZuKSk7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdGZWF0dXJlQ29sbGVjdGlvbicsXG4gICAgICAgICAgICBmZWF0dXJlczogZmVhdHVyZXNcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIFxuICAgIGZ1bmN0aW9uIGlzTGluZVN0cmluZyhmKSB7XG4gICAgICAgIHJldHVybiBmLmdlb21ldHJ5LnR5cGUgPT09ICdMaW5lU3RyaW5nJztcbiAgICB9O1xuICAgIFxuICAgIGZ1bmN0aW9uIHRvcG9sb2d5KGdlb2pzb24sIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHZhciBrZXlGbiA9IG9wdGlvbnMua2V5Rm4gfHwgZnVuY3Rpb24gZGVmYXVsdEtleUZuKGMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYy5qb2luKCcsJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJlY2lzaW9uID0gb3B0aW9ucy5wcmVjaXNpb24gfHwgMWUtNTtcbiAgICBcbiAgICAgICAgdmFyIGxpbmVTdHJpbmdzID0gZ2VvSnNvbkZpbHRlckZlYXR1cmVzKGdlb2pzb24sIGlzTGluZVN0cmluZyk7XG4gICAgICAgIHZhciBleHBsb2RlZExpbmVTdHJpbmdzID0gdHVyZi5leHBsb2RlKGxpbmVTdHJpbmdzKTtcbiAgICAgICAgdmFyIHZlcnRpY2VzID0gZXhwbG9kZWRMaW5lU3RyaW5ncy5mZWF0dXJlcy5yZWR1Y2UoZnVuY3Rpb24gYnVpbGRUb3BvbG9neVZlcnRpY2VzKGNzLCBmLCBpLCBmcykge1xuICAgICAgICAgICAgICAgIHZhciByYyA9IHJvdW5kQ29vcmQoZi5nZW9tZXRyeS5jb29yZGluYXRlcywgcHJlY2lzaW9uKTtcbiAgICAgICAgICAgICAgICBjc1trZXlGbihyYyldID0gZi5nZW9tZXRyeS5jb29yZGluYXRlcztcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoaSAlIDEwMDAgPT09IDAgJiYgb3B0aW9ucy5wcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnByb2dyZXNzKCd0b3BvOnZlcnRpY2VzJywgaSwgZnMubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNzO1xuICAgICAgICAgICAgfSwge30pLFxuICAgICAgICAgICAgZWRnZXMgPSBnZW9Kc29uUmVkdWNlKGxpbmVTdHJpbmdzLCBmdW5jdGlvbiBidWlsZFRvcG9sb2d5RWRnZXMoZXMsIGYsIGksIGZzKSB7XG4gICAgICAgICAgICAgICAgZi5nZW9tZXRyeS5jb29yZGluYXRlcy5mb3JFYWNoKGZ1bmN0aW9uIGJ1aWxkTGluZVN0cmluZ0VkZ2VzKGMsIGksIGNzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGsxID0ga2V5Rm4ocm91bmRDb29yZChjc1tpIC0gMV0sIHByZWNpc2lvbikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsyID0ga2V5Rm4ocm91bmRDb29yZChjLCBwcmVjaXNpb24pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVzLnB1c2goW2sxLCBrMiwgZi5wcm9wZXJ0aWVzXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoaSAlIDEwMDAgPT09IDAgJiYgb3B0aW9ucy5wcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnByb2dyZXNzKCd0b3BvOmVkZ2VzJywgaSwgZnMubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVzO1xuICAgICAgICAgICAgfSwgW10pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmVydGljZXM6IHZlcnRpY2VzLFxuICAgICAgICAgICAgZWRnZXM6IGVkZ2VzXG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlUGF0aChmcm9tUG9pbnQsIHRvUG9pbnQsIHBhdGgpIHtcbiAgICAgICAgaWYgKHRvUG9pbnQgJiYgdG9Qb2ludC50eXBlID09PSAnbGluZXBvaW50JykgcmV0dXJuIGZhbHNlO1xuICAgICAgICAvL2lmIChwcmVjaXNpb24gPiAwLjAwMDUpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKCFwYXRoIHx8ICFwYXRoLnBhdGggfHwgIXBhdGgucGF0aC5sZW5ndGggfHwgcGF0aC5wYXRoLmxlbmd0aCA8IDIpIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG5cbiAgICAgICAgcHJlY2lzaW9uID0gTnVtYmVyKChOdW1iZXIocHJlY2lzaW9uKSArIDAuMDAwMDAyKS50b0ZpeGVkKDcpKTtcbiAgICAgICAgdmFyIHBhdGhmaW5kZXIgPSBuZXcgUGF0aEZpbmRlcihmZWF0dXJlcywgeyBwcmVjaXNpb246IHByZWNpc2lvbiB9KTtcbiAgICAgICAgdmFyIG5ld1BhdGggPSBwYXRoZmluZGVyLmZpbmRQYXRoKGZyb21Qb2ludCwgdG9Qb2ludCk7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZVBhdGgoZnJvbVBvaW50LCB0b1BvaW50LCBmZWF0dXJlcywgbmV3UGF0aCk7XG4gICAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRpbmc7IiwiLyoqXG4gKiBAbWl4aW5cbiAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvXG4gKiBAbmFtZSBTZWxlY3RcbiAqIEBkZXNjcmlwdGlvbiBUaGlzIG1vZHVsZSBwcm92aWRlcyB0aGUgc2VsZWN0IGZ1bmN0aW9uYWxpdHkgZm9yIHRoZSBHZW9mbG8gYXBwbGljYXRpb24uIEl0IGFsbG93cyB1c2VycyB0byBzZWxlY3QgZmVhdHVyZXMgb24gdGhlIG1hcCBieSBjbGlja2luZyBvbiB0aGVtLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgU2VsZWN0IG9iamVjdC5cbiAqL1xuY29uc3QgU2VsZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGdlb2ZsbyA9IHRoaXMuZ2VvZmxvO1xuXG4gICAgdmFyIGxhc3RLbm93blNlbGVjdElkcyA9IFtdO1xuICAgIHZhciByZW1vdmVkRmVhdHVyZXMgPSBbXTtcbiAgICB2YXIgbmVhckZlYXR1cmVzID0gW107XG4gICAgdmFyIGNsaWNrQ29vcmRzO1xuICAgIHZhciBtdWx0aXBsZVNlbGVjdDtcbiAgICB2YXIgc2VsZWN0ZWRJZDtcblxuICAgIHRoaXMuaWQgPSAnc2VsZWN0JztcblxuICAgIC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5TZWxlY3Rcblx0ICogQG5hbWUgYWN0aXZhdGVcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gYWN0aXZhdGVzIHRoZSBzZWxlY3QgZmVhdHVyZSBmdW5jdGlvbmFsaXR5IGJ5IGVuYWJsaW5nIGRyYWcgcGFuLCBzZXR0aW5nIGJ1dHRvbnMsIGFuZCBzZXR0aW5nIHRoZSBhY3RpdmUgYnV0dG9uIHRvICdzZWxlY3QnLiBJdCBhbHNvIHRyaWdnZXJzIGEgJ3NlbGVjdC5hY3RpdmF0ZScgZXZlbnQgd2l0aCB0aGUgcHJvdmlkZWQgb3B0aW9ucy5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QgZm9yIGFjdGl2YXRpb24uXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5pZF0gLSBUaGUgSUQgb2YgdGhlIGZlYXR1cmUgdG8gc2VsZWN0LlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuZmVhdHVyZV0gLSBUaGUgZmVhdHVyZSBvYmplY3QgdG8gc2VsZWN0LlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBmYWxzZSBpZiBhbHJlYWR5IGFjdGl2YXRlZC5cblx0ICovXG4gICAgdGhpcy5hY3RpdmF0ZSA9IGZ1bmN0aW9uIChvcHRpb25zPXt9KSB7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2YXRlZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoZ2VvZmxvLmN1cnJlbnRNb2RlLmlkICE9PSB0aGlzLmlkKSByZXR1cm4gb3B0aW9ucy5tb2RlID0gdGhpcy5pZCwgZ2VvZmxvLnNldE1vZGUob3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5hY3RpdmF0ZWQgPSB0cnVlO1xuICAgICAgICBnZW9mbG8ubWFwLmRyYWdQYW4uZW5hYmxlKCk7XG4gICAgICAgIGdlb2Zsby5zZXRCdXR0b25zKCk7XG4gICAgICAgIGdlb2Zsby5zZXRBY3RpdmVCdXR0b24oJ3NlbGVjdCcpO1xuICAgICAgICBnZW9mbG8uZmlyZSgnc2VsZWN0LmFjdGl2YXRlJywgeyBhY3RpdmF0ZWQ6IHRydWUsIG9wdGlvbnM6IG9wdGlvbnMgfSlcbiAgICAgICAgaWYgKHRoaXMuZ2FtZXBhZCkge31cbiAgICAgICAgZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuU0VMRUNUKS5zZXREYXRhKHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW10pKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbihlKSB7IGUuc2VsZWN0RmVhdHVyZShvcHRpb25zLmlkID8gb3B0aW9ucy5pZCA6IG9wdGlvbnMuZmVhdHVyZSA/IG9wdGlvbnMuZmVhdHVyZS5pZCA6IGZhbHNlKSB9LCA1LCB0aGlzKVxuICAgIH07XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlNlbGVjdFxuXHQgKiBAbmFtZSBkZWFjdGl2YXRlXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGRlYWN0aXZhdGVzIHRoZSBjdXJyZW50IGZlYXR1cmUgYnkgc2V0dGluZyB0aGUgJ2FjdGl2YXRlZCcgZmxhZyB0byBmYWxzZSBhbmQgdHJpZ2dlcmluZyBuZWNlc3NhcnkgYWN0aW9ucy5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgZmFsc2UgaWYgdGhlIGZlYXR1cmUgaXMgbm90IGFjdGl2YXRlZC5cblx0ICovXG4gICAgdGhpcy5kZWFjdGl2YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuYWN0aXZhdGVkKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5hY3RpdmF0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kZXNlbGVjdEN1cnJlbnRGZWF0dXJlKCk7XG4gICAgICAgIFxuICAgICAgICBnZW9mbG8uc2V0QnV0dG9ucygpO1xuICAgICAgICBnZW9mbG8uZmlyZSgnc2VsZWN0LmRlYWN0aXZhdGUnLCB7IGFjdGl2YXRlZDogdHJ1ZSB9KTtcbiAgICB9O1xuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5TZWxlY3Rcblx0ICogQG5hbWUgY2FuSGFuZGxlXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGRldGVybWluZXMgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlcXVhbCB0byB0aGUgU0VMRUNUIG1vZGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlTmFtZSAtIFRoZSBtb2RlIG5hbWUgdG8gYmUgY2hlY2tlZC5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgbW9kZSBuYW1lIGlzIFNFTEVDVCwgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQgKi9cbiAgICB0aGlzLmNhbkhhbmRsZSA9IGZ1bmN0aW9uIChtb2RlTmFtZSkge1xuICAgICAgICByZXR1cm4gZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLm1vZGVzLlNFTEVDVCA9PT0gbW9kZU5hbWU7XG4gICAgfTtcblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uU2VsZWN0XG5cdCAqIEBuYW1lIHNlbGVjdEZlYXR1cmVcblx0ICogQGRlc2NyaXB0aW9uIFNlbGVjdHMgYSBmZWF0dXJlIGJ5IGl0cyBJRCwgYWRkcyBpdCB0byB0aGUgc2VsZWN0ZWQgZmVhdHVyZXMgbGlzdCwgYW5kIG9wdGlvbmFsbHkgYWRkcyBhIHBvcHVwLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBUaGUgSUQgb2YgdGhlIGZlYXR1cmUgdG8gYmUgc2VsZWN0ZWQuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gLSBBbiBhcnJheSBvZiByZW1vdmVkIGZlYXR1cmVzIGlmIHdhbnRpbmdUb0VkaXQgaXMgZmFsc2UsIG90aGVyd2lzZSByZXR1cm5zIHRoZSByZW1vdmVkIGZlYXR1cmUuXG5cdCAqL1xuICAgIHRoaXMuc2VsZWN0RmVhdHVyZSA9IGZ1bmN0aW9uIChpZCwgb3B0aW9ucz17fSkge1xuICAgICAgICBjb25zdCBwb3B1cCA9IGdlb2Zsby5vcHRpb25zLnNlbGVjdC5wb3B1cDtcbiAgICAgICAgXG4gICAgICAgIGdlb2Zsby5tYXAuZ2V0U291cmNlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLlNFTEVDVCkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtdKSk7XG4gICAgICAgIFxuICAgICAgICBpZiAoIWlkKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChsYXN0S25vd25TZWxlY3RJZHMuaW5kZXhPZihpZCkgPT09IC0xKSBsYXN0S25vd25TZWxlY3RJZHMucHVzaChpZCk7XG4gICAgICAgIC8vaWYgKGdlb2Zsby5oYXNTZWxlY3Rpb24oKSkgZ2VvZmxvLmZvckVhY2hTZWxlY3RlZEZlYXR1cmUoKGZlYXR1cmUpID0+IHsgfSk7XG5cbiAgICAgICAgcmVtb3ZlZEZlYXR1cmVzID0gZ2VvZmxvLkZlYXR1cmVzLnJlbW92ZUZlYXR1cmVzKGlkLCB0cnVlKTtcbiAgICAgICAgZ2VvZmxvLmFkZEZlYXR1cmVzVG9TZWxlY3RlZChyZW1vdmVkRmVhdHVyZXMsIG9wdGlvbnMpO1xuICAgICAgICBwb3B1cCA/IHRoaXMuYWRkUG9wdXAocmVtb3ZlZEZlYXR1cmVzKSA6IGZhbHNlO1xuXG4gICAgICAgIGdlb2Zsby5maXJlKCdmZWF0dXJlLnNlbGVjdCcsIHsgaWRzOiBnZW9mbG8uZ2V0U2VsZWN0ZWRGZWF0dXJlSWRzKCksIGZlYXR1cmVzOiBnZW9mbG8uZ2V0U2VsZWN0ZWRGZWF0dXJlcygpIH0pO1xuICAgICAgICBpZiAoIWdlb2Zsby53YW50aW5nVG9FZGl0KSByZXR1cm4gcmVtb3ZlZEZlYXR1cmVzO1xuICAgICAgICBpZiAocmVtb3ZlZEZlYXR1cmVzLmxlbmd0aCA9PSAxICYmIGlkID09PSByZW1vdmVkRmVhdHVyZXNbMF0uaWQpIGVkaXRGZWF0dXJlKHJlbW92ZWRGZWF0dXJlc1swXSk7XG4gICAgICAgIHJldHVybiByZW1vdmVkRmVhdHVyZXM7XG4gICAgfTtcblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uU2VsZWN0XG5cdCAqIEBuYW1lIGRlc2VsZWN0Q3VycmVudEZlYXR1cmVcblx0ICogQGRlc2NyaXB0aW9uIERlc2VsZWN0cyB0aGUgY3VycmVudCBmZWF0dXJlIGJ5IHJlbW92aW5nIGl0cyBzZWxlY3Rpb24uXG5cdCAqL1xuICAgIHRoaXMuZGVzZWxlY3RDdXJyZW50RmVhdHVyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZ2VvZmxvLmZpcmUoJ2ZlYXR1cmUuZGVzZWxlY3QnLCB7IGlkczogZ2VvZmxvLmdldFNlbGVjdGVkRmVhdHVyZUlkcygpLCBmZWF0dXJlczogZ2VvZmxvLmdldFNlbGVjdGVkRmVhdHVyZXMoKSB9KTtcbiAgICAgICAgZ2VvZmxvLnJlbW92ZVNlbGVjdGlvbigpO1xuICAgIH07XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlNlbGVjdFxuXHQgKiBAbmFtZSBhZGRQb3B1cFxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBjcmVhdGVzIGEgcG9wdXAgZWxlbWVudCB3aXRoIHRoZSBzcGVjaWZpZWQgZmVhdHVyZXMgYW5kIGFkZHMgaXQgdG8gdGhlIG1hcCBhdCB0aGUgY2xpY2sgY29vcmRpbmF0ZXMuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBmZWF0dXJlcyAtIFRoZSBmZWF0dXJlcyB0byBiZSBkaXNwbGF5ZWQgaW4gdGhlIHBvcHVwLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZmVhdHVyZXMudGl0bGUgLSBUaGUgdGl0bGUgb2YgdGhlIHBvcHVwLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZmVhdHVyZXMuZGVzY3JpcHRpb24gLSBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIHBvcHVwLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZmVhdHVyZXMubGF0aXR1ZGUgLSBUaGUgbGF0aXR1ZGUgY29vcmRpbmF0ZSBmb3IgdGhlIHBvcHVwIGxvY2F0aW9uLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZmVhdHVyZXMubG9uZ2l0dWRlIC0gVGhlIGxvbmdpdHVkZSBjb29yZGluYXRlIGZvciB0aGUgcG9wdXAgbG9jYXRpb24uXG5cdCAqL1xuICAgIHRoaXMuYWRkUG9wdXAgPSBmdW5jdGlvbiAoZmVhdHVyZXMpIHtcbiAgICAgICAgdGhpcy5wb3B1cEVsZW1lbnQgPSBidWlsZFBvcHVwKGZlYXR1cmVzKTtcblxuICAgICAgICB0aGlzLnBvcHVwID0gbmV3IG1hcGJveGdsLlBvcHVwKHsgY2xvc2VPbkNsaWNrOiBmYWxzZSB9KVxuICAgICAgICAgICAgLnNldExuZ0xhdChjbGlja0Nvb3JkcylcbiAgICAgICAgICAgIC5zZXRET01Db250ZW50KHRoaXMucG9wdXBFbGVtZW50KVxuICAgICAgICAgICAgLmFkZFRvKGdlb2Zsby5tYXApXG4gICAgICAgICAgICAuc2V0T2Zmc2V0KDEyKTtcblxuICAgICAgICB0aGlzLnBvcHVwLl9jb250YWluZXIuc3R5bGVbJ21hcmdpbi1ib3R0b20nXSA9ICcxMHB4J1xuICAgIH07XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlNlbGVjdFxuXHQgKiBAbmFtZSByZW1vdmVQb3B1cFxuXHQgKiBAZGVzY3JpcHRpb24gUmVtb3ZlcyB0aGUgcG9wdXAgZWxlbWVudCBmcm9tIHRoZSBET00gaWYgaXQgZXhpc3RzLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIHBvcHVwIGVsZW1lbnQgd2FzIHN1Y2Nlc3NmdWxseSByZW1vdmVkLCBvdGhlcndpc2UgZmFsc2UuXG5cdCAqL1xuICAgIHRoaXMucmVtb3ZlUG9wdXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvcHVwICYmIHRoaXMucG9wdXAucmVtb3ZlID8gdGhpcy5wb3B1cC5yZW1vdmUoKSA6IGZhbHNlO1xuICAgIH07XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlNlbGVjdFxuXHQgKiBAbmFtZSBoYW5kbGVNb3ZlXG5cdCAqIEBkZXNjcmlwdGlvbiBIYW5kbGVzIHRoZSBtb3VzZSBtb3ZlIGV2ZW50LlxuXHQgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBldmVudCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBtb3VzZSBtb3ZlIGV2ZW50LlxuXHQgKi9cbiAgICB0aGlzLmhhbmRsZU1vdmUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgLy9nZW9mbG8uc2V0TWFwQ2xhc3MoJ3BvaW50ZXInKTtcbiAgICB9O1xuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5TZWxlY3Rcblx0ICogQG5hbWUgaGFuZGxlQ2xpY2tcblx0ICogQGRlc2NyaXB0aW9uIEhhbmRsZXMgdGhlIGNsaWNrIGV2ZW50IG9uIHRoZSBtYXAgYW5kIHNlbGVjdHMgZmVhdHVyZXMgYmFzZWQgb24gdGhlIGV2ZW50LlxuXHQgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgLSBUaGUgZXZlbnQgb2JqZWN0IGNvbnRhaW5pbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNsaWNrIGV2ZW50LlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBmYWxzZSBpZiBnZW9mbG8ubm9TZWxlY3QgaXMgdHJ1ZSwgb3RoZXJ3aXNlIHNlbGVjdHMgZmVhdHVyZXMgYmFzZWQgb24gdGhlIGV2ZW50LlxuXHQgKi9cbiAgICB0aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBmZWF0dXJlcyA9IGdlb2Zsby5nZXRSZW5kZXJlZERyYXduRmVhdHVyZXMoZXZlbnQubG5nTGF0KTtcblxuICAgICAgICBjbGlja0Nvb3JkcyA9IFtldmVudC5sbmdMYXQubG5nLCBldmVudC5sbmdMYXQubGF0XTtcbiAgICAgICAgbXVsdGlwbGVTZWxlY3QgPSBldmVudC5vcmlnaW5hbEV2ZW50ICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQuc2hpZnRLZXkgJiYgZ2VvZmxvLm9wdGlvbnMuc2VsZWN0Lm11bHRpcGxlO1xuXG4gICAgICAgIGlmIChmZWF0dXJlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpZiAoIWdlb2Zsby5MYXllcnMuZ2V0U2VsZWN0aW9uKGZlYXR1cmVzLCBjbGlja0Nvb3JkcykpIHJldHVybjtcbiAgICAgICAgICAgIHNlbGVjdEZlYXR1cmUuY2FsbCh0aGlzLCBmZWF0dXJlcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIW11bHRpcGxlU2VsZWN0KSB7XG4gICAgICAgICAgICBsYXN0S25vd25TZWxlY3RJZHMgPSBbXTtcbiAgICAgICAgICAgIG5lYXJGZWF0dXJlcyA9IFtdO1xuICAgICAgICAgICAgY2xpY2tDb29yZHMgPSBmYWxzZTtcbiAgICAgICAgICAgIHNlbGVjdGVkSWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZGVzZWxlY3RDdXJyZW50RmVhdHVyZSgpO1xuICAgICAgICB9XG4gICAgfTtcblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uU2VsZWN0XG5cdCAqIEBuYW1lIGhhbmRsZURyYWdcblx0ICogQGRlc2NyaXB0aW9uIEhhbmRsZXMgdGhlIGRyYWcgZXZlbnQgdHJpZ2dlcmVkIGJ5IGEgdXNlciBpbnRlcmFjdGlvbi4gSXQgc2V0cyB0aGUgbWFwIGNsYXNzIHRvICdncmFiYmluZycgdG8gaW5kaWNhdGUgZHJhZ2dpbmcuXG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGRyYWcgZXZlbnQuXG5cdCAqL1xuICAgIHRoaXMuaGFuZGxlRHJhZyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAvL2dlb2Zsby5zZXRNYXBDbGFzcygnZ3JhYmJpbmcnKTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGJ1aWxkUG9wdXAgKGZlYXR1cmVzKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdwb3B1cC10YWJsZS1ob2xkZXInKTtcblxuICAgICAgICBjb25zdCB0YWJsZSA9IGJ1aWxkVGFibGUoZmVhdHVyZXMpO1xuXG4gICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQodGFibGUpO1xuXG4gICAgICAgIGlmIChuZWFyRmVhdHVyZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdmFyIGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3BvcHVwLXRhYmxlLWJ1dHRvbicpO1xuICAgICAgICAgICAgYnV0dG9uLmlubmVySFRNTCA9IGA8YnV0dG9uPiBOZXh0IDwvYnV0dG9uPmA7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzZWxlY3RGZWF0dXJlLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChidXR0b24pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgIFxuICAgICAgICAvKiBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgYnV0dG9uLmlubmVySFRNTCA9IGA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zdWNjZXNzIGJ0bi1zaW1wbGUgdGV4dC13aGl0ZVwiID4gQXNzaWduPC9idXR0b24+YDtcbiAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChidXR0b24pO1xuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4geyBjb25zb2xlLmxvZygnQnV0dG9uIGNsaWNrZWQnICsgbmFtZSk7IH0pOyAqL1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBidWlsZFRhYmxlIChmZWF0dXJlcykge1xuICAgICAgICB2YXIgdGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0YWJsZScpO1xuICAgICAgICB2YXIgcHJvcGVydGllcyA9IFsnaWQnLCAndHlwZSddO1xuXG4gICAgICAgIHRhYmxlLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgICB0YWJsZS5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgICAgIHRhYmxlLnNldEF0dHJpYnV0ZSgnYm9yZGVyJywgJzEnKTtcbiAgICAgICAgdGFibGUuY2xhc3NMaXN0LmFkZCgncG9wdXAtdGFibGUnKTtcblxuICAgICAgICB2YXIgdGFibGVCb2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGJvZHknKTtcblxuICAgICAgICBmZWF0dXJlcy5mb3JFYWNoKGZ1bmN0aW9uKGZlYXR1cmUsIGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IGZlYXR1cmUucHJvcGVydGllcy50eXBlO1xuXG4gICAgICAgICAgICBwcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24ocHJvcCkge1xuICAgICAgICAgICAgICAgIHRhYmxlQm9keS5hcHBlbmRDaGlsZChidWlsZFJvdyhwcm9wLCBmZWF0dXJlLnByb3BlcnRpZXNbcHJvcF0pKTtcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRhYmxlQm9keS5hcHBlbmRDaGlsZChidWlsZFJvdygnZ2VvbWV0cnknLCBmZWF0dXJlLmdlb21ldHJ5LnR5cGUpKTtcblxuICAgICAgICAgICAgaWYgKGZlYXR1cmUuZ2VvbWV0cnkudHlwZSA9PT0gJ0xpbmVTdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgZ2VvZmxvLkZlYXR1cmVzLmFkZFVuaXRzKGZlYXR1cmUsICdmZWV0Jyk7XG4gICAgICAgICAgICAgICAgdGFibGVCb2R5LmFwcGVuZENoaWxkKGJ1aWxkUm93KCd1bml0JywgZmVhdHVyZS5nZW9tZXRyeS51bml0KSk7XG4gICAgICAgICAgICAgICAgdGFibGVCb2R5LmFwcGVuZENoaWxkKGJ1aWxkUm93KCd1bml0cycsIGZlYXR1cmUuZ2VvbWV0cnkudW5pdHMpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1RleHQnKSB7XG4gICAgICAgICAgICAgICAgdGFibGVCb2R5LmFwcGVuZENoaWxkKGJ1aWxkUm93KCdjb250ZW50JywgZmVhdHVyZS5wcm9wZXJ0aWVzLnRleHQpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZmVhdHVyZS5nZW9tZXRyeS50eXBlID09PSAnUG9seWdvbicpIHtcbiAgICAgICAgICAgICAgICBnZW9mbG8uRmVhdHVyZXMuYWRkVW5pdHMoZmVhdHVyZSwgJ2FjcmVzJyk7XG4gICAgICAgICAgICAgICAgdGFibGVCb2R5LmFwcGVuZENoaWxkKGJ1aWxkUm93KCd1bml0JywgZmVhdHVyZS5nZW9tZXRyeS51bml0KSk7XG4gICAgICAgICAgICAgICAgdGFibGVCb2R5LmFwcGVuZENoaWxkKGJ1aWxkUm93KCd1bml0cycsIGZlYXR1cmUuZ2VvbWV0cnkudW5pdHMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICB0YWJsZS5hcHBlbmRDaGlsZCh0YWJsZUJvZHkpO1xuICAgICAgICByZXR1cm4gdGFibGU7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGJ1aWxkUm93IChoZWFkZXIsIGRhdGEpIHtcbiAgICAgICAgdmFyIHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcbiAgICAgICAgdHIuY2xhc3NMaXN0LmFkZCgncG9wdXAtdGFibGUtcm93Jyk7XG5cbiAgICAgICAgaWYgKGhlYWRlcikge1xuICAgICAgICAgICAgdmFyIHRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGgnKTtcbiAgICAgICAgICAgIHRoLmNsYXNzTGlzdC5hZGQoJ3BvcHVwLXRhYmxlLWhlYWRlcicpO1xuICAgICAgICAgICAgdGguYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoaGVhZGVyKSk7XG4gICAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh0aCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciB0ZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgIHRkLmNsYXNzTGlzdC5hZGQoJ3BvcHVwLXRhYmxlLWRhdGEnKTtcbiAgICAgICAgdGQuY2xhc3NMaXN0LmFkZChoZWFkZXIpO1xuICAgICAgICB0ZC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkYXRhKSk7XG4gICAgICAgIHRyLmFwcGVuZENoaWxkKHRkKTtcblxuICAgICAgICByZXR1cm4gdHI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2VsZWN0RmVhdHVyZSAoZmVhdHVyZXMpIHtcbiAgICAgICAgbXVsdGlwbGVTZWxlY3QgPSBnZW9mbG8ub3B0aW9ucy5zZWxlY3QubXVsdGlwbGU7XG4gICAgICAgIG5lYXJGZWF0dXJlcyA9IGZlYXR1cmVzO1xuICAgICAgICBsYXN0S25vd25TZWxlY3RJZHMgPSBsYXN0S25vd25TZWxlY3RJZHMgPT09IHVuZGVmaW5lZCA/IFtdIDogbGFzdEtub3duU2VsZWN0SWRzO1xuXG4gICAgICAgIGlmIChmZWF0dXJlcy5sZW5ndGggPj0gbGFzdEtub3duU2VsZWN0SWRzLmxlbmd0aCkge1xuICAgICAgICAgICAgbGFzdEtub3duU2VsZWN0SWRzLnNwbGljZSgwLCBmZWF0dXJlcy5sZW5ndGggLSBsYXN0S25vd25TZWxlY3RJZHMubGVuZ3RoICsgMSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZmVhdCA9IGZlYXR1cmVzWzBdO1xuICAgICAgICBzZWxlY3RlZElkID0gZmVhdC5pZCB8fCBmZWF0LnByb3BlcnRpZXNbJ2lkJ107XG5cbiAgICAgICAgaWYgKGZlYXR1cmVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGZlYXR1cmVzLmZvckVhY2goKGZlYXR1cmUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IGZlYXR1cmUuaWQgfHwgZmVhdHVyZS5wcm9wZXJ0aWVzWydpZCddO1xuICAgICAgICAgICAgICAgIGlmIChsYXN0S25vd25TZWxlY3RJZHMuaW5kZXhPZihpZCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkSWQgPSBpZDtcbiAgICAgICAgICAgICAgICAgICAgZmVhdCA9IGZlYXR1cmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW11bHRpcGxlU2VsZWN0KSBnZW9mbG8uY3VycmVudE1vZGUuZGVzZWxlY3RDdXJyZW50RmVhdHVyZSgpO1xuICAgICAgICBnZW9mbG8uY3VycmVudE1vZGUuc2VsZWN0RmVhdHVyZShzZWxlY3RlZElkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlZGl0RmVhdHVyZSAoZmVhdHVyZSkge1xuICAgICAgICBnZW9mbG8ud2FudGluZ1RvRWRpdCA9IGZhbHNlO1xuICAgICAgICBnZW9mbG8uc2V0TW9kZSgnZWRpdCcsIGZlYXR1cmUucHJvcGVydGllcy50eXBlLCBmZWF0dXJlKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTZWxlY3Q7IiwiLyoqXG4gKiBAbWl4aW5cbiAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvXG4gKiBAbmFtZSBTbmFwcGluZ1xuICogQGRlc2NyaXB0aW9uIFRoaXMgbW9kdWxlIHByb3ZpZGVzIHRoZSBzbmFwcGluZyBmdW5jdGlvbmFsaXR5IGZvciB0aGUgR2VvZmxvIGFwcGxpY2F0aW9uLiBJdCBhbGxvd3MgdXNlcnMgdG8gc25hcCBmZWF0dXJlcyB0byB0aGUgbWFwIGJ5IGNyZWF0aW5nIGEgYnVmZmVyIGFyb3VuZCB0aGUgZmVhdHVyZSBhbmQgc25hcHBpbmcgdG8gbmVhcmJ5IGZlYXR1cmVzLlxuICogQHBhcmFtIHtPYmplY3R9IG1vZGUgLSBUaGUgbW9kZSBvYmplY3QgY29udGFpbmluZyB0aGUgdHlwZSBvZiBtb2RlLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgU25hcHBpbmcgb2JqZWN0LlxuICovXG5jb25zdCBTbmFwcGluZyA9IGZ1bmN0aW9uIChtb2RlKSB7XG4gICAgY29uc3QgZ2VvZmxvID0gdGhpcy5nZW9mbG87XG4gICAgdGhpcy50eXBlID0gbW9kZS50eXBlO1xuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5TbmFwcGluZ1xuXHQgKiBAbmFtZSBhY3RpdmF0ZVxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBlbmFibGVzIHRoZSBvYmplY3QgYW5kIHNldHMgdGhlIHNuYXBwaW5nIG9wdGlvbiB0byB0cnVlLlxuXHQgKi9cbiAgICB0aGlzLmFjdGl2YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICBnZW9mbG8ub3B0aW9uc1snc25hcHBpbmcnXS5lbmFibGUgPSB0cnVlO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uU25hcHBpbmdcblx0ICogQG5hbWUgZGVhY3RpdmF0ZVxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBzZXRzIHRoZSAnZW5hYmxlZCcgcHJvcGVydHkgdG8gZmFsc2UsIGRpc2FibGVzIHNuYXBwaW5nLCBhbmQgdXBkYXRlcyB0aGUgbWVzaCBkYXRhLlxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG4gICAgdGhpcy5kZWFjdGl2YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgZ2VvZmxvLm9wdGlvbnNbJ3NuYXBwaW5nJ10uZW5hYmxlID0gZmFsc2U7XG4gICAgICAgIGdlb2Zsby51cGRhdGVNZXNoRGF0YShbXSwgdHJ1ZSk7XG4gICAgfVxuXG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlNuYXBwaW5nXG5cdCAqIEBuYW1lIGdldENsb3Nlc3Rcblx0ICogQGRlc2NyaXB0aW9uIEZpbmRzIHRoZSBjbG9zZXN0IHBvaW50IHRvIHRoZSBnaXZlbiBjb29yZGluYXRlcyB3aXRoaW4gYSBzcGVjaWZpZWQgcmFkaXVzIG9yIHBpeGVsIGRpc3RhbmNlLlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGNvb3JkcyAtIFRoZSBjb29yZGluYXRlcyBbbG9uZ2l0dWRlLCBsYXRpdHVkZV0gdG8gZmluZCB0aGUgY2xvc2VzdCBwb2ludCB0by5cblx0ICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSBmZWF0dXJlcyAtIEFuIGFycmF5IG9mIGZlYXR1cmVzIHRvIHNlYXJjaCBmb3IgdGhlIGNsb3Nlc3QgcG9pbnQgd2l0aGluLlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgY2xvc2VzdCBwb2ludCBhbmQgaXRzIGNvb3JkaW5hdGVzLlxuXHQgKi9cbiAgICB0aGlzLmdldENsb3Nlc3QgPSBmdW5jdGlvbiAoY29vcmRzLCBmZWF0dXJlcykge1xuICAgICAgICB2YXIgY2FsY3VsYXRlZFJhZGl1cyA9IGdlb2Zsby5vcHRpb25zLnNuYXBwaW5nLmRpc3RhbmNlICogTWF0aC5wb3coMiwgTWF0aC5tYXgoMSwgMTkgLSBnZW9mbG8ubWFwLmdldFpvb20oKSkpO1xuICAgICAgICB2YXIgcmFkaXVzSW5LbSA9IGNhbGN1bGF0ZWRSYWRpdXMgLyAxMDAwMDA7XG4gICAgICAgIHZhciBwaXhlbERpc3RhbmNlID0gZ2VvZmxvLm9wdGlvbnMuc25hcHBpbmcucGl4ZWxzID8gZ2VvZmxvLm9wdGlvbnMuc25hcHBpbmcucGl4ZWxzICogbWV0ZXJzUGVyUGl4ZWwoY29vcmRzWzFdLCBnZW9mbG8ubWFwLmdldFpvb20oKSkgOiBmYWxzZTtcbiAgICAgICAgXG4gICAgICAgIGZlYXR1cmVzID0gZmVhdHVyZXMgPyBnZW9mbG8uZ2V0UmVuZGVyZWRTbmFwRmVhdHVyZXMoeyBsbmc6IGNvb3Jkc1swXSwgbGF0OiBjb29yZHNbMV0gfSwgcmFkaXVzSW5LbSkgOiBbZ2VvZmxvLmhvdEZlYXR1cmVdO1xuXG4gICAgICAgIHZhciBjbG9zZXN0UG9pbnQgPSBmaW5kQ2xvc2VzdFBvaW50KGZlYXR1cmVzLCBjb29yZHMsIHJhZGl1c0luS20sIHBpeGVsRGlzdGFuY2UpO1xuXG4gICAgICAgIHZhciBjb29yZHMgPSAhY2xvc2VzdFBvaW50ID8gZmFsc2UgOlxuICAgICAgICAgICAgcGl4ZWxEaXN0YW5jZSA/IGNsb3Nlc3RQb2ludC5jb29yZHMgOlxuICAgICAgICAgICAgY2xvc2VzdFBvaW50LnR5cGUgPT09ICd2ZXJ0ZXgnICYmIGNsb3Nlc3RQb2ludC5kaXN0IDw9IHJhZGl1c0luS20gPyBjbG9zZXN0UG9pbnQuY29vcmRzIDpcbiAgICAgICAgICAgIGZhbHNlO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBvaW50OiBjbG9zZXN0UG9pbnQsXG4gICAgICAgICAgICBjb29yZHM6IGNvb3Jkc1xuICAgICAgICB9O1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uU25hcHBpbmdcblx0ICogQG5hbWUgc2V0Q2xvc2VzdFxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBjYWxjdWxhdGVzIHRoZSBjbG9zZXN0IGZlYXR1cmUgdG8gdGhlIGdpdmVuIGNvb3JkaW5hdGVzIHdpdGhpbiBhIHNwZWNpZmllZCByYWRpdXMgYW5kIHNuYXBwaW5nIHBhcmFtZXRlcnMuIEl0IGRldGVybWluZXMgaWYgdGhlIGNsb3Nlc3QgZmVhdHVyZSBpcyBhIHBvaW50IG9yIGEgdmVydGV4IGFuZCByZXR1cm5zIHRoZSBzbmFwcGVkIGZlYXR1cmUgYWNjb3JkaW5nbHkuXG5cdCAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gY29vcmRzIC0gVGhlIGNvb3JkaW5hdGVzIFtsb25naXR1ZGUsIGxhdGl0dWRlXSB0byBmaW5kIHRoZSBjbG9zZXN0IGZlYXR1cmUgdG8uXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNQb2ludCAtIEluZGljYXRlcyBpZiB0aGUgZmVhdHVyZSBpcyBhIHBvaW50LlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IGlzVmVydGV4IC0gSW5kaWNhdGVzIGlmIHRoZSBmZWF0dXJlIGlzIGEgdmVydGV4LlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgc25hcHBlZCBmZWF0dXJlIGJhc2VkIG9uIHRoZSBjYWxjdWxhdGVkIGNsb3Nlc3QgcG9pbnQgb3IgbGluZS5cblx0ICovXG4gICAgdGhpcy5zZXRDbG9zZXN0ID0gZnVuY3Rpb24gKGNvb3JkcywgaXNQb2ludCwgaXNWZXJ0ZXgpIHtcbiAgICAgICAgdmFyIHNuYXBGZWF0dXJlID0gbnVsbDtcbiAgICAgICAgdmFyIGNhbGN1bGF0ZWRSYWRpdXMgPSBnZW9mbG8ub3B0aW9ucy5zbmFwcGluZy5kaXN0YW5jZSAqIE1hdGgucG93KDIsIE1hdGgubWF4KDEsIDE5IC0gZ2VvZmxvLm1hcC5nZXRab29tKCkpKTtcbiAgICAgICAgdmFyIHJhZGl1c0luS20gPSBjYWxjdWxhdGVkUmFkaXVzIC8gMTAwMDAwO1xuICAgICAgICB2YXIgcGl4ZWxEaXN0YW5jZSA9IGdlb2Zsby5vcHRpb25zLnNuYXBwaW5nLnBpeGVscyA/IGdlb2Zsby5vcHRpb25zLnNuYXBwaW5nLnBpeGVscyAqIG1ldGVyc1BlclBpeGVsKGNvb3Jkc1sxXSwgZ2VvZmxvLm1hcC5nZXRab29tKCkpIDogZmFsc2U7XG4gICAgICAgIHZhciBmaWx0ZXIgPSBnZW9mbG8ucGluYWJsZUZlYXR1cmVzICYmIGdlb2Zsby5waW5hYmxlRmVhdHVyZXMubGVuZ3RoID8gWydjYXNlJywgWydhbnknLCAuLi5nZW9mbG8ucGluYWJsZUZlYXR1cmVzLm1hcChlID0+IFtcIj09XCIsIFtcImdldFwiLCBcImlkXCJdLCBlLmlkIHx8IGUucHJvcGVydGllcy5pZF0pXSwgZmFsc2UsIHRydWVdIDogZmFsc2U7XG4gICAgICAgIHZhciBuZWFyRmVhdHVyZXMgPSBnZW9mbG8uZ2V0UmVuZGVyZWRGZWF0dXJlcyh7IGxuZzogY29vcmRzWzBdLCBsYXQ6IGNvb3Jkc1sxXSB9LCByYWRpdXNJbkttLCBmaWx0ZXIpO1xuICAgICAgICB2YXIgY2xvc2VzdFBvaW50ID0gbmVhckZlYXR1cmVzICYmIG5lYXJGZWF0dXJlcy5sZW5ndGggPyBmaW5kQ2xvc2VzdFBvaW50KG5lYXJGZWF0dXJlcywgY29vcmRzLCByYWRpdXNJbkttLCBwaXhlbERpc3RhbmNlKSA6IGZhbHNlO1xuICAgICAgICB2YXIgbGFzdENsaWNrRGlzdGFuY2UsIGxhc3RDbGlja0FycmF5LCBsYXN0Q2xpY2tFcXVhbDtcblxuICAgICAgICBnZW9mbG8uY2xvc2VzdFBvaW50ID0gY2xvc2VzdFBvaW50O1xuXG4gICAgICAgIGlmICgoIW5lYXJGZWF0dXJlcyAmJiAhaXNQb2ludCkgfHwgKCFjbG9zZXN0UG9pbnQgJiYgIWlzUG9pbnQpKSByZXR1cm4gdGhpcy51cGRhdGVGZWF0dXJlKGNvb3Jkcyk7XG4gICAgICAgIGlmICghY2xvc2VzdFBvaW50IHx8ICFjbG9zZXN0UG9pbnQuY29vcmRzKSByZXR1cm4gc25hcEZlYXR1cmU7XG5cbiAgICAgICAgaWYgKGlzVmVydGV4IHx8ICFnZW9mbG8ubGFzdENsaWNrKSB7XG4gICAgICAgICAgICBzbmFwRmVhdHVyZSA9IHR1cmYucG9pbnQoY2xvc2VzdFBvaW50LmNvb3Jkcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsYXN0Q2xpY2tBcnJheSA9IEFycmF5LmlzQXJyYXkoZ2VvZmxvLmxhc3RDbGljay5jb29yZHMpICYmIEFycmF5LmlzQXJyYXkoZ2VvZmxvLmxhc3RDbGljay5jb29yZHNbMF0pO1xuICAgICAgICAgICAgaWYgKGxhc3RDbGlja0FycmF5KSBnZW9mbG8ubGFzdENsaWNrLmNvb3JkcyA9IGdlb2Zsby5sYXN0Q2xpY2suY29vcmRzWzBdO1xuXG4gICAgICAgICAgICBsYXN0Q2xpY2tEaXN0YW5jZSA9IHR1cmYuZGlzdGFuY2UodHVyZi5wb2ludChjb29yZHMpLCB0dXJmLnBvaW50KGdlb2Zsby5sYXN0Q2xpY2suY29vcmRzKSk7XG4gICAgICAgICAgICBsYXN0Q2xpY2tFcXVhbCA9IGdlb2Zsby5VdGlsaXRpZXMuaXNQb2ludEVxdWFsKGdlb2Zsby5sYXN0Q2xpY2suY29vcmRzLCBjbG9zZXN0UG9pbnQuY29vcmRzKTtcblxuICAgICAgICAgICAgaWYgKGxhc3RDbGlja0VxdWFsICYmIGxhc3RDbGlja0Rpc3RhbmNlID4gZ2VvZmxvLm9wdGlvbnMuc25hcHBpbmcudG9sZXJhbmNlKSByZXR1cm4gdGhpcy51cGRhdGVGZWF0dXJlKGNvb3Jkcyk7XG5cbiAgICAgICAgICAgIHNuYXBGZWF0dXJlID0gdHVyZi5saW5lU3RyaW5nKFtnZW9mbG8ubGFzdENsaWNrLmNvb3JkcywgY2xvc2VzdFBvaW50LmNvb3Jkc10pO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2VvZmxvLmZpcmUoJ3NuYXBwaW5nLmFkZCcsIHsgY2xvc2VzdDogY2xvc2VzdFBvaW50LCBzbmFwcGVkOiBzbmFwRmVhdHVyZSB9KTtcbiAgICAgICAgcmV0dXJuIHNuYXBGZWF0dXJlO1xuICAgIH1cblxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5TbmFwcGluZ1xuXHQgKiBAbmFtZSBzZXRGZWF0dXJlXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHNldHMgYSBmZWF0dXJlIG9uIHRoZSBtYXAgdXNpbmcgdGhlIHByb3ZpZGVkIGZlYXR1cmUgYW5kIGNvb3JkaW5hdGVzLiBJdCBoYW5kbGVzIGRpZmZlcmVudCBzY2VuYXJpb3Mgc3VjaCBhcyBjcmVhdGluZyBhIHBvaW50LCBsaW5lLCBvciBwb2x5Z29uIGZlYXR1cmUgYmFzZWQgb24gdGhlIGlucHV0IHBhcmFtZXRlcnMuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBmZWF0dXJlIC0gVGhlIGZlYXR1cmUgdG8gYmUgc2V0IG9uIHRoZSBtYXAuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGNvb3JkcyAtIFRoZSBjb29yZGluYXRlcyBmb3IgdGhlIGZlYXR1cmUuXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBmZWF0dXJlIHRoYXQgd2FzIHNldCBvbiB0aGUgbWFwLlxuXHQgKi9cbiAgICB0aGlzLnNldEZlYXR1cmUgPSBmdW5jdGlvbiAoZmVhdHVyZSwgY29vcmRzKSB7XG4gICAgICAgIGlmIChnZW9mbG8udG91Y2hDbGljaykgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgZmVhdHVyZSA9IGZlYXR1cmUgfHwgZ2VvZmxvLnNuYXBGZWF0dXJlO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFmZWF0dXJlICYmIGNvb3JkcykgcmV0dXJuIHNldEZlYXR1cmUodHVyZi5wb2ludChjb29yZHMpKTtcbiAgICAgICAgaWYgKCFmZWF0dXJlKSByZXR1cm4gZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuU05BUCkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtdKSksIG51bGw7XG5cbiAgICAgICAgdmFyIHNuYXBDb29yZHMgPSBmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICAgICAgICB2YXIgbGFzdENsaWNrID0gY29vcmRzIHx8IGdlb2Zsby5sYXN0Q2xpY2suY29vcmRzO1xuICAgICAgICB2YXIgZmlyc3RDbGljayA9IGdlb2Zsby5maXJzdENsaWNrLmNvb3JkcztcbiAgICAgICAgdmFyIGlzUG9seWdvbiA9IHRoaXMudHlwZSA9PT0gJ1BvbHlnb24nO1xuICAgICAgICB2YXIgaXNQb2x5bGluZSA9IGZlYXR1cmUuZ2VvbWV0cnkudHlwZSA9PT0gXCJMaW5lU3RyaW5nXCI7XG5cbiAgICAgICAgaWYgKCFpc1BvbHlsaW5lIHx8IHNuYXBDb29yZHMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgZmVhdHVyZSA9IHNldEZlYXR1cmUoaXNQb2x5Z29uID8gdHVyZi5saW5lU3RyaW5nKFtmaXJzdENsaWNrLCBsYXN0Q2xpY2tdKSA6IHR1cmYucG9pbnQobGFzdENsaWNrKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZ2VvZmxvLmhvdEZlYXR1cmUpIHtcbiAgICAgICAgICAgIHZhciBob3RDb29yZHMgPSBnZW9mbG8uaG90RmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcztcbiAgICAgICAgICAgIGlmIChpc1BvbHlnb24pIHNuYXBDb29yZHMucG9wKCk7XG4gICAgICAgICAgICBob3RDb29yZHMuc3BsaWNlLmFwcGx5KGhvdENvb3JkcywgWy0xLCAxXS5jb25jYXQoZ2VvZmxvLlV0aWxpdGllcy5jb25zdW1hYmxlQXJyYXkoc25hcENvb3JkcykpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdlb2Zsby5ob3RGZWF0dXJlID0gdHVyZi5saW5lU3RyaW5nKHNuYXBDb29yZHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2VvZmxvLlV0aWxpdGllcy5zZXRQcm9wZXJ0eShnZW9mbG8uaG90RmVhdHVyZSwgJ3R5cGUnLCB0aGlzLnR5cGUpO1xuICAgICAgICBnZW9mbG8uVXRpbGl0aWVzLnNldFByb3BlcnR5KGdlb2Zsby5ob3RGZWF0dXJlLCAnc3R5bGUnLCB7IHByaW1hcnlDb2xvcjogZ2VvZmxvLm9wdGlvbnMuY29sb3JzLnByaW1hcnlIb3QsIHNlY29uZGFyeUNvbG9yOiBnZW9mbG8ub3B0aW9ucy5jb2xvcnMuc2Vjb25kYXJ5SG90IH0pO1xuXG4gICAgICAgIGZlYXR1cmUgPSBzZXRGZWF0dXJlKGlzUG9seWdvbiA/IHR1cmYubGluZVN0cmluZyhbZmlyc3RDbGljaywgbGFzdENsaWNrXSkgOiB0dXJmLnBvaW50KGxhc3RDbGljaykpO1xuICAgICAgICBnZW9mbG8uc25hcEZlYXR1cmUgPSBmZWF0dXJlO1xuICAgICAgICByZXR1cm4gZ2VvZmxvLnNuYXBGZWF0dXJlO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uU25hcHBpbmdcblx0ICogQG5hbWUgc2V0VmVydGV4XG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGRldGVybWluZXMgdGhlIHZlcnRleCBiYXNlZCBvbiBzbmFwcGluZyBhbmQgcm91dGluZyBzZXR0aW5ncy4gSXQgc2V0cyB0aGUgY2xvc2VzdCBmZWF0dXJlIHdoZW4gc25hcHBpbmcgaXMgZW5hYmxlZCBhbmQgY2FsY3VsYXRlcyB0aGUgcm91dGUgaWYgcm91dGluZyBpcyBlbmFibGVkLiBJdCB1cGRhdGVzIHRoZSBtYXAgc291cmNlcyBhY2NvcmRpbmdseSBhbmQgdHJpZ2dlcnMgZXZlbnRzIHJlbGF0ZWQgdG8gdmVydGV4IGRyYWdnaW5nIGFuZCBzbmFwcGluZy5cblx0ICogQHBhcmFtIHtPYmplY3R9IGdlb2ZsbyAtIFRoZSBjb250ZXh0IG9iamVjdCBjb250YWluaW5nIHZhcmlvdXMgc2V0dGluZ3MgYW5kIGRhdGEuXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGZhbHNlIGlmIHNuYXBwaW5nIGlzIGRpc2FibGVkIG9yIG5vIHNuYXBwZWQgdmVydGV4IGlzIGF2YWlsYWJsZS5cblx0ICovXG4gICAgdGhpcy5zZXRWZXJ0ZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzbmFwVG9GZWF0dXJlID0gZ2VvZmxvLlNuYXBwaW5nLmVuYWJsZWQ7XG4gICAgICAgIGlmIChnZW9mbG8uYnlwYXNzU25hcHBpbmcpIHNuYXBUb0ZlYXR1cmUgPSBmYWxzZTtcblxuICAgICAgICB2YXIgY2FsY3VsYXRlUm91dGUgPSBnZW9mbG8uUm91dGluZy5lbmFibGVkO1xuICAgICAgICBpZiAoZ2VvZmxvLmJ5cGFzc1JvdXRpbmcpIGNhbGN1bGF0ZVJvdXRlID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKCFzbmFwVG9GZWF0dXJlIHx8ICFnZW9mbG8uc25hcHBlZFZlcnRleCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGdlb2Zsby5zbmFwRmVhdHVyZSA9IHRoaXMuc2V0Q2xvc2VzdChnZW9mbG8uc25hcHBlZFZlcnRleCwgdHJ1ZSwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKGNhbGN1bGF0ZVJvdXRlKSBnZW9mbG8uc25hcEZlYXR1cmUgPSBnZW9mbG8uUm91dGluZy5nZXRDbG9zZXN0KCkgfHwgZ2VvZmxvLnNuYXBGZWF0dXJlO1xuICAgICAgICBpZiAoIWdlb2Zsby5zbmFwRmVhdHVyZSkgcmV0dXJuIGdlb2Zsby5tYXAuZ2V0U291cmNlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLlNOQVApLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXSkpO1xuXG4gICAgICAgIGdlb2Zsby5VdGlsaXRpZXMuc2V0UHJvcGVydHkoZ2VvZmxvLnNuYXBGZWF0dXJlLCAndHlwZScsIGdlb2Zsby5jdXJyZW50TW9kZS50eXBlKTtcbiAgICAgICAgZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXNbY2FsY3VsYXRlUm91dGUgPyAnUk9VVEUnIDogJ1NOQVAnXSkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtnZW9mbG8uc25hcEZlYXR1cmVdKSk7XG5cbiAgICAgICAgZ2VvZmxvLmhvdEZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbZ2VvZmxvLmRyYWdJbmRleF0gPSBnZW9mbG8uc25hcEZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgICAgIGdlb2Zsby5tYXAuZ2V0U291cmNlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLkhPVCkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtnZW9mbG8uaG90RmVhdHVyZV0pKTtcbiAgICAgICAgZ2VvZmxvLmZpcmUoJ3ZlcnRleC5kcmFnc25hcCcsIHsgZmVhdHVyZTogZ2VvZmxvLmhvdEZlYXR1cmUsIHZlcnRleDogdHVyZi5wb2ludChnZW9mbG8uc25hcHBlZFZlcnRleCkgfSk7XG4gICAgfVxuXG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlNuYXBwaW5nXG5cdCAqIEBuYW1lIGFkZEZlYXR1cmVcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gYWRkcyBhIGZlYXR1cmUgdG8gdGhlIG1hcCBieSBzZXR0aW5nIHRoZSBkYXRhIG9mIHRoZSBzcGVjaWZpZWQgc291cmNlIHdpdGggdGhlIHByb3ZpZGVkIGZlYXR1cmUuIEl0IGFsc28gdXBkYXRlcyB0aGUgcHJvcGVydGllcyBvZiB0aGUgZmVhdHVyZSBpZiBwcm9wZXJ0aWVzIGFyZSBwcm92aWRlZC5cblx0ICogQHBhcmFtIHtPYmplY3R9IGZlYXR1cmUgLSBUaGUgZmVhdHVyZSB0byBiZSBhZGRlZCB0byB0aGUgbWFwLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXM9e31dIC0gQWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRvIGJlIGFzc2lnbmVkIHRvIHRoZSBmZWF0dXJlLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtkb250QWRkXSAtIEZsYWcgdG8gcHJldmVudCBhZGRpbmcgdGhlIGZlYXR1cmUgaWYgc2V0IHRvIHRydWUuXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGZhbHNlIGlmIHRoZSBmZWF0dXJlIGlzIG5vdCBwcm92aWRlZCBvciBpZiBkb250QWRkIGZsYWcgaXMgc2V0LlxuXHQgKi9cbiAgICB0aGlzLmFkZEZlYXR1cmUgPSBmdW5jdGlvbiAoZmVhdHVyZSwgcHJvcGVydGllcz17fSwgZG9udEFkZCkge1xuICAgICAgICBnZW9mbG8ubWFwLmdldFNvdXJjZShnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlc1snU05BUCddKS5zZXREYXRhKHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW10pKTtcbiAgICAgICAgZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXNbJ1JPVVRFJ10pLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXSkpO1xuICAgICAgICBpZiAoIWZlYXR1cmUgfHwgZG9udEFkZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAocHJvcGVydGllcykgZmVhdHVyZS5wcm9wZXJ0aWVzID0gZ2VvZmxvLlV0aWxpdGllcy5hc3NpZ25EZWVwKGdlb2Zsby5VdGlsaXRpZXMuY2xvbmVEZWVwKHByb3BlcnRpZXMpLCBmZWF0dXJlLnByb3BlcnRpZXMpO1xuICAgICAgICBnZW9mbG8uc25hcEZlYXR1cmUgPSBmZWF0dXJlO1xuICAgICAgICBnZW9mbG8ubWFwLmdldFNvdXJjZShnZW9mbG8uc3RhdGljcy5jb25zdGFudHMuc291cmNlc1tmZWF0dXJlLnByb3BlcnRpZXMucm91dGluZyA/ICdST1VURScgOiAnU05BUCddKS5zZXREYXRhKHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW2dlb2Zsby5zbmFwRmVhdHVyZV0pKTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlNuYXBwaW5nXG5cdCAqIEBuYW1lIHVwZGF0ZUZlYXR1cmVcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gdXBkYXRlcyBhIGZlYXR1cmUgYmFzZWQgb24gdGhlIGV2ZW50IGNvb3JkaW5hdGVzIHByb3ZpZGVkLiBJdCBkZXRlcm1pbmVzIHRoZSB0eXBlIG9mIGZlYXR1cmUsIGNhbGN1bGF0ZXMgdGhlIG5lY2Vzc2FyeSBjb29yZGluYXRlcywgY3JlYXRlcyBhIGxpbmUgZmVhdHVyZSB3aXRoIGhpbnQgcHJvcGVydGllcywgYW5kIGNvbnZlcnRzIHVuaXRzIGlmIG5lZWRlZC5cblx0ICogQHBhcmFtIHtBcnJheX0gZXZ0Q29vcmRzIC0gVGhlIGV2ZW50IGNvb3JkaW5hdGVzIHRvIHVwZGF0ZSB0aGUgZmVhdHVyZS5cblx0ICogQHJldHVybnMge09iamVjdH0gVGhlIHVwZGF0ZWQgZmVhdHVyZSBiYXNlZCBvbiB0aGUgZXZlbnQgY29vcmRpbmF0ZXMuXG5cdCAqL1xuICAgIHRoaXMudXBkYXRlRmVhdHVyZSA9IGZ1bmN0aW9uIChldnRDb29yZHMpIHtcbiAgICAgICAgZ2VvZmxvLmNsb3Nlc3RQb2ludCA9IG51bGw7XG4gICAgICAgIGlmICghZ2VvZmxvLmxhc3RDbGljaykgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICghZ2VvZmxvLmZpcnN0Q2xpY2sgfHwgZ2VvZmxvLm1vdXNlSXNEb3duKSByZXR1cm4gbnVsbDtcbiAgICBcbiAgICAgICAgdmFyIHR5cGUgPSBnZW9mbG8uRmVhdHVyZXMuZ2V0VHlwZShnZW9mbG8uaG90RmVhdHVyZSkgfHwgZ2VvZmxvLmN1cnJlbnRNb2RlLnR5cGU7XG4gICAgICAgIHZhciBjb29yZHMgPSBnZW9mbG8uaG90RmVhdHVyZSA/IGdlb2Zsby5VdGlsaXRpZXMuZ2V0TGFzdEluZGV4Q29vcmRzKGdlb2Zsby5ob3RGZWF0dXJlKSA6IGdlb2Zsby5sYXN0Q2xpY2suY29vcmRzO1xuICAgICAgICB2YXIgdmVydGV4ID0gdHVyZi5wb2ludChldnRDb29yZHMpO1xuICAgICAgICB2YXIgaGludENvb3JkcyA9IHR5cGUgJiYgdHlwZSA9PT0gXCJQb2x5Z29uXCIgJiYgZ2VvZmxvLmhvdEZlYXR1cmUgPyBbY29vcmRzLCBldnRDb29yZHMsIGdlb2Zsby5maXJzdENsaWNrLmNvb3Jkc10gOiBbY29vcmRzLCBldnRDb29yZHNdO1xuICAgICAgICB2YXIgZmVhdHVyZSA9IHR1cmYubGluZVN0cmluZyhoaW50Q29vcmRzKTtcblxuICAgICAgICBmZWF0dXJlLnByb3BlcnRpZXMudHlwZSA9IHR5cGU7XG4gICAgICAgIGZlYXR1cmUucHJvcGVydGllcy5oaW50ID0gdHJ1ZTtcbiAgICAgICAgZmVhdHVyZS5wcm9wZXJ0aWVzLnN0eWxlID0ge1xuICAgICAgICAgICAgcHJpbWFyeUNvbG9yOiBnZW9mbG8ub3B0aW9ucy5jb2xvcnMucHJpbWFyeVNuYXAsXG4gICAgICAgICAgICBzZWNvbmRhcnlDb2xvcjogZ2VvZmxvLm9wdGlvbnMuY29sb3JzLnNlY29uZGFyeVNuYXBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIHVuaXQgPSAnZmVldCc7XG4gICAgICAgIHZhciB1bml0cyA9IGdlb2Zsby5GZWF0dXJlcy5nZXRVbml0cyhmZWF0dXJlKTtcblxuICAgICAgICB1bml0cyA9IGdlb2Zsby5GZWF0dXJlcy5jb252ZXJ0VW5pdHMoZmVhdHVyZSwgdW5pdHMsIHVuaXQpO1xuICAgICAgICB2ZXJ0ZXggPSB1cGRhdGVWZXJ0ZXgodmVydGV4LCB7IHVuaXRzOiB1bml0cywgdW5pdDogdW5pdCB9KTtcbiAgICAgICAgcmV0dXJuIGZlYXR1cmU7XG4gICAgfVxuXG5cblxuXG4gICAgaWYgKGdlb2Zsby5vcHRpb25zWydzbmFwcGluZyddLmVuYWJsZSkgdGhpcy5hY3RpdmF0ZSgpO1xuXG5cblxuXG4gICAgZnVuY3Rpb24gY2hlYXBSdWxlciAobGF0LCB1bml0cykge1xuICAgICAgICBmdW5jdGlvbiBjaGVhcHJ1bGVyKGxhdCwgdW5pdHMpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ2hlYXBSdWxlcihsYXQsdW5pdHMpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjaGVhcHJ1bGVyLmZyb21UaWxlID0gZnVuY3Rpb24oeSwgeiwgdW5pdHMpIHtcbiAgICAgICAgICAgIHZhciBuID0gTWF0aC5QSSAqICgxIC0gMiAqICh5ICsgMC41KSAvIE1hdGgucG93KDIsIHopKTtcbiAgICAgICAgICAgIHZhciBsYXQgPSBNYXRoLmF0YW4oMC41ICogKE1hdGguZXhwKG4pIC0gTWF0aC5leHAoLW4pKSkgKiAxODAgLyBNYXRoLlBJO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBDaGVhcFJ1bGVyKGxhdCx1bml0cyk7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBjaGVhcHJ1bGVyLnVuaXRzID0ge1xuICAgICAgICAgICAga2lsb21ldGVyczogMSxcbiAgICAgICAgICAgIG1pbGVzOiAxMDAwIC8gMTYwOS4zNDQsXG4gICAgICAgICAgICBuYXV0aWNhbG1pbGVzOiAxMDAwIC8gMTg1MixcbiAgICAgICAgICAgIG1ldGVyczogMTAwMCxcbiAgICAgICAgICAgIG1ldHJlczogMTAwMCxcbiAgICAgICAgICAgIHlhcmRzOiAxMDAwIC8gMC45MTQ0LFxuICAgICAgICAgICAgZmVldDogMTAwMCAvIDAuMzA0OCxcbiAgICAgICAgICAgIGluY2hlczogMTAwMCAvIDAuMDI1NFxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgZnVuY3Rpb24gQ2hlYXBSdWxlcihsYXQsIHVuaXRzKSB7XG4gICAgICAgICAgICB2YXIgZmFjdG9ycyA9IHtcbiAgICAgICAgICAgICAgICBraWxvbWV0ZXJzOiAxLFxuICAgICAgICAgICAgICAgIG1pbGVzOiAxMDAwIC8gMTYwOS4zNDQsXG4gICAgICAgICAgICAgICAgbmF1dGljYWxtaWxlczogMTAwMCAvIDE4NTIsXG4gICAgICAgICAgICAgICAgbWV0ZXJzOiAxMDAwLFxuICAgICAgICAgICAgICAgIG1ldHJlczogMTAwMCxcbiAgICAgICAgICAgICAgICB5YXJkczogMTAwMCAvIDAuOTE0NCxcbiAgICAgICAgICAgICAgICBmZWV0OiAxMDAwIC8gMC4zMDQ4LFxuICAgICAgICAgICAgICAgIGluY2hlczogMTAwMCAvIDAuMDI1NFxuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIGlmIChsYXQgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGxhdGl0dWRlIGdpdmVuLicpO1xuICAgICAgICAgICAgaWYgKHVuaXRzICYmICFmYWN0b3JzW3VuaXRzXSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdW5pdCAnICsgdW5pdHMgKyAnLiBVc2Ugb25lIG9mOiAnICsgT2JqZWN0LmtleXMoZmFjdG9ycykpO1xuICAgICAgICBcbiAgICAgICAgICAgIHZhciBtID0gdW5pdHMgPyBmYWN0b3JzW3VuaXRzXSA6IDE7XG4gICAgICAgIFxuICAgICAgICAgICAgdmFyIGNvcyA9IE1hdGguY29zKGxhdCAqIE1hdGguUEkgLyAxODApO1xuICAgICAgICAgICAgdmFyIGNvczIgPSAyICogY29zICogY29zIC0gMTtcbiAgICAgICAgICAgIHZhciBjb3MzID0gMiAqIGNvcyAqIGNvczIgLSBjb3M7XG4gICAgICAgICAgICB2YXIgY29zNCA9IDIgKiBjb3MgKiBjb3MzIC0gY29zMjtcbiAgICAgICAgICAgIHZhciBjb3M1ID0gMiAqIGNvcyAqIGNvczQgLSBjb3MzO1xuICAgICAgICBcbiAgICAgICAgICAgIHRoaXMua3ggPSBtICogKDExMS40MTUxMyAqIGNvcyAtIDAuMDk0NTUgKiBjb3MzICsgMC4wMDAxMiAqIGNvczUpO1xuICAgICAgICAgICAgdGhpcy5reSA9IG0gKiAoMTExLjEzMjA5IC0gMC41NjYwNSAqIGNvczIgKyAwLjAwMTIgKiBjb3M0KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgQ2hlYXBSdWxlci5wcm90b3R5cGUgPSB7XG4gICAgICAgICAgICBlcXVhbHM6IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFbMF0gPT09IGJbMF0gJiYgYVsxXSA9PT0gYlsxXTtcbiAgICAgICAgICAgIH0sXG4gICAgICBcbiAgICAgICAgICAgIGludGVycG9sYXRlOiBmdW5jdGlvbiAoYSwgYiwgdCkge1xuICAgICAgICAgICAgICAgIHZhciBkeCA9IGJbMF0gLSBhWzBdO1xuICAgICAgICAgICAgICAgIHZhciBkeSA9IGJbMV0gLSBhWzFdO1xuICAgICAgICAgICAgICAgIHJldHVybiBbYVswXSArIGR4ICogdCwgYVsxXSArIGR5ICogdF07XG4gICAgICAgICAgICB9LFxuICAgICAgXG4gICAgICAgICAgICBkaXN0YW5jZTogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgIHZhciBkeCA9IChhWzBdIC0gYlswXSkgKiB0aGlzLmt4O1xuICAgICAgICAgICAgICAgIHZhciBkeSA9IChhWzFdIC0gYlsxXSkgKiB0aGlzLmt5O1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgICAgICBiZWFyaW5nOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgdmFyIGR4ID0gKGJbMF0gLSBhWzBdKSAqIHRoaXMua3g7XG4gICAgICAgICAgICAgICAgdmFyIGR5ID0gKGJbMV0gLSBhWzFdKSAqIHRoaXMua3k7XG4gICAgICAgICAgICAgICAgaWYgKCFkeCAmJiAhZHkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIHZhciBiZWFyaW5nID0gTWF0aC5hdGFuMigtZHksIGR4KSAqIDE4MCAvIE1hdGguUEkgKyA5MDtcbiAgICAgICAgICAgICAgICBpZiAoYmVhcmluZyA+IDE4MClcbiAgICAgICAgICAgICAgICAgICAgYmVhcmluZyAtPSAzNjA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJlYXJpbmc7XG4gICAgICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uOiBmdW5jdGlvbihwLCBkaXN0LCBiZWFyaW5nKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSAoOTAgLSBiZWFyaW5nKSAqIE1hdGguUEkgLyAxODA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0KHAsIE1hdGguY29zKGEpICogZGlzdCwgTWF0aC5zaW4oYSkgKiBkaXN0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAgICAgb2Zmc2V0OiBmdW5jdGlvbihwLCBkeCwgZHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW3BbMF0gKyBkeCAvIHRoaXMua3gsIHBbMV0gKyBkeSAvIHRoaXMua3ldO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgICAgICBsaW5lRGlzdGFuY2U6IGZ1bmN0aW9uKHBvaW50cykge1xuICAgICAgICAgICAgICAgIHZhciB0b3RhbCA9IDA7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsICs9IHRoaXMuZGlzdGFuY2UocG9pbnRzW2ldLCBwb2ludHNbaSArIDFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRvdGFsO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgICAgICBhcmVhOiBmdW5jdGlvbihwb2x5Z29uKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1bSA9IDA7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9seWdvbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmluZyA9IHBvbHlnb25baV07XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgbGVuID0gcmluZy5sZW5ndGgsIGsgPSBsZW4gLSAxOyBqIDwgbGVuOyBrID0gaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdW0gKz0gKHJpbmdbal1bMF0gLSByaW5nW2tdWzBdKSAqIChyaW5nW2pdWzFdICsgcmluZ1trXVsxXSkgKiAoaSA/IC0xIDogMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiAoTWF0aC5hYnMoc3VtKSAvIDIpICogdGhpcy5reCAqIHRoaXMua3k7XG4gICAgICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgICAgIGFsb25nOiBmdW5jdGlvbihsaW5lLCBkaXN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1bSA9IDA7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChkaXN0IDw9IDApXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsaW5lWzBdO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmUubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwMCA9IGxpbmVbaV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBwMSA9IGxpbmVbaSArIDFdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IHRoaXMuZGlzdGFuY2UocDAsIHAxKTtcbiAgICAgICAgICAgICAgICAgICAgc3VtICs9IGQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdW0gPiBkaXN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJwb2xhdGUocDAsIHAxLCAoZGlzdCAtIChzdW0gLSBkKSkgLyBkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBsaW5lW2xpbmUubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgICAgIHBvaW50T25MaW5lOiBmdW5jdGlvbihsaW5lLCBwKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1pbkRpc3QgPSBJbmZpbml0eTtcbiAgICAgICAgICAgICAgICB2YXIgbWluWCwgbWluWSwgbWluSSwgbWluVDtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBsaW5lW2ldWzBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IGxpbmVbaV1bMV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBkeCA9IChsaW5lW2kgKyAxXVswXSAtIHgpICogdGhpcy5reDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGR5ID0gKGxpbmVbaSArIDFdWzFdIC0geSkgKiB0aGlzLmt5O1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGR4ICE9PSAwIHx8IGR5ICE9PSAwKSB7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSAoKHBbMF0gLSB4KSAqIHRoaXMua3ggKiBkeCArIChwWzFdIC0geSkgKiB0aGlzLmt5ICogZHkpIC8gKGR4ICogZHggKyBkeSAqIGR5KTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gbGluZVtpICsgMV1bMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IGxpbmVbaSArIDFdWzFdO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ICs9IChkeCAvIHRoaXMua3gpICogdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ICs9IChkeSAvIHRoaXMua3kpICogdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgZHggPSAocFswXSAtIHgpICogdGhpcy5reDtcbiAgICAgICAgICAgICAgICAgICAgZHkgPSAocFsxXSAtIHkpICogdGhpcy5reTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBzcURpc3QgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNxRGlzdCA8IG1pbkRpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbkRpc3QgPSBzcURpc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5YID0geDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pblkgPSB5O1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluSSA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5UID0gdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcG9pbnQ6IFttaW5YLCBtaW5ZXSxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IG1pbkksXG4gICAgICAgICAgICAgICAgICAgIHQ6IG1pblRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgICAgICBsaW5lU2xpY2U6IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBsaW5lKSB7XG4gICAgICAgICAgICAgICAgdmFyIHAxID0gdGhpcy5wb2ludE9uTGluZShsaW5lLCBzdGFydCk7XG4gICAgICAgICAgICAgICAgdmFyIHAyID0gdGhpcy5wb2ludE9uTGluZShsaW5lLCBzdG9wKTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHAxLmluZGV4ID4gcDIuaW5kZXggfHwgKHAxLmluZGV4ID09PSBwMi5pbmRleCAmJiBwMS50ID4gcDIudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRtcCA9IHAxO1xuICAgICAgICAgICAgICAgICAgICBwMSA9IHAyO1xuICAgICAgICAgICAgICAgICAgICBwMiA9IHRtcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBzbGljZSA9IFtwMS5wb2ludF07XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBsID0gcDEuaW5kZXggKyAxO1xuICAgICAgICAgICAgICAgIHZhciByID0gcDIuaW5kZXg7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5lcXVhbHMobGluZVtsXSwgc2xpY2VbMF0pICYmIGwgPD0gcilcbiAgICAgICAgICAgICAgICAgICAgc2xpY2UucHVzaChsaW5lW2xdKTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGwgKyAxOyBpIDw9IHI7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBzbGljZS5wdXNoKGxpbmVbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmVxdWFscyhsaW5lW3JdLCBwMi5wb2ludCkpXG4gICAgICAgICAgICAgICAgICAgIHNsaWNlLnB1c2gocDIucG9pbnQpO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gc2xpY2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgICAgIGxpbmVTbGljZUFsb25nOiBmdW5jdGlvbihzdGFydCwgc3RvcCwgbGluZSkge1xuICAgICAgICAgICAgICAgIHZhciBzdW0gPSAwO1xuICAgICAgICAgICAgICAgIHZhciBzbGljZSA9IFtdO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmUubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwMCA9IGxpbmVbaV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBwMSA9IGxpbmVbaSArIDFdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IHRoaXMuZGlzdGFuY2UocDAsIHAxKTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHN1bSArPSBkO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1bSA+IHN0YXJ0ICYmIHNsaWNlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2xpY2UucHVzaCh0aGlzLmludGVycG9sYXRlKHAwLCBwMSwgKHN0YXJ0IC0gKHN1bSAtIGQpKSAvIGQpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1bSA+PSBzdG9wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzbGljZS5wdXNoKHRoaXMuaW50ZXJwb2xhdGUocDAsIHAxLCAoc3RvcCAtIChzdW0gLSBkKSkgLyBkKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2xpY2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdW0gPiBzdGFydClcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWNlLnB1c2gocDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNsaWNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgICAgICBidWZmZXJQb2ludDogZnVuY3Rpb24ocCwgYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHYgPSBidWZmZXIgLyB0aGlzLmt5O1xuICAgICAgICAgICAgICAgIHZhciBoID0gYnVmZmVyIC8gdGhpcy5reDtcbiAgICAgICAgICAgICAgICByZXR1cm4gW3BbMF0gLSBoLCBwWzFdIC0gdiwgcFswXSArIGgsIHBbMV0gKyB2XTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAgICAgYnVmZmVyQkJveDogZnVuY3Rpb24oYmJveCwgYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHYgPSBidWZmZXIgLyB0aGlzLmt5O1xuICAgICAgICAgICAgICAgIHZhciBoID0gYnVmZmVyIC8gdGhpcy5reDtcbiAgICAgICAgICAgICAgICByZXR1cm4gW2Jib3hbMF0gLSBoLCBiYm94WzFdIC0gdiwgYmJveFsyXSArIGgsIGJib3hbM10gKyB2XTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAgICAgaW5zaWRlQkJveDogZnVuY3Rpb24ocCwgYmJveCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwWzBdID49IGJib3hbMF0gJiYgcFswXSA8PSBiYm94WzJdICYmIHBbMV0gPj0gYmJveFsxXSAmJiBwWzFdIDw9IGJib3hbM107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIFxuICAgICAgICByZXR1cm4gY2hlYXBydWxlcihsYXQsIHVuaXRzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaW5kQ2xvc2VzdFBvaW50ICh1bmlxdWVGZWF0dXJlcywgZXZ0Q29vcmRzLCByYWRpdXNJbkttLCBwaXhlbERpc3RhbmNlKSB7XG4gICAgICAgIGNvbnN0IGNvb3JkcyA9IGNhbGN1bGF0ZVBvaW50c09uTGluZSh1bmlxdWVGZWF0dXJlcywgZXZ0Q29vcmRzKTtcbiAgXG4gICAgICAgIGxldCBjbG9zZXN0VmVydGV4ID0gbnVsbDtcbiAgICAgICAgbGV0IGNsb3Nlc3RMaW5lcG9pbnQgPSBudWxsO1xuICAgICAgICBsZXQgYm9yZGVycztcbiAgICAgICAgbGV0IGlkID0gZ2VvZmxvLmlkIHx8ICdpZCc7XG4gIFxuICAgICAgICBjb29yZHMuZm9yRWFjaCgocG9pbnRUeXBlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkaXN0ID0gcG9pbnRUeXBlLmRpc3Q7XG4gIFxuICAgICAgICAgICAgaWYgKGRpc3QgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAocG9pbnRUeXBlLnR5cGUgPT09IFwidmVydGV4XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsb3Nlc3RWZXJ0ZXggPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3Nlc3RWZXJ0ZXggPSBwb2ludFR5cGU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGl4ZWxEaXN0YW5jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlzdCAqIDEwMDAgPCBwaXhlbERpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsb3Nlc3RWZXJ0ZXggJiYgY2xvc2VzdFZlcnRleC5saW5lRWRnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9zZXN0VmVydGV4ID0gcG9pbnRUeXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkaXN0IDw9IGNsb3Nlc3RWZXJ0ZXguZGlzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3QgPT09IGNsb3Nlc3RWZXJ0ZXguZGlzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbG9zZXN0VmVydGV4LmxpbmVFZGdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3Nlc3RWZXJ0ZXggPSBwb2ludFR5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9zZXN0VmVydGV4ID0gcG9pbnRUeXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkaXN0IDwgcmFkaXVzSW5LbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2xvc2VzdExpbmVwb2ludCAhPT0gbnVsbCAmJiBkaXN0ID09PSBjbG9zZXN0TGluZXBvaW50LmRpc3QgJiYgY2xvc2VzdExpbmVwb2ludFtpZF0gIT09IHBvaW50VHlwZVtpZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbG9zZXN0TGluZXBvaW50LnR5cGUgPT09IFwibGluZXBvaW50XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHBvaW50VHlwZS5kaXN0YW5jZTEgPD0gY2xvc2VzdExpbmVwb2ludC5kaXN0YW5jZTEgJiYgcG9pbnRUeXBlLmRpc3RhbmNlMiA8PSBjbG9zZXN0TGluZXBvaW50LmRpc3RhbmNlMikgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHBvaW50VHlwZS5kaXN0YW5jZTIgPD0gY2xvc2VzdExpbmVwb2ludC5kaXN0YW5jZTEgJiYgcG9pbnRUeXBlLmRpc3RhbmNlMSA8PSBjbG9zZXN0TGluZXBvaW50LmRpc3RhbmNlMikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJzd2l0Y2ggY2xvc2VzdCBwb2ludHNcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3Nlc3RMaW5lcG9pbnQgPSBwb2ludFR5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gIFxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xvc2VzdExpbmVwb2ludCA9PT0gbnVsbCB8fCBkaXN0IDwgY2xvc2VzdExpbmVwb2ludC5kaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zZXN0TGluZXBvaW50ID0gcG9pbnRUeXBlO1xuICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb2ludFR5cGUuYm9yZGVyMSAmJiBwb2ludFR5cGUuYm9yZGVyMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjE6IHBvaW50VHlwZS5ib3JkZXIxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXIyOiBwb2ludFR5cGUuYm9yZGVyMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UxOiBwb2ludFR5cGUuZGlzdGFuY2UxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZTI6IHBvaW50VHlwZS5kaXN0YW5jZTJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gIFxuICAgICAgICBpZiAoY2xvc2VzdFZlcnRleCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGNsb3Nlc3RMaW5lcG9pbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2xvc2VzdFZlcnRleC5kaXN0IDwgcmFkaXVzSW5LbSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7IGJvcmRlcnM6IG51bGwgfSwgY2xvc2VzdFZlcnRleCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyBib3JkZXJzOiBib3JkZXJzIH0sIGNsb3Nlc3RMaW5lcG9pbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyBib3JkZXJzOiBudWxsIH0sIGNsb3Nlc3RWZXJ0ZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGNsb3Nlc3RMaW5lcG9pbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHsgYm9yZGVyczogYm9yZGVycyB9LCBjbG9zZXN0TGluZXBvaW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvc2VzdFBvaW50cyAocnVsZXIsIGNvb3JkaW5hdGVzLCBldnRDb29yZHMpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGNvbnN0IHBvaW50T25MaW5lID0gcnVsZXIucG9pbnRPbkxpbmUoY29vcmRpbmF0ZXMsIGV2dENvb3Jkcyk7XG4gICAgICAgIGNvbnN0IHBvaW50Q29vcmRzID0gcG9pbnRPbkxpbmUucG9pbnQ7XG4gICAgICAgIGNvbnN0IHBvaW50SW5kZXggPSBwb2ludE9uTGluZS5pbmRleDtcbiAgICAgICAgY29uc3QgbGluZVBvaW50ID0geyB0eXBlOiBcImxpbmVwb2ludFwiLCBjb29yZHM6IHBvaW50Q29vcmRzIH07XG4gICAgICAgIGNvbnN0IHAxID0gY29vcmRpbmF0ZXNbcG9pbnRJbmRleF07XG4gICAgICAgIGNvbnN0IHAyID0gY29vcmRpbmF0ZXNbcG9pbnRJbmRleCArIDFdO1xuICAgICAgICBjb25zdCBkaXN0YW5jZTEgPSBydWxlci5kaXN0YW5jZShwMSwgZXZ0Q29vcmRzKTtcbiAgICAgICAgY29uc3QgZGlzdGFuY2UyID0gcnVsZXIuZGlzdGFuY2UocDIsIGV2dENvb3Jkcyk7XG5cbiAgICAgICAgbGV0IGxpbmVFZGdlID0gZmFsc2U7XG4gICAgICAgIGxldCB2ZXJ0ZXggPSBudWxsO1xuICAgIFxuICAgICAgICBpZiAoZGlzdGFuY2UxIDwgZGlzdGFuY2UyKSB7XG4gICAgICAgICAgICBsaW5lRWRnZSA9IHBvaW50SW5kZXggPT09IDA7XG4gICAgICAgICAgICB2ZXJ0ZXggPSBwMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpbmVFZGdlID0gcG9pbnRJbmRleCArIDEgPT09IGNvb3JkaW5hdGVzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB2ZXJ0ZXggPSBwMjtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBsaW5lUG9pbnQuYm9yZGVyMSA9IHAxO1xuICAgICAgICBsaW5lUG9pbnQuZGlzdGFuY2UxID0gZGlzdGFuY2UxO1xuICAgICAgICBsaW5lUG9pbnQuYm9yZGVyMiA9IHAyO1xuICAgICAgICBsaW5lUG9pbnQuZGlzdGFuY2UyID0gZGlzdGFuY2UyO1xuICAgIFxuICAgICAgICByZXN1bHQucHVzaChsaW5lUG9pbnQpO1xuICAgICAgICByZXN1bHQucHVzaCh7IHR5cGU6IFwidmVydGV4XCIsIGNvb3JkczogdmVydGV4LCBsaW5lRWRnZTogbGluZUVkZ2UgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlUG9pbnRzT25MaW5lICh1bmlxdWVGZWF0dXJlcywgZXZ0Q29vcmRzKSB7XG4gICAgICAgIGNvbnN0IGNvb3JkcyA9IFtdO1xuICAgICAgICBjb25zdCBrbm93bklkcyA9IHt9O1xuICAgICAgICBjb25zdCBydWxlciA9IGNoZWFwUnVsZXIoZXZ0Q29vcmRzWzFdKTtcbiAgICBcbiAgICAgICAgdW5pcXVlRmVhdHVyZXMuZm9yRWFjaCgoZmVhdHVyZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaWQgPSBmZWF0dXJlLmlkIHx8IGZlYXR1cmUucHJvcGVydGllcy5pZDtcbiAgICAgICAgICAgIHZhciBjbG9zZXN0ID0gW107XG4gICAgXG4gICAgICAgICAgICBpZiAoa25vd25JZHNbaWRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBrbm93bklkc1tpZF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBmZWF0dXJlLmdlb21ldHJ5LnR5cGU7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IFwiTGluZVN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zZXN0ID0gY2xvc2VzdFBvaW50cyhydWxlciwgZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcywgZXZ0Q29vcmRzKTtcbiAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zZXN0LmZvckVhY2goKHBvaW50VHlwZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50VHlwZS5pZCA9IGlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50VHlwZS5kaXN0ID0gcnVsZXIuZGlzdGFuY2UocG9pbnRUeXBlLmNvb3JkcywgZXZ0Q29vcmRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZHMucHVzaChwb2ludFR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIm5vIGNvb3JkaW5hdGVzOiBcIiwgZmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiUG9pbnRcIikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwb2ludFR5cGUgPSB7IGlkOiBpZCwgdHlwZTogXCJ2ZXJ0ZXhcIiwgY29vcmRzOiBmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzLCBsaW5lRWRnZTogdHJ1ZSB9O1xuICAgICAgICAgICAgICAgICAgICBwb2ludFR5cGUuZGlzdCA9IHJ1bGVyLmRpc3RhbmNlKHBvaW50VHlwZS5jb29yZHMsIGV2dENvb3Jkcyk7XG4gICAgICAgICAgICAgICAgICAgIGNvb3Jkcy5wdXNoKHBvaW50VHlwZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBcIlBvbHlnb25cIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHVyZi5ib29sZWFuV2l0aGluKHR1cmYucG9pbnQoZXZ0Q29vcmRzKSwgZmVhdHVyZSkpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXMuZm9yRWFjaCgoZmVhdHVyZUNvb3JkcywgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3Nlc3QgPSBjbG9zZXN0UG9pbnRzKHJ1bGVyLCBmZWF0dXJlQ29vcmRzLCBldnRDb29yZHMpO1xuICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3Nlc3QuZm9yRWFjaCgocG9pbnRUeXBlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRUeXBlLmlkID0gaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRUeXBlLnBvbHlnb25Db29yZHNBcnJheSA9IGluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50VHlwZS5kaXN0ID0gcnVsZXIuZGlzdGFuY2UocG9pbnRUeXBlLmNvb3JkcywgZXZ0Q29vcmRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZHMucHVzaChwb2ludFR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgXG4gICAgICAgIHJldHVybiBjb29yZHM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkVmVydGV4IChzdGFydFBvaW50LCBlbmRQb2ludCwgbGVuZ3RoLCBkYXRhKSB7XG4gICAgICAgIHZhciBzdGFydERhdGEgPSBkYXRhW3N0YXJ0UG9pbnRdO1xuICAgIFxuICAgICAgICBpZiAoIXN0YXJ0RGF0YSkge1xuICAgICAgICAgICAgc3RhcnREYXRhID0ge307XG4gICAgICAgICAgICBkYXRhW3N0YXJ0UG9pbnRdID0gc3RhcnREYXRhO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGlmICghc3RhcnREYXRhW2VuZFBvaW50XSkge1xuICAgICAgICAgICAgc3RhcnREYXRhW2VuZFBvaW50XSA9IGxlbmd0aDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFZlcnRleFBvaW50VHdvV2F5IChzdGFydENvb3JkLCBlbmRDb29yZHMsIGxlbmd0aCwgZGF0YSkge1xuICAgICAgICB2YXIgc3RhcnRQb2ludCA9IHN0YXJ0Q29vcmQuam9pbihcIiNcIik7XG4gICAgICAgIHZhciBlbmRQb2ludCA9IGVuZENvb3Jkcy5qb2luKFwiI1wiKTtcbiAgICAgICAgYWRkVmVydGV4KHN0YXJ0UG9pbnQsIGVuZFBvaW50LCBsZW5ndGgsIGRhdGEpO1xuICAgICAgICBhZGRWZXJ0ZXgoZW5kUG9pbnQsIHN0YXJ0UG9pbnQsIGxlbmd0aCwgZGF0YSk7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIG1ldGVyc1BlclBpeGVsIChsYXRpdHVkZSwgem9vbUxldmVsKSB7XG4gICAgICAgIHJldHVybiAoKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5DSVJDVU0gKiBNYXRoLmNvcygobGF0aXR1ZGUgKiAoTWF0aC5QSSAvIDE4MCkpKSkgLyBNYXRoLnBvdygyLCB6b29tTGV2ZWwgKyA4KSk7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIHNldEZlYXR1cmUgKGZlYXR1cmUpIHtcbiAgICAgICAgaWYgKCFmZWF0dXJlKSByZXR1cm4gZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuU05BUCkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtdKSksIGdlb2Zsby5zbmFwRmVhdHVyZTtcbiAgICAgICAgZ2VvZmxvLlV0aWxpdGllcy5zZXRQcm9wZXJ0eShmZWF0dXJlLCAndHlwZScsIGdlb2Zsby5jdXJyZW50TW9kZS50eXBlKTtcbiAgICAgICAgZ2VvZmxvLlV0aWxpdGllcy5zZXRQcm9wZXJ0eShmZWF0dXJlLCAnc3R5bGUnLCB7IHByaW1hcnlDb2xvcjogZ2VvZmxvLm9wdGlvbnMuY29sb3JzLnByaW1hcnlTbmFwLCBzZWNvbmRhcnlDb2xvcjogZ2VvZmxvLm9wdGlvbnMuY29sb3JzLnNlY29uZGFyeVNuYXAgfSk7XG4gICAgICAgIGdlb2Zsby5tYXAuZ2V0U291cmNlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLlNOQVApLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbZmVhdHVyZV0pKTtcbiAgICAgICAgcmV0dXJuIGZlYXR1cmU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlVmVydGV4ICh2ZXJ0ZXgsIG9wdGlvbnM9e30pIHtcbiAgICAgICAgdmFyIGZlYXR1cmVzID0gZ2VvZmxvLm1hcC5nZXRTb3VyY2UoZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuSE9UVEVYVCkuX2RhdGEuZmVhdHVyZXM7XG4gICAgICAgIGlmIChmZWF0dXJlcy5sZW5ndGggJiYgZmVhdHVyZXNbZmVhdHVyZXMubGVuZ3RoIC0gMV0ucHJvcGVydGllcy5tb3VzZUxpbmUpIGZlYXR1cmVzLnBvcCgpO1xuXG4gICAgICAgIHZlcnRleC5wcm9wZXJ0aWVzLnVuaXRzID0gb3B0aW9ucy51bml0cztcbiAgICAgICAgdmVydGV4LnByb3BlcnRpZXMudW5pdCA9IG9wdGlvbnMudW5pdDtcbiAgICAgICAgdmVydGV4LnByb3BlcnRpZXMudGV4dCA9IGAke29wdGlvbnMudW5pdHN9ICR7b3B0aW9ucy51bml0fWA7XG4gICAgICAgIHZlcnRleC5wcm9wZXJ0aWVzLnRyYW5zZm9ybSA9ICd1cHBlcmNhc2UnO1xuICAgICAgICB2ZXJ0ZXgucHJvcGVydGllcy5hbmNob3IgPSAnYm90dG9tLWxlZnQnO1xuICAgICAgICB2ZXJ0ZXgucHJvcGVydGllcy5tb3VzZUxpbmUgPSB0cnVlO1xuICAgIFxuICAgICAgICBmZWF0dXJlcy5wdXNoKHZlcnRleCk7XG4gICAgICAgIGdlb2Zsby5tYXAuZ2V0U291cmNlKGdlb2Zsby5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLkhPVFRFWFQpLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihmZWF0dXJlcykpO1xuICAgICAgICByZXR1cm4gdmVydGV4O1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNuYXBwaW5nOyIsImNvbnN0IERldiA9ICdzb2x1dGVncmF0ZSc7XG5jb25zdCBJZCA9ICdnZW9mbG8nO1xuXG5jb25zdCBTdGF0aWNzID0ge1xuICAgIGRldmVsb3BlcjogRGV2LFxuICAgIGlkOiBJZCxcbiAgICBsb2dvOiB7XG4gICAgICAgIGZ1bGw6IGBodHRwczovLyR7SWR9LnMzLmFtYXpvbmF3cy5jb20vbG9nb3MvbG9nb19mdWxsX3doaXRlLnBuZ2AsXG4gICAgICAgIGljb246IGBodHRwczovLyR7SWR9LnMzLmFtYXpvbmF3cy5jb20vbG9nb3MvbG9nb19pY29uX3doaXRlLnN2Z2AsXG4gICAgICAgIGZ1bGxDbGFzczogSWQgKyAnLWxvZ28nLFxuICAgICAgICBpY29uQ2xhc3M6IElkICsgJy1pY29uJ1xuICAgIH0sXG4gICAgY29udHJvbHM6IFtcbiAgICAgICAgLy8gVE9QIC8vXG4gICAgICAgIFt7XG4gICAgICAgICAgICB0eXBlOiAndXRpbHMnLFxuICAgICAgICAgICAgZW5hYmxlOiB0cnVlLFxuICAgICAgICAgICAgcG9zaXRpb246ICd0b3AtY2VudGVyJyxcbiAgICAgICAgICAgIGdyb3VwOiAnYWN0aW9uJyxcbiAgICAgICAgICAgIGRpdmlkZXI6IHRydWUsXG4gICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgYnV0dG9uczoge1xuICAgICAgICAgICAgICAgIHpvb206IHRydWUsXG4gICAgICAgICAgICAgICAgcmVmcmVzaDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBsb2NhdGU6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogJ21vZGVzJyxcbiAgICAgICAgICAgIGVuYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGdyb3VwOiAnY29udHJvbCcsXG4gICAgICAgICAgICBkaXZpZGVyOiB0cnVlLFxuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgICAgICAgICBzZWxlY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgZWRpdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzYXZlOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHR5cGU6ICdvcHRpb25zJyxcbiAgICAgICAgICAgIGVuYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGdyb3VwOiAnYWN0aW9uJyxcbiAgICAgICAgICAgIGRpdmlkZXI6IGZhbHNlLFxuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgICAgICAgICBpbXBvcnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgZXhwb3J0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGNsZWFyOiB0cnVlLFxuICAgICAgICAgICAgICAgIHVuZG86IHRydWUsXG4gICAgICAgICAgICAgICAgcmVkbzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjYW5jZWw6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfV0sXG5cbiAgICAgICAgLy8gQk9UVE9NIC8vXG4gICAgICAgIFt7XG4gICAgICAgICAgICB0eXBlOiAndHlwZXMnLFxuICAgICAgICAgICAgZW5hYmxlOiB0cnVlLFxuICAgICAgICAgICAgcG9zaXRpb246ICd0b3AtY2VudGVyJyxcbiAgICAgICAgICAgIGdyb3VwOiAnY29udHJvbCcsXG4gICAgICAgICAgICBkaXZpZGVyOiB0cnVlLFxuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgICAgICAgICBwb2x5bGluZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwb2x5Z29uOiB0cnVlLFxuICAgICAgICAgICAgICAgIHJlY3RhbmdsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjaXJjbGU6IHRydWUsXG4gICAgICAgICAgICAgICAgdGV4dDogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiAnYWN0aW9ucycsXG4gICAgICAgICAgICBlbmFibGU6IHRydWUsXG4gICAgICAgICAgICBncm91cDogJ2NvbnRyb2wnLFxuICAgICAgICAgICAgZGl2aWRlcjogZmFsc2UsXG4gICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgYnV0dG9uczoge1xuICAgICAgICAgICAgICAgIHNuYXBwaW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBpbm5pbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgcm91dGluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBleHBsb3Jpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgcGFpbnRpbmc6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfV1cbiAgICBdLFxuICAgIGNvbnN0YW50czoge1xuICAgICAgICBjbGFzc2VzOiB7XG4gICAgICAgICAgICBQUkVERUZJTkVEX0NPTlRST0xfQkFTRTogXCJtYXBib3hnbC1jdHJsXCIsXG4gICAgICAgICAgICBQUkVERUZJTkVEX0NPTlRST0xfR1JPVVA6IFwibWFwYm94Z2wtY3RybC1ncm91cFwiLFxuICAgICAgICAgICAgQ09OVFJPTF9QUkVGSVg6IFwibWFwYm94Z2wtY3RybC1cIixcbiAgICAgICAgICAgIEFDVElPTl9CVVRUT046IElkICsgXCItYWN0aW9uLWJ0blwiLFxuICAgICAgICAgICAgQ09OVFJPTF9CVVRUT046IFwibWFwYm94LWdsLWRyYXdfY3RybC1kcmF3LWJ0blwiLFxuICAgICAgICAgICAgQ09OVFJPTF9CVVRUT05fTElORTogXCJtYXBib3gtZ2wtZHJhd19saW5lXCIsXG4gICAgICAgICAgICBDT05UUk9MX0JVVFRPTl9QT0xZR09OOiBcIm1hcGJveC1nbC1kcmF3X3BvbHlnb25cIixcbiAgICAgICAgICAgIENPTlRST0xfQlVUVE9OX1JFQ1RBTkdMRTogXCJtYXBib3gtZ2wtZHJhd19yZWN0YW5nbGVcIixcbiAgICAgICAgICAgIENPTlRST0xfQlVUVE9OX1BPSU5UOiBcIm1hcGJveC1nbC1kcmF3X3BvaW50XCIsXG4gICAgICAgICAgICBDT05UUk9MX0JVVFRPTl9URVhUOiBcIm1hcGJveC1nbC1kcmF3X3RleHRcIixcbiAgICAgICAgICAgIENPTlRST0xfQlVUVE9OX0lDT046IFwibWFwYm94LWdsLWRyYXdfaWNvblwiLFxuICAgICAgICAgICAgQ09OVFJPTF9CVVRUT05fQ0xFQVI6IElkICsgXCItZGVsZXRlLWRhdGFcIixcbiAgICAgICAgICAgIENPTlRST0xfQlVUVE9OX0RFTEVURV9TTkFQOiBJZCArIFwiLWRlbGV0ZS1zbmFwLWRhdGFcIixcbiAgICAgICAgICAgIENPTlRST0xfQlVUVE9OX0xPQ0FURTogSWQgKyBcIi1sb2NhdGVcIixcbiAgICAgICAgICAgIENPTlRST0xfQlVUVE9OX1pPT01fSU5fRkVBVFVSRVM6IElkICsgXCItem9vbS1pbi1mZWF0dXJlc1wiLFxuICAgICAgICAgICAgQ09OVFJPTF9CVVRUT05fSElERV9TRUxFQ1RFRDogSWQgKyBcIi1oaWRlLXNlbGVjdGVkXCIsXG4gICAgICAgICAgICBDT05UUk9MX0JVVFRPTl9BRERfRkVBVFVSRV9UT19HUklEOiBJZCArIFwiLWFkZC1mZWF0dXJlLXRvLWdyaWRcIixcbiAgICAgICAgICAgIENPTlRST0xfQlVUVE9OX0NSRUFURV9QT0xZR09OOiBJZCArIFwiLWNyZWF0ZS1wb2x5Z29uXCIsXG4gICAgICAgICAgICBDT05UUk9MX0JVVFRPTl9DT01CSU5FX0ZFQVRVUkVTOiBcIm1hcGJveC1nbC1kcmF3X2NvbWJpbmVcIixcbiAgICAgICAgICAgIENPTlRST0xfQlVUVE9OX1VOQ09NQklORV9GRUFUVVJFUzogXCJtYXBib3gtZ2wtZHJhd191bmNvbWJpbmVcIixcbiAgICAgICAgICAgIENPTlRST0xfQlVUVE9OX0dST1VQX0ZFQVRVUkVTOiBJZCArIFwiLWdyb3VwLWZlYXR1cmVzXCIsXG4gICAgICAgICAgICBDT05UUk9MX0JVVFRPTl9VTkdST1VQX0ZFQVRVUkVTOiBJZCArIFwiLXVuZ3JvdXAtZmVhdHVyZXNcIixcbiAgICAgICAgICAgIENPTlRST0xfQlVUVE9OX0RPV05MT0FEX1dBWVM6IElkICsgXCItZG93bmxvYWQtd2F5c1wiLFxuICAgICAgICAgICAgQ09OVFJPTF9CVVRUT05fRE9XTkxPQURfQlVJTERJTkdTOiBJZCArIFwiLWRvd25sb2FkLWJ1aWxkaW5nc1wiLFxuICAgICAgICAgICAgQ09OVFJPTF9CVVRUT05fUkVGUkVTSDogSWQgKyBcIi1yZWZyZXNoXCIsXG4gICAgICAgICAgICBDT05UUk9MX0JVVFRPTl9FRElUOiBJZCArIFwiLWVkaXRcIixcbiAgICAgICAgICAgIENPTlRST0xfQlVUVE9OX0NVVDogSWQgKyBcIi1jdXRcIixcbiAgICAgICAgICAgIENPTlRST0xfQlVUVE9OX1NFTEVDVDogSWQgKyBcIi1zZWxlY3RcIixcbiAgICAgICAgICAgIENPTlRST0xfQlVUVE9OX0RPV05MT0FEX0RBVEE6IElkICsgXCItZG93bmxvYWQtZGF0YVwiLFxuICAgICAgICAgICAgQ09OVFJPTF9CVVRUT05fRVhQT1JUOiBJZCArIFwiLWV4cG9ydFwiLFxuICAgICAgICAgICAgQ09OVFJPTF9CVVRUT05fU0FWRV9BU19HSVNUOiBJZCArIFwiLXNhdmUtYXMtZ2lzdFwiLFxuICAgICAgICAgICAgQ09OVFJPTF9CVVRUT05fU0FWRV9BU19HRU9KU09OOiBJZCArIFwiLXNhdmUtYXMtZ2VvanNvblwiLFxuICAgICAgICAgICAgQ09OVFJPTF9CVVRUT05fU0FWRV9BU19LTUw6IElkICsgXCItc2F2ZS1hcy1rbWxcIixcbiAgICAgICAgICAgIENPTlRST0xfQlVUVE9OX0VYUEFORF9FRElUT1I6IElkICsgXCItZXhwYW5kLWVkaXRvclwiLFxuICAgICAgICAgICAgQ09OVFJPTF9CVVRUT05fSU1QT1JUOiBJZCArIFwiLWltcG9ydFwiLFxuICAgICAgICAgICAgQ09OVFJPTF9CVVRUT05fRklOU0lIOiBJZCArIFwiLWZpbmlzaFwiLFxuICAgICAgICAgICAgQ09OVFJPTF9CVVRUT05fQ0FOQ0VMOiBJZCArIFwiLWNhbmNlbFwiLFxuICAgICAgICAgICAgQ09OVFJPTF9CVVRUT05fVU5ETzogSWQgKyBcIi11bmRvXCIsXG4gICAgICAgICAgICBDT05UUk9MX0JVVFRPTl9SRURPOiBJZCArIFwiLXJlZG9cIixcbiAgICAgICAgICAgIENPTlRST0xfR1JPVVA6IElkICsgXCItY3RybC1ncm91cFwiLFxuICAgICAgICAgICAgRFJPUERPV05fR1JPVVA6IElkICsgXCItZHJvcGRvd24tZ3JvdXBcIixcbiAgICAgICAgICAgIERJVklERVI6IElkICsgXCItZGl2aWRlclwiLFxuICAgICAgICAgICAgQUNUSU9OX0dST1VQOiBJZCArIFwiLWFjdGlvbi1ncm91cFwiLFxuICAgICAgICAgICAgQVRUUklCVVRJT046IFwibWFwYm94Z2wtY3RybC1hdHRyaWJcIixcbiAgICAgICAgICAgIEFDVElWRV9CVVRUT046IFwiYWN0aXZlXCIsXG4gICAgICAgICAgICBCT1hfU0VMRUNUOiBcIm1hcGJveC1nbC1kcmF3X2JveHNlbGVjdFwiLFxuICAgICAgICB9LFxuICAgICAgICBzb3VyY2VzOiB7XG4gICAgICAgICAgICBTRUxFQ1Q6IElkICsgXCItc2VsZWN0XCIsXG4gICAgICAgICAgICBTTkFQOiBJZCArIFwiLXNuYXBcIixcbiAgICAgICAgICAgIFJPVVRFOiBJZCArIFwiLXJvdXRlXCIsXG4gICAgICAgICAgICBIT1Q6IElkICsgXCItaG90XCIsXG4gICAgICAgICAgICBDT0xEOiBJZCArIFwiLWNvbGRcIixcbiAgICAgICAgICAgIE1FU0g6IElkICsgXCItbWVzaFwiLFxuICAgICAgICAgICAgVkVSVEVYOiBJZCArIFwiLXZlcnRleFwiLFxuICAgICAgICAgICAgSE9UVEVYVDogSWQgKyBcIi10ZXh0XCIsXG4gICAgICAgICAgICBDT0xEVEVYVDogSWQgKyBcIi1jb2xkdGV4dFwiLFxuICAgICAgICAgICAgR0FNRVBBRDogSWQgKyBcIi1nYW1lcGFkXCJcbiAgICAgICAgfSxcbiAgICAgICAgbGF5ZXJzOiB7XG4gICAgICAgICAgICBNRVNIOiBJZCArIFwiLW1lc2hcIlxuICAgICAgICB9LFxuICAgICAgICBjdXJzb3JzOiB7XG4gICAgICAgICAgICBBREQ6IFwiYWRkXCIsXG4gICAgICAgICAgICBNT1ZFOiBcIm1vdmVcIixcbiAgICAgICAgICAgIERSQUc6IFwiZHJhZ1wiLFxuICAgICAgICAgICAgUE9JTlRFUjogXCJwb2ludGVyXCIsXG4gICAgICAgICAgICBOT05FOiBcIm5vbmVcIixcbiAgICAgICAgfSxcbiAgICAgICAgdHlwZXM6IHtcbiAgICAgICAgICAgIFBPTFlHT046IFwicG9seWdvblwiLFxuICAgICAgICAgICAgTElORTogXCJsaW5lX3N0cmluZ1wiLFxuICAgICAgICAgICAgUE9JTlQ6IFwicG9pbnRcIixcbiAgICAgICAgfSxcbiAgICAgICAgZ2VvanNvblR5cGVzOiB7XG4gICAgICAgICAgICBGRUFUVVJFOiBcIkZlYXR1cmVcIixcbiAgICAgICAgICAgIFBPTFlHT046IFwiUG9seWdvblwiLFxuICAgICAgICAgICAgTElORV9TVFJJTkc6IFwiTGluZVN0cmluZ1wiLFxuICAgICAgICAgICAgUE9JTlQ6IFwiUG9pbnRcIixcbiAgICAgICAgICAgIEZFQVRVUkVfQ09MTEVDVElPTjogXCJGZWF0dXJlQ29sbGVjdGlvblwiLFxuICAgICAgICAgICAgTVVMVElfUFJFRklYOiBcIk11bHRpXCIsXG4gICAgICAgICAgICBNVUxUSV9QT0lOVDogXCJNdWx0aVBvaW50XCIsXG4gICAgICAgICAgICBNVUxUSV9MSU5FX1NUUklORzogXCJNdWx0aUxpbmVTdHJpbmdcIixcbiAgICAgICAgICAgIE1VTFRJX1BPTFlHT046IFwiTXVsdGlQb2x5Z29uXCIsXG4gICAgICAgIH0sXG4gICAgICAgIG1vZGVzOiB7XG4gICAgICAgICAgICBEUkFXOiBcImRyYXdcIixcbiAgICAgICAgICAgIENVVDogXCJjdXRcIixcbiAgICAgICAgICAgIFNFTEVDVDogXCJzZWxlY3RcIixcbiAgICAgICAgICAgIERFTEVURTogXCJkZWxldGVcIixcbiAgICAgICAgICAgIEVESVQ6IFwiZWRpdFwiXG4gICAgICAgIH0sXG4gICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgQ1JFQVRFOiBcImRyYXcuY3JlYXRlXCIsXG4gICAgICAgICAgICBERUxFVEU6IFwiZHJhdy5kZWxldGVcIixcbiAgICAgICAgICAgIFVQREFURTogXCJkcmF3LnVwZGF0ZVwiLFxuICAgICAgICAgICAgU0VMRUNUSU9OX0NIQU5HRTogXCJkcmF3LnNlbGVjdGlvbmNoYW5nZVwiLFxuICAgICAgICAgICAgTU9ERV9DSEFOR0U6IFwiZHJhdy5tb2RlY2hhbmdlXCIsXG4gICAgICAgICAgICBBQ1RJT05BQkxFOiBcImRyYXcuYWN0aW9uYWJsZVwiLFxuICAgICAgICAgICAgUkVOREVSOiBcImRyYXcucmVuZGVyXCIsXG4gICAgICAgICAgICBDT01CSU5FX0ZFQVRVUkVTOiBcImRyYXcuY29tYmluZVwiLFxuICAgICAgICAgICAgVU5DT01CSU5FX0ZFQVRVUkVTOiBcImRyYXcudW5jb21iaW5lXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZUFjdGlvbnM6IHtcbiAgICAgICAgICAgIE1PVkU6IFwibW92ZVwiLFxuICAgICAgICAgICAgQ0hBTkdFX0NPT1JESU5BVEVTOiBcImNoYW5nZV9jb29yZGluYXRlc1wiLFxuICAgICAgICB9LFxuICAgICAgICBtZXRhOiB7XG4gICAgICAgICAgICBGRUFUVVJFOiBcImZlYXR1cmVcIixcbiAgICAgICAgICAgIE1JRFBPSU5UOiBcIm1pZHBvaW50XCIsXG4gICAgICAgICAgICBWRVJURVg6IFwidmVydGV4XCIsXG4gICAgICAgIH0sXG4gICAgICAgIGFjdGl2ZVN0YXRlczoge1xuICAgICAgICAgICAgQUNUSVZFOiBcInRydWVcIixcbiAgICAgICAgICAgIElOQUNUSVZFOiBcImZhbHNlXCIsXG4gICAgICAgIH0sXG4gICAgICAgIExBVF9NSU46IC05MCxcbiAgICAgICAgTEFUX1JFTkRFUkVEX01JTjogLTg1LFxuICAgICAgICBMQVRfTUFYOiA5MCxcbiAgICAgICAgTEFUX1JFTkRFUkVEX01BWDogODUsXG4gICAgICAgIExOR19NSU46IC0yNzAsXG4gICAgICAgIExOR19NQVg6IDI3MCxcbiAgICAgICAgTUlOX1NFR01FTlRfTEVOR1RIOiAwLjAwMDAwMSxcbiAgICAgICAgTUlOX0RJU1RBTkNFOiAwLjAwMDAxLCAvLyAwLjAwMDAwMVxuICAgICAgICBDSVJDVU06IDQwMDc1MDE3XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgU3RhdGljczsiLCIvKipcbiAqIEBtaXhpblxuICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG9cbiAqIEBuYW1lIFN0eWxlc1xuICogQGRlc2NyaXB0aW9uIFRoaXMgbW9kdWxlIHByb3ZpZGVzIHRoZSBzdHlsaW5nIGZ1bmN0aW9uYWxpdHkgZm9yIHRoZSBHZW9mbG8gYXBwbGljYXRpb24uIEl0IGFsbG93cyB1c2VycyB0byBjaGFuZ2UgdGhlIG1hcCBzdHlsZSBieSBzZWxlY3RpbmcgZnJvbSBhIGxpc3Qgb2YgcHJlZGVmaW5lZCBzdHlsZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIG9iamVjdCBjb250YWluaW5nIHRoZSBzdHlsZXMgYW5kIHNlbGVjdGVkIHN0eWxlLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgU3R5bGVzIG9iamVjdC5cbiAqL1xuY29uc3QgU3R5bGVzID0gZnVuY3Rpb24gKG9wdGlvbnM9e30pIHtcbiAgICBjb25zdCBnZW9mbG8gPSB0aGlzLmdlb2ZsbztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIFxuICAgIC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5TdHlsZXNcbiAgICAgKiBAbmFtZSBpbml0XG4gICAgICogQGRlc2NyaXB0aW9uIEluaXRpYWxpemVzIHRoZSBTdHlsZXMgb2JqZWN0IGJ5IGV4dGVuZGluZyB0aGUgb3B0aW9ucyBvYmplY3Qgd2l0aCB0aGUgcHJvdmlkZWQgb3B0aW9ucywgc2V0dGluZyB0aGUgc3R5bGVzLCBkZWZhdWx0U3R5bGUsIGFuZCBldmVudCBsaXN0ZW5lcnMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QgY29udGFpbmluZyB0aGUgc3R5bGVzIGFuZCBzZWxlY3RlZCBzdHlsZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBTdHlsZXMgb2JqZWN0LlxuICAgICAqL1xuICAgIHRoaXMuaW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zPXt9KSB7XG4gICAgICAgIGdlb2Zsby5VdGlsaXRpZXMuZXh0ZW5kKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5zdHlsZXMgPSB0aGlzLm9wdGlvbnMuc3R5bGVzIHx8IFtcbiAgICAgICAgICAgIHsgdGl0bGU6IFwiU3RhbmRhcmRcIiwgdXJpOiBcIm1hcGJveDovL3N0eWxlcy9zb2x1dGVncmF0ZS9jbHhkb2VjOHgwMDY5MDFxajd3amY4dXhvXCIgfSxcbiAgICAgICAgICAgIHsgdGl0bGU6IFwiU2F0ZWxsaXRlXCIsIHVyaTogXCJtYXBib3g6Ly9zdHlsZXMvbWFwYm94L3NhdGVsbGl0ZS1zdHJlZXRzLXYxMVwiIH0sXG4gICAgICAgICAgICB7IHRpdGxlOiBcIlN0YW5kYXJkXCIsIHVyaTogXCJtYXBib3g6Ly9zdHlsZXMvbWFwYm94L3N0YW5kYXJkXCIgfSxcbiAgICAgICAgICAgIHsgdGl0bGU6IFwiRGFya1wiLCB1cmk6IFwibWFwYm94Oi8vc3R5bGVzL21hcGJveC9kYXJrLXYxMVwiIH0sXG4gICAgICAgICAgICB7IHRpdGxlOiBcIkxpZ2h0XCIsIHVyaTogXCJtYXBib3g6Ly9zdHlsZXMvbWFwYm94L2xpZ2h0LXYxMVwiIH0sXG4gICAgICAgICAgICB7IHRpdGxlOiBcIk91dGRvb3JzXCIsIHVyaTogXCJtYXBib3g6Ly9zdHlsZXMvbWFwYm94L291dGRvb3JzLXYxMVwiIH1cbiAgICAgICAgXTtcbiAgICBcbiAgICAgICAgdGhpcy5kZWZhdWx0U3R5bGUgPSB0aGlzLm9wdGlvbnMuc2VsZWN0ZWQgfHwgXCJTdGFuZGFyZFwiO1xuICAgICAgICB0aGlzLm9uRG9jdW1lbnRDbGljayA9IHRoaXMub25Eb2N1bWVudENsaWNrLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuZXZlbnRzID0gdGhpcy5vcHRpb25zLmV2ZW50TGlzdGVuZXJzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uU3R5bGVzXG4gICAgICogQG5hbWUgc2VsZWN0XG4gICAgICogQGRlc2NyaXB0aW9uIFNlbGVjdHMgdGhlIHN0eWxlIHdpdGggdGhlIHByb3ZpZGVkIG5hbWUgYnkgc2V0dGluZyB0aGUgbWFwIHN0eWxlIHRvIHRoZSBzdHlsZSdzIHVyaS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBzdHlsZSB0byBzZWxlY3QuXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG4gICAgdGhpcy5zZWxlY3QgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBpZiAoIXRoaXMubWFwU3R5bGVDb250YWluZXIgfHwgIXRoaXMubWFwU3R5bGVDb250YWluZXIuY2hlY2tWaXNpYmlsaXR5KCkpIHtcbiAgICAgICAgICAgIHZhciBzdHlsZSA9IHRoaXMuc3R5bGVzLmZpbmQoc3R5bGUgPT4gc3R5bGUudGl0bGUgPT09IG5hbWUpO1xuICAgICAgICAgICAgaWYgKHN0eWxlKSB0aGlzLm1hcC5zZXRTdHlsZShzdHlsZS51cmkpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZXZlbnRzICYmIHRoaXMuZXZlbnRzLm9uQ2hhbmdlICYmIHRoaXMuZXZlbnRzLm9uQ2hhbmdlKHsgc3R5bGU6IHN0eWxlIH0sIHN0eWxlKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGVsbXMgPSB0aGlzLm1hcFN0eWxlQ29udGFpbmVyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUobmFtZSk7XG4gICAgICAgIGlmIChlbG1zLmxlbmd0aCA+IDApIGVsbXNbMF0uY2xpY2soKTtcbiAgICB9XG5cbiAgICAvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uU3R5bGVzXG4gICAgICogQG5hbWUgaGlkZVxuICAgICAqIEBkZXNjcmlwdGlvbiBIaWRlcyB0aGUgc3R5bGUgY29udHJvbCBjb250YWluZXIuXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG4gICAgdGhpcy5oaWRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jb250cm9sQ29udGFpbmVyKSB0aGlzLmNvbnRyb2xDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlN0eWxlc1xuICAgICAqIEBuYW1lIHNob3dcbiAgICAgKiBAZGVzY3JpcHRpb24gU2hvd3MgdGhlIHN0eWxlIGNvbnRyb2wgY29udGFpbmVyLlxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIHRoaXMuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29udHJvbENvbnRhaW5lcikgdGhpcy5jb250cm9sQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgfVxuXG4gICAgLyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlN0eWxlc1xuICAgICAqIEBuYW1lIGdldERlZmF1bHRQb3NpdGlvblxuICAgICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIHRoZSBkZWZhdWx0IHBvc2l0aW9uIGZvciB0aGUgc3R5bGUgY29udHJvbCBjb250YWluZXIuXG4gICAgICogQHJldHVybnMge1N0cmluZ30gVGhlIGRlZmF1bHQgcG9zaXRpb24gZm9yIHRoZSBzdHlsZSBjb250cm9sIGNvbnRhaW5lci5cbiAgICAgKi9cbiAgICB0aGlzLmdldERlZmF1bHRQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgZGVmYXVsdFBvc2l0aW9uID0gXCJ0b3AtcmlnaHRcIjtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRQb3NpdGlvbjtcbiAgICB9XG5cbiAgICAvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uU3R5bGVzXG4gICAgICogQG5hbWUgb25BZGRcbiAgICAgKiBAZGVzY3JpcHRpb24gQWRkcyB0aGUgc3R5bGUgY29udHJvbCBjb250YWluZXIgdG8gdGhlIG1hcC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIC0gVGhlIG1hcCBvYmplY3QgdG8gYWRkIHRoZSBzdHlsZSBjb250cm9sIGNvbnRhaW5lciB0by5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgc3R5bGUgY29udHJvbCBjb250YWluZXIuXG4gICAgICogQHRocm93cyB7RXJyb3J9IFRocm93cyBhbiBlcnJvciBpZiB0aGUgbWFwIG9iamVjdCBpcyBub3QgcHJvdmlkZWQuXG4gICAgICovXG4gICAgdGhpcy5vbkFkZCA9IGZ1bmN0aW9uIChtYXApIHtcbiAgICAgICAgdGhpcy5tYXAgPSBtYXA7XG4gICAgICAgIHRoaXMuY29udHJvbENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHRoaXMuY29udHJvbENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwibWFwYm94Z2wtY3RybFwiKTtcbiAgICAgICAgdGhpcy5jb250cm9sQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJtYXBib3hnbC1jdHJsLWdyb3VwXCIpO1xuICAgICAgICB0aGlzLm1hcFN0eWxlQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdGhpcy5zdHlsZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIHRoaXMuc3R5bGVCdXR0b24udHlwZSA9IFwiYnV0dG9uXCI7XG4gICAgICAgIHRoaXMubWFwU3R5bGVDb250YWluZXIuY2xhc3NMaXN0LmFkZChcIm1hcGJveGdsLXN0eWxlLWxpc3RcIik7XG5cbiAgICAgICAgZm9yIChjb25zdCBzdHlsZSBvZiB0aGlzLnN0eWxlcykge1xuICAgICAgICAgICAgY29uc3Qgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcblxuICAgICAgICAgICAgc3R5bGVFbGVtZW50LnR5cGUgPSBcImJ1dHRvblwiO1xuICAgICAgICAgICAgc3R5bGVFbGVtZW50LmNsYXNzTGlzdC5hZGQoc3R5bGUudGl0bGUucmVwbGFjZSgvW15hLXowLTktXS9naSwgJ18nKSk7XG4gICAgICAgICAgICBzdHlsZUVsZW1lbnQuZGF0YXNldC51cmkgPSBKU09OLnN0cmluZ2lmeShzdHlsZS51cmkpO1xuXG4gICAgICAgICAgICBzdHlsZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzcmNFbGVtZW50ID0gZXZlbnQudGFyZ2V0IHx8IGV2ZW50LnNyY0VsZW1lbnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZU1vZGFsKCk7XG4gICAgICAgICAgICAgICAgaWYgKHNyY0VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiYWN0aXZlXCIpKSByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZXZlbnRzICYmIHRoaXMuZXZlbnRzLm9uT3BlbiAmJiB0aGlzLmV2ZW50cy5vbk9wZW4oZXZlbnQpKSByZXR1cm47XG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBKU09OLnBhcnNlKHNyY0VsZW1lbnQuZGF0YXNldC51cmkpO1xuICAgICAgICAgICAgICAgIHRoaXMubWFwLnNldFN0eWxlKHN0eWxlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbG1zID0gdGhpcy5tYXBTdHlsZUNvbnRhaW5lci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiYWN0aXZlXCIpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChlbG1zWzBdKSBlbG1zWzBdLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG4gICAgICAgICAgICAgICAgc3JjRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmV2ZW50cyAmJiB0aGlzLmV2ZW50cy5vbkNoYW5nZSAmJiB0aGlzLmV2ZW50cy5vbkNoYW5nZShldmVudCwgc3R5bGUpKSByZXR1cm47XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHN0eWxlLnRpdGxlID09PSB0aGlzLmRlZmF1bHRTdHlsZSkge1xuICAgICAgICAgICAgICAgIHN0eWxlRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLm1hcFN0eWxlQ29udGFpbmVyLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnN0eWxlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJtYXBib3hnbC1jdHJsLWljb25cIik7XG4gICAgICAgIHRoaXMuc3R5bGVCdXR0b24uY2xhc3NMaXN0LmFkZChcIm1hcGJveGdsLXN0eWxlLXN3aXRjaGVyXCIpO1xuXG4gICAgICAgIHRoaXMuc3R5bGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmV2ZW50cyAmJiB0aGlzLmV2ZW50cy5vblNlbGVjdCAmJiB0aGlzLmV2ZW50cy5vblNlbGVjdChldmVudCkpIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMub3Blbk1vZGFsKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLm9uRG9jdW1lbnRDbGljayk7XG5cbiAgICAgICAgdGhpcy5jb250cm9sQ29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuc3R5bGVCdXR0b24pO1xuICAgICAgICB0aGlzLmNvbnRyb2xDb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5tYXBTdHlsZUNvbnRhaW5lcik7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmNsb3NlTW9kYWwoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udHJvbENvbnRhaW5lcjtcbiAgICB9XG5cbiAgICAvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uU3R5bGVzXG4gICAgICogQG5hbWUgb25SZW1vdmVcbiAgICAgKiBAZGVzY3JpcHRpb24gUmVtb3ZlcyB0aGUgc3R5bGUgY29udHJvbCBjb250YWluZXIgZnJvbSB0aGUgbWFwLlxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIGNvbnRyb2wgY29udGFpbmVyLCBjb250cm9sIGNvbnRhaW5lciBwYXJlbnQgbm9kZSwgbWFwLCBvciBzdHlsZSBidXR0b24gaXMgbm90IHByb3ZpZGVkLlxuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIHN0eWxlIGJ1dHRvbiBldmVudCBsaXN0ZW5lciBpcyBub3QgcmVtb3ZlZC5cbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gVGhyb3dzIGFuIGVycm9yIGlmIHRoZSBkb2N1bWVudCBldmVudCBsaXN0ZW5lciBpcyBub3QgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICB0aGlzLm9uUmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuY29udHJvbENvbnRhaW5lciB8fCAhdGhpcy5jb250cm9sQ29udGFpbmVyLnBhcmVudE5vZGUgfHwgIXRoaXMubWFwIHx8ICF0aGlzLnN0eWxlQnV0dG9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdHlsZUJ1dHRvbi5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5vbkRvY3VtZW50Q2xpY2spO1xuICAgICAgICB0aGlzLmNvbnRyb2xDb250YWluZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmNvbnRyb2xDb250YWluZXIpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5vbkRvY3VtZW50Q2xpY2spO1xuICAgICAgICB0aGlzLm1hcCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uU3R5bGVzXG4gICAgICogQG5hbWUgY2xvc2VNb2RhbFxuICAgICAqIEBkZXNjcmlwdGlvbiBDbG9zZXMgdGhlIHN0eWxlIGNvbnRyb2wgY29udGFpbmVyLlxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIHRoaXMuY2xvc2VNb2RhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMubWFwU3R5bGVDb250YWluZXIgJiYgdGhpcy5zdHlsZUJ1dHRvbikge1xuICAgICAgICAgICAgdGhpcy5tYXBTdHlsZUNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICB0aGlzLnN0eWxlQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5TdHlsZXNcbiAgICAgKiBAbmFtZSBvcGVuTW9kYWxcbiAgICAgKiBAZGVzY3JpcHRpb24gT3BlbnMgdGhlIHN0eWxlIGNvbnRyb2wgY29udGFpbmVyLlxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIHRoaXMub3Blbk1vZGFsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5tYXBTdHlsZUNvbnRhaW5lciAmJiB0aGlzLnN0eWxlQnV0dG9uKSB7XG4gICAgICAgICAgICB0aGlzLm1hcFN0eWxlQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgICB0aGlzLnN0eWxlQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMub25Eb2N1bWVudENsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmNvbnRyb2xDb250YWluZXIgJiYgIXRoaXMuY29udHJvbENvbnRhaW5lci5jb250YWlucyhldmVudC50YXJnZXQpKSB0aGlzLmNsb3NlTW9kYWwoKTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXQoKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFN0eWxlczsiLCIvKipcbiAqIEBtaXhpblxuICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG9cbiAqIEBuYW1lIFV0aWxpdGllc1xuICogQGRlc2NyaXB0aW9uIFRoaXMgbW9kdWxlIHByb3ZpZGVzIHV0aWxpdHkgZnVuY3Rpb25zIGZvciB0aGUgR2VvZmxvIGFwcGxpY2F0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgVXRpbGl0aWVzIG9iamVjdC5cbiAqL1xuY29uc3QgVXRpbGl0aWVzID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGdlb2ZsbyA9IHRoaXMuZ2VvZmxvO1xuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5VdGlsaXRpZXNcblx0ICogQG5hbWUgcG9pbnRJbkNvb3JkaW5hdGVzXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgbGluZSBzdHJpbmcgYW5kIGEgcG9pbnQncyBjb29yZGluYXRlcyBhcyBpbnB1dCBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiBpbmRpY2VzIHdoZXJlIHRoZSBwb2ludCBpcyBmb3VuZCBpbiB0aGUgbGluZSBzdHJpbmcncyBjb29yZGluYXRlcy5cblx0ICogQHBhcmFtIHtPYmplY3R9IGxpbmVTdHJpbmcgLSBUaGUgbGluZSBzdHJpbmcgb2JqZWN0IGNvbnRhaW5pbmcgZ2VvbWV0cnkgY29vcmRpbmF0ZXMuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IHBvaW50Q29vcmRzIC0gVGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBwb2ludCB0byBzZWFyY2ggZm9yIGluIHRoZSBsaW5lIHN0cmluZy5cblx0ICogQHJldHVybnMge0FycmF5fSBBbiBhcnJheSBjb250YWluaW5nIHRoZSBpbmRpY2VzIG9mIHRoZSBwb2ludCBpbiB0aGUgbGluZSBzdHJpbmcncyBjb29yZGluYXRlcy5cblx0ICovXG4gICAgdGhpcy5wb2ludEluQ29vcmRpbmF0ZXMgPSBmdW5jdGlvbiAobGluZVN0cmluZywgcG9pbnRDb29yZHMpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICAgIGxpbmVTdHJpbmcuZ2VvbWV0cnkuY29vcmRpbmF0ZXMuZm9yRWFjaChmdW5jdGlvbihjb29yZHMsIGluZGV4KSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IDAgJiYgaW5kZXggIT09IGxpbmVTdHJpbmcuZ2VvbWV0cnkuY29vcmRpbmF0ZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIGlmIChjb29yZHNbMF0gPT09IHBvaW50Q29vcmRzWzBdICYmIGNvb3Jkc1sxXSA9PT0gcG9pbnRDb29yZHNbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goaW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlV0aWxpdGllc1xuXHQgKiBAbmFtZSBzYW1lQm9yZGVyc1xuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBjb21wYXJlcyB0d28gc2V0cyBvZiBib3JkZXJzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSB0aGUgc2FtZS5cblx0ICogQHBhcmFtIHtPYmplY3R9IGZyb21Cb3JkZXJzIC0gVGhlIGZpcnN0IHNldCBvZiBib3JkZXJzIHRvIGNvbXBhcmUuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSB0b0JvcmRlcnMgLSBUaGUgc2Vjb25kIHNldCBvZiBib3JkZXJzIHRvIGNvbXBhcmUuXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIGJvcmRlcnMgYXJlIHRoZSBzYW1lLCBmYWxzZSBvdGhlcndpc2UuXG5cdCAqL1xuICAgIHRoaXMuc2FtZUJvcmRlcnMgPSBmdW5jdGlvbiAoZnJvbUJvcmRlcnMsIHRvQm9yZGVycykge1xuICAgICAgICBpZiAoZnJvbUJvcmRlcnMgJiYgdG9Cb3JkZXJzKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUJvcmRlcnMuYm9yZGVyMVswXSA9PT0gdG9Cb3JkZXJzLmJvcmRlcjFbMF0gJiYgZnJvbUJvcmRlcnMuYm9yZGVyMVsxXSA9PT0gdG9Cb3JkZXJzLmJvcmRlcjFbMV0gJiYgZnJvbUJvcmRlcnMuYm9yZGVyMlswXSA9PT0gdG9Cb3JkZXJzLmJvcmRlcjJbMF0gJiYgZnJvbUJvcmRlcnMuYm9yZGVyMlsxXSA9PT0gdG9Cb3JkZXJzLmJvcmRlcjJbMV0gfHwgZnJvbUJvcmRlcnMuYm9yZGVyMVswXSA9PT0gdG9Cb3JkZXJzLmJvcmRlcjJbMF0gJiYgZnJvbUJvcmRlcnMuYm9yZGVyMVsxXSA9PT0gdG9Cb3JkZXJzLmJvcmRlcjJbMV0gJiYgZnJvbUJvcmRlcnMuYm9yZGVyMlswXSA9PT0gdG9Cb3JkZXJzLmJvcmRlcjFbMF0gJiYgZnJvbUJvcmRlcnMuYm9yZGVyMlsxXSA9PT0gdG9Cb3JkZXJzLmJvcmRlcjFbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlV0aWxpdGllc1xuXHQgKiBAbmFtZSBnZXRSYW5kb21Db2xvclxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBnZW5lcmF0ZXMgYSByYW5kb20gY29sb3IgYnkgcmFuZG9tbHkgc2VsZWN0aW5nIGhleGFkZWNpbWFsIHZhbHVlcyBmb3IgZWFjaCBkaWdpdCBvZiB0aGUgY29sb3IgY29kZS5cblx0ICogQHJldHVybnMge3N0cmluZ30gQSByYW5kb20gY29sb3IgaW4gaGV4YWRlY2ltYWwgZm9ybWF0LlxuXHQgKi9cbiAgICB0aGlzLmdldFJhbmRvbUNvbG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbGV0dGVycyA9ICcwMTIzNDU2Nzg5QUJDREVGJztcbiAgICAgICAgdmFyIGNvbG9yID0gJyMnO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDY7IGkrKykge1xuICAgICAgICAgICAgY29sb3IgKz0gbGV0dGVyc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxNildO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xvcjtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlV0aWxpdGllc1xuXHQgKiBAbmFtZSBjcmVhdGVSYW5kb21TdHJva2Vcblx0ICogQGRlc2NyaXB0aW9uIEdlbmVyYXRlcyBhIHJhbmRvbSBzdHJva2UgY29sb3IgZm9yIGEgc2hhcGUuXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIHRoZSByYW5kb21seSBnZW5lcmF0ZWQgc3Ryb2tlIGNvbG9yLlxuXHQgKi9cbiAgICB0aGlzLmNyZWF0ZVJhbmRvbVN0cm9rZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0cm9rZTogdGhpcy5nZXRSYW5kb21Db2xvcigpXG4gICAgICAgIH07XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5VdGlsaXRpZXNcblx0ICogQG5hbWUgY3JlYXRlTGluZUFuZFNhdmVMZW5ndGhcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gdGFrZXMgYW4gYXJyYXkgb2YgbGluZSBjb29yZGluYXRlcyBhbmQgcHJvcGVydGllcywgY3JlYXRlcyBhIGxpbmUgc3RyaW5nIHdpdGggcmFuZG9tIHN0cm9rZSBwcm9wZXJ0aWVzLCBjYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgdGhlIGxpbmUsIGFuZCBzYXZlcyBpdCBpbiB0aGUgcHJvcGVydGllcy5cblx0ICogQHBhcmFtIHtBcnJheX0gbGluZUNvb3JkcyAtIEFycmF5IG9mIGNvb3JkaW5hdGVzIGZvciB0aGUgbGluZSBzdHJpbmcuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyAtIFByb3BlcnRpZXMgb2JqZWN0IGZvciB0aGUgbGluZSBzdHJpbmcuXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IC0gVGhlIGNyZWF0ZWQgbGluZSBzdHJpbmcgd2l0aCBzYXZlZCBsZW5ndGggaW4gcHJvcGVydGllcy5cblx0ICovXG4gICAgdGhpcy5jcmVhdGVMaW5lQW5kU2F2ZUxlbmd0aCA9IGZ1bmN0aW9uIChsaW5lQ29vcmRzLCBwcm9wcykge1xuICAgICAgICB2YXIgY29weVByb3BzID0gT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMsIHRoaXMuY3JlYXRlUmFuZG9tU3Ryb2tlKCkpO1xuICAgICAgICB2YXIgbGluZSA9IHR1cmYubGluZVN0cmluZyhsaW5lQ29vcmRzLCBjb3B5UHJvcHMpO1xuICAgICAgICBjb3B5UHJvcHMubGVuZ3RoID0gdHVyZi5saW5lRGlzdGFuY2UobGluZSk7XG4gICAgICAgIHJldHVybiBsaW5lO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uVXRpbGl0aWVzXG5cdCAqIEBuYW1lIGxpbmVTcGxpdFxuXHQgKiBAZGVzY3JpcHRpb24gU3BsaXRzIGEgbGluZSBzdHJpbmcgYmFzZWQgb24gdGhlIHByb3ZpZGVkIHBvaW50IGluZGV4ZXMgYW5kIHJldHVybnMgYW4gYXJyYXkgb2Ygc3BsaXQgbGluZSBzdHJpbmdzLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gbGluZVN0cmluZyAtIFRoZSBsaW5lIHN0cmluZyBvYmplY3QgdG8gc3BsaXQuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IHBvaW50SW5kZXhlcyAtIEFuIGFycmF5IG9mIGluZGV4ZXMgd2hlcmUgdGhlIGxpbmUgc3RyaW5nIHNob3VsZCBiZSBzcGxpdC5cblx0ICogQHJldHVybnMge0FycmF5fSAtIEFuIGFycmF5IG9mIHNwbGl0IGxpbmUgc3RyaW5ncy5cblx0ICovXG4gICAgdGhpcy5saW5lU3BsaXQgPSBmdW5jdGlvbiAobGluZVN0cmluZywgcG9pbnRJbmRleGVzKSB7XG4gICAgICAgIHZhciBwcm9wcyA9IGxpbmVTdHJpbmcucHJvcGVydGllcztcbiAgICAgICAgdmFyIGxpbmVDb29yZHMgPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGxpbmVTdHJpbmcuZ2VvbWV0cnkuY29vcmRpbmF0ZXMpKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICB2YXIgZGVsdGEgPSAwO1xuXG4gICAgICAgIHBvaW50SW5kZXhlcy5mb3JFYWNoKGZ1bmN0aW9uKHBvaW50SW5kZXgpIHtcbiAgICAgICAgICAgIHBvaW50SW5kZXggLT0gZGVsdGE7XG4gICAgICAgICAgICBpZiAocG9pbnRJbmRleCA8IGxpbmVDb29yZHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIHZhciBzZWNvbmRQYXJ0ID0gbGluZUNvb3Jkcy5zcGxpY2UocG9pbnRJbmRleCwgbGluZUNvb3Jkcy5sZW5ndGggLSBwb2ludEluZGV4KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAobGluZUNvb3Jkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVDb29yZHMucHVzaChzZWNvbmRQYXJ0WzBdKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5jcmVhdGVMaW5lQW5kU2F2ZUxlbmd0aChsaW5lQ29vcmRzLCBwcm9wcykpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxpbmVDb29yZHMgPSBzZWNvbmRQYXJ0O1xuICAgICAgICAgICAgICAgIGRlbHRhICs9IHBvaW50SW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgIGlmIChsaW5lQ29vcmRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMuY3JlYXRlTGluZUFuZFNhdmVMZW5ndGgobGluZUNvb3JkcywgcHJvcHMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5VdGlsaXRpZXNcblx0ICogQG5hbWUgc3BsaXRMaW5lc1xuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiB0YWtlcyB0d28gbGluZSBzdHJpbmdzIGFuZCBzcGxpdHMgdGhlbSBhdCB0aGVpciBpbnRlcnNlY3Rpb24gcG9pbnRzLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gbGluZVN0cmluZzEgLSBUaGUgZmlyc3QgbGluZSBzdHJpbmcgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge09iamVjdH0gbGluZVN0cmluZzIgLSBUaGUgc2Vjb25kIGxpbmUgc3RyaW5nIG9iamVjdC5cblx0ICogQHJldHVybnMge0FycmF5fG51bGx9IC0gQW4gYXJyYXkgY29udGFpbmluZyB0aGUgc3BsaXQgbGluZSBzdHJpbmdzIG9yIG51bGwgaWYgbm8gaW50ZXJzZWN0aW9uIHBvaW50cyBhcmUgZm91bmQuXG5cdCAqL1xuICAgIHRoaXMuc3BsaXRMaW5lcyA9IGZ1bmN0aW9uIChsaW5lU3RyaW5nMSwgbGluZVN0cmluZzIpIHtcbiAgICAgICAgdmFyIGxpbmUxQ3V0UG9pbnRzID0gW107XG4gICAgICAgIHZhciBsaW5lMkN1dFBvaW50cyA9IFtdO1xuXG4gICAgICAgIGxpbmVTdHJpbmcxLmdlb21ldHJ5LmNvb3JkaW5hdGVzLmZvckVhY2goZnVuY3Rpb24oY29vcmRzLCBpbmRleCkge1xuICAgICAgICAgICAgdmFyIHBvaW50cyA9IHRoaXMucG9pbnRJbkNvb3JkaW5hdGVzKGxpbmVTdHJpbmcyLCBjb29yZHMpO1xuICAgICAgICAgICAgaWYgKHBvaW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgbGluZTJDdXRQb2ludHMucHVzaC5hcHBseShsaW5lMkN1dFBvaW50cywgX3RvQ29uc3VtYWJsZUFycmF5KHBvaW50cykpO1xuICAgICAgICAgICAgICAgIGxpbmUxQ3V0UG9pbnRzLnB1c2goaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0aGlzKTtcblxuICAgICAgICBpZiAobGluZTFDdXRQb2ludHMubGVuZ3RoID09PSAwICYmIGxpbmUyQ3V0UG9pbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgICAgICByZXN1bHQucHVzaC5hcHBseShyZXN1bHQsIF90b0NvbnN1bWFibGVBcnJheSh0aGlzLmxpbmVTcGxpdChsaW5lU3RyaW5nMSwgbGluZTFDdXRQb2ludHMpKSk7XG4gICAgICAgICAgICByZXN1bHQucHVzaC5hcHBseShyZXN1bHQsIF90b0NvbnN1bWFibGVBcnJheSh0aGlzLmxpbmVTcGxpdChsaW5lU3RyaW5nMiwgbGluZTJDdXRQb2ludHMpKSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5VdGlsaXRpZXNcblx0ICogQG5hbWUgY3JlYXRlU2ltcGxlTWVzaFxuXHQgKiBAZGVzY3JpcHRpb24gQ3JlYXRlcyBhIHNpbXBsZSBtZXNoIGJ5IHByb2Nlc3NpbmcgYSBsaXN0IG9mIGZlYXR1cmVzIGNvbnRhaW5pbmcgbGluZSBzdHJpbmdzLlxuXHQgKiBAcGFyYW0ge0FycmF5fSBmZWF0dXJlcyAtIEFuIGFycmF5IG9mIGxpbmUgc3RyaW5nIGZlYXR1cmVzIHRvIGJlIHByb2Nlc3NlZC5cblx0ICogQHJldHVybnMge0FycmF5fSAtIEFuIGFycmF5IG9mIHByb2Nlc3NlZCBsaW5lIHNlZ21lbnRzIGZvcm1pbmcgdGhlIG1lc2guXG5cdCAqL1xuICAgIHRoaXMuY3JlYXRlU2ltcGxlTWVzaCA9IGZ1bmN0aW9uIChmZWF0dXJlcykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgICAgZmVhdHVyZXMuZm9yRWFjaChmdW5jdGlvbihsaW5lU3RyaW5nKSB7XG4gICAgICAgICAgICB2YXIgcHJvcHMgPSBsaW5lU3RyaW5nLnByb3BlcnRpZXM7XG4gICAgICAgICAgICB2YXIgY29vcmRzID0gbGluZVN0cmluZy5nZW9tZXRyeS5jb29yZGluYXRlcztcbiAgICAgICAgICAgIHZhciBmaXJzdFBvaW50ID0gY29vcmRzWzBdO1xuICAgICAgICAgICAgdmFyIHNlY29uZFBvaW50ID0gbnVsbDtcblxuICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAxOyBpbmRleCA8IGNvb3Jkcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBzZWNvbmRQb2ludCA9IGNvb3Jkc1tpbmRleF07XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5jcmVhdGVMaW5lQW5kU2F2ZUxlbmd0aChbZmlyc3RQb2ludCwgc2Vjb25kUG9pbnRdLCBwcm9wcykpO1xuICAgICAgICAgICAgICAgIGZpcnN0UG9pbnQgPSBzZWNvbmRQb2ludDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlV0aWxpdGllc1xuXHQgKiBAbmFtZSBjcmVhdGVNZXNoXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHRha2VzIGFuIGFycmF5IG9mIGxpbmUgc3RyaW5nIGZlYXR1cmVzIGFuZCBzcGxpdHMgdGhlbSBhdCBpbnRlcnNlY3Rpb24gcG9pbnRzIHRvIGNyZWF0ZSBhIG1lc2guXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGZlYXR1cmVzIC0gQW4gYXJyYXkgb2YgbGluZSBzdHJpbmcgZmVhdHVyZXMgdG8gY3JlYXRlIHRoZSBtZXNoIGZyb20uXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gLSBBbiBhcnJheSByZXByZXNlbnRpbmcgdGhlIG1lc2ggY3JlYXRlZCBieSBzcGxpdHRpbmcgdGhlIGxpbmUgc3RyaW5ncyBhdCBpbnRlcnNlY3Rpb24gcG9pbnRzLlxuXHQgKi9cbiAgICB0aGlzLmNyZWF0ZU1lc2ggPSBmdW5jdGlvbiAoZmVhdHVyZXMpIHtcbiAgICAgICAgdmFyIG1lc2ggPSBbXTtcblxuICAgICAgICBmZWF0dXJlcy5mb3JFYWNoKGZ1bmN0aW9uKGxpbmVTdHJpbmcxKSB7XG4gICAgICAgICAgICB2YXIgbGluZTFDdXRQb2ludHMgPSBsaW5lU3RyaW5nMS5wcm9wZXJ0aWVzLmN1dFBvaW50cztcblxuICAgICAgICAgICAgaWYgKCFsaW5lMUN1dFBvaW50cykge1xuICAgICAgICAgICAgICAgIGxpbmUxQ3V0UG9pbnRzID0gW107XG4gICAgICAgICAgICAgICAgbGluZVN0cmluZzEucHJvcGVydGllcy5jdXRQb2ludHMgPSBsaW5lMUN1dFBvaW50cztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZmVhdHVyZXMuZm9yRWFjaChmdW5jdGlvbihsaW5lU3RyaW5nMikge1xuICAgICAgICAgICAgICAgIGlmIChsaW5lU3RyaW5nMSAhPT0gbGluZVN0cmluZzIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmUyQ3V0UG9pbnRzID0gbGluZVN0cmluZzIucHJvcGVydGllcy5jdXRQb2ludHM7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFsaW5lMkN1dFBvaW50cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZTJDdXRQb2ludHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVTdHJpbmcyLnByb3BlcnRpZXMuY3V0UG9pbnRzID0gbGluZTJDdXRQb2ludHM7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBsaW5lU3RyaW5nMS5nZW9tZXRyeS5jb29yZGluYXRlcy5mb3JFYWNoKGZ1bmN0aW9uKGNvb3JkcywgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb2ludHMgPSB0aGlzLnBvaW50SW5Db29yZGluYXRlcyhsaW5lU3RyaW5nMiwgY29vcmRzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvaW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24oY3V0UG9pbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmUyQ3V0UG9pbnRzLmluZGV4T2YoY3V0UG9pbnQpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZTJDdXRQb2ludHMucHVzaChjdXRQb2ludCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gMCAmJiBpbmRleCAhPT0gbGluZVN0cmluZzEuZ2VvbWV0cnkuY29vcmRpbmF0ZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGluZTFDdXRQb2ludHMuaW5kZXhPZihpbmRleCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lMUN1dFBvaW50cy5wdXNoKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgIGZlYXR1cmVzLmZvckVhY2goZnVuY3Rpb24obGluZVN0cmluZykge1xuICAgICAgICAgICAgbGluZVN0cmluZy5wcm9wZXJ0aWVzLmN1dFBvaW50cy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIGEgLSBiOyB9KTtcbiAgICAgICAgICAgIG1lc2gucHVzaC5hcHBseShtZXNoLCBfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5saW5lU3BsaXQobGluZVN0cmluZywgbGluZVN0cmluZy5wcm9wZXJ0aWVzLmN1dFBvaW50cykpKTtcbiAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgcmV0dXJuIG1lc2g7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5VdGlsaXRpZXNcblx0ICogQG5hbWUgc2V0UHJvcGVydHlcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gc2V0cyBhIHByb3BlcnR5IHZhbHVlIGZvciBhIGdpdmVuIGZlYXR1cmUuIElmIHRoZSBmZWF0dXJlIGRvZXMgbm90IGhhdmUgcHJvcGVydGllcywgaXQgY3JlYXRlcyBhIG5ldyBwcm9wZXJ0aWVzIG9iamVjdC4gSWYgdGhlIHByb3BlcnR5IG5hbWUgaW5jbHVkZXMgYSBkb3QgKC4pLCBpdCBjcmVhdGVzIG5lc3RlZCBvYmplY3RzIHRvIHNldCB0aGUgdmFsdWUuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBmZWF0dXJlIC0gVGhlIGZlYXR1cmUgb2JqZWN0IHRvIHNldCB0aGUgcHJvcGVydHkgZm9yLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG5cdCAqIEBwYXJhbSB7YW55fSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBzZXQgZm9yIHRoZSBwcm9wZXJ0eS5cblx0ICovXG4gICAgdGhpcy5zZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIChmZWF0dXJlLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICBpZiAoIWZlYXR1cmUpIHJldHVybiBmYWxzZTtcbiAgICAgICAgXG4gICAgICAgIHZhciBwcm9wcyA9IGZlYXR1cmUucHJvcGVydGllcztcbiAgICAgICAgXG4gICAgICAgIGlmICghcHJvcHMpIHtcbiAgICAgICAgICAgIHByb3BzID0ge307XG4gICAgICAgICAgICBmZWF0dXJlLnByb3BlcnRpZXMgPSBwcm9wcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuYW1lLmluY2x1ZGVzKCcuJykpIHtcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICBpZiAoIXByb3BzW25hbWVbMF1dKSBwcm9wc1tuYW1lWzBdXSA9IHt9O1xuICAgICAgICAgICAgcHJvcHNbbmFtZVswXV1bbmFtZVsxXV0gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb3BzW25hbWVdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlV0aWxpdGllc1xuXHQgKiBAbmFtZSBzZXRQcm9wZXJ0aWVzXG5cdCAqIEBkZXNjcmlwdGlvbiBVcGRhdGVzIHRoZSBwcm9wZXJ0aWVzIG9mIGEgZ2l2ZW4gZmVhdHVyZSBvYmplY3Qgd2l0aCBuZXcgcHJvcGVydGllcy5cblx0ICogQHBhcmFtIHtPYmplY3R9IGZlYXR1cmUgLSBUaGUgZmVhdHVyZSBvYmplY3Qgd2hvc2UgcHJvcGVydGllcyB3aWxsIGJlIHVwZGF0ZWQuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBuZXdQcm9wcyAtIFRoZSBuZXcgcHJvcGVydGllcyB0byBiZSBtZXJnZWQgd2l0aCB0aGUgZXhpc3RpbmcgcHJvcGVydGllcyBvZiB0aGUgZmVhdHVyZS5cblx0ICovXG4gICAgdGhpcy5zZXRQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKGZlYXR1cmUsIG5ld1Byb3BzKSB7XG4gICAgICAgIGZlYXR1cmUucHJvcGVydGllcyA9IE9iamVjdC5hc3NpZ24oZmVhdHVyZS5wcm9wZXJ0aWVzIHx8IHt9LCBuZXdQcm9wcyk7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5VdGlsaXRpZXNcblx0ICogQG5hbWUgZmluZENsb3Nlc3RGZWF0dXJlc1xuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiB0YWtlcyBhbiBpbmRleERhdGEgb2JqZWN0LCBhIHBvaW50IG9iamVjdCwgYW5kIGEgcmFkaXVzIHZhbHVlIGFzIHBhcmFtZXRlcnMuIEl0IHRoZW4gcmV0cmlldmVzIHRoZSBmZWF0dXJlIElEcyB3aXRoaW4gdGhlIHNwZWNpZmllZCByYWRpdXMgZnJvbSB0aGUgcG9pbnQgaW5kZXggaW4gdGhlIGluZGV4RGF0YSBvYmplY3QuIEl0IGVuc3VyZXMgdW5pcXVlIGZlYXR1cmVzIGFyZSBpbmNsdWRlZCBpbiB0aGUgcmVzdWx0IGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIGNsb3Nlc3QgZmVhdHVyZXMuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBpbmRleERhdGEgLSBUaGUgaW5kZXggZGF0YSBvYmplY3QgY29udGFpbmluZyBwb2ludEluZGV4LCBwb2ludEZlYXR1cmVNYXAsIGFuZCBmZWF0dXJlQnlJZC5cblx0ICogQHBhcmFtIHtPYmplY3R9IHBvaW50IC0gVGhlIHBvaW50IG9iamVjdCB3aXRoIGxuZyAobG9uZ2l0dWRlKSBhbmQgbGF0IChsYXRpdHVkZSkgcHJvcGVydGllcy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1cyAtIFRoZSByYWRpdXMgd2l0aGluIHdoaWNoIHRvIHNlYXJjaCBmb3IgZmVhdHVyZXMuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gQW4gYXJyYXkgb2YgY2xvc2VzdCBmZWF0dXJlcyB0byB0aGUgZ2l2ZW4gcG9pbnQgd2l0aGluIHRoZSBzcGVjaWZpZWQgcmFkaXVzLlxuXHQgKi9cbiAgICB0aGlzLmZpbmRDbG9zZXN0RmVhdHVyZXMgPSBmdW5jdGlvbiAoaW5kZXhEYXRhLCBwb2ludCwgcmFkaXVzKSB7XG4gICAgICAgIHZhciBmZWF0dXJlSWRzV2l0aGluID0gaW5kZXhEYXRhLnBvaW50SW5kZXgud2l0aGluKHBvaW50LmxuZywgcG9pbnQubGF0LCByYWRpdXMpO1xuICAgICAgICB2YXIgYXNzZXJ0VW5pcXVlRmVhdHVyZXMgPSB7fTtcbiAgICAgICAgdmFyIGZlYXR1cmVSZXN1bHQgPSBbXTtcblxuICAgICAgICBmZWF0dXJlSWRzV2l0aGluLmZvckVhY2goZnVuY3Rpb24ocG9pbnRJZCkge1xuICAgICAgICAgICAgdmFyIGZlYXR1cmVJZCA9IGluZGV4RGF0YS5wb2ludEZlYXR1cmVNYXBbcG9pbnRJZF07XG4gICAgICAgICAgICBpZiAoIWFzc2VydFVuaXF1ZUZlYXR1cmVzW2ZlYXR1cmVJZF0pIHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlUmVzdWx0LnB1c2goaW5kZXhEYXRhLmZlYXR1cmVCeUlkW2ZlYXR1cmVJZF0pO1xuICAgICAgICAgICAgICAgIGFzc2VydFVuaXF1ZUZlYXR1cmVzW2ZlYXR1cmVJZF0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBmZWF0dXJlUmVzdWx0O1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uVXRpbGl0aWVzXG5cdCAqIEBuYW1lIGlzUG9pbnRFcXVhbFxuXHQgKiBAZGVzY3JpcHRpb24gQ2hlY2tzIGlmIHR3byBwb2ludHMgYXJlIGVxdWFsIGJhc2VkIG9uIHRoZWlyIGNvb3JkaW5hdGVzLlxuXHQgKiBAcGFyYW0ge0FycmF5fSBjb29yZHMxIC0gVGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBmaXJzdCBwb2ludCBbeCwgeV0uXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGNvb3JkczIgLSBUaGUgY29vcmRpbmF0ZXMgb2YgdGhlIHNlY29uZCBwb2ludCBbeCwgeV0uXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIHBvaW50cyBoYXZlIHRoZSBzYW1lIGNvb3JkaW5hdGVzLCBmYWxzZSBvdGhlcndpc2UuXG5cdCAqL1xuICAgIHRoaXMuaXNQb2ludEVxdWFsID0gZnVuY3Rpb24gKGNvb3JkczEsIGNvb3JkczIpIHtcbiAgICAgICAgcmV0dXJuIGNvb3JkczFbMF0gPT09IGNvb3JkczJbMF0gJiYgY29vcmRzMVsxXSA9PT0gY29vcmRzMlsxXTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlV0aWxpdGllc1xuXHQgKiBAbmFtZSBpc1BvaW50XG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgZmVhdHVyZSBvYmplY3QgYW5kIGRldGVybWluZXMgaWYgaXQgcmVwcmVzZW50cyBhIFBvaW50IGdlb21ldHJ5LlxuXHQgKiBAcGFyYW0ge09iamVjdH0gZiAtIFRoZSBmZWF0dXJlIG9iamVjdCB0byBiZSBjaGVja2VkLlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoZSBmZWF0dXJlIGlzIGEgUG9pbnQgZ2VvbWV0cnksIGZhbHNlIG90aGVyd2lzZS5cblx0ICovXG4gICAgdGhpcy5pc1BvaW50ID0gZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgcmV0dXJuICFmID8gZmFsc2UgOiBmLmdlb21ldHJ5LnR5cGUgPT09ICdQb2ludCc7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5VdGlsaXRpZXNcblx0ICogQG5hbWUgaXNQb2x5Z29uXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGRldGVybWluZXMgaWYgYSBmZWF0dXJlIHJlcHJlc2VudHMgYSBwb2x5Z29uIGJ5IGNvbXBhcmluZyBpdHMgZmlyc3QgYW5kIGxhc3QgY29vcmRpbmF0ZXMuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBmZWF0dXJlIC0gVGhlIGZlYXR1cmUgb2JqZWN0IHRvIGJlIGNoZWNrZWQuXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIGZlYXR1cmUgaXMgYSBwb2x5Z29uLCBmYWxzZSBvdGhlcndpc2UuXG5cdCAqL1xuICAgIHRoaXMuaXNQb2x5Z29uID0gZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgdmFyIGNvb3JkcyA9IGZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgICAgIHZhciBmaXJzdENvb3JkcyA9IGNvb3Jkc1swXTtcbiAgICAgICAgdmFyIGxhc3RDb29yZHMgPSBjb29yZHNbY29vcmRzLmxlbmd0aCAtIDFdO1xuICAgICAgICByZXR1cm4gdGhpcy5pc1BvaW50RXF1YWwoZmlyc3RDb29yZHMsIGxhc3RDb29yZHMpO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uVXRpbGl0aWVzXG5cdCAqIEBuYW1lIGlzTGluZVN0cmluZ1xuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiB0YWtlcyBhIEdlb0pTT04gZmVhdHVyZSBvYmplY3QgYW5kIGRldGVybWluZXMgaWYgaXQgcmVwcmVzZW50cyBhIExpbmVTdHJpbmcgZ2VvbWV0cnkuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBmIC0gVGhlIEdlb0pTT04gZmVhdHVyZSBvYmplY3QgdG8gYmUgY2hlY2tlZC5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgZmVhdHVyZSBpcyBhIExpbmVTdHJpbmcsIGZhbHNlIG90aGVyd2lzZS5cblx0ICovXG4gICAgdGhpcy5pc0xpbmVTdHJpbmcgPSBmdW5jdGlvbiAoZikge1xuICAgICAgICByZXR1cm4gIWYgPyBmYWxzZSA6IGYuZ2VvbWV0cnkudHlwZSA9PT0gJ0xpbmVTdHJpbmcnO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uVXRpbGl0aWVzXG5cdCAqIEBuYW1lIGlzVmFsaWRMaW5lU3RyaW5nXG5cdCAqIEBkZXNjcmlwdGlvbiBDaGVja3MgaWYgdGhlIGlucHV0IGZlYXR1cmUgaXMgYSB2YWxpZCBMaW5lU3RyaW5nIGJ5IHZlcmlmeWluZyBpdHMgZ2VvbWV0cnkgY29vcmRpbmF0ZXMuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBmIC0gVGhlIGlucHV0IGZlYXR1cmUgdG8gYmUgdmFsaWRhdGVkLlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoZSBpbnB1dCBmZWF0dXJlIGlzIGEgdmFsaWQgTGluZVN0cmluZywgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQgKi9cbiAgICB0aGlzLmlzVmFsaWRMaW5lU3RyaW5nID0gZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzTGluZVN0cmluZyhmKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgY29vcmRzID0gZi5nZW9tZXRyeS5jb29yZGluYXRlcztcbiAgICAgICAgaWYgKGNvb3Jkcy5sZW5ndGggPCAyKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uVXRpbGl0aWVzXG5cdCAqIEBuYW1lIGlzTGFzdEluZGV4XG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGRldGVybWluZXMgaWYgdGhlIHByb3ZpZGVkIGluZGV4IGlzIHRoZSBsYXN0IGluZGV4IGluIHRoZSBjb29yZGluYXRlcyBhcnJheSBvZiBhIGZlYXR1cmUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpIC0gVGhlIGluZGV4IHRvIGNoZWNrLlxuXHQgKiBAcGFyYW0ge29iamVjdH0gZiAtIFRoZSBmZWF0dXJlIG9iamVjdCBjb250YWluaW5nIHRoZSBjb29yZGluYXRlcyBhcnJheS5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgaW5kZXggaXMgdGhlIGxhc3QgaW5kZXgsIGZhbHNlIG90aGVyd2lzZS5cblx0ICovXG4gICAgdGhpcy5pc0xhc3RJbmRleCA9IGZ1bmN0aW9uIChpLCBmKSB7XG4gICAgICAgIHJldHVybiAhZiA/IGZhbHNlIDpcbiAgICAgICAgdGhpcy5pc0xpbmVTdHJpbmcoZikgPyBpID09IGYuZ2VvbWV0cnkuY29vcmRpbmF0ZXMubGVuZ3RoIC0gMSA6XG4gICAgICAgIHRoaXMuaXNQb2x5Z29uKGYpID8gaSA9PSBmLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdLmxlbmd0aCAtIDEgOlxuICAgICAgICBpID09IDAgPyB0cnVlIDpcbiAgICAgICAgZmFsc2U7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5VdGlsaXRpZXNcblx0ICogQG5hbWUgZ2V0TGFzdEluZGV4Q29vcmRzXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIGxhc3QgY29vcmRpbmF0ZXMgb2YgYSBnaXZlbiBnZW9tZXRyeSBvYmplY3QuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBmIC0gVGhlIGdlb21ldHJ5IG9iamVjdCB0byBleHRyYWN0IHRoZSBsYXN0IGNvb3JkaW5hdGVzIGZyb20uXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gVGhlIGxhc3QgY29vcmRpbmF0ZXMgb2YgdGhlIGdlb21ldHJ5IG9iamVjdC5cblx0ICovXG4gICAgdGhpcy5nZXRMYXN0SW5kZXhDb29yZHMgPSBmdW5jdGlvbiAoZikge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0xpbmVTdHJpbmcoZikgPyBmLmdlb21ldHJ5LmNvb3JkaW5hdGVzW2YuZ2VvbWV0cnkuY29vcmRpbmF0ZXMubGVuZ3RoIC0gMV0gOlxuICAgICAgICB0aGlzLmlzUG9seWdvbihmKSA/IGYuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF1bZi5nZW9tZXRyeS5jb29yZGluYXRlcy5sZW5ndGggLSAxXSA6XG4gICAgICAgIGYuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5VdGlsaXRpZXNcblx0ICogQG5hbWUgaXNFbXB0eUxpbmVTdHJpbmdcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gZGV0ZXJtaW5lcyBpZiB0aGUgcHJvdmlkZWQgZmVhdHVyZSBpcyBhIExpbmVTdHJpbmcgd2l0aCBvbmx5IHR3byBpZGVudGljYWwgcG9pbnRzLCBtYWtpbmcgaXQgYW4gZW1wdHkgTGluZVN0cmluZy5cblx0ICogQHBhcmFtIHtPYmplY3R9IGZlYXR1cmUgLSBUaGUgZmVhdHVyZSBvYmplY3QgdG8gYmUgY2hlY2tlZC5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgZmVhdHVyZSBpcyBhbiBlbXB0eSBMaW5lU3RyaW5nLCBvdGhlcndpc2UgZmFsc2UuXG5cdCAqL1xuICAgIHRoaXMuaXNFbXB0eUxpbmVTdHJpbmcgPSBmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICBpZiAoZmVhdHVyZS5nZW9tZXRyeS50eXBlID09PSBcIkxpbmVTdHJpbmdcIikge1xuICAgICAgICAgICAgdmFyIGNvb3JkcyA9IGZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG5cbiAgICAgICAgICAgIGlmIChjb29yZHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZpcnN0Q29vcmRzID0gY29vcmRzWzBdO1xuICAgICAgICAgICAgICAgIHZhciBsYXN0Q29vcmRzID0gY29vcmRzW2Nvb3Jkcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pc1BvaW50RXF1YWwoZmlyc3RDb29yZHMsIGxhc3RDb29yZHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uVXRpbGl0aWVzXG5cdCAqIEBuYW1lIGlzUG9pbnRBdFZlcnRleFxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBkZXRlcm1pbmVzIGlmIGEgcG9pbnQgaXMgYXQgdGhlIGZpcnN0IG9yIGxhc3QgdmVydGV4IG9mIGEgZ2VvbWV0cnkgYnkgY29tcGFyaW5nIGl0IHdpdGggdGhlIGZpcnN0IGFuZCBsYXN0IGNvb3JkaW5hdGVzLlxuXHQgKiBAcGFyYW0ge0FycmF5fSBnZW9tZXRyeUNvb3JkcyAtIFRoZSBhcnJheSBvZiBjb29yZGluYXRlcyByZXByZXNlbnRpbmcgdGhlIGdlb21ldHJ5LlxuXHQgKiBAcGFyYW0ge0FycmF5fSBwb2ludENvb3JkcyAtIFRoZSBjb29yZGluYXRlcyBvZiB0aGUgcG9pbnQgdG8gY2hlY2suXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIHBvaW50IGlzIGF0IHRoZSBmaXJzdCBvciBsYXN0IHZlcnRleCwgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQgKi9cbiAgICB0aGlzLmlzUG9pbnRBdFZlcnRleCA9IGZ1bmN0aW9uIChnZW9tZXRyeUNvb3JkcywgcG9pbnRDb29yZHMpIHtcbiAgICAgICAgdmFyIGZpcnN0UG9pbnQgPSBnZW9tZXRyeUNvb3Jkc1swXTtcbiAgICAgICAgdmFyIGxhc3RQb2ludCA9IGdlb21ldHJ5Q29vcmRzW2dlb21ldHJ5Q29vcmRzLmxlbmd0aCAtIDFdO1xuICAgICAgICByZXR1cm4gdGhpcy5pc1BvaW50RXF1YWwoZmlyc3RQb2ludCwgcG9pbnRDb29yZHMpIHx8IHRoaXMuaXNQb2ludEVxdWFsKGxhc3RQb2ludCwgcG9pbnRDb29yZHMpO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uVXRpbGl0aWVzXG5cdCAqIEBuYW1lIGlzUG9pbnROb3RUb29DbG9zZVxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBjYWxjdWxhdGVzIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHR3byBwb2ludHMgYW5kIGNoZWNrcyBpZiBpdCBleGNlZWRzIGEgbWluaW11bSBkaXN0YW5jZSB0aHJlc2hvbGQuXG5cdCAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gY29vcmRzMSAtIFRoZSBjb29yZGluYXRlcyBvZiB0aGUgZmlyc3QgcG9pbnQgW3gsIHldLlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGNvb3JkczIgLSBUaGUgY29vcmRpbmF0ZXMgb2YgdGhlIHNlY29uZCBwb2ludCBbeCwgeV0uXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIHBvaW50cyBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIG1pbmltdW0gZGlzdGFuY2UgdGhyZXNob2xkLCBmYWxzZSBvdGhlcndpc2UuXG5cdCAqL1xuICAgIHRoaXMuaXNQb2ludE5vdFRvb0Nsb3NlID0gZnVuY3Rpb24gKGNvb3JkczEsIGNvb3JkczIpIHtcbiAgICAgICAgdmFyIGxpbmUgPSB0dXJmLmxpbmVTdHJpbmcoW2Nvb3JkczEsIGNvb3JkczJdKTtcbiAgICAgICAgdmFyIGxlbmd0aCA9IHR1cmYubGluZURpc3RhbmNlKGxpbmUpO1xuXG4gICAgICAgIGlmIChsZW5ndGggPj0gc3RhdGljcy5jb25zdGFudHMuTUlOX0RJU1RBTkNFKSB7XG4gICAgICAgICAgICByZXR1cm4gIShjb29yZHMxWzBdID09PSBjb29yZHMyWzBdICYmIGNvb3JkczFbMV0gPT09IGNvb3JkczJbMV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5VdGlsaXRpZXNcblx0ICogQG5hbWUgaXNPdmVybGFwcGluZ1xuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiB0YWtlcyB0d28gZmVhdHVyZXMgYW5kIGRldGVybWluZXMgaWYgdGhleSBvdmVybGFwIGJ5IGNvbXBhcmluZyB0aGVpciBib3VuZGluZyBib3hlcy5cblx0ICogQHBhcmFtIHtPYmplY3R9IGZlYXR1cmUxIC0gVGhlIGZpcnN0IGZlYXR1cmUgb2JqZWN0IHdpdGggZ2VvbWV0cnkuY29vcmRpbmF0ZXMuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBmZWF0dXJlMiAtIFRoZSBzZWNvbmQgZmVhdHVyZSBvYmplY3Qgd2l0aCBnZW9tZXRyeS5jb29yZGluYXRlcy5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgZmVhdHVyZXMgb3ZlcmxhcCwgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQgKi9cbiAgICB0aGlzLmlzT3ZlcmxhcHBpbmcgPSBmdW5jdGlvbiAoZmVhdHVyZTEsIGZlYXR1cmUyKSB7XG4gICAgICAgIHZhciBjb29yZHMxID0gZmVhdHVyZTEuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgICAgIHZhciBjb29yZHMyID0gZmVhdHVyZTIuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG5cbiAgICAgICAgaWYgKGNvb3JkczEubGVuZ3RoID09PSAyICYmIGNvb3JkczIubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICB2YXIgYmJveDEgPSB0aGlzLmNyZWF0ZUJib3goY29vcmRzMSk7XG4gICAgICAgICAgICB2YXIgYmJveDIgPSB0aGlzLmNyZWF0ZUJib3goY29vcmRzMik7XG4gICAgICAgICAgICBpZiAoYmJveDEuZWFzdCA8IGJib3gyLndlc3QgfHwgYmJveDEud2VzdCA+IGJib3gyLmVhc3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGJib3gxLm5vcnRoIDwgYmJveDIuc291dGggfHwgYmJveDEuc291dGggPiBiYm94Mi5ub3J0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid3JvbmcgbnVtYmVyIG9mIGNvb3JkaW5hdGVzLCBleHBlY3RlZCAyXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5VdGlsaXRpZXNcblx0ICogQG5hbWUgY3JlYXRlTGluZVdpdGhMZW5ndGhcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gdGFrZXMgYW4gYXJyYXkgb2YgY29vcmRpbmF0ZXMgYW5kIGNyZWF0ZXMgYSBsaW5lIHN0cmluZyB1c2luZyBUdXJmLmpzLiBJdCB0aGVuIGNhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiB0aGUgbGluZSBhbmQgc2V0cyBpdCBhcyBhIHByb3BlcnR5IG9mIHRoZSBsaW5lLlxuXHQgKiBAcGFyYW0ge0FycmF5fSBjb29yZHMgLSBBbiBhcnJheSBvZiBjb29yZGluYXRlcyBbIFt4MSwgeTFdLCBbeDIsIHkyXSwgLi4uIF0uXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IC0gQSBUdXJmLmpzIGxpbmUgc3RyaW5nIHdpdGggdGhlIGNhbGN1bGF0ZWQgbGVuZ3RoIHByb3BlcnR5LlxuXHQgKi9cbiAgICB0aGlzLmNyZWF0ZUxpbmVXaXRoTGVuZ3RoID0gZnVuY3Rpb24gKGNvb3Jkcykge1xuICAgICAgICB2YXIgbGluZSA9IHR1cmYubGluZVN0cmluZyhjb29yZHMpO1xuICAgICAgICB2YXIgbGVuZ3RoID0gdHVyZi5saW5lRGlzdGFuY2UobGluZSk7XG4gICAgICAgIHRoaXMuc2V0UHJvcGVydGllcyhsaW5lLCB7IGxlbmd0aDogbGVuZ3RoIH0pO1xuICAgICAgICByZXR1cm4gbGluZTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlV0aWxpdGllc1xuXHQgKiBAbmFtZSByZWR1Y2VQcmVjaXNpb25cblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gcmVkdWNlcyB0aGUgcHJlY2lzaW9uIG9mIHRoZSBjb29yZGluYXRlcyB0byA3IGRlY2ltYWwgcGxhY2VzLlxuXHQgKiBAcGFyYW0ge0FycmF5fSBjb29yZHMgLSBBbiBhcnJheSBjb250YWluaW5nIHRoZSBjb29yZGluYXRlcyB0byBiZSBwcm9jZXNzZWQuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gVGhlIGNvb3JkaW5hdGVzIHdpdGggcmVkdWNlZCBwcmVjaXNpb24gdG8gNyBkZWNpbWFsIHBsYWNlcy5cblx0ICovXG4gICAgdGhpcy5yZWR1Y2VQcmVjaXNpb24gPSBmdW5jdGlvbiAoY29vcmRzKSB7XG4gICAgICAgIGNvb3Jkc1swXSA9IE51bWJlcihOdW1iZXIoY29vcmRzWzBdKS50b0ZpeGVkKDcpKTtcbiAgICAgICAgY29vcmRzWzFdID0gTnVtYmVyKE51bWJlcihjb29yZHNbMV0pLnRvRml4ZWQoNykpO1xuICAgICAgICByZXR1cm4gY29vcmRzO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uVXRpbGl0aWVzXG5cdCAqIEBuYW1lIGNyZWF0ZUJib3hcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gdGFrZXMgYW4gYXJyYXkgb2YgdHdvIGNvb3JkaW5hdGVzIGFuZCBjb25zdHJ1Y3RzIGEgYm91bmRpbmcgYm94IG9iamVjdCB3aXRoIHdlc3QsIGVhc3QsIHNvdXRoLCBhbmQgbm9ydGggcHJvcGVydGllcy5cblx0ICogQHBhcmFtIHtBcnJheX0gY29vcmRzIC0gQW4gYXJyYXkgb2YgdHdvIGNvb3JkaW5hdGVzIGluIHRoZSBmb3JtYXQgW1tsb24xLCBsYXQxXSwgW2xvbjIsIGxhdDJdXS5cblx0ICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhIGJvdW5kaW5nIGJveCBvYmplY3Qgd2l0aCB3ZXN0LCBlYXN0LCBzb3V0aCwgYW5kIG5vcnRoIHByb3BlcnRpZXMuXG5cdCAqL1xuICAgIHRoaXMuY3JlYXRlQmJveCA9IGZ1bmN0aW9uIChjb29yZHMpIHtcbiAgICAgICAgdmFyIGJib3gxID0ge307XG4gICAgICAgIGlmIChjb29yZHNbMF1bMF0gPCBjb29yZHNbMV1bMF0pIHtcbiAgICAgICAgICAgIGJib3gxLndlc3QgPSBjb29yZHNbMF1bMF07XG4gICAgICAgICAgICBiYm94MS5lYXN0ID0gY29vcmRzWzFdWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmJveDEud2VzdCA9IGNvb3Jkc1sxXVswXTtcbiAgICAgICAgICAgIGJib3gxLmVhc3QgPSBjb29yZHNbMF1bMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvb3Jkc1swXVsxXSA8IGNvb3Jkc1sxXVsxXSkge1xuICAgICAgICAgICAgYmJveDEuc291dGggPSBjb29yZHNbMF1bMV07XG4gICAgICAgICAgICBiYm94MS5ub3J0aCA9IGNvb3Jkc1sxXVsxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJib3gxLnNvdXRoID0gY29vcmRzWzFdWzFdO1xuICAgICAgICAgICAgYmJveDEubm9ydGggPSBjb29yZHNbMF1bMV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJib3gxO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uVXRpbGl0aWVzXG5cdCAqIEBuYW1lIHN0cmluZ1RvRE9NXG5cdCAqIEBkZXNjcmlwdGlvbiBDb252ZXJ0cyBhIHN0cmluZyB0byBhIERPTSBvYmplY3QgdXNpbmcgRE9NUGFyc2VyLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIGlucHV0IHN0cmluZyB0byBiZSBjb252ZXJ0ZWQgdG8gYSBET00gb2JqZWN0LlxuXHQgKiBAcmV0dXJucyB7RG9jdW1lbnR9IC0gVGhlIERPTSBvYmplY3QgY3JlYXRlZCBmcm9tIHRoZSBpbnB1dCBzdHJpbmcuXG5cdCAqL1xuICAgIHRoaXMuc3RyaW5nVG9ET00gPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHZhciBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG4gICAgICAgIHJldHVybiBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHN0ciwgXCJ0ZXh0L3htbFwiKTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlV0aWxpdGllc1xuXHQgKiBAbmFtZSBwcm9jZXNzRmlsZXNcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gcmVhZHMgZWFjaCBmaWxlIGluIHRoZSBpbnB1dCBhcnJheSwgZXh0cmFjdHMgdGhlIGZpbGUgbmFtZSBhbmQgZXh0ZW5zaW9uLCBhbmQgdGhlbiByZWFkcyB0aGUgZmlsZSBjb250ZW50IHVzaW5nIEZpbGVSZWFkZXIuIFRoZSBjb250ZW50IGlzIHBhc3NlZCB0byB0aGUgaGFuZGxlciBmdW5jdGlvbiBhbG9uZyB3aXRoIHRoZSBmaWxlIG5hbWUgYW5kIGV4dGVuc2lvbi5cblx0ICogQHBhcmFtIHtGaWxlW119IGZpbGVzIC0gQW4gYXJyYXkgb2YgRmlsZSBvYmplY3RzIHRvIGJlIHByb2Nlc3NlZC5cblx0ICogQHBhcmFtIHtmdW5jdGlvbn0gaGFuZGxlciAtIEEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCBmb3IgZWFjaCBmaWxlIHdpdGggdGhlIGZpbGUgY29udGVudCwgbmFtZSwgYW5kIGV4dGVuc2lvbiBhcyBwYXJhbWV0ZXJzLlxuXHQgKi9cbiAgICB0aGlzLnByb2Nlc3NGaWxlcyA9IGZ1bmN0aW9uIChmaWxlcywgaGFuZGxlcikge1xuICAgICAgICBmaWxlcy5mb3JFYWNoKGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gZmlsZS5uYW1lO1xuICAgICAgICAgICAgdmFyIGV4dCA9IG5hbWUuc3Vic3RyaW5nKG5hbWUubGFzdEluZGV4T2YoJy4nKSArIDEsIG5hbWUubGVuZ3RoKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgdmFyIGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuXG4gICAgICAgICAgICBmaWxlUmVhZGVyLm9ubG9hZGVuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmIChmaWxlUmVhZGVyLnJlYWR5U3RhdGUgPT09IEZpbGVSZWFkZXIuRE9ORSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcihmaWxlUmVhZGVyLnJlc3VsdCwgbmFtZSwgZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBKU09OIGRhdGFcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZpbGVSZWFkZXIucmVhZEFzVGV4dChmaWxlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5VdGlsaXRpZXNcblx0ICogQG5hbWUgY29tYmluZVNhbWVUeXBlRmVhdHVyZXNcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gdGFrZXMgYW4gYXJyYXkgb2YgbGluZSBmZWF0dXJlcyBhbmQgY29tYmluZXMgdGhlbSBieSBjb25uZWN0aW5nIHRoZW0gYmFzZWQgb24gdGhlaXIgY29vcmRpbmF0ZXMuIEl0IGNoZWNrcyB0aGUgZW5kcG9pbnRzIG9mIGVhY2ggbGluZSBmZWF0dXJlIGFuZCBjb25uZWN0cyB0aGVtIGFjY29yZGluZ2x5IHRvIGZvcm0gYSBjb250aW51b3VzIGxpbmUuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGZlYXR1cmVzIC0gQW4gYXJyYXkgb2YgbGluZSBmZWF0dXJlcyB0byBiZSBjb21iaW5lZC5cblx0ICogQHJldHVybnMge0FycmF5fSAtIEFuIGFycmF5IG9mIGNvb3JkaW5hdGVzIHJlcHJlc2VudGluZyB0aGUgY29tYmluZWQgbGluZSBmZWF0dXJlcy5cblx0ICovXG4gICAgdGhpcy5jb21iaW5lU2FtZVR5cGVGZWF0dXJlcyA9IGZ1bmN0aW9uIChmZWF0dXJlcykge1xuICAgICAgICB2YXIgY29vcmRzID0gW107XG5cbiAgICAgICAgZmVhdHVyZXMuZm9yRWFjaChmdW5jdGlvbihsaW5lU3RyaW5nKSB7XG4gICAgICAgICAgICBpZiAoY29vcmRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvb3Jkcy5wdXNoLmFwcGx5KGNvb3JkcywgX3RvQ29uc3VtYWJsZUFycmF5KGxpbmVTdHJpbmcuZ2VvbWV0cnkuY29vcmRpbmF0ZXMpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGZpcnN0UG9pbnQgPSBjb29yZHNbMF07XG4gICAgICAgICAgICAgICAgdmFyIGxhc3RQb2ludCA9IGNvb3Jkc1tjb29yZHMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRGaXJzdFBvaW50ID0gbGluZVN0cmluZy5nZW9tZXRyeS5jb29yZGluYXRlc1swXTtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudExhc3RQb2ludCA9IGxpbmVTdHJpbmcuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbbGluZVN0cmluZy5nZW9tZXRyeS5jb29yZGluYXRlcy5sZW5ndGggLSAxXTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzUG9pbnRFcXVhbChsYXN0UG9pbnQsIGN1cnJlbnRGaXJzdFBvaW50KSkge1xuICAgICAgICAgICAgICAgICAgICBjb29yZHMucHVzaC5hcHBseShjb29yZHMsIF90b0NvbnN1bWFibGVBcnJheShsaW5lU3RyaW5nLmdlb21ldHJ5LmNvb3JkaW5hdGVzLnNsaWNlKDEsIGxpbmVTdHJpbmcuZ2VvbWV0cnkuY29vcmRpbmF0ZXMubGVuZ3RoKSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1BvaW50RXF1YWwobGFzdFBvaW50LCBjdXJyZW50TGFzdFBvaW50KSkge1xuICAgICAgICAgICAgICAgICAgICBjb29yZHMucHVzaC5hcHBseShjb29yZHMsIF90b0NvbnN1bWFibGVBcnJheShsaW5lU3RyaW5nLmdlb21ldHJ5LmNvb3JkaW5hdGVzLnNsaWNlKDAsIGxpbmVTdHJpbmcuZ2VvbWV0cnkuY29vcmRpbmF0ZXMubGVuZ3RoIC0gMSkucmV2ZXJzZSgpKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzUG9pbnRFcXVhbChmaXJzdFBvaW50LCBjdXJyZW50TGFzdFBvaW50KSkge1xuICAgICAgICAgICAgICAgICAgICBjb29yZHMuc3BsaWNlLmFwcGx5KGNvb3JkcywgWzAsIDBdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkobGluZVN0cmluZy5nZW9tZXRyeS5jb29yZGluYXRlcy5zbGljZSgwLCBsaW5lU3RyaW5nLmdlb21ldHJ5LmNvb3JkaW5hdGVzLmxlbmd0aCAtIDEpKSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1BvaW50RXF1YWwoZmlyc3RQb2ludCwgY3VycmVudEZpcnN0UG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvb3Jkcy5zcGxpY2UuYXBwbHkoY29vcmRzLCBbMCwgMV0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShsaW5lU3RyaW5nLmdlb21ldHJ5LmNvb3JkaW5hdGVzLnJldmVyc2UoKSkpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGlzdGFuY2VUb0ZpcnN0UG9pbnQgPSB0dXJmLmRpc3RhbmNlKGxhc3RQb2ludCwgY3VycmVudEZpcnN0UG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGlzdGFuY2VUb0xhc3RQb2ludCA9IHR1cmYuZGlzdGFuY2UobGFzdFBvaW50LCBjdXJyZW50TGFzdFBvaW50KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGlzdGFuY2VUb0ZpcnN0UG9pbnQgPCBkaXN0YW5jZVRvTGFzdFBvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZHMucHVzaC5hcHBseShjb29yZHMsIF90b0NvbnN1bWFibGVBcnJheShsaW5lU3RyaW5nLmdlb21ldHJ5LmNvb3JkaW5hdGVzKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZHMucHVzaC5hcHBseShjb29yZHMsIF90b0NvbnN1bWFibGVBcnJheShbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGxpbmVTdHJpbmcuZ2VvbWV0cnkuY29vcmRpbmF0ZXMpKS5yZXZlcnNlKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgcmV0dXJuIGNvb3JkcztcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlV0aWxpdGllc1xuXHQgKiBAbmFtZSBkZWdyZWVzMm1ldGVyc1xuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiB0YWtlcyBhbiBhcnJheSBvZiBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlIGluIGRlZ3JlZXMgYW5kIGNvbnZlcnRzIGl0IHRvIG1ldGVycyB1c2luZyB0aGUgTWVyY2F0b3IgcHJvamVjdGlvbiBmb3JtdWxhLlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHB4IC0gQW4gYXJyYXkgY29udGFpbmluZyBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlIGluIGRlZ3JlZXMgW2xvbmdpdHVkZSwgbGF0aXR1ZGVdLlxuXHQgKiBAcmV0dXJucyB7QXJyYXk8bnVtYmVyPn0gQW4gYXJyYXkgY29udGFpbmluZyB0aGUgY29udmVydGVkIHggYW5kIHkgY29vcmRpbmF0ZXMgaW4gbWV0ZXJzLlxuXHQgKi9cbiAgICB0aGlzLmRlZ3JlZXMybWV0ZXJzID0gZnVuY3Rpb24gKHB4KSB7XG4gICAgICAgIGNvbnN0IHggPSBweFswXSAqIDIwMDM3NTA4LjM0IC8gMTgwO1xuICAgICAgICBsZXQgeSA9IE1hdGgubG9nKE1hdGgudGFuKCg5MCArIHB4WzFdKSAqIE1hdGguUEkgLyAzNjApKSAvIChNYXRoLlBJIC8gMTgwKTtcbiAgICAgICAgeSA9IHkgKiAyMDAzNzUwOC4zNCAvIDE4MDtcbiAgICAgICAgcmV0dXJuIFt4LCB5XVxuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uVXRpbGl0aWVzXG5cdCAqIEBuYW1lIG1ldGVyczJkZWdyZWVzXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgcGl4ZWwgdmFsdWUgYW5kIGNvbnZlcnRzIGl0IHRvIGxvbmdpdHVkZSBhbmQgbGF0aXR1ZGUgaW4gZGVncmVlcy5cblx0ICogQHBhcmFtIHtBcnJheX0gcHggLSBUaGUgcGl4ZWwgdmFsdWUgdG8gYmUgY29udmVydGVkLCBpbiB0aGUgZm9ybWF0IFt4LCB5XS5cblx0ICogQHJldHVybnMge0FycmF5fSBBbiBhcnJheSBjb250YWluaW5nIHRoZSBsb25naXR1ZGUgYW5kIGxhdGl0dWRlIGluIGRlZ3JlZXMsIFtsb24sIGxhdF0uXG5cdCAqL1xuICAgIHRoaXMubWV0ZXJzMmRlZ3JlZXMgPSBmdW5jdGlvbiAocHgpIHtcbiAgICAgICAgY29uc3QgbG9uID0gcHhbMF0gKiAxODAgLyAyMDAzNzUwOC4zNDtcbiAgICAgICAgY29uc3QgbGF0ID0gTWF0aC5hdGFuKE1hdGguZXhwKHB4WzFdICogTWF0aC5QSSAvIDIwMDM3NTA4LjM0KSkgKiAzNjAgLyBNYXRoLlBJIC0gOTA7XG4gICAgICAgIHJldHVybiBbbG9uLCBsYXRdXG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5VdGlsaXRpZXNcblx0ICogQG5hbWUgZXh0ZW5kXG5cdCAqIEBkZXNjcmlwdGlvbiBFeHRlbmRzIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBmaXJzdCBvYmplY3Qgd2l0aCB0aGUgcHJvcGVydGllcyBvZiB0aGUgc3Vic2VxdWVudCBvYmplY3RzLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IC0gVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZC5cblx0ICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgLSBUaGUgb2JqZWN0cyB3aG9zZSBwcm9wZXJ0aWVzIHdpbGwgYmUgYWRkZWQgdG8gdGhlIHRhcmdldCBvYmplY3QuXG5cdCAqIEByZXR1cm4ge09iamVjdH0gVGhlIGV4dGVuZGVkIG9iamVjdC5cblx0ICovXG4gICAgdGhpcy5leHRlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvcih2YXIgaT0xOyBpPGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGZvcih2YXIga2V5IGluIGFyZ3VtZW50c1tpXSlcbiAgICAgICAgICAgICAgICBpZihhcmd1bWVudHNbaV0uaGFzT3duUHJvcGVydHkoa2V5KSlcbiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzWzBdW2tleV0gPSBhcmd1bWVudHNbaV1ba2V5XTtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLlV0aWxpdGllc1xuXHQgKiBAbmFtZSBjbG9uZVxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiByZWN1cnNpdmVseSBjbG9uZXMgdGhlIGlucHV0IG9iamVjdCBvciBhcnJheSwgcHJlc2VydmluZyB0aGUgc3RydWN0dXJlIGFuZCB0eXBlcyBvZiB0aGUgZWxlbWVudHMuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fERhdGV8UmVnRXhwfEZ1bmN0aW9ufFN5bWJvbH0gdGhpbmcgLSBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIGJlIGNsb25lZC5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBPcHRpb25hbCBzZXR0aW5ncyBmb3IgY2xvbmluZyBmdW5jdGlvbnMgYW5kIHN5bWJvbHMuXG5cdCAqIEByZXR1cm5zIHtPYmplY3R8QXJyYXl8RGF0ZXxSZWdFeHB8RnVuY3Rpb258U3ltYm9sfSAtIEEgZGVlcCBjbG9uZSBvZiB0aGUgaW5wdXQgb2JqZWN0IG9yIGFycmF5LlxuXHQgKi9cbiAgICB0aGlzLmNsb25lID0gZnVuY3Rpb24odGhpbmcsIG9wdHMpIHtcbiAgICAgICAgdmFyIG5ld09iamVjdCA9IHt9O1xuXG4gICAgICAgIGlmICh0aGluZyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpbmcubWFwKGZ1bmN0aW9uIChpKSB7IHJldHVybiB0aGlzLmNsb25lKGksIG9wdHMpOyB9LCB0aGlzKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGluZyBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGluZyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpbmcgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKHRoaW5nKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGluZyBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0cyAmJiBvcHRzLm5ld0ZucyA/XG4gICAgICAgICAgICBuZXcgRnVuY3Rpb24oJ3JldHVybiAnICsgdGhpbmcudG9TdHJpbmcoKSkoKSA6XG4gICAgICAgICAgICB0aGluZztcbiAgICAgICAgfSBlbHNlIGlmICh0aGluZyBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpbmcpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBuZXdPYmplY3Rba2V5XSA9IHRoaXMuY2xvbmUodGhpbmdba2V5XSwgb3B0cyk7IH0sIHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIG5ld09iamVjdDtcbiAgICAgICAgfSBlbHNlIGlmIChbIHVuZGVmaW5lZCwgbnVsbCBdLmluZGV4T2YodGhpbmcpID4gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGluZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGluZy5jb25zdHJ1Y3Rvci5uYW1lID09PSAnU3ltYm9sJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBTeW1ib2wodGhpbmcudG9TdHJpbmcoKS5yZXBsYWNlKC9eU3ltYm9sXFwoLywgJycpLnNsaWNlKDAsIC0xKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGluZy5fX3Byb3RvX18uY29uc3RydWN0b3IodGhpbmcpO1xuICAgICAgICB9XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5VdGlsaXRpZXNcblx0ICogQG5hbWUgY2xvbmVEZWVwXG5cdCAqIEBkZXNjcmlwdGlvbiBSZWN1cnNpdmVseSBjbG9uZXMgYSB2YWx1ZSwgaW5jbHVkaW5nIG9iamVjdHMgYW5kIGFycmF5cywgcHJlc2VydmluZyB0aGUgb3JpZ2luYWwgc3RydWN0dXJlIGRlZXBseS5cblx0ICogQHBhcmFtIHthbnl9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGJlIGNsb25lZC5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gaW5zdGFuY2UgLSBBIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2xvbmUgY3VzdG9tIGluc3RhbmNlcy5cblx0ICogQHJldHVybnMge2FueX0gLSBUaGUgZGVlcGx5IGNsb25lZCB2YWx1ZS5cblx0ICovXG4gICAgdGhpcy5jbG9uZURlZXAgPSBmdW5jdGlvbih2YWx1ZSwgaW5zdGFuY2UpIHtcbiAgICAgICAgdmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG4gICAgICAgIHZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIF9jbG9uZURlZXAodmFsLCBpbnN0YW5jZUNsb25lKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGtpbmRPZih2YWwpKSB7XG4gICAgICAgICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZU9iamVjdERlZXAodmFsLCBpbnN0YW5jZUNsb25lKTtcbiAgICAgICAgICAgIGNhc2UgJ2FycmF5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmVBcnJheURlZXAodmFsLCBpbnN0YW5jZUNsb25lKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmUodmFsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gY2xvbmVPYmplY3REZWVwKG9iaiwgaW5zdGFuY2VDbG9uZSkge1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KG9iaikpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0ge307XG4gICAgICAgICAgICAgICAgZm9yT3duKG9iaiwgZnVuY3Rpb24ob2JqLCBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1trZXldID0gX2Nsb25lRGVlcChvYmosIGluc3RhbmNlQ2xvbmUpO1xuICAgICAgICAgICAgICAgIH0sIHJlcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5zdGFuY2VDbG9uZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZUNsb25lKG9iaik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gY2xvbmVBcnJheURlZXAoYXJyLCBpbnN0YW5jZUNsb25lKSB7XG4gICAgICAgICAgICB2YXIgbGVuID0gYXJyLmxlbmd0aFxuICAgICAgICAgICAgLCByZXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBpID0gLTE7XG4gICAgICAgICAgICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgICAgICAgICAgICAgcmVzW2ldID0gX2Nsb25lRGVlcChhcnJbaV0sIGluc3RhbmNlQ2xvbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWwgIT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KHZhbCkgPT09IGZhbHNlO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIGlzT2JqZWN0T2JqZWN0KG8pIHtcbiAgICAgICAgICAgIHJldHVybiBpc09iamVjdChvKSA9PT0gdHJ1ZSAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qobykge1xuICAgICAgICAgICAgdmFyIGN0b3IsIHByb3Q7XG4gICAgXG4gICAgICAgICAgICBpZiAoaXNPYmplY3RPYmplY3QobykgPT09IGZhbHNlKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBcbiAgICAgICAgICAgIC8vIElmIGhhcyBtb2RpZmllZCBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgY3RvciA9IG8uY29uc3RydWN0b3I7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGN0b3IgIT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIFxuICAgICAgICAgICAgLy8gSWYgaGFzIG1vZGlmaWVkIHByb3RvdHlwZVxuICAgICAgICAgICAgcHJvdCA9IGN0b3IucHJvdG90eXBlO1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0T2JqZWN0KHByb3QpID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgXG4gICAgICAgICAgICAvLyBJZiBjb25zdHJ1Y3RvciBkb2VzIG5vdCBoYXZlIGFuIE9iamVjdC1zcGVjaWZpYyBtZXRob2RcbiAgICAgICAgICAgIGlmIChwcm90Lmhhc093blByb3BlcnR5KCdpc1Byb3RvdHlwZU9mJykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgLy8gTW9zdCBsaWtlbHkgYSBwbGFpbiBPYmplY3RcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIGZvckluKG9iaiwgZm4sIHRoaXNBcmcpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAoZm4uY2FsbCh0aGlzQXJnLCBvYmpba2V5XSwga2V5LCBvYmopID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gZm9yT3duKG9iaiwgZm4sIHRoaXNBcmcpIHtcbiAgICAgICAgICAgIGZvckluKG9iaiwgZnVuY3Rpb24odmFsLCBrZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmbi5jYWxsKHRoaXNBcmcsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24ga2luZE9mKHZhbCkge1xuICAgICAgICAgICAgLy8gcHJpbWl0aXZpZXNcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHJldHVybiAndW5kZWZpbmVkJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWwgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ251bGwnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZhbCA9PT0gdHJ1ZSB8fCB2YWwgPT09IGZhbHNlIHx8IHZhbCBpbnN0YW5jZW9mIEJvb2xlYW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Jvb2xlYW4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnIHx8IHZhbCBpbnN0YW5jZW9mIFN0cmluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiAnc3RyaW5nJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJyB8fCB2YWwgaW5zdGFuY2VvZiBOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ251bWJlcic7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAvLyBmdW5jdGlvbnNcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nIHx8IHZhbCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdmdW5jdGlvbic7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAvLyBhcnJheVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBBcnJheS5pc0FycmF5ICE9PSAndW5kZWZpbmVkJyAmJiBBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2FycmF5JztcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIC8vIGNoZWNrIGZvciBpbnN0YW5jZXMgb2YgUmVnRXhwIGFuZCBEYXRlIGJlZm9yZSBjYWxsaW5nIGB0b1N0cmluZ2BcbiAgICAgICAgICAgIGlmICh2YWwgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3JlZ2V4cCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGF0ZSc7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAvLyBvdGhlciBvYmplY3RzXG4gICAgICAgICAgICB2YXIgdHlwZSA9IHRvU3RyaW5nLmNhbGwodmFsKTtcbiAgICBcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnW29iamVjdCBSZWdFeHBdJykge1xuICAgICAgICAgICAgICAgIHJldHVybiAncmVnZXhwJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RhdGUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdhcmd1bWVudHMnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdbb2JqZWN0IEVycm9yXScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Vycm9yJztcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIC8vIGJ1ZmZlclxuICAgICAgICAgICAgaWYgKGlzQnVmZmVyKHZhbCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2J1ZmZlcic7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAvLyBlczY6IE1hcCwgV2Vha01hcCwgU2V0LCBXZWFrU2V0XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ1tvYmplY3QgU2V0XScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3NldCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ1tvYmplY3QgV2Vha1NldF0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd3ZWFrc2V0JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnW29iamVjdCBNYXBdJykge1xuICAgICAgICAgICAgICAgIHJldHVybiAnbWFwJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnW29iamVjdCBXZWFrTWFwXScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3dlYWttYXAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzeW1ib2wnO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgLy8gdHlwZWQgYXJyYXlzXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ1tvYmplY3QgSW50OEFycmF5XScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2ludDhhcnJheSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ1tvYmplY3QgVWludDhBcnJheV0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd1aW50OGFycmF5JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd1aW50OGNsYW1wZWRhcnJheSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ1tvYmplY3QgSW50MTZBcnJheV0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdpbnQxNmFycmF5JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnW29iamVjdCBVaW50MTZBcnJheV0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd1aW50MTZhcnJheSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ1tvYmplY3QgSW50MzJBcnJheV0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdpbnQzMmFycmF5JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnW29iamVjdCBVaW50MzJBcnJheV0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd1aW50MzJhcnJheSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Zsb2F0MzJhcnJheSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Zsb2F0NjRhcnJheSc7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAvLyBtdXN0IGJlIGEgcGxhaW4gb2JqZWN0XG4gICAgICAgICAgICByZXR1cm4gJ29iamVjdCc7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gaXNCdWZmZXIob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqICE9IG51bGwgJiYgKF9pc0J1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopIHx8ICEhb2JqLl9pc0J1ZmZlcilcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBfaXNCdWZmZXIob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIGlzU2xvd0J1ZmZlcihvYmopIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIGlzRXh0ZW5kYWJsZSh2YWwpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdmFsICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgIT09IG51bGwgJiYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnIHx8IHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIG1peGluKHRhcmdldCwgb2JqZWN0cykge1xuICAgICAgICAgICAgaWYgKCFpc0V4dGVuZGFibGUodGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21peGluLW9iamVjdCBleHBlY3RzIHRoZSBmaXJzdCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICAgICAgLCBpID0gMDtcbiAgICAgICAgICAgIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICAgICAgICAgICAgICB2YXIgb2JqID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChpc0V4dGVuZGFibGUob2JqKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3JJbihvYmosIGNvcHksIHRhcmdldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBjbG9uZSh2YWwpIHtcbiAgICAgICAgICAgIHZhciB0eXBlID0ga2luZE9mKHZhbCk7XG4gICAgXG4gICAgICAgICAgICBpZiAoY2xvbmUuaGFzT3duUHJvcGVydHkodHlwZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmVbdHlwZV0odmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgY2xvbmUuYXJyYXkgPSBmdW5jdGlvbiBjbG9uZUFycmF5KGFycikge1xuICAgICAgICAgICAgcmV0dXJuIGFyci5zbGljZSgpO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGNsb25lLmRhdGUgPSBmdW5jdGlvbiBjbG9uZURhdGUoZGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCtkYXRlKTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBjbG9uZS5vYmplY3QgPSBmdW5jdGlvbiBjbG9uZU9iamVjdChvYmopIHtcbiAgICAgICAgICAgIGlmIChpc0V4dGVuZGFibGUob2JqKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtaXhpbih7fSwgb2JqKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIFxuICAgICAgICBjbG9uZS5yZWdleHAgPSBmdW5jdGlvbiBjbG9uZVJlZ0V4cChyZSkge1xuICAgICAgICAgICAgdmFyIGZsYWdzID0gJyc7XG4gICAgICAgICAgICBmbGFncyArPSByZS5tdWx0aWxpbmUgPyAnbScgOiAnJztcbiAgICAgICAgICAgIGZsYWdzICs9IHJlLmdsb2JhbCA/ICdnJyA6ICcnO1xuICAgICAgICAgICAgZmxhZ3MgKz0gcmUuaWdub3JlY2FzZSA/ICdpJyA6ICcnO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAocmUuc291cmNlLGZsYWdzKTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm4gX2Nsb25lRGVlcCh2YWx1ZSwgaW5zdGFuY2UpO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uVXRpbGl0aWVzXG5cdCAqIEBuYW1lIGFzc2lnbkRlZXBcblx0ICogQGRlc2NyaXB0aW9uIFJlY3Vyc2l2ZWx5IGFzc2lnbnMgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0IHRvIHRhcmdldCBvYmplY3QgZGVlcGx5LlxuXHQgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IC0gVGhlIHRhcmdldCBvYmplY3QgdG8gd2hpY2ggcHJvcGVydGllcyB3aWxsIGJlIGFzc2lnbmVkLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIC0gVGhlIHNvdXJjZSBvYmplY3Qgd2hvc2UgcHJvcGVydGllcyB3aWxsIGJlIGFzc2lnbmVkIHRvIHRoZSB0YXJnZXQuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3B0aW9uYWwgcGFyYW1ldGVycyBmb3IgdGhlIGFzc2lnbm1lbnQgcHJvY2Vzcy5cblx0ICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5pc011dGF0aW5nT2s9ZmFsc2VdIC0gRmxhZyB0byBhbGxvdyBtdXRhdGluZyB0aGUgdGFyZ2V0IG9iamVjdC5cblx0ICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5pc1N0cmljdGx5U2FmZT1mYWxzZV0gLSBGbGFnIHRvIGVuZm9yY2Ugc3RyaWN0IHNhZmV0eSBjaGVja3MgZHVyaW5nIGFzc2lnbm1lbnQuXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSB0YXJnZXQgb2JqZWN0IHdpdGggYXNzaWduZWQgcHJvcGVydGllcyBmcm9tIHRoZSBzb3VyY2Ugb2JqZWN0LlxuXHQgKi9cbiAgICB0aGlzLmFzc2lnbkRlZXAgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UsIHtpc011dGF0aW5nT2sgPSBmYWxzZSwgaXNTdHJpY3RseVNhZmUgPSBmYWxzZX0gPSB7fSkge1xuICAgICAgICB0YXJnZXQgPSBpc011dGF0aW5nT2sgPyB0YXJnZXQgOiB0aGlzLmNsb25lRGVlcCh0YXJnZXQpO1xuXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhzb3VyY2UpKSB7XG4gICAgICAgICAgICBpZiAodmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09IGBvYmplY3RgKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldFtrZXldID09PSB1bmRlZmluZWQpIHRhcmdldFtrZXldID0ge307ICAgIFxuICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gdGhpcy5hc3NpZ25EZWVwKHRhcmdldFtrZXldLCB2YWwsIHtpc011dGF0aW5nT2s6IHRydWV9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uVXRpbGl0aWVzXG5cdCAqIEBuYW1lIGNvbXBhcmVEZWVwXG5cdCAqIEBkZXNjcmlwdGlvbiBSZWN1cnNpdmVseSBjb21wYXJlcyB0d28gb2JqZWN0cyBkZWVwbHkgdG8gY2hlY2sgaWYgdGhleSBhcmUgZXF1YWwuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSB4IC0gVGhlIGZpcnN0IG9iamVjdCB0byBjb21wYXJlLlxuXHQgKiBAcGFyYW0ge09iamVjdH0geSAtIFRoZSBzZWNvbmQgb2JqZWN0IHRvIGNvbXBhcmUuXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIG9iamVjdHMgYXJlIGRlZXBseSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQgKi9cbiAgICB0aGlzLmNvbXBhcmVEZWVwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpLCBsLCBsZWZ0Q2hhaW4sIHJpZ2h0Q2hhaW47XG4gICAgICBcbiAgICAgICAgZnVuY3Rpb24gY29tcGFyZTJPYmplY3RzICh4LCB5KSB7XG4gICAgICAgICAgdmFyIHA7XG4gICAgICBcbiAgICAgICAgICAvLyByZW1lbWJlciB0aGF0IE5hTiA9PT0gTmFOIHJldHVybnMgZmFsc2VcbiAgICAgICAgICAvLyBhbmQgaXNOYU4odW5kZWZpbmVkKSByZXR1cm5zIHRydWVcbiAgICAgICAgICBpZiAoaXNOYU4oeCkgJiYgaXNOYU4oeSkgJiYgdHlwZW9mIHggPT09ICdudW1iZXInICYmIHR5cGVvZiB5ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgXG4gICAgICAgICAgLy8gQ29tcGFyZSBwcmltaXRpdmVzIGFuZCBmdW5jdGlvbnMuICAgICBcbiAgICAgICAgICAvLyBDaGVjayBpZiBib3RoIGFyZ3VtZW50cyBsaW5rIHRvIHRoZSBzYW1lIG9iamVjdC5cbiAgICAgICAgICAvLyBFc3BlY2lhbGx5IHVzZWZ1bCBvbiB0aGUgc3RlcCB3aGVyZSB3ZSBjb21wYXJlIHByb3RvdHlwZXNcbiAgICAgICAgICBpZiAoeCA9PT0geSkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICBcbiAgICAgICAgICAvLyBXb3JrcyBpbiBjYXNlIHdoZW4gZnVuY3Rpb25zIGFyZSBjcmVhdGVkIGluIGNvbnN0cnVjdG9yLlxuICAgICAgICAgIC8vIENvbXBhcmluZyBkYXRlcyBpcyBhIGNvbW1vbiBzY2VuYXJpby4gQW5vdGhlciBidWlsdC1pbnM/XG4gICAgICAgICAgLy8gV2UgY2FuIGV2ZW4gaGFuZGxlIGZ1bmN0aW9ucyBwYXNzZWQgYWNyb3NzIGlmcmFtZXNcbiAgICAgICAgICBpZiAoKHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB5ID09PSAnZnVuY3Rpb24nKSB8fFxuICAgICAgICAgICAgICh4IGluc3RhbmNlb2YgRGF0ZSAmJiB5IGluc3RhbmNlb2YgRGF0ZSkgfHxcbiAgICAgICAgICAgICAoeCBpbnN0YW5jZW9mIFJlZ0V4cCAmJiB5IGluc3RhbmNlb2YgUmVnRXhwKSB8fFxuICAgICAgICAgICAgICh4IGluc3RhbmNlb2YgU3RyaW5nICYmIHkgaW5zdGFuY2VvZiBTdHJpbmcpIHx8XG4gICAgICAgICAgICAgKHggaW5zdGFuY2VvZiBOdW1iZXIgJiYgeSBpbnN0YW5jZW9mIE51bWJlcikpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHgudG9TdHJpbmcoKSA9PT0geS50b1N0cmluZygpO1xuICAgICAgICAgIH1cbiAgICAgIFxuICAgICAgICAgIC8vIEF0IGxhc3QgY2hlY2tpbmcgcHJvdG90eXBlcyBhcyBnb29kIGFzIHdlIGNhblxuICAgICAgICAgIGlmICghKHggaW5zdGFuY2VvZiBPYmplY3QgJiYgeSBpbnN0YW5jZW9mIE9iamVjdCkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgIFxuICAgICAgICAgIGlmICh4LmlzUHJvdG90eXBlT2YoeSkgfHwgeS5pc1Byb3RvdHlwZU9mKHgpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICBcbiAgICAgICAgICBpZiAoeC5jb25zdHJ1Y3RvciAhPT0geS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgXG4gICAgICAgICAgaWYgKHgucHJvdG90eXBlICE9PSB5LnByb3RvdHlwZSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgXG4gICAgICAgICAgLy8gQ2hlY2sgZm9yIGluZmluaXRpdmUgbGlua2luZyBsb29wc1xuICAgICAgICAgIGlmIChsZWZ0Q2hhaW4uaW5kZXhPZih4KSA+IC0xIHx8IHJpZ2h0Q2hhaW4uaW5kZXhPZih5KSA+IC0xKSB7XG4gICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgXG4gICAgICAgICAgLy8gUXVpY2sgY2hlY2tpbmcgb2Ygb25lIG9iamVjdCBiZWluZyBhIHN1YnNldCBvZiBhbm90aGVyLlxuICAgICAgICAgIC8vIHRvZG86IGNhY2hlIHRoZSBzdHJ1Y3R1cmUgb2YgYXJndW1lbnRzWzBdIGZvciBwZXJmb3JtYW5jZVxuICAgICAgICAgIGZvciAocCBpbiB5KSB7XG4gICAgICAgICAgICAgIGlmICh5Lmhhc093blByb3BlcnR5KHApICE9PSB4Lmhhc093blByb3BlcnR5KHApKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHlbcF0gIT09IHR5cGVvZiB4W3BdKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICBcbiAgICAgICAgICBmb3IgKHAgaW4geCkge1xuICAgICAgICAgICAgICBpZiAoeS5oYXNPd25Qcm9wZXJ0eShwKSAhPT0geC5oYXNPd25Qcm9wZXJ0eShwKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB5W3BdICE9PSB0eXBlb2YgeFtwXSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICBcbiAgICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YgKHhbcF0pKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICAgICAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgbGVmdENoYWluLnB1c2goeCk7XG4gICAgICAgICAgICAgICAgICAgICAgcmlnaHRDaGFpbi5wdXNoKHkpO1xuICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb21wYXJlMk9iamVjdHMgKHhbcF0sIHlbcF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICBcbiAgICAgICAgICAgICAgICAgICAgICBsZWZ0Q2hhaW4ucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgcmlnaHRDaGFpbi5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgIFxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoeFtwXSAhPT0geVtwXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgXG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIFxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHJldHVybiB0cnVlO1xuICAgICAgXG4gICAgICAgIGZvciAoaSA9IDEsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBcbiAgICAgICAgICAgIGxlZnRDaGFpbiA9IFtdOyAvL1RvZG86IHRoaXMgY2FuIGJlIGNhY2hlZFxuICAgICAgICAgICAgcmlnaHRDaGFpbiA9IFtdO1xuICAgICAgXG4gICAgICAgICAgICBpZiAoIWNvbXBhcmUyT2JqZWN0cyhhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1tpXSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uVXRpbGl0aWVzXG5cdCAqIEBuYW1lIGNvbnN1bWFibGVBcnJheVxuXHQgKiBAZGVzY3JpcHRpb24gQ3JlYXRlcyBhIGNvbnN1bWFibGUgY29weSBvZiBhbiBhcnJheSBvciBhcnJheS1saWtlIG9iamVjdC5cblx0ICogQHBhcmFtIHtBcnJheXxBcnJheS1saWtlfSBhcnIgLSBUaGUgaW5wdXQgYXJyYXkgb3IgYXJyYXktbGlrZSBvYmplY3QgdG8gYmUgY29waWVkLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEEgY29uc3VtYWJsZSBjb3B5IG9mIHRoZSBpbnB1dCBhcnJheSBvciBhcnJheS1saWtlIG9iamVjdC5cblx0ICovXG4gICAgdGhpcy5jb25zdW1hYmxlQXJyYXkgPSBmdW5jdGlvbiAoYXJyKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBhcnIyW2ldID0gYXJyW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFycjI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShhcnIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcnIyW2ldID0gYXJyW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnIyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKGFycik7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBVdGlsaXRpZXM7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQgU3RhdGljcyBmcm9tICcuL3NyYy9TdGF0aWNzLmpzJztcbmltcG9ydCBPcHRpb25zIGZyb20gJy4vc3JjL09wdGlvbnMuanMnO1xuaW1wb3J0IFV0aWxpdGllcyBmcm9tICcuL3NyYy9VdGlsaXRpZXMuanMnO1xuaW1wb3J0IFN0eWxlcyBmcm9tICcuL3NyYy9TdHlsZXMuanMnO1xuaW1wb3J0IExheWVycyBmcm9tICcuL3NyYy9MYXllcnMuanMnO1xuaW1wb3J0IEZlYXR1cmVzIGZyb20gJy4vc3JjL0ZlYXR1cmVzLmpzJztcbmltcG9ydCBNZXNoIGZyb20gJy4vc3JjL01lc2guanMnO1xuaW1wb3J0IEV2ZW50cyBmcm9tICcuL3NyYy9FdmVudHMuanMnO1xuaW1wb3J0IFNlbGVjdCBmcm9tICcuL3NyYy9TZWxlY3QuanMnO1xuaW1wb3J0IERyYXcgZnJvbSAnLi9zcmMvRHJhdy5qcyc7XG5pbXBvcnQgTG9jYXRlIGZyb20gJy4vc3JjL0xvY2F0ZS5qcyc7XG5pbXBvcnQgU25hcHBpbmcgZnJvbSAnLi9zcmMvU25hcHBpbmcuanMnO1xuaW1wb3J0IFBpbm5pbmcgZnJvbSAnLi9zcmMvUGlubmluZy5qcyc7XG5pbXBvcnQgUm91dGluZyBmcm9tICcuL3NyYy9Sb3V0aW5nLmpzJztcbmltcG9ydCBFeHBsb3JpbmcgZnJvbSAnLi9zcmMvRXhwbG9yaW5nLmpzJztcbmltcG9ydCBQYWludGluZyBmcm9tICcuL3NyYy9QYWludGluZy5qcyc7XG5pbXBvcnQgQ29udHJvbCBmcm9tICcuL3NyYy9Db250cm9sLmpzJztcbmltcG9ydCBHYW1lcGFkIGZyb20gJy4vc3JjL0dhbWVwYWQuanMnO1xuXG4vKipcbiAqIEBtb2R1bGUgZ2VvZmxvXG4gKiBAbmFtZSBnZW9mbG9cbiAqIEBkZXNjcmlwdGlvbiBSZXByZXNlbnRzIHRoZSBHZW9GbG8gb2JqZWN0IHRoYXQgbWFuYWdlcyBhbGwgbW9kdWxlcy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBHZW9GbG8gb2JqZWN0IHdpdGggdmFyaW91cyBtZXRob2RzIGZvciBtYW5hZ2luZyB0aGUgZW50aXJlIGFwcC5cbiAqL1xuY29uc3QgR2VvRmxvID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGdlb2ZsbyA9IHRoaXM7XG4gICAgXG4gICAgdGhpcy5zdGF0aWNzID0gU3RhdGljcztcbiAgICB0aGlzLm9wdGlvbnMgPSBPcHRpb25zO1xuICAgIHRoaXMuZGV2ID0gdGhpcy5zdGF0aWNzLmRldmVsb3BlcjtcbiAgICB0aGlzLmlkID0gdGhpcy5zdGF0aWNzLmlkO1xuXG4gICAgdGhpcy5tb2RlcyA9IFtdO1xuICAgIHRoaXMucGx1Z2lucyA9IHt9O1xuICAgIHRoaXMuZ2FtZXBhZHMgPSB7fTtcbiAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLm1vYmlsZSA9IGlzTW9iaWxlKCk7XG5cbiAgICB2YXIgc2VsZWN0ZWRGZWF0dXJlcyA9IFtdO1xuICAgIHZhciBoaWRkZW5GZWF0dXJlcyA9IFtdO1xuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSBpbml0aWFsaXplXG5cdCAqIEBkZXNjcmlwdGlvbiBJbml0aWFsaXplcyB0aGUgb2JqZWN0IGFuZCBvcHRpb25hbGx5IGFzc2lnbnMgaXQgdG8gdGhlIGdsb2JhbCB3aW5kb3cgb2JqZWN0LlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgaW5pdGlhbGl6ZWQgb2JqZWN0LlxuXHQgKi9cbiAgICB0aGlzLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmluaXRpYWxpemVkKSByZXR1cm4gdGhpcztcbiAgICAgICAgd2luZG93W3RoaXMuaWRdID0gdGhpcztcbiAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBcblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIGluaXRcblx0ICogQGRlc2NyaXB0aW9uIEluaXRpYWxpemVzIHRoZSBtYXAgY29tcG9uZW50IHdpdGggdGhlIHByb3ZpZGVkIG9wdGlvbnMgYW5kIGEgY2FsbGJhY2sgZnVuY3Rpb24gd2hlbiByZWFkeS5cblx0ICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSAtIFRoZSBvcHRpb25zIG9iamVjdCBmb3IgY29uZmlndXJpbmcgdGhlIG1hcCBjb21wb25lbnQuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IG9uUmVhZHkgLSBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiB0aGUgbWFwIGlzIHJlYWR5LlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY29tcG9uZW50IGluc3RhbmNlLlxuXHQgKi9cbiAgICB0aGlzLmluaXQgPSBhc3luYyBmdW5jdGlvbiAoYWNjZXNzVG9rZW4sIG9wdGlvbnM9e30sIG9uUmVhZHkpIHtcbiAgICAgICAgdmFyIG9uUmVhZHlSZXR1cm47XG5cbiAgICAgICAgdGhpcy5VdGlsaXRpZXMgPSBuZXcgVXRpbGl0aWVzKCk7XG5cbiAgICAgICAgaWYgKCFhY2Nlc3NUb2tlbikgdGhyb3cgbmV3IEVycm9yKCdObyBNYXBib3ggQWNjZXNzIFRva2VuIFByb3ZpZGVkIScpO1xuICAgICAgICBpZiAodGhpcy5pc1JlYWR5KSByZXR1cm4gdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgICAgIGNvbnN0IGlkID0gb3B0aW9ucy5jb250YWluZXIgfHwgdGhpcy5vcHRpb25zLm1hcC5jb250YWluZXI7XG4gICAgICAgIGlmICghaWQpIHRocm93IG5ldyBFcnJvcignRWxlbWVudCBpZCBpcyByZXF1aXJlZCBpbiB0aGUgRE9NIGZvciB0aGUgbWFwIScpO1xuXG4gICAgICAgIGF3YWl0IGxvYWRTdHlsZXNoZWV0KFwiaHR0cHM6Ly9hcGkubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvdjMuNC4wL21hcGJveC1nbC5jc3NcIik7XG4gICAgICAgIGF3YWl0IGxvYWRTY3JpcHQoXCJodHRwczovL2FwaS5tYXBib3guY29tL21hcGJveC1nbC1qcy92My40LjAvbWFwYm94LWdsLmpzXCIpO1xuICAgICAgICBhd2FpdCBsb2FkU2NyaXB0KFwiaHR0cHM6Ly91bnBrZy5jb20vQHR1cmYvdHVyZkA3L3R1cmYubWluLmpzXCIpO1xuICAgICAgICBhd2FpdCBsb2FkU2NyaXB0KFwiaHR0cHM6Ly9hcGkudGlsZXMubWFwYm94LmNvbS9tYXBib3guanMvcGx1Z2lucy9sZWFmbGV0LW9tbml2b3JlL3YwLjMuMS9sZWFmbGV0LW9tbml2b3JlLm1pbi5qc1wiKTtcbiAgICAgICAgYXdhaXQgbG9hZFNjcmlwdChcImh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vanN6aXBAMy4xMC4xL2Rpc3QvanN6aXAubWluLmpzXCIpO1xuICAgICAgICBhd2FpdCBsb2FkU2NyaXB0KFwiaHR0cHM6Ly9hcGkubWFwYm94LmNvbS9zZWFyY2gtanMvdjEuMC4wLWJldGEuMTgvY29yZS5qc1wiKTtcblxuICAgICAgICB0aGlzLnN0eWxlcyA9IFtcbiAgICAgICAgICAgIHsgdGl0bGU6IFwiU3RhbmRhcmRcIiwgdXJpOiBcIm1hcGJveDovL3N0eWxlcy9zb2x1dGVncmF0ZS9jbHhkb2VjOHgwMDY5MDFxajd3amY4dXhvXCIgfSxcbiAgICAgICAgICAgIHsgdGl0bGU6IFwiU2F0ZWxsaXRlXCIsIHVyaTogXCJtYXBib3g6Ly9zdHlsZXMvc29sdXRlZ3JhdGUvY2xxYjExZDE1MDA1OTAxcGRieWIxM2I1aVwiIH0sXG4gICAgICAgICAgICB7IHRpdGxlOiBcIkRhcmtcIiwgdXJpOiBcIm1hcGJveDovL3N0eWxlcy9zb2x1dGVncmF0ZS9jbHE4bDE1OXYwMDNxMDFxdTI3NHo4ZThwXCIgfSxcbiAgICAgICAgICAgIHsgdGl0bGU6IFwiTGlnaHRcIiwgdXJpOiBcIm1hcGJveDovL3N0eWxlcy9zb2x1dGVncmF0ZS9jbHE4bDR5bHAwMDNtMDFxYmFwdmY2eXFuXCIgfSxcbiAgICAgICAgICAgIHsgdGl0bGU6IFwiT3V0ZG9vcnNcIiwgdXJpOiBcIm1hcGJveDovL3N0eWxlcy9zb2x1dGVncmF0ZS9jbHFiMTF5YWQwMDU4MDFudjZwMmtlNDEyXCIgfSxcbiAgICAgICAgICAgIHsgdGl0bGU6IFwiU3RyZWV0c1wiLCB1cmk6IFwibWFwYm94Oi8vc3R5bGVzL3NvbHV0ZWdyYXRlL2NscWIweTRpejAwNTkwMW50MHU0aDYycWRcIiB9ICAgICAgICAgXG4gICAgICAgIF07XG5cbiAgICAgICAgdGhpcy5vcHRpb25zLm1hcC5zdHlsZSA9IFwiRGFya1wiO1xuICAgICAgICB0aGlzLnNldE9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIFxuICAgICAgICB2YXIgY29udGFpbmVyID0gYXdhaXQgcmVhZHkoaWQpO1xuICAgICAgICB2YXIgc3R5bGUgPSB0aGlzLnN0eWxlcy5maW5kKHN0eWxlID0+IHN0eWxlLnRpdGxlID09PSB0aGlzLm9wdGlvbnMubWFwLnN0eWxlKS51cmk7XG5cbiAgICAgICAgdGhpcy5pc1JlYWR5ID0gY29udGFpbmVyID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICBpZiAoIXRoaXMuaXNSZWFkeSkgdGhyb3cgbmV3IEVycm9yKCdFbGVtZW50IGlkIGlzIHJlcXVpcmVkIGluIHRoZSBET00gZm9yIHRoZSBtYXAhJyk7XG5cbiAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQodGhpcy5zdGF0aWNzLmlkKTtcblxuICAgICAgICBidWlsZE1hcGJveC5jYWxsKHRoaXMpO1xuXG4gICAgICAgIHRoaXMubWFwYm94ID0gbmV3IG1hcGJveGdsLk1hcCh7XG4gICAgICAgICAgICBhY2Nlc3NUb2tlbjogYWNjZXNzVG9rZW4sXG4gICAgICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgICAgIGNlbnRlcjogdGhpcy5vcHRpb25zLm1hcC5jZW50ZXIsXG4gICAgICAgICAgICB6b29tOiB0aGlzLm9wdGlvbnMubWFwLnpvb20sXG4gICAgICAgICAgICBoYXNoOiB0cnVlLFxuICAgICAgICAgICAgcHJvamVjdGlvbjogJ21lcmNhdG9yJyxcbiAgICAgICAgICAgIGV4dGVudDogdGhpcy5vcHRpb25zLm1hcC5leHRlbnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy52aWV3cG9ydCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLnZpZXdwb3J0SGVpZ2h0T2Zmc2V0ID0gMTEwO1xuICAgICAgICB0aGlzLnZpZXdwb3J0V2lkdGhPZmZzZXQgPSAyMDtcbiAgICAgICAgdGhpcy52aWV3cG9ydExlZnQgPSAnMTBweCc7XG4gICAgICAgIHRoaXMudmlld3BvcnRCb3R0b20gPSAnNSUnO1xuICAgICAgICB0aGlzLm5vU2VsZWN0ID0gb3B0aW9ucy5ub1NlbGVjdCB8fCBmYWxzZTtcbiAgICAgICAgdGhpcy5tYXBib3gub24oJ2xvYWQnLCB0aGlzLm9uTG9hZC5iaW5kKHRoaXMpKTtcblxuICAgICAgICBhd2FpdCBsb2FkZWQodGhpcyk7XG4gICAgICAgIGF3YWl0IHRoaXMucmVkcmF3KCk7XG5cbiAgICAgICAgdGhpcy5zZXRWaWV3cG9ydCgpO1xuICAgICAgICB0aGlzLnNldEV4dGVudChmYWxzZSwgdHJ1ZSk7XG5cbiAgICAgICAgdGhpcy5maXJlKCdzZGsucmVhZHknLCB7IGVuYWJsZWQ6IHRoaXMuZW5hYmxlZCwgbWFwOiB0aGlzLm1hcCwgcmVhZHk6IHRoaXMuaXNMb2FkZWQgfSk7XG5cbiAgICAgICAgaWYgKG9uUmVhZHkgJiYgdHlwZW9mIG9uUmVhZHkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGlmIChvblJlYWR5LmNvbnN0cnVjdG9yLm5hbWUgPT09ICdBc3luY0Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIG9uUmVhZHlSZXR1cm4gPSBhd2FpdCBvblJlYWR5LmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9uUmVhZHlSZXR1cm4gPSBvblJlYWR5LmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob25SZWFkeVJldHVybikge1xuICAgICAgICAgICAgaWYgKCFvblJlYWR5UmV0dXJuLmRpc2FibGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVuYWJsZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbmFibGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgbG9hZFxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBsb2FkcyB0aGUgTWFwYm94R0wgU0RLIHdpdGggdGhlIGdpdmVuIE1hcGJveEdMIG1hcCBvYmplY3QgYW5kIHNldHMgdXAgbmVjZXNzYXJ5IGNvbXBvbmVudHMgZm9yIGludGVyYWN0aW9uLiBMb2FkcyB0aGUgVXNlciwgTGF5ZXJzLCBhbmQgRmVhdHVyZXMgY29tcG9uZW50cywgYW5kIGluaXRpYWxpemVzIGV2ZW50IGxpc3RlbmVycy4gQ2FsbHMgdGhlIG9uUmVhZHkgY2FsbGJhY2sgaWYgcHJvdmlkZWQuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgLSBUaGUgTWFwYm94R0wgbWFwIG9iamVjdCB0byBiZSB1c2VkIGJ5IHRoZSBTREsuXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IC0gUmV0dXJucyB0aGUgU0RLIGluc3RhbmNlIGFmdGVyIGxvYWRpbmcgYW5kIGluaXRpYWxpemF0aW9uLlxuXHQgKi9cbiAgICB0aGlzLmxvYWQgPSBmdW5jdGlvbiAobWFwKSB7XG4gICAgICAgIGlmICh0aGlzLmlzTG9hZGVkIHx8ICF0aGlzLmlzUmVhZHkpIHJldHVybiB0aGlzO1xuXG4gICAgICAgIHRoaXMubWFwID0gbWFwO1xuXG4gICAgICAgIHRoaXMubG9jYXRlID0gbmV3IExvY2F0ZSgpO1xuXG4gICAgICAgIHRoaXMubmF2aWdhdGlvbiA9IG5ldyBtYXBib3hnbC5OYXZpZ2F0aW9uQ29udHJvbCh7IHZpc3VhbGl6ZVBpdGNoOiB0cnVlLCBzaG93Wm9vbTogdHJ1ZSwgc2hvd0NvbXBhc3M6IHRydWUgfSk7XG4gICAgICAgIHRoaXMubmF2aWdhdGlvbi5oaWRlID0gZnVuY3Rpb24gKCkgeyB0aGlzLl9jb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJyB9LmJpbmQodGhpcy5uYXZpZ2F0aW9uKTtcbiAgICAgICAgdGhpcy5uYXZpZ2F0aW9uLnNob3cgPSBmdW5jdGlvbiAoKSB7IHRoaXMuX2NvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJyB9LmJpbmQodGhpcy5uYXZpZ2F0aW9uKTtcbiAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbCh0aGlzLm5hdmlnYXRpb24sICd0b3AtcmlnaHQnKTtcblxuICAgICAgICBpZiAoIXRoaXMubW9iaWxlKSB7XG4gICAgICAgICAgICB0aGlzLmZ1bGxzY3JlZW4gPSBuZXcgbWFwYm94Z2wuRnVsbHNjcmVlbkNvbnRyb2woeyBjb250YWluZXI6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKSB9KTtcbiAgICAgICAgICAgIHRoaXMuZnVsbHNjcmVlbi5oaWRlID0gZnVuY3Rpb24gKCkgeyB0aGlzLl9jb250cm9sQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZScgfS5iaW5kKHRoaXMuZnVsbHNjcmVlbik7XG4gICAgICAgICAgICB0aGlzLmZ1bGxzY3JlZW4uc2hvdyA9IGZ1bmN0aW9uICgpIHsgdGhpcy5fY29udHJvbENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJyB9LmJpbmQodGhpcy5mdWxsc2NyZWVuKTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5mdWxsc2NyZWVuLCAndG9wLXJpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgdGhpcy5zdHlsZXMgPSBuZXcgU3R5bGVzKHRoaXMsIHsgc3R5bGVzOiB0aGlzLnN0eWxlcywgc2VsZWN0ZWQ6IHRoaXMub3B0aW9ucy5tYXAuc3R5bGUgfSk7XG4gICAgICAgIHRoaXMuTGF5ZXJzID0gbmV3IExheWVycyh0aGlzKTtcbiAgICAgICAgdGhpcy5GZWF0dXJlcyA9IG5ldyBGZWF0dXJlcyh0aGlzKTtcblxuICAgICAgICB0aGlzLm1hcC5hZGRDb250cm9sKHRoaXMuc3R5bGVzKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuRXZlbnRzID0gRXZlbnRzKHRoaXMpO1xuICAgICAgICB0aGlzLkV2ZW50cy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLkV2ZW50cy5hZGRFdmVudExpc3RlbmVycygpO1xuXG4gICAgICAgIHRoaXMuaXNMb2FkZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIGVuYWJsZVxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBlbmFibGVzIHRoZSBtYXAgaW50ZXJhY3Rpb24gbW9kZSBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgdHlwZSBhbmQgb3B0aW9ucy4gSXQgc2V0cyB0aGUgbW9kZSB0byAnc2VsZWN0JyBvciAnZHJhdycgZGVwZW5kaW5nIG9uIHRoZSB0eXBlIHBhcmFtZXRlciwgaW5pdGlhbGl6ZXMgb3B0aW9ucywgY29udHJvbHMsIG1vZGVzLCBhbmQgdHJpZ2dlcnMgZXZlbnRzLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSB0eXBlIG9mIGludGVyYWN0aW9uIG1vZGUgdG8gZW5hYmxlICgnc2VsZWN0JyBvciAnZHJhdycpLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIEFkZGl0aW9uYWwgb3B0aW9ucyBmb3IgdGhlIGludGVyYWN0aW9uIG1vZGUgKGRlZmF1bHQ6IHt9KS5cblx0ICogQHJldHVybnMge09iamVjdH0gLSBUaGUgY3VycmVudCBpbnN0YW5jZSBvZiB0aGUgbWFwIHdpdGggdGhlIGVuYWJsZWQgaW50ZXJhY3Rpb24gbW9kZS5cblx0ICovXG4gICAgdGhpcy5lbmFibGUgPSBmdW5jdGlvbiAodHlwZSwgb3B0aW9ucz17fSkge1xuICAgICAgICBpZiAodGhpcy5lbmFibGVkKSByZXR1cm4gdGhpcztcbiAgICAgICAgXG4gICAgICAgIHRoaXMubW9kZSA9ICF0eXBlIHx8IHR5cGUgPT09ICdzZWxlY3QnID8gJ3NlbGVjdCcgOiAnZHJhdyc7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG5cbiAgICAgICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnNldENvbnRyb2xzKCk7XG5cbiAgICAgICAgdGhpcy5TZWxlY3QgPSBuZXcgU2VsZWN0KHRoaXMpO1xuICAgICAgICB0aGlzLkRyYXcgPSBuZXcgRHJhdyh0aGlzKTtcblxuICAgICAgICB0aGlzLm1vZGVzID0gWyB0aGlzLlNlbGVjdCwgdGhpcy5EcmF3IF07XG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5zZXRNb2RlKHsgbW9kZTogdGhpcy5tb2RlLCB0eXBlOiB0aGlzLnR5cGV9KTtcbiAgICAgICAgdGhpcy5maXJlKCdtYXAuZW5hYmxlJywgeyBlbmFibGVkOiB0aGlzLmVuYWJsZWQsIG1vZGU6IHRoaXMubW9kZSwgdHlwZTogdGhpcy50eXBlIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIGRpc2FibGVcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gZGlzYWJsZXMgdGhlIG1hcCBieSBjbGVhcmluZyBtb2Rlcywgc2V0dGluZyBlbmFibGVkIHRvIGZhbHNlLCByZXNldHRpbmcgbW9kZSB0byBudWxsLCByZXNldHRpbmcgb3B0aW9ucyB0byBkZWZhdWx0LCBmaXJpbmcgYSAnbWFwLmRpc2FibGUnIGV2ZW50LCBlbmFibGluZyBkb3VibGUgY2xpY2sgem9vbSwgcmVtb3ZpbmcgZXZlbnQgbGlzdGVuZXJzLCBsYXllcnMsIGFuZCBjb250cm9scy5cblx0ICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBpbnN0YW5jZSBvZiB0aGUgbWFwIG9iamVjdC5cblx0ICovXG4gICAgdGhpcy5kaXNhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlZCkgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgdGhpcy5tb2RlcyA9IFtdO1xuICAgICAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5tb2RlID0gbnVsbDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gT3B0aW9ucztcbiAgICAgICAgdGhpcy5kb3VibGVDbGlja1pvb20uZW5hYmxlKHRoaXMubWFwKTtcbiAgICAgICAgdGhpcy5MYXllcnMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5FdmVudHMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5MYXllcnMucmVtb3ZlTGF5ZXJzKCk7XG4gICAgICAgIHRoaXMucmVtb3ZlQ29udHJvbHMoKTtcbiAgICAgICAgdGhpcy5maXJlKCdtYXAuZGlzYWJsZScsIHsgZW5hYmxlZDogdGhpcy5lbmFibGVkLCBtb2RlOiB0aGlzLm1vZGUgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgcmVkcmF3XG5cdCAqIEBkZXNjcmlwdGlvbiBSZWRyYXdzIHRoZSBtYXAgYnkgcmVmcmVzaGluZyBsYXllcnMsIHVwZGF0aW5nIGV2ZW50IGxpc3RlbmVycywgYW5kIGRpc2FibGluZyBkb3VibGUgY2xpY2sgem9vbS5cblx0ICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdHJ1ZSBpZiB0aGUgbWFwIGlzIHN1Y2Nlc3NmdWxseSByZWRyYXduLCBmYWxzZSBvdGhlcndpc2UuXG5cdCAqL1xuICAgIHRoaXMucmVkcmF3ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuRXZlbnRzKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGF3YWl0IHRoaXMuTGF5ZXJzLnJlZnJlc2goKTtcbiAgICAgICAgdGhpcy5FdmVudHMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5FdmVudHMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5GZWF0dXJlcy51cGRhdGVTb3VyY2UoKTtcbiAgICAgICAgdGhpcy5kb3VibGVDbGlja1pvb20uZGlzYWJsZSh0aGlzLm1hcCk7XG4gICAgICAgIHRoaXMuc2V0Vmlld3BvcnQoKTtcbiAgICAgICAgdGhpcy5tYXAuc3R5bGUuZ2x5cGhNYW5hZ2VyLnVybHNbXCJcIl0gPSBgbWFwYm94Oi8vZm9udHMvJHt0aGlzLmRldn0ve2ZvbnRzdGFja30ve3JhbmdlfS5wYmZgXG4gICAgICAgIHRoaXMuZmlyZSgnbWFwLnJlZHJhdycsIHsgZW5hYmxlZDogdGhpcy5lbmFibGVkLCBtb2RlOiB0aGlzLm1vZGUgfSlcbiAgICAgICAgaWYgKHRoaXMub25SZWFkeSkgYXdhaXQgdGhpcy5vblJlYWR5KHRoaXMpLCBkZWxldGUgdGhpcy5vblJlYWR5O1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgcmVmcmVzaFxuXHQgKiBAZGVzY3JpcHRpb24gUmVmcmVzaGVzIHRoZSBjb250ZW50IGJ5IHJlZHJhd2luZyBpdCBhc3luY2hyb25vdXNseS5cblx0ICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBib29sZWFuIHZhbHVlLlxuXHQgKi9cbiAgICB0aGlzLnJlZnJlc2ggPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLm5vUmVmcmVzaCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBhd2FpdCB0aGlzLnJlZHJhdygpO1xuICAgICAgICB0aGlzLmZpcmUoJ21hcC5yZWZyZXNoJywgeyBlbmFibGVkOiB0aGlzLmVuYWJsZWQsIG1vZGU6IHRoaXMubW9kZSB9KVxuICAgIH1cblxuXG5cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgb25jZVxuXHQgKiBAZGVzY3JpcHRpb24gUmVnaXN0ZXJzIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWQgb25seSBvbmNlIGZvciBhIHNwZWNpZmljIEdlb0ZsbyBldmVudCB0eXBlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSB0eXBlIG9mIGV2ZW50IHRvIGxpc3RlbiBmb3IuXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIGV2ZW50IG9jY3Vycy5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgY2FsbGJhY2sgaXMgc3VjY2Vzc2Z1bGx5IHJlZ2lzdGVyZWQgdG8gYmUgZXhlY3V0ZWQgb25jZSwgb3RoZXJ3aXNlIGZhbHNlLlxuXHQgKi9cbiAgICB0aGlzLm9uY2UgPSBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwICYmIHR5cGUgPyB0aGlzLm1hcC5vbmNlKHRoaXMuaWQgKyAnOicgKyB0eXBlLCBjYWxsYmFjaykgOiBmYWxzZTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIG9uXG5cdCAqIEBkZXNjcmlwdGlvbiBSZWdpc3RlcnMgYSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBleGVjdXRlZCBmb3IgYSBzcGVjaWZpYyBHZW9GbG8gZXZlbnQgdHlwZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdHlwZSBvZiBldmVudCB0byBsaXN0ZW4gZm9yLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIFRoZSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBleGVjdXRlZCB3aGVuIHRoZSBldmVudCBvY2N1cnMuXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIGV2ZW50IGxpc3RlbmVyIHdhcyBzdWNjZXNzZnVsbHkgYXR0YWNoZWQsIGZhbHNlIG90aGVyd2lzZS5cblx0ICovXG4gICAgdGhpcy5vbiA9IGZ1bmN0aW9uICh0eXBlLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoIWNhbGxiYWNrLm5hbWUpIHRocm93IG5ldyBFcnJvcignRnVuY3Rpb24gbXVzdCBoYXZlIGEgbmFtZSEnKVxuICAgICAgICByZXR1cm4gdGhpcy5tYXAgJiYgdHlwZSA/IHRoaXMubWFwLm9uKHRoaXMuaWQgKyAnOicgKyB0eXBlLCBjYWxsYmFjaykgOiBmYWxzZTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIG9mZlxuXHQgKiBAZGVzY3JpcHRpb24gUmVtb3ZlcyBhbiBldmVudCBsaXN0ZW5lciBmcm9tIHRoZSBtYXAgYmFzZWQgb24gdGhlIHByb3ZpZGVkIEdlb0ZsbyBldmVudCB0eXBlIGFuZCBjYWxsYmFjay4gQ2FsbGJhY2sgZnVuY3Rpb24gbXVzdCBoYXZlIGEgbmFtZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdHlwZSBvZiBldmVudCB0byByZW1vdmUgdGhlIGxpc3RlbmVyIGZyb20uXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIHJlbW92ZWQgYXMgdGhlIGV2ZW50IGxpc3RlbmVyLlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoZSBldmVudCBsaXN0ZW5lciB3YXMgc3VjY2Vzc2Z1bGx5IHJlbW92ZWQsIGZhbHNlIG90aGVyd2lzZS5cblx0ICovXG4gICAgdGhpcy5vZmYgPSBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFjYWxsYmFjay5uYW1lKSB0aHJvdyBuZXcgRXJyb3IoJ0Z1bmN0aW9uIG11c3QgaGF2ZSBhIG5hbWUhJylcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwICYmIHR5cGUgPyB0aGlzLm1hcC5vZmYodGhpcy5pZCArICc6JyArIHR5cGUsIGNhbGxiYWNrKSA6IGZhbHNlO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgZmlyZVxuXHQgKiBAZGVzY3JpcHRpb24gRmlyZXMgYW4gZXZlbnQgd2l0aCB0aGUgc3BlY2lmaWVkIEdlb0ZsbyB0eXBlIGFuZCBkZXRhaWwuIERldGFpbCBpcyBhbiBPYmplY3QgdHlwZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdHlwZSBvZiB0aGUgZXZlbnQgdG8gZmlyZS5cblx0ICogQHBhcmFtIHthbnl9IGRldGFpbCAtIEFkZGl0aW9uYWwgZGV0YWlscyB0byBpbmNsdWRlIHdpdGggdGhlIGV2ZW50LlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoZSBldmVudCB3YXMgc3VjY2Vzc2Z1bGx5IGZpcmVkLCBmYWxzZSBvdGhlcndpc2UuXG5cdCAqL1xuICAgIHRoaXMuZmlyZSA9IGZ1bmN0aW9uICh0eXBlLCBkZXRhaWwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwICYmIHR5cGUgPyB0aGlzLm1hcC5maXJlKHRoaXMuaWQgKyAnOicgKyB0eXBlLCB7IGRldGFpbDogZGV0YWlsIH0pIDogZmFsc2U7XG4gICAgfVxuXG5cblxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSBzZXRPcHRpb25zXG5cdCAqIEBkZXNjcmlwdGlvbiBTZXRzIHRoZSBvcHRpb25zIGZvciB0aGUgb2JqZWN0IGJ5IG1lcmdpbmcgdGhlIHByb3ZpZGVkIG9wdGlvbnMgd2l0aCB0aGUgZXhpc3Rpbmcgb25lcy5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyB0byBiZSBtZXJnZWQgd2l0aCB0aGUgZXhpc3Rpbmcgb3B0aW9ucy5cblx0ICogQHJldHVybnMge09iamVjdH0gVGhlIHVwZGF0ZWQgb3B0aW9ucyBvYmplY3QgYWZ0ZXIgbWVyZ2luZy5cblx0ICovXG4gICAgdGhpcy5zZXRPcHRpb25zID0gZnVuY3Rpb24ob3B0aW9ucz17fSkge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLlV0aWxpdGllcy5hc3NpZ25EZWVwKHRoaXMub3B0aW9ucyB8fCB7fSwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnM7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSBzZXRNb2RlXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGFsbG93cyB0aGUgdXNlciB0byBzZXQgdGhlIG1vZGUgb2YgdGhlIG1hcCBlZGl0b3Igd2l0aCB2YXJpb3VzIG9wdGlvbnMuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0IGZvciBzZXR0aW5nIHRoZSBtb2RlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubW9kZT0nc2VsZWN0J10gLSBUaGUgbW9kZSB0byBzZXQgKGRlZmF1bHQ6IHNlbGVjdCkuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy50eXBlPSdMaW5lU3RyaW5nJ10gLSBUaGUgdHlwZSBvZiB0aGUgbW9kZSAoZGVmYXVsdDogTGluZVN0cmluZykuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5mZWF0dXJlXSAtIFRoZSBmZWF0dXJlIHRvIGVkaXQgaW4gdGhlIG1vZGUuXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBjdXJyZW50IG1vZGUgYWZ0ZXIgc2V0dGluZyBpdCBiYXNlZCBvbiB0aGUgb3B0aW9ucy5cblx0ICovXG4gICAgdGhpcy5zZXRNb2RlID0gZnVuY3Rpb24gKG9wdGlvbnM9e30pIHtcbiAgICAgICAgaWYgKCFvcHRpb25zLm1vZGUpIG9wdGlvbnMubW9kZSA9IHRoaXMuc3RhdGljcy5jb25zdGFudHMubW9kZXMuU0VMRUNUO1xuICAgICAgICBpZiAoIW9wdGlvbnMudHlwZSkgb3B0aW9ucy50eXBlID0gJ1BvbHlsaW5lJztcblxuICAgICAgICB2YXIgY2xhc3Nlc1RvUmVtb3ZlID0gW107XG4gICAgICAgIHZhciBzZWxlY3RlZE1vZGUgPSBudWxsO1xuICAgICAgICB2YXIgZWRpdE1vZGUgPSBvcHRpb25zLm1vZGUgPT09IHRoaXMuc3RhdGljcy5jb25zdGFudHMubW9kZXMuRURJVDtcblxuICAgICAgICBpZiAodGhpcy5jdXJyZW50TW9kZSAmJiBvcHRpb25zLm1vZGUgPT09IHRoaXMubW9kZSAmJiBvcHRpb25zLnR5cGUgPT09IHRoaXMuY3VycmVudE1vZGUudHlwZSkgcmV0dXJuIHRoaXMuY3VycmVudE1vZGU7XG4gICAgICAgIFxuICAgICAgICBpZiAoZWRpdE1vZGUpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmZlYXR1cmUgPSBnZW9mbG8uVXRpbGl0aWVzLmNsb25lRGVlcChvcHRpb25zLmZlYXR1cmUpO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMubW9kZSA9IHRoaXMuc3RhdGljcy5jb25zdGFudHMubW9kZXMuRFJBVztcbiAgICAgICAgICAgICAgICBvcHRpb25zLnR5cGUgPSBvcHRpb25zLnR5cGUgfHwgb3B0aW9ucy5mZWF0dXJlLnByb3BlcnRpZXMudHlwZTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZWRpdGluZyA9IGdlb2Zsby5VdGlsaXRpZXMuY2xvbmVEZWVwKG9wdGlvbnMuZmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy90aGlzLndhbnRpbmdUb0VkaXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRNb2RlKSB0aGlzLmN1cnJlbnRNb2RlLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRNb2RlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jdXJyZW50TW9kZSAmJiB0aGlzLmN1cnJlbnRNb2RlLmFjdGl2YXRlZCkgdGhpcy5jdXJyZW50TW9kZS5kZWFjdGl2YXRlKCk7XG5cbiAgICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmZvckVhY2goZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBpZiAoY2xhc3NOYW1lLmluZGV4T2YoXCJtb3VzZS1cIikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgY2xhc3Nlc1RvUmVtb3ZlLnB1c2goY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGNsYXNzZXNUb1JlbW92ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgX21hcCRjb250YWluZXIkY2xhc3NMO1xuICAgICAgICAgICAgKF9tYXAkY29udGFpbmVyJGNsYXNzTCA9IHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdCkucmVtb3ZlLmFwcGx5KF9tYXAkY29udGFpbmVyJGNsYXNzTCwgY2xhc3Nlc1RvUmVtb3ZlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0TWFwQ2xhc3MoJ3BvaW50ZXInKTtcblxuICAgICAgICB0aGlzLm1vZGVzLmZvckVhY2goZnVuY3Rpb24obSkgeyBpZiAobS5jYW5IYW5kbGUgJiYgbS5jYW5IYW5kbGUob3B0aW9ucy5tb2RlKSkgeyBzZWxlY3RlZE1vZGUgPSBtOyB9IH0pO1xuXG4gICAgICAgIGlmIChzZWxlY3RlZE1vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZSgnbW9kZS5jaGFuZ2UnLCB7XG4gICAgICAgICAgICAgICAgb2xkOiB0aGlzLm1vZGUsXG4gICAgICAgICAgICAgICAgbmV3OiBvcHRpb25zLm1vZGUsXG4gICAgICAgICAgICAgICAgbW9kZTogc2VsZWN0ZWRNb2RlLFxuICAgICAgICAgICAgICAgIHR5cGU6IG9wdGlvbnMudHlwZVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgdGhpcy5jdXJyZW50TW9kZSA9IHNlbGVjdGVkTW9kZTtcbiAgICAgICAgICAgIHRoaXMubW9kZSA9IG9wdGlvbnMubW9kZTtcbiAgICAgICAgICAgIHNlbGVjdGVkTW9kZS5hY3RpdmF0ZShvcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuU25hcHBpbmcgPSBuZXcgU25hcHBpbmcodGhpcywgdGhpcy5jdXJyZW50TW9kZSk7XG4gICAgICAgIHRoaXMuUGlubmluZyA9IG5ldyBQaW5uaW5nKHRoaXMsIHRoaXMuY3VycmVudE1vZGUpO1xuICAgICAgICB0aGlzLlJvdXRpbmcgPSBuZXcgUm91dGluZyh0aGlzLCB0aGlzLmN1cnJlbnRNb2RlKTtcbiAgICAgICAgdGhpcy5FeHBsb3JpbmcgPSBuZXcgRXhwbG9yaW5nKHRoaXMsIHRoaXMuY3VycmVudE1vZGUpO1xuICAgICAgICB0aGlzLlBhaW50aW5nID0gbmV3IFBhaW50aW5nKHRoaXMsIHRoaXMuY3VycmVudE1vZGUpO1xuICAgICAgICB0aGlzLkxheWVycy5tb3ZlTGF5ZXJzKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRNb2RlO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgc2V0Q29udHJvbHNcblx0ICogQGRlc2NyaXB0aW9uIEluaXRpYWxpemVzIGFuZCBzZXRzIHRoZSBjb250cm9scyBmb3IgdGhlIG1hcC4gQWRkcyB0aGUgZnVsbHNjcmVlbiBhbmQgbmF2aWdhdGlvbiBjb250cm9scywgYW5kIGluaXRpYWxpemVzIHRoZSBjdXN0b20gY29udHJvbHMuXG5cdCAqIEBwYXJhbXMge25vbmV9IC0gTm8gcGFyYW1ldGVycyBuZWVkZWQgZm9yIHRoaXMgZnVuY3Rpb24uXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gLSBBbiBhcnJheSBvZiBpbml0aWFsaXplZCBjb250cm9scyBmb3IgdGhlIG1hcC5cblx0ICovXG4gICAgdGhpcy5zZXRDb250cm9scyA9IGZ1bmN0aW9uIChjb250cm9scz1bXSkge1xuICAgICAgICBpZiAodGhpcy5jb250cm9scyAmJiB0aGlzLmNvbnRyb2xzLmxlbmd0aCkgcmV0dXJuIHRoaXMuY29udHJvbHM7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmNvbnRyb2xzKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHRoaXMuY29udHJvbHMgPSBbXTtcbiAgICAgICAgY29udHJvbHMgPSBjb250cm9scy5sZW5ndGggPyBjb250cm9scyA6IHRoaXMuc3RhdGljcy5jb250cm9scztcbiAgICAgICAgY29udHJvbHMuZm9yRWFjaChmdW5jdGlvbihjb250cm9sKSB7IHRoaXMuY29udHJvbHMucHVzaChuZXcgQ29udHJvbChjb250cm9sKSkgfSwgdGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRyb2xzO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgc2V0SWNvblxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBkZXRlcm1pbmVzIHRoZSBhcHByb3ByaWF0ZSBpY29uIHRvIGRpc3BsYXkgYmFzZWQgb24gdGhlIHVzZXIncyBmb2xsb3dpbmcgc3RhdHVzIGFuZCBuYXZpZ2F0aW9uIGNvbXBhc3MgaWNvbi5cbiAgICAgKiBAZGVwcmVjYXRlZFxuXHQgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBldmVudCBmb3Igd2hpY2ggdGhlIGljb24gaXMgYmVpbmcgc2V0LlxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG4gICAgdGhpcy5zZXRJY29uID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBpY29uID0gdGhpcy5uYXZpZ2F0aW9uID8gdGhpcy5uYXZpZ2F0aW9uLl9jb21wYXNzSWNvbiA6IGZhbHNlO1xuICAgICAgICB2YXIgZm9sbG93aW5nID0gdGhpcy5Mb2NhdGUgJiYgdGhpcy5Mb2NhdGUuZm9sbG93aW5nO1xuXG4gICAgICAgIGlmIChmb2xsb3dpbmcpIHtcblxuICAgICAgICB9IGVsc2UgaWYgKGljb24pIHtcbiAgICAgICAgICAgIC8vY29udHJvbC5zdHlsZS50cmFuc2Zvcm0gPSBpY29uLnN0eWxlLnRyYW5zZm9ybTtcbiAgICAgICAgfVxuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgc2V0Q2VudGVyTWFya2VyXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHNldHMgYSBtYXJrZXIgYXQgdGhlIGNlbnRlciBvZiB0aGUgbWFwLiBJdCBhbGxvd3MgY3VzdG9taXphdGlvbiBvZiB0aGUgbWFya2VyIGljb24gYW5kIGJlaGF2aW9yLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMgb2JqZWN0IGZvciBjdXN0b21pemluZyB0aGUgY2VudGVyIG1hcmtlci5cblx0ICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yZW1vdmVdIC0gSWYgdHJ1ZSwgcmVtb3ZlcyB0aGUgY2VudGVyIG1hcmtlci5cblx0ICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFuc2Zvcm1dIC0gSWYgdHJ1ZSwgYXBwbGllcyB0cmFuc2Zvcm1hdGlvbiB0byB0aGUgY2VudGVyIG1hcmtlci5cblx0ICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5nYW1lcGFkXSAtIElmIHRydWUsIGFwcGxpZXMgZ2FtZXBhZCBzZXR0aW5ncyB0byB0aGUgY2VudGVyIG1hcmtlci5cblx0ICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5kb250QWRkXSAtIElmIHRydWUsIGRvZXMgbm90IGFkZCB0aGUgY2VudGVyIG1hcmtlci5cblx0ICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5ub1JlbW92ZV0gLSBJZiB0cnVlLCBwcmV2ZW50cyB0aGUgY2VudGVyIG1hcmtlciBmcm9tIGJlaW5nIHJlbW92ZWQuXG5cdCAqIEByZXR1cm4ge09iamVjdHxib29sZWFufSBSZXR1cm5zIHRoZSBjZW50ZXIgbWFya2VyIG9iamVjdCBpZiBzdWNjZXNzZnVsbHkgYWRkZWQgb3IgdXBkYXRlZCwgb3IgZmFsc2UgaWYgbm90IGFwcGxpY2FibGUuXG5cdCAqL1xuICAgIHRoaXMuc2V0Q2VudGVyTWFya2VyID0gZnVuY3Rpb24gKG9wdGlvbnM9e30pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAoIXRoaXMubW9iaWxlIHx8IHRoaXMubm9DZW50ZXJNYXJrZXIpIHJldHVybiBmYWxzZTtcbiAgICAgICAgXG4gICAgICAgIHZhciBmb2xsb3dpbmcgPSB0aGlzLkxvY2F0ZSAmJiB0aGlzLkxvY2F0ZS5mb2xsb3dpbmc7XG4gICAgICAgIHZhciBpY29uID0gdGhpcy5zdGF0aWNzLmxvZ28uaWNvbjtcbiAgICAgICAgdmFyIGVsO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnJlbW92ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2VudGVyTWFya2VyICYmICF0aGlzLmNlbnRlck1hcmtlci5ub1JlbW92ZSkgcmV0dXJuIHRoaXMuY2VudGVyTWFya2VyLnJlbW92ZSgpLCBkZWxldGUgdGhpcy5jZW50ZXJNYXJrZXI7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuY2VudGVyTWFya2VyKSB7XG4gICAgICAgICAgICB0aGlzLmNlbnRlck1hcmtlci5zZXRMbmdMYXQodGhpcy5tYXAuZ2V0Q2VudGVyKCkpLmFkZFRvKHRoaXMubWFwKTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnRyYW5zZm9ybSB8fCBvcHRpb25zLmdhbWVwYWQpIHRoaXMuY2VudGVyTWFya2VyLnNldFBpdGNoQWxpZ25tZW50KCdtYXAnKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNlbnRlck1hcmtlcjtcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmRvbnRBZGQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5jZW50ZXJNYXJrZXJJY29uKSB7XG4gICAgICAgICAgICBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgZWwuY2xhc3NOYW1lID0gdGhpcy5pZCArICctY2VudGVyLW1hcmtlcic7XG4gICAgICAgICAgICBzZXRJY29uKGVsLCBpY29uKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5jZW50ZXJNYXJrZXJJY29uID0gZWw7XG4gICAgICAgIHRoaXMuY2VudGVyTWFya2VyID0gbmV3IHRoaXMuTWFwYm94Lk1hcmtlcih0aGlzLmNlbnRlck1hcmtlckljb24pO1xuICAgICAgICB0aGlzLmNlbnRlck1hcmtlci5zZXRMbmdMYXQodGhpcy5tYXAuZ2V0Q2VudGVyKCkpLmFkZFRvKHRoaXMubWFwKS5zZXRPZmZzZXQoWzAsMF0pO1xuICAgICAgICB0aGlzLmNlbnRlck1hcmtlci5ub1JlbW92ZSA9IG9wdGlvbnMubm9SZW1vdmU7XG5cbiAgICAgICAgaWYgKGZvbGxvd2luZykgdGhpcy5jZW50ZXJNYXJrZXIuc2V0T2Zmc2V0KFswLC0yMF0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIHNldEljb24obWFya2VyLCBpY29uKSB7XG4gICAgICAgICAgICBtYXJrZXIuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYHVybChcIiR7aWNvbn1cIilgO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY2VudGVyTWFya2VyO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgc2V0QnV0dG9uc1xuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiByZXNldHMgdGhlIGFjdGl2ZSBidXR0b25zIGFuZCBhY3RpdmF0ZXMgdGhlIFNlbGVjdCBidXR0b24uXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgU2VsZWN0IGJ1dHRvbiBpcyBzdWNjZXNzZnVsbHkgc2V0LCBmYWxzZSBvdGhlcndpc2UuXG5cdCAqL1xuICAgIHRoaXMuc2V0QnV0dG9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnV0dG9ucygnc2VsZWN0JykgPyB0aGlzLmdldEJ1dHRvbnMoJ3NlbGVjdCcpLmFkZCgpIDogZmFsc2U7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSBzZXRBY3RpdmVCdXR0b25cblx0ICogQGRlc2NyaXB0aW9uIFNldHMgdGhlIGFjdGl2ZSBidXR0b24gd2l0aCB0aGUgc3BlY2lmaWVkIGlkIGluIHRoZSBjb250cm9scyBhcnJheS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGlkIC0gVGhlIGlkIG9mIHRoZSBidXR0b24gdG8gc2V0IGFzIGFjdGl2ZS5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgZmFsc2UgaWYgdGhlIGNvbnRyb2xzIGFycmF5IGlzIGVtcHR5IG9yIHVuZGVmaW5lZC5cblx0ICovXG4gICAgdGhpcy5zZXRBY3RpdmVCdXR0b24gPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbnRyb2xzIHx8ICF0aGlzLmNvbnRyb2xzLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB0aGlzLmNvbnRyb2xzLmZvckVhY2goZnVuY3Rpb24oY29udHJvbCkgeyBjb250cm9sLnNldEFjdGl2ZUJ1dHRvbihpZC50b0xvd2VyQ2FzZSgpKSB9KVxuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgc2V0VGhlbWVcblx0ICogQGRlc2NyaXB0aW9uIFNldHMgdGhlIHRoZW1lIGNvbG9ycyBmb3IgdGhlIGNvbnRyb2wuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBjb2xvcnMgLSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgdGhlbWUgY29sb3JzLlxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG4gICAgdGhpcy5zZXRUaGVtZSA9IGZ1bmN0aW9uIChjb2xvcnMpIHtcbiAgICAgICAgdGhpcy5Db250cm9sID8gdGhpcy5Db250cm9sLnNldFRoZW1lKGNvbG9ycykgOiBmYWxzZTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIHNldExheWVyc1xuXHQgKiBAZGVzY3JpcHRpb24gU2V0cyBjdXN0b20gbGF5ZXJzIG9uIHRoZSBtYXAuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGxheWVycyAtIEFuIGFycmF5IG9mIGN1c3RvbSBsYXllcnMgdG8gYmUgYWRkZWQgdG8gdGhlIG1hcC5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBBZGRpdGlvbmFsIG9wdGlvbnMgZm9yIHNldHRpbmcgY3VzdG9tIGxheWVycy5cblx0ICogQHJldHVybnMge1Byb21pc2V9IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGN1c3RvbSBsYXllcnMgYXJlIHNldCBvbiB0aGUgbWFwLlxuXHQgKi9cbiAgICB0aGlzLnNldExheWVycyA9IGFzeW5jIGZ1bmN0aW9uIChsYXllcnM9W10sIG9wdGlvbnM9e30pIHtcbiAgICAgICAgaWYgKG9wdGlvbnMucmVzZXQpIHRoaXMucmVtb3ZlRmVhdHVyZXMobGF5ZXJzLCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuTGF5ZXJzLnNldEN1c3RvbUxheWVycyhsYXllcnMsIG9wdGlvbnMpO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgc2V0U2VsZWN0ZWRGZWF0dXJlc1xuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiB1cGRhdGVzIHRoZSBzZWxlY3RlZCBmZWF0dXJlcyBvbiB0aGUgbWFwIHdpdGggdGhlIHByb3ZpZGVkIGFycmF5IG9mIGZlYXR1cmVzLlxuXHQgKiBAcGFyYW0ge0FycmF5fSBmZWF0dXJlcyAtIEFuIGFycmF5IG9mIGZlYXR1cmVzIHRvIHNldCBhcyBzZWxlY3RlZC5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgZmFsc2UgaWYgdGhlIGZlYXR1cmVzIGFycmF5IGlzIGVtcHR5LlxuXHQgKi9cbiAgICB0aGlzLnNldFNlbGVjdGVkRmVhdHVyZXMgPSBmdW5jdGlvbiAoZmVhdHVyZXM9W10pIHtcbiAgICAgICAgaWYgKCFmZWF0dXJlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkRmVhdHVyZXMgPSBbXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGVjdGVkRmVhdHVyZXMuc3BsaWNlKDAsIHNlbGVjdGVkRmVhdHVyZXMubGVuZ3RoLCAuLi5mZWF0dXJlcyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1hcC5nZXRTb3VyY2UodGhpcy5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLlNFTEVDVCkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKHRoaXMuZ2V0U2VsZWN0ZWRGZWF0dXJlcygpKSk7XG4gICAgICAgIHRoaXMubWFwLmdldFNvdXJjZSh0aGlzLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuVkVSVEVYKS5zZXREYXRhKHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24odGhpcy5nZXRTZWxlY3RlZEZlYXR1cmVzKCkpKTtcblxuICAgICAgICB0aGlzLmZpcmUoJ3NlbGVjdC5sb2FkJywge1xuICAgICAgICAgICAgZmVhdHVyZXM6IHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24odGhpcy5nZXRTZWxlY3RlZEZlYXR1cmVzKCkpLFxuICAgICAgICAgICAgc291cmNlOiB0aGlzLm1hcC5nZXRTb3VyY2UodGhpcy5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLlNFTEVDVClcbiAgICAgICAgfSlcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIHNldE1lc2hGZWF0dXJlc1xuXHQgKiBAZGVzY3JpcHRpb24gVXBkYXRlcyB0aGUgbWVzaCBkYXRhIHdpdGggdGhlIHByb3ZpZGVkIGZlYXR1cmVzIGFuZCByZXR1cm5zIHRoZSB1cGRhdGVkIG1lc2guIEFkZHMgYSBtZXNoIGluZGV4IGlmIGl0IGRvZXMgbm90IGV4aXN0LlxuXHQgKiBAcGFyYW0ge0FycmF5fSBmZWF0dXJlcyAtIEFuIGFycmF5IG9mIGZlYXR1cmVzIHRvIHVwZGF0ZSB0aGUgbWVzaCB3aXRoLlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgdXBkYXRlZCBtZXNoIGFmdGVyIHNldHRpbmcgdGhlIGZlYXR1cmVzLlxuXHQgKi9cbiAgICB0aGlzLnNldE1lc2hGZWF0dXJlcyA9IGZ1bmN0aW9uIChmZWF0dXJlcz1bXSkge1xuICAgICAgICBpZiAoIWZlYXR1cmVzLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB0aGlzLnVwZGF0ZU1lc2hEYXRhKGZlYXR1cmVzLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzaEluZGV4LmdldEZlYXR1cmVzKCk7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSBzZXRNYXBDbGFzc1xuXHQgKiBAZGVzY3JpcHRpb24gU2V0cyBhIHNwZWNpZmljIG1vdXNlIGNsYXNzIG9uIHRoZSBtYXAgY29udGFpbmVyIGVsZW1lbnQgYmFzZWQgb24gdGhlIHByb3ZpZGVkIG5hbWUuIFJlbW92ZXMgYW55IGV4aXN0aW5nIGNsYXNzZXMgc3RhcnRpbmcgd2l0aCBcIm1vdXNlLVwiIGJlZm9yZSBhZGRpbmcgdGhlIG5ldyBjbGFzcy5cblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgY2xhc3MgdG8gYmUgYWRkZWQgKHdpdGhvdXQgdGhlIFwibW91c2UtXCIgcHJlZml4KS5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgZmFsc2UgaWYgdGhlIG5hbWUgaXMgZW1wdHksIG90aGVyd2lzZSBhZGRzIHRoZSBjbGFzcyBhbmQgcmV0dXJucyB1bmRlZmluZWQuXG5cdCAqL1xuICAgIHRoaXMuc2V0TWFwQ2xhc3MgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuZm9yRWFjaChmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIGlmIChjbGFzc05hbWUuaW5kZXhPZihcIm1vdXNlLVwiKSAhPT0gLTEpIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKVxuICAgICAgICB9LCB0aGlzKTtcblxuICAgICAgICBpZiAoIW5hbWUpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZChcIm1vdXNlLVwiICsgbmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLk1hcFxuXHQgKiBAbmFtZSBzZXRWaWV3cG9ydFxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBzZXRzIHRoZSBzdHlsZSBvZiB0aGUgdmlld3BvcnQgYmFzZWQgb24gdGhlIG9wdGlvbnMgcHJvdmlkZWQuIEl0IHJlc2l6ZXMgdGhlIG1hcCwgY2FsY3VsYXRlcyB0aGUgaGVpZ2h0IGFuZCB3aWR0aCBvZiB0aGUgY29udGFpbmVyLCBhZGp1c3RzIHRoZSBoZWlnaHQgYW5kIHdpZHRoIG9mIHRoZSB2aWV3cG9ydCwgZXh0ZW5kcyB0aGUgdmlld3BvcnQgc3R5bGUsIHNldHMgcGFkZGluZywgYW5kIHJldHVybnMgdGhlIHVwZGF0ZWQgdmlld3BvcnQgZWxlbWVudC5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QgY29udGFpbmluZyBzdHlsZSBwcm9wZXJ0aWVzIGZvciB0aGUgdmlld3BvcnQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5wb3NpdGlvbj0nYWJzb2x1dGUnXSAtIFRoZSBwb3NpdGlvbiBwcm9wZXJ0eSBmb3IgdGhlIHZpZXdwb3J0LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubWFyZ2luPSdhdXRvJ10gLSBUaGUgbWFyZ2luIHByb3BlcnR5IGZvciB0aGUgdmlld3BvcnQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy50b3A9JyddIC0gVGhlIHRvcCBwcm9wZXJ0eSBmb3IgdGhlIHZpZXdwb3J0LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubGVmdD10aGlzLnZpZXdwb3J0TGVmdF0gLSBUaGUgbGVmdCBwcm9wZXJ0eSBmb3IgdGhlIHZpZXdwb3J0LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYm90dG9tPXRoaXMudmlld3BvcnRCb3R0b21dIC0gVGhlIGJvdHRvbSBwcm9wZXJ0eSBmb3IgdGhlIHZpZXdwb3J0LlxuXHQgKiBAcmV0dXJucyB7RWxlbWVudH0gVGhlIHVwZGF0ZWQgdmlld3BvcnQgZWxlbWVudC5cblx0ICovXG4gICAgdGhpcy5zZXRWaWV3cG9ydCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHZhciBzdHlsZSA9IG9wdGlvbnMgfHwge1xuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICBtYXJnaW46ICdhdXRvJyxcbiAgICAgICAgICAgIHRvcDogJycsXG4gICAgICAgICAgICBsZWZ0OiB0aGlzLnZpZXdwb3J0TGVmdCxcbiAgICAgICAgICAgIGJvdHRvbTogdGhpcy52aWV3cG9ydEJvdHRvbVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBoZWlnaHQgPSB0aGlzLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICAgIHZhciB3aWR0aCA9IHRoaXMuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuXG4gICAgICAgIHN0eWxlLmhlaWdodCA9IGAke051bWJlci5wYXJzZUludChoZWlnaHQpIC0gdGhpcy52aWV3cG9ydEhlaWdodE9mZnNldH1weGA7XG4gICAgICAgIHN0eWxlLndpZHRoID0gYCR7TnVtYmVyLnBhcnNlSW50KHdpZHRoKSAtIHRoaXMudmlld3BvcnRXaWR0aE9mZnNldH1weGA7XG5cbiAgICAgICAgdGhpcy5VdGlsaXRpZXMuZXh0ZW5kKHRoaXMudmlld3BvcnQuc3R5bGUsIHN0eWxlKTtcbiAgICAgICAgdGhpcy5zZXRQYWRkaW5nKCk7XG4gICAgICAgIHRoaXMubWFwLnJlc2l6ZSgpO1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3cG9ydDtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6Z2VvZmxvLk1hcFxuXHQgKiBAbmFtZSBzZXRQYWRkaW5nXG5cdCAqIEBkZXNjcmlwdGlvbiBDYWxjdWxhdGVzIHRoZSBwYWRkaW5nIHZhbHVlcyBmb3IgdGhlIGNvbnRhaW5lciBieSBjb21wYXJpbmcgaXRzIHBvc2l0aW9uIHdpdGggdGhlIHZpZXdwb3J0LlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcGFkZGluZyBvYmplY3QgY29udGFpbmluZyBsZWZ0LCByaWdodCwgdG9wLCBhbmQgYm90dG9tIHBhZGRpbmcgdmFsdWVzLlxuXHQgKiBAcGFyYW1zIHt2b2lkfVxuXHQgKi9cbiAgICB0aGlzLnNldFBhZGRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBsZWZ0ID0gKHRoaXMuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQpIC0gKHRoaXMudmlld3BvcnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCk7XG4gICAgICAgIHZhciByaWdodCA9ICh0aGlzLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5yaWdodCkgLSAodGhpcy52aWV3cG9ydC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5yaWdodCk7XG4gICAgICAgIHZhciB0b3AgPSAodGhpcy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wKSAtICh0aGlzLnZpZXdwb3J0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCk7XG4gICAgICAgIHZhciBib3R0b20gPSAodGhpcy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tKSAtICh0aGlzLnZpZXdwb3J0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSk7XG4gICAgICAgIHZhciBub1BhZGRpbmcgPSB0aGlzLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCA8IDIwO1xuXG4gICAgICAgIHRoaXMucGFkZGluZyA9IHtcbiAgICAgICAgICAgIGxlZnQ6IG5vUGFkZGluZyA/IDAgOiBNYXRoLmFicyhsZWZ0KSxcbiAgICAgICAgICAgIHJpZ2h0OiBub1BhZGRpbmcgPyAwIDogTWF0aC5hYnMocmlnaHQpLFxuICAgICAgICAgICAgdG9wOiBub1BhZGRpbmcgPyAwIDogTWF0aC5hYnModG9wKSxcbiAgICAgICAgICAgIGJvdHRvbTogbm9QYWRkaW5nID8gMCA6IE1hdGguYWJzKGJvdHRvbSlcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLm1hcC5zZXRQYWRkaW5nKHRoaXMucGFkZGluZyk7ICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5wYWRkaW5nO1xuICAgIH1cblxuICAgIC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsby5NYXBcblx0ICogQG5hbWUgc2V0U3R5bGVcblx0ICogQGRlc2NyaXB0aW9uIFNldHMgdGhlIHN0eWxlIG9mIHRoZSBtYXAgYW5kIHJldHVybnMgdGhlIHVwZGF0ZWQgc3R5bGUuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZSAtIFRoZSBzdHlsZSBvYmplY3QgdG8gYmUgYXBwbGllZCB0byB0aGUgbWFwLlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgdXBkYXRlZCBzdHlsZSBvYmplY3Qgb2YgdGhlIG1hcC5cblx0ICovXG4gICAgdGhpcy5zZXRTdHlsZSA9IGZ1bmN0aW9uIChzdHlsZSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoIXN0eWxlKSB7IHJldHVybiBmYWxzZSB9O1xuICAgICAgICB0aGlzLm1hcC5zZXRTdHlsZShzdHlsZSwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcC5nZXRTdHlsZSgpO1xuICAgIH1cblxuICAgIC8qKlxuXHQgKiBAZGVzY3JpcHRpb24gU2V0cyB0aGUgZXh0ZW50IG9mIHRoZSBtYXAgYmFzZWQgb24gdGhlIHByb3ZpZGVkIGZlYXR1cmVzIG9yIGEgZ2l2ZW4gZXh0ZW50LiBJZiBubyBmZWF0dXJlcyBhcmUgcHJvdmlkZWQsIGl0IHVzZXMgdGhlIHJlbmRlcmVkIGRyYXduIGZlYXR1cmVzLiBJZiBleHRlbnQgaXMgc3BlY2lmaWVkLCBpdCBzZXRzIHRoZSBtYXAgZXh0ZW50IHRvIHRoZSBleHRlbnQgcG9seWdvbi4gSWYgY2VudGVyIGlzIG5vdCBzcGVjaWZpZWQgYW5kIGlzUG9pbnQgaXMgdHJ1ZSwgaXQgY2VudGVycyB0aGUgbWFwIGF0IHRoZSBjZW50cm9pZCBvZiB0aGUgZXh0ZW50LiBJZiBjZW50ZXIgaXMgZmFsc2UsIGl0IGZpdHMgdGhlIG1hcCB0byB0aGUgYm91bmRpbmcgYm94IG9mIHRoZSBmZWF0dXJlcy4gSWYgY2VudGVyIGlzIHRydWUsIGl0IGNlbnRlcnMgdGhlIG1hcCBhdCB0aGUgY2VudHJvaWQgb2YgdGhlIGJvdW5kaW5nIGJveC5cblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpnZW9mbG8uTWFwXG5cdCAqIEBuYW1lIHNldEV4dGVudFxuXHQgKiBAcGFyYW0ge0FycmF5fSBmZWF0dXJlcyAtIEFycmF5IG9mIGZlYXR1cmVzIHRvIHNldCB0aGUgZXh0ZW50IGJhc2VkIG9uLlxuXHQgKiBAcGFyYW0ge0FycmF5fSBleHRlbnQgLSBFeHRlbnQgcG9seWdvbiB0byBzZXQgdGhlIG1hcCBleHRlbnQgdG8uXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gQWRkaXRpb25hbCBvcHRpb25zIGZvciBzZXR0aW5nIHRoZSBleHRlbnQgKGNlbnRlciwgaXNQb2ludCkuXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IC0gVGhlIG1hcCBvYmplY3QgYWZ0ZXIgc2V0dGluZyB0aGUgZXh0ZW50LlxuXHQgKi9cbiAgICB0aGlzLnNldEV4dGVudCA9IGZ1bmN0aW9uIChmZWF0dXJlcywgZXh0ZW50LCBvcHRpb25zPXt9KSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ0V4dGVudCA9IHRydWU7XG5cbiAgICAgICAgdmFyIG5vRmVhdHVyZXMgPSAhZmVhdHVyZXMgfHwgIWZlYXR1cmVzLmxlbmd0aDtcbiAgICAgICAgdmFyIGNlbnRlciA9IG9wdGlvbnMuY2VudGVyO1xuICAgICAgICAhY2VudGVyICYmIG9wdGlvbnMuaXNQb2ludCA/IGNlbnRlciA9IHRydWUgOiBmYWxzZTtcblxuICAgICAgICB0aGlzLnNldFZpZXdwb3J0KCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoZXh0ZW50KSB7XG4gICAgICAgICAgICB0aGlzLnByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGZlYXR1cmVzID0gIXRoaXMub3B0aW9ucy5tYXAuZXh0ZW50ID8gW10gOiBbdHVyZi5wb2x5Z29uKHRoaXMub3B0aW9ucy5tYXAuZXh0ZW50KV07XG4gICAgICAgIH0gZWxzZSBpZiAobm9GZWF0dXJlcykge1xuICAgICAgICAgICAgZmVhdHVyZXMgPSB0aGlzLmdldERyYXduRmVhdHVyZXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBqdW1wVG8gPSB7XG4gICAgICAgICAgICBiZWFyaW5nOiBvcHRpb25zLmJlYXJpbmcgfHwgdGhpcy5vcHRpb25zLm1hcC5iZWFyaW5nIHx8IHRoaXMubWFwLmdldEJlYXJpbmcoKSxcbiAgICAgICAgICAgIGNlbnRlcjogdGhpcy5vcHRpb25zLm1hcC5jZW50ZXIgfHwgdGhpcy5tYXAuZ2V0Q2VudGVyKCksXG4gICAgICAgICAgICB6b29tOiBvcHRpb25zLnpvb20gfHwgdGhpcy5vcHRpb25zLm1hcC56b29tIHx8IHRoaXMubWFwLmdldFpvb20oKSxcbiAgICAgICAgICAgIHBpdGNoOiBvcHRpb25zLnBpdGNoIHx8IHRoaXMub3B0aW9ucy5tYXAucGl0Y2ggfHwgdGhpcy5tYXAuZ2V0UGl0Y2goKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFmZWF0dXJlcykgcmV0dXJuIHRoaXMubWFwLmp1bXBUbyhqdW1wVG8pO1xuICAgICAgICBpZiAoIWZlYXR1cmVzLmxlbmd0aCkgcmV0dXJuO1xuXG4gICAgICAgIHZhciBiYm94ID0gdHVyZi5iYm94KHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oZmVhdHVyZXMpKVxuXG4gICAgICAgIGlmIChjZW50ZXIpIHtcbiAgICAgICAgICAgIHZhciBwb2x5Z29uID0gdHVyZi5iYm94UG9seWdvbihiYm94KTtcbiAgICAgICAgICAgIHZhciBjZW50cm9pZCA9IHR1cmYuY2VudHJvaWQocG9seWdvbik7XG4gICAgICAgICAgICBqdW1wVG8uY2VudGVyID0geyBsYXQ6IGNlbnRyb2lkLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzFdLCBsbmc6IGNlbnRyb2lkLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdIH07XG4gICAgICAgICAgICBqdW1wVG8uem9vbSA9IG9wdGlvbnMuem9vbSB8fCB0aGlzLm1hcC5nZXRab29tKCk7XG4gICAgICAgICAgICBqdW1wVG8ucGl0Y2ggPSBvcHRpb25zLnBpdGNoIHx8IHRoaXMubWFwLmdldFBpdGNoKCk7XG4gICAgICAgICAgICBqdW1wVG8uYmVhcmluZyA9IG9wdGlvbnMuYmVhcmluZyB8fCB0aGlzLm1hcC5nZXRCZWFyaW5nKCk7XG4gICAgICAgICAgICB0aGlzLm1hcC5qdW1wVG8oanVtcFRvKTtcbiAgICAgICAgfSBlbHNlIGlmIChiYm94KSB7XG4gICAgICAgICAgICB2YXIgc2V0dGluZ3MgPSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogdGhpcy5tYXAuZ2V0UGFkZGluZygpLFxuICAgICAgICAgICAgICAgIGxpbmVhcjogdHJ1ZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5iZWFyaW5nKSBzZXR0aW5ncy5iZWFyaW5nID0gb3B0aW9ucy5iZWFyaW5nO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucGl0Y2gpIHNldHRpbmdzLnBpdGNoID0gb3B0aW9ucy5waXRjaDtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLm1heFpvb20pIHNldHRpbmdzLm1heFpvb20gPSBvcHRpb25zLm1heFpvb207XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMubWFwLmZpdEJvdW5kcyhiYm94LCBzZXR0aW5ncyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmZpcmUoJ2ZlYXR1cmVzLnpvb20nLCB7IGZlYXR1cmVzOiBmZWF0dXJlcywgY2VudGVyOiB0aGlzLm1hcC5nZXRDZW50ZXIoKSwgYmJveDogYmJveCB9KTtcbiAgICAgICAgdGhpcy5zZXR0aW5nRXh0ZW50ID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAZnVuY3Rpb25cblx0ICogQG5hbWUgc2V0T3BhY2l0eVxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiB0YWtlcyBhIG51bWVyaWMgdmFsdWUgYW5kIHNldHMgdGhlIG9wYWNpdHkgb2Ygc3BlY2lmaWVkIGxheWVycyBvbiB0aGUgbWFwIHRvIHRoYXQgdmFsdWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFRoZSBvcGFjaXR5IHZhbHVlIHRvIHNldCBmb3IgdGhlIGxheWVycy5cblx0ICovXG4gICAgdGhpcy5zZXRPcGFjaXR5ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBvcGFjaXR5ID0gdGhpcy5vcGFjaXR5ID0gTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgdmFyIGxheWVycyA9IHRoaXMubWFwLmdldFN0eWxlKCkubGF5ZXJzO1xuXG4gICAgICAgIGxheWVycy5tYXAoKGxheWVyKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWxheWVyLmlkLmluY2x1ZGVzKCdnZW9mbG8nKSB8fCBsYXllci50eXBlID09PSAnYmFja2dyb3VuZCcpIHtcbiAgICAgICAgICAgICAgICBpZiAobGF5ZXIubWV0YWRhdGEgJiYgbGF5ZXIubWV0YWRhdGEuY3VzdG9tKSByZXR1cm47XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGxheWVyLnR5cGUgPT09ICdzeW1ib2wnKSAge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcC5zZXRQYWludFByb3BlcnR5KGxheWVyLmlkLCBgaWNvbi1vcGFjaXR5YCwgb3BhY2l0eSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFwLnNldFBhaW50UHJvcGVydHkobGF5ZXIuaWQsIGB0ZXh0LW9wYWNpdHlgLCBvcGFjaXR5KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcC5zZXRQYWludFByb3BlcnR5KGxheWVyLmlkLCBgJHtsYXllci50eXBlfS1vcGFjaXR5YCwgb3BhY2l0eSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuXG5cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgaGFzQ29udHJvbHNcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gY2hlY2tzIGlmIHRoZSBvYmplY3QgaGFzIGNvbnRyb2xzIGJ5IHZlcmlmeWluZyB0aGUgZXhpc3RlbmNlIGFuZCBsZW5ndGggb2YgdGhlIGNvbnRyb2xzIGFycmF5LlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoZSBvYmplY3QgaGFzIGNvbnRyb2xzLCBmYWxzZSBvdGhlcndpc2UuXG5cdCAqL1xuICAgIHRoaXMuaGFzQ29udHJvbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRyb2xzICYmIHRoaXMuY29udHJvbHMubGVuZ3RoO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgaGFzU2VsZWN0aW9uXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGRldGVybWluZXMgd2hldGhlciB0aGVyZSBpcyBhIHNlbGVjdGlvbiBvZiBmZWF0dXJlcy5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGVyZSBpcyBhIHNlbGVjdGlvbiBvZiBmZWF0dXJlcywgb3RoZXJ3aXNlIGZhbHNlLlxuXHQgKi9cbiAgICB0aGlzLmhhc1NlbGVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2VsZWN0ZWRGZWF0dXJlcygpLmxlbmd0aCA+IDA7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSBoYXNTaW5nbGVTZWxlY3Rpb25cblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gY2hlY2tzIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdGVkIGZlYXR1cmUuXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlcmUgaXMgYSBzaW5nbGUgc2VsZWN0aW9uLCBmYWxzZSBvdGhlcndpc2UuXG5cdCAqL1xuICAgIHRoaXMuaGFzU2luZ2xlU2VsZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTZWxlY3RlZEZlYXR1cmVzKCkubGVuZ3RoID09PSAxO1xuICAgIH1cblxuXG5cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgYWN0aXZhdGVTbmFwcGluZ1xuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBhY3RpdmF0ZXMgc25hcHBpbmcgYnkgZ2V0dGluZyB0aGUgc25hcHBpbmcgYnV0dG9ucywgYWN0aXZhdGluZyB0aGVtLCBhbmQgdHJpZ2dlcmluZyB0aGUgc25hcHBpbmcgYWN0aXZhdGlvbiBldmVudC4gRmlyZXMgYSBjdXN0b20gZXZlbnQgJ3NuYXBwaW5nLmFjdGl2YXRlJyB3aXRoIHRoZSBlbmFibGVkIHN0YXR1cyBhbmQgdGhlIHNuYXBwaW5nIG9iamVjdC5cblx0ICogQHJldHVybnMge09iamVjdH0gVGhlIGFjdGl2YXRlZCBTbmFwcGluZyBvYmplY3QuXG5cdCAqL1xuICAgIHRoaXMuYWN0aXZhdGVTbmFwcGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJ1dHRvbnMgPSB0aGlzLmdldEJ1dHRvbnMoJ3NuYXBwaW5nJyk7XG4gICAgICAgIGlmICghYnV0dG9ucykgcmV0dXJuO1xuICAgICAgICBidXR0b25zLmFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMuU25hcHBpbmcuYWN0aXZhdGUoKTtcbiAgICAgICAgdGhpcy5maXJlKCdzbmFwcGluZy5hY3RpdmF0ZScsIHsgZW5hYmxlZDogdHJ1ZSwgbWVzaDogdGhpcy5tZXNoSW5kZXgsIHNuYXBwaW5nOiB0aGlzLlNuYXBwaW5nIH0pXG4gICAgICAgIHJldHVybiB0aGlzLlNuYXBwaW5nO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgYWN0aXZhdGVQaW5uaW5nXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGFjdGl2YXRlcyBwaW5uaW5nIGJ5IGdldHRpbmcgdGhlIHBpbm5pbmcgYnV0dG9ucywgYWN0aXZhdGluZyB0aGVtLCBlbmFibGluZyBzbmFwcGluZywgYWN0aXZhdGluZyBwaW5uaW5nLCBhbmQgZmlyaW5nIGFuIGV2ZW50LiBGaXJlcyBhIGN1c3RvbSBldmVudCAncGlubmluZy5hY3RpdmF0ZScgd2l0aCB0aGUgZW5hYmxlZCBzdGF0dXMgYW5kIHRoZSBwaW5uaW5nIG9iamVjdC5cblx0ICogQHJldHVybnMge09iamVjdH0gVGhlIGFjdGl2YXRlZCBwaW5uaW5nIG9iamVjdC5cblx0ICovXG4gICAgdGhpcy5hY3RpdmF0ZVBpbm5pbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBidXR0b25zID0gdGhpcy5nZXRCdXR0b25zKCdwaW5uaW5nJyk7XG4gICAgICAgIGlmICghYnV0dG9ucykgcmV0dXJuO1xuICAgICAgICBidXR0b25zLmFjdGl2YXRlKCk7XG4gICAgICAgIC8vdGhpcy5kZWFjdGl2YXRlUm91dGluZygpO1xuICAgICAgICB0aGlzLmFjdGl2YXRlU25hcHBpbmcoKTtcbiAgICAgICAgdGhpcy5QaW5uaW5nLmFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMuZmlyZSgncGlubmluZy5hY3RpdmF0ZScsIHsgZW5hYmxlZDogdHJ1ZSwgcGlubmluZzogdGhpcy5QaW5uaW5nIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5QaW5uaW5nO1xuICAgIH1cblxuXHQvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBhY3RpdmF0ZXMgdGhlIHJvdXRpbmcgZmVhdHVyZSBieSBnZXR0aW5nIHRoZSByb3V0aW5nIGJ1dHRvbnMsIGFjdGl2YXRpbmcgdGhlbSwgZW5hYmxpbmcgc25hcHBpbmcsIGRlYWN0aXZhdGluZyBwYWludGluZywgYW5kIGFjdGl2YXRpbmcgdGhlIHJvdXRpbmcgaXRzZWxmLiBGaXJlcyBhIGN1c3RvbSBldmVudCAncm91dGluZy5hY3RpdmF0ZScgd2l0aCB0aGUgZW5hYmxlZCBzdGF0dXMgYW5kIHRoZSByb3V0aW5nIG9iamVjdC5cblx0ICogQG5hbWUgYWN0aXZhdGVSb3V0aW5nXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBhY3RpdmF0ZWQgUm91dGluZyBvYmplY3QuXG5cdCAqL1xuICAgIHRoaXMuYWN0aXZhdGVSb3V0aW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYnV0dG9ucyA9IHRoaXMuZ2V0QnV0dG9ucygncm91dGluZycpO1xuICAgICAgICBpZiAoIWJ1dHRvbnMpIHJldHVybjtcbiAgICAgICAgYnV0dG9ucy5hY3RpdmF0ZSgpO1xuICAgICAgICB0aGlzLmFjdGl2YXRlU25hcHBpbmcoKTtcbiAgICAgICAgdGhpcy5kZWFjdGl2YXRlUGFpbnRpbmcoKTtcbiAgICAgICAgdGhpcy5Sb3V0aW5nLmFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMuZmlyZSgncm91dGluZy5hY3RpdmF0ZScsIHsgZW5hYmxlZDogdHJ1ZSwgcm91dGluZzogdGhpcy5Sb3V0aW5nIH0pXG4gICAgICAgIHJldHVybiB0aGlzLlJvdXRpbmc7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSBhY3RpdmF0ZUV4cGxvcmluZ1xuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBhY3RpdmF0ZXMgdGhlIGV4cGxvcmluZyBtb2RlIGJ5IGFjdGl2YXRpbmcgdGhlIGV4cGxvcmluZyBidXR0b25zLCBmdW5jdGlvbmFsaXRpZXMsIGFuZCBldmVudHMuIEZpcmVzIGEgY3VzdG9tIGV2ZW50ICdleHBsb3JpbmcuYWN0aXZhdGUnIHdpdGggdGhlIGVuYWJsZWQgc3RhdHVzIGFuZCB0aGUgZXhwbG9yaW5nIG9iamVjdC5cblx0ICogQHJldHVybnMge09iamVjdH0gVGhlIGFjdGl2YXRlZCBleHBsb3Jpbmcgb2JqZWN0LlxuXHQgKi9cbiAgICB0aGlzLmFjdGl2YXRlRXhwbG9yaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYnV0dG9ucyA9IHRoaXMuZ2V0QnV0dG9ucygnZXhwbG9yaW5nJyk7XG4gICAgICAgIGlmICghYnV0dG9ucykgcmV0dXJuO1xuICAgICAgICBidXR0b25zLmFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMuZGVhY3RpdmF0ZVBhaW50aW5nKCk7XG4gICAgICAgIHRoaXMuRXhwbG9yaW5nLmFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMuZmlyZSgnZXhwbG9yaW5nLmFjdGl2YXRlJywgeyBlbmFibGVkOiB0cnVlLCBleHBsb3Jpbmc6IHRoaXMuRXhwbG9yaW5nIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5FeHBsb3Jpbmc7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSBhY3RpdmF0ZVBhaW50aW5nXG5cdCAqIEBkZXNjcmlwdGlvbiBBY3RpdmF0ZXMgdGhlIHBhaW50aW5nIGZ1bmN0aW9uYWxpdHkgYnkgc2V0dGluZyB0aGUgZHJhdyBtb2RlLCBhY3RpdmF0aW5nIHRoZSBwYWludGluZyBidXR0b25zLCBkZWFjdGl2YXRpbmcgcm91dGluZyBhbmQgZXhwbG9yaW5nLCBhbmQgZmlyaW5nIGFuIGV2ZW50LiBGaXJlcyBhIGN1c3RvbSBldmVudCAncGFpbnRpbmcuYWN0aXZhdGUnIHdpdGggdGhlIGVuYWJsZWQgc3RhdHVzIGFuZCB0aGUgcGFpbnRpbmcgb2JqZWN0LlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgYWN0aXZhdGVkIFBhaW50aW5nIG9iamVjdC5cblx0ICovXG4gICAgdGhpcy5hY3RpdmF0ZVBhaW50aW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYnV0dG9ucyA9IHRoaXMuZ2V0QnV0dG9ucygncGFpbnRpbmcnKTtcbiAgICAgICAgaWYgKCFidXR0b25zKSByZXR1cm47XG4gICAgICAgIGJ1dHRvbnMuYWN0aXZhdGUoKTtcbiAgICAgICAgdGhpcy5kZWFjdGl2YXRlUm91dGluZygpO1xuICAgICAgICB0aGlzLmRlYWN0aXZhdGVFeHBsb3JpbmcoKTtcbiAgICAgICAgdGhpcy5QYWludGluZy5hY3RpdmF0ZSh0aGlzLmRyYXdNb2RlKTtcbiAgICAgICAgdGhpcy5maXJlKCdwYWludGluZy5hY3RpdmF0ZScsIHsgZW5hYmxlZDogdHJ1ZSwgcGFpbnRpbmc6IHRoaXMuUGFpbnRpbmcgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLlBhaW50aW5nO1xuICAgIH1cblxuXG5cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgZGVhY3RpdmF0ZVNuYXBwaW5nXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGRlYWN0aXZhdGVzIHRoZSBzbmFwcGluZyBmZWF0dXJlIGJ5IHBlcmZvcm1pbmcgdmFyaW91cyBhY3Rpb25zLiBEZWxldGVzIG1lc2ggZGF0YSwgZGVhY3RpdmF0ZXMgdGhlIHNuYXBwaW5nIGJ1dHRvbnMsIGRlYWN0aXZhdGVzIHRoZSBTbmFwcGluZyBvYmplY3QsIGFuZCBmaXJlcyBhICdzbmFwcGluZy5kZWFjdGl2YXRlJyBldmVudC5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgZmFsc2UgYWZ0ZXIgZGVhY3RpdmF0aW5nIHRoZSBzbmFwcGluZyBmZWF0dXJlLlxuXHQgKi9cbiAgICB0aGlzLmRlYWN0aXZhdGVTbmFwcGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJ1dHRvbnMgPSB0aGlzLmdldEJ1dHRvbnMoJ3NuYXBwaW5nJyk7XG4gICAgICAgIGlmICghYnV0dG9ucykgcmV0dXJuO1xuICAgICAgICBidXR0b25zLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgdGhpcy5kZWxldGVNZXNoRGF0YSgpO1xuICAgICAgICB0aGlzLlNuYXBwaW5nLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgdGhpcy5maXJlKCdzbmFwcGluZy5kZWFjdGl2YXRlJywgeyBlbmFibGU6IGZhbHNlIH0pXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIGRlYWN0aXZhdGVQaW5uaW5nXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGRlYWN0aXZhdGVzIHRoZSBwaW5uaW5nIGZlYXR1cmUgYnkgZGVhY3RpdmF0aW5nIHRoZSBwaW5uaW5nIGJ1dHRvbnMsIHRoZSBQaW5uaW5nIG9iamVjdCwgYW5kIGZpcmluZyBhICdwaW5uaW5nLmRlYWN0aXZhdGUnIGV2ZW50LlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBmYWxzZSBhZnRlciBkZWFjdGl2YXRpbmcgcGlubmluZy5cblx0ICovXG4gICAgdGhpcy5kZWFjdGl2YXRlUGlubmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJ1dHRvbnMgPSB0aGlzLmdldEJ1dHRvbnMoJ3Bpbm5pbmcnKTtcbiAgICAgICAgaWYgKCFidXR0b25zKSByZXR1cm47XG4gICAgICAgIGJ1dHRvbnMuZGVhY3RpdmF0ZSgpO1xuICAgICAgICB0aGlzLlBpbm5pbmcuZGVhY3RpdmF0ZSgpO1xuICAgICAgICB0aGlzLmZpcmUoJ3Bpbm5pbmcuZGVhY3RpdmF0ZScsIHsgZW5hYmxlOiBmYWxzZSB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIERlYWN0aXZhdGVzIHRoZSByb3V0aW5nIGZ1bmN0aW9uYWxpdHkgYnkgZGVhY3RpdmF0aW5nIHRoZSByb3V0aW5nIGJ1dHRvbnMgYW5kIHRoZSBSb3V0aW5nIG1vZHVsZS4gVHJpZ2dlcnMgYSBjdXN0b20gZXZlbnQgJ3JvdXRpbmcuZGVhY3RpdmF0ZScgd2l0aCBlbmFibGUgc2V0IHRvIGZhbHNlLlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSBkZWFjdGl2YXRlUm91dGluZ1xuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBmYWxzZSBhZnRlciBkZWFjdGl2YXRpbmcgdGhlIHJvdXRpbmcgZnVuY3Rpb25hbGl0eS5cblx0ICovXG4gICAgdGhpcy5kZWFjdGl2YXRlUm91dGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJ1dHRvbnMgPSB0aGlzLmdldEJ1dHRvbnMoJ3JvdXRpbmcnKTtcbiAgICAgICAgaWYgKCFidXR0b25zKSByZXR1cm47XG4gICAgICAgIGJ1dHRvbnMuZGVhY3RpdmF0ZSgpO1xuICAgICAgICB0aGlzLlJvdXRpbmcuZGVhY3RpdmF0ZSgpO1xuICAgICAgICB0aGlzLmZpcmUoJ3JvdXRpbmcuZGVhY3RpdmF0ZScsIHsgZW5hYmxlOiBmYWxzZSB9KVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSBkZWFjdGl2YXRlRXhwbG9yaW5nXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGRlYWN0aXZhdGVzIHRoZSBleHBsb3JpbmcgbW9kZSBieSBkZWFjdGl2YXRpbmcgYnV0dG9ucywgZGVsZXRpbmcgbWVzaCBkYXRhLCBkZWFjdGl2YXRpbmcgdGhlIGV4cGxvcmluZyBtb2RlLCBhbmQgZmlyaW5nIGFuIGV2ZW50LiBGaXJlcyBhIGN1c3RvbSBldmVudCAnZXhwbG9yaW5nLmRlYWN0aXZhdGUnIHdpdGggdGhlIGVuYWJsZSBzdGF0dXMgc2V0IHRvIGZhbHNlLlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBmYWxzZSBhZnRlciBkZWFjdGl2YXRpbmcgdGhlIGV4cGxvcmluZyBtb2RlLlxuXHQgKi9cbiAgICB0aGlzLmRlYWN0aXZhdGVFeHBsb3JpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBidXR0b25zID0gdGhpcy5nZXRCdXR0b25zKCdleHBsb3JpbmcnKTtcbiAgICAgICAgaWYgKCFidXR0b25zKSByZXR1cm47XG4gICAgICAgIGJ1dHRvbnMuZGVhY3RpdmF0ZSgpO1xuICAgICAgICB0aGlzLmRlbGV0ZU1lc2hEYXRhKCk7XG4gICAgICAgIHRoaXMuRXhwbG9yaW5nLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgdGhpcy5maXJlKCdleHBsb3JpbmcuZGVhY3RpdmF0ZScsIHsgZW5hYmxlOiBmYWxzZSB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgZGVhY3RpdmF0ZVBhaW50aW5nXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGRlYWN0aXZhdGVzIHRoZSBwYWludGluZyBtb2RlIGJ5IGRlYWN0aXZhdGluZyB0aGUgYnV0dG9ucywgdGhlIHBhaW50aW5nIHRvb2wsIGFuZCBmaXJpbmcgYW4gZXZlbnQuIEZpcmVzIGEgY3VzdG9tIGV2ZW50ICdwYWludGluZy5kZWFjdGl2YXRlJyB3aXRoIHRoZSBlbmFibGUgc3RhdHVzIHNldCB0byBmYWxzZS5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgZmFsc2UuXG5cdCAqL1xuICAgIHRoaXMuZGVhY3RpdmF0ZVBhaW50aW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYnV0dG9ucyA9IHRoaXMuZ2V0QnV0dG9ucygncGFpbnRpbmcnKTtcbiAgICAgICAgaWYgKCFidXR0b25zKSByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLm1vYmlsZSAmJiAhdGhpcy5jdXJyZW50TW9kZS5maW5pc2hlZCAmJiB0aGlzLmN1cnJlbnRNb2RlLmlkID09PSAnZHJhdycgJiYgdGhpcy5jdXJyZW50TW9kZS50eXBlICYmIHRoaXMuY3VycmVudE1vZGUudHlwZSA9PT0gJ1JlY3RhbmdsZScpIHJldHVybjtcbiAgICAgICAgYnV0dG9ucy5kZWFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMuUGFpbnRpbmcuZGVhY3RpdmF0ZSgpO1xuICAgICAgICB0aGlzLmZpcmUoJ3BhaW50aW5nLmRlYWN0aXZhdGUnLCB7IGVuYWJsZTogZmFsc2UgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBcblxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSBnZXRNYXBcblx0ICogQGRlc2NyaXB0aW9uIFJldHJpZXZlcyB0aGUgbWFwIHByb3BlcnR5IGZyb20gdGhlIE1hcCBvYmplY3QuXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBtYXAgcHJvcGVydHkgb2YgdGhlIE1hcCBvYmplY3QuXG5cdCAqL1xuICAgIHRoaXMuZ2V0TWFwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXA7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSBnZXRNb2Rlc1xuXHQgKiBAZGVzY3JpcHRpb24gUmV0cmlldmVzIHRoZSBtb2RlcyBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgbW9kZSBwYXJhbWV0ZXIuIElmIGEgbW9kZSBpcyBzcGVjaWZpZWQsIGl0IHJldHVybnMgdGhlIG1vZGUgdGhhdCBjYW4gaGFuZGxlIHRoZSBpbnB1dCBtb2RlLiBJZiBubyBtb2RlIGlzIHNwZWNpZmllZCwgaXQgcmV0dXJucyBhbGwgYXZhaWxhYmxlIG1vZGVzLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbW9kZSAtIFRoZSBtb2RlIHRvIGJlIGNoZWNrZWQgYWdhaW5zdCBhdmFpbGFibGUgbW9kZXMuXG5cdCAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IC0gQW4gYXJyYXkgb2YgYWxsIGF2YWlsYWJsZSBtb2RlcyBpZiBubyBtb2RlIGlzIHNwZWNpZmllZCwgb3IgdGhlIG1vZGUgb2JqZWN0IHRoYXQgY2FuIGhhbmRsZSB0aGUgaW5wdXQgbW9kZS5cblx0ICovXG4gICAgdGhpcy5nZXRNb2RlcyA9IGZ1bmN0aW9uIChtb2RlKSB7XG4gICAgICAgIHJldHVybiBtb2RlID8gdGhpcy5tb2Rlcy5maW5kKGZ1bmN0aW9uKG0pIHsgaWYgKG0uY2FuSGFuZGxlICYmIG0uY2FuSGFuZGxlKG1vZGUpKSB7IHJldHVybiBtOyB9IH0pIDogdGhpcy5tb2RlcztcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIGdldE1vZGVcblx0ICogQGRlc2NyaXB0aW9uIFJldHJpZXZlcyB0aGUgY3VycmVudCBtb2RlIG9mIHRoZSBvYmplY3QuIEVpdGhlciAnR2VvRmxvLlNlbGVjdCcgb3IgJ0dlb0Zsby5EcmF3Jy5cblx0ICogQHJldHVybiB7b2JqZWN0fSBUaGUgY3VycmVudCBtb2RlIG9mIHRoZSBvYmplY3QuXG5cdCAqL1xuICAgIHRoaXMuZ2V0TW9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudE1vZGU7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSBnZXRDb2xvcnNcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gcmV0cmlldmVzIHRoZSBjb2xvcnMgZnJvbSB0aGUgb3B0aW9ucyBvYmplY3QuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gVGhlIGNvbG9ycyBhcnJheSBmcm9tIHRoZSBvcHRpb25zIG9iamVjdC5cblx0ICovXG4gICAgdGhpcy5nZXRDb2xvcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuY29sb3JzO1xuICAgIH1cblxuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIFJldHJpZXZlcyB0aGUgYnV0dG9ucyBhc3NvY2lhdGVkIHdpdGggYSBzcGVjaWZpYyBjb250cm9sIG9yIGFsbCBidXR0b25zIGZyb20gdGhlIGNvbnRyb2xzLlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSBnZXRCdXR0b25zXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIFRoZSBJRCBvZiB0aGUgYnV0dG9uIHRvIHJldHJpZXZlLiBJZiBub3QgcHJvdmlkZWQsIHJldHJpZXZlcyBhbGwgYnV0dG9ucy5cblx0ICogQHJldHVybnMge29iamVjdHxib29sZWFufSAtIFJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGJ1dHRvbnMgaWYgZm91bmQsIG9yIGZhbHNlIGlmIGNvbnRyb2xzIGFyZSBub3QgYXZhaWxhYmxlLlxuXHQgKi9cbiAgICB0aGlzLmdldEJ1dHRvbnMgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc0NvbnRyb2xzKCkpIHJldHVybiBmYWxzZTtcblxuICAgICAgICB2YXIgYnV0dG9ucztcblxuICAgICAgICB0aGlzLmNvbnRyb2xzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gYy5nZXRCdXR0b25PcHRpb25zKCk7XG5cbiAgICAgICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgICAgIGlmICghYnV0dG9ucyAmJiBvcHRpb25zW2lkXSkgYnV0dG9ucyA9IG9wdGlvbnNbaWRdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIWJ1dHRvbnMpIGJ1dHRvbnMgPSB7fTtcblxuICAgICAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKG9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24oZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IGVudHJ5WzBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gZW50cnlbMV07XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNba2V5XSA9IHZhbDtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmV0dXJuIGJ1dHRvbnM7XG4gICAgfVxuXG5cblxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSBnZXRGZWF0dXJlc1xuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiByZXRyaWV2ZXMgYm90aCB0aGUgZHJhd24gYW5kIHNlbGVjdGVkIGZlYXR1cmVzIGFuZCByZXR1cm5zIHRoZW0gYXMgYSBzaW5nbGUgYXJyYXkuXG5cdCAqIEByZXR1cm4ge0FycmF5fSBBbiBhcnJheSBjb250YWluaW5nIGJvdGggdGhlIGRyYXduIGFuZCBzZWxlY3RlZCBmZWF0dXJlcy5cblx0ICovXG4gICAgdGhpcy5nZXRGZWF0dXJlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFt0aGlzLmdldERyYXduRmVhdHVyZXMoKSwgdGhpcy5nZXRTZWxlY3RlZEZlYXR1cmVzKCldLmZsYXQoKTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIGdldERyYXduRmVhdHVyZXNcblx0ICogQGRlc2NyaXB0aW9uIFJldHJpZXZlcyB0aGUgZHJhd24gZmVhdHVyZXMgZnJvbSB0aGUgRmVhdHVyZXMgb2JqZWN0LlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEFuIGFycmF5IG9mIGRyYXduIGZlYXR1cmVzLlxuXHQgKi9cbiAgICB0aGlzLmdldERyYXduRmVhdHVyZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkZlYXR1cmVzLmdldENvbGRGZWF0dXJlcygpO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgZ2V0UmVuZGVyZWRGZWF0dXJlc1xuXHQgKiBAZGVzY3JpcHRpb24gUmV0cmlldmVzIHJlbmRlcmVkIGZlYXR1cmVzIHdpdGhpbiBhIHNwZWNpZmllZCByYWRpdXMgYXJvdW5kIGEgZ2l2ZW4gbG9uZ2l0dWRlIGFuZCBsYXRpdHVkZSwgYmFzZWQgb24gYSBmaWx0ZXIuXG5cdCAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gbG5nTGF0IC0gQW4gYXJyYXkgY29udGFpbmluZyB0aGUgbG9uZ2l0dWRlIGFuZCBsYXRpdHVkZSBjb29yZGluYXRlcy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1c0luS20gLSBUaGUgcmFkaXVzIGluIGtpbG9tZXRlcnMgd2l0aGluIHdoaWNoIHRvIHNlYXJjaCBmb3IgZmVhdHVyZXMuXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBmaWx0ZXIgLSBBbiBvcHRpb25hbCBmaWx0ZXIgb2JqZWN0IHRvIGFwcGx5IHdoZW4gcmV0cmlldmluZyBmZWF0dXJlcy5cblx0ICogQHJldHVybnMge0FycmF5PG9iamVjdD59IEFuIGFycmF5IG9mIHJlbmRlcmVkIGZlYXR1cmVzIHRoYXQgbWF0Y2ggdGhlIGNyaXRlcmlhLlxuXHQgKi9cbiAgICB0aGlzLmdldFJlbmRlcmVkRmVhdHVyZXMgPSBmdW5jdGlvbiAobG5nTGF0LCByYWRpdXNJbkttLCBmaWx0ZXIpIHtcbiAgICAgICAgdmFyIGZlYXR1cmVzID0gW3RoaXMuZ2V0UmVuZGVyZWREcmF3bkZlYXR1cmVzKGxuZ0xhdCwgcmFkaXVzSW5LbSwgZmlsdGVyKSwgdGhpcy5nZXRSZW5kZXJlZFNuYXBGZWF0dXJlcyhsbmdMYXQsIHJhZGl1c0luS20sIGZpbHRlcildLmZsYXQoKTtcbiAgICAgICAgcmV0dXJuIGZlYXR1cmVzO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgZ2V0UmVuZGVyZWREcmF3bkZlYXR1cmVzXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHF1ZXJpZXMgdGhlIG1hcCBmb3IgcmVuZGVyZWQgZHJhd24gZmVhdHVyZXMgYmFzZWQgb24gdGhlIHByb3ZpZGVkIHBhcmFtZXRlcnMuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBsbmdMYXQgLSBUaGUgbG9uZ2l0dWRlIGFuZCBsYXRpdHVkZSBjb29yZGluYXRlcy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1c0luS20gLSBUaGUgcmFkaXVzIGluIGtpbG9tZXRlcnMgZm9yIHRoZSBzZWFyY2guXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBmaWx0ZXIgLSBPcHRpb25hbCBmaWx0ZXIgb2JqZWN0IHRvIGFwcGx5IHRvIHRoZSBxdWVyeS5cblx0ICogQHJldHVybnMge0FycmF5fSBBbiBhcnJheSBvZiBmZWF0dXJlcyB3aXRoaW4gdGhlIHNwZWNpZmllZCByYWRpdXMgYXJvdW5kIHRoZSBnaXZlbiBjb29yZGluYXRlcy5cblx0ICovXG4gICAgdGhpcy5nZXRSZW5kZXJlZERyYXduRmVhdHVyZXMgPSBmdW5jdGlvbiAobG5nTGF0LCByYWRpdXNJbkttLCBmaWx0ZXIpIHtcbiAgICAgICAgdmFyIGJib3g7XG4gICAgICAgIHZhciBpZCA9IHRoaXMuaWQ7XG5cbiAgICAgICAgdmFyIHByZWxheWVycyA9IFtcbiAgICAgICAgICAgIGlkICsgXCItbGluZS1jb2xkXCIsXG4gICAgICAgICAgICBpZCArIFwiLWZpbGwtY29sZFwiLFxuICAgICAgICAgICAgaWQgKyBcIi1jaXJjbGUtY29sZFwiLFxuICAgICAgICAgICAgaWQgKyBcIi1pY29uLWNvbGRcIixcbiAgICAgICAgICAgIGlkICsgXCItZmlsbC1zZWxlY3RcIixcbiAgICAgICAgICAgIGlkICsgXCItbGluZS1zZWxlY3RcIixcbiAgICAgICAgICAgIGlkICsgJy1wb2ludC1zZWxlY3QnLFxuICAgICAgICAgICAgaWQgKyAnLXN5bWJvbC1zZWxlY3QnXG4gICAgICAgIF07XG5cbiAgICAgICAgdmFyIGxheWVycyA9IFtdO1xuXG4gICAgICAgIHByZWxheWVycy5mb3JFYWNoKGZ1bmN0aW9uKGxheWVyKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5tYXAuZ2V0TGF5ZXIobGF5ZXIpKSBsYXllcnMucHVzaChsYXllcik7XG4gICAgICAgIH0sIHRoaXMpXG5cbiAgICAgICAgdGhpcy5MYXllcnMuZ2V0TGF5ZXJzKCkuZm9yRWFjaChmdW5jdGlvbihsYXllcikge1xuICAgICAgICAgICAgaWYgKGxheWVyLmlkLmluY2x1ZGVzKGlkKSkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKHRoaXMubWFwLmdldExheWVyKGxheWVyLmlkKSkgbGF5ZXJzLnB1c2gobGF5ZXIuaWQpO1xuICAgICAgICB9LCB0aGlzKVxuXG4gICAgICAgIHZhciBvcHRpb25zID0geyBsYXllcnM6IGxheWVycyB9O1xuXG4gICAgICAgIGlmIChyYWRpdXNJbkttKSB7XG4gICAgICAgICAgICB2YXIgcmFkaXVzID0gdHVyZi5kaXN0YW5jZVRvRGVncmVlcyhyYWRpdXNJbkttKTtcbiAgICAgICAgICAgIGJib3ggPSBbdGhpcy5tYXAucHJvamVjdChbbG5nTGF0LmxuZyAtIHJhZGl1cywgbG5nTGF0LmxhdCAtIHJhZGl1c10pLCB0aGlzLm1hcC5wcm9qZWN0KFtsbmdMYXQubG5nICsgcmFkaXVzLCBsbmdMYXQubGF0ICsgcmFkaXVzXSldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHBvaW50ID0gbG5nTGF0ID8gdGhpcy5tYXAucHJvamVjdChbbG5nTGF0LmxuZywgbG5nTGF0LmxhdF0pIDogbnVsbDtcbiAgICAgICAgICAgIGJib3ggPSBwb2ludCA/IFtbcG9pbnQueCAtIDUsIHBvaW50LnkgLSA1XSwgW3BvaW50LnggKyA1LCBwb2ludC55ICsgNV1dIDogbnVsbFxuICAgICAgICB9XG5cbiAgICAgICAgZmlsdGVyID8gb3B0aW9ucy5maWx0ZXIgPSBmaWx0ZXIgOiBmYWxzZTtcbiAgICAgICAgXG4gICAgICAgIHZhciBmZWF0dXJlcyA9IHRoaXMubWFwLnF1ZXJ5UmVuZGVyZWRGZWF0dXJlcyhiYm94LCBvcHRpb25zKTtcbiAgICAgICAgdmFyIGlkcyA9IGZlYXR1cmVzLm1hcChmdW5jdGlvbihmZWF0dXJlKSB7IHJldHVybiBmZWF0dXJlLnBhcmVudCB8fCBmZWF0dXJlLnByb3BlcnRpZXMucGFyZW50IHx8IGZlYXR1cmUuaWQgfHwgZmVhdHVyZS5wcm9wZXJ0aWVzLmlkOyB9KTtcblxuICAgICAgICByZXR1cm4gZmVhdHVyZXMgJiYgZmVhdHVyZXMubGVuZ3RoID8gdGhpcy5GZWF0dXJlcy5nZXRGZWF0dXJlc0J5SWQoaWRzKSA6IFtdOztcbiAgICB9XG4gICAgXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSBnZXRSZW5kZXJlZFNuYXBGZWF0dXJlc1xuXHQgKiBAZGVzY3JpcHRpb24gUmV0cmlldmVzIHJlbmRlcmVkIG1lc2ggaW5kZXggZmVhdHVyZXMgd2l0aGluIGEgc3BlY2lmaWVkIHJhZGl1cyBhcm91bmQgYSBnaXZlbiBwb2ludCBvbiB0aGUgbWFwLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gbG5nTGF0IC0gVGhlIGxvbmdpdHVkZSBhbmQgbGF0aXR1ZGUgY29vcmRpbmF0ZXMgb2YgdGhlIGNlbnRlciBwb2ludC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1c0luS20gLSBUaGUgcmFkaXVzIGluIGtpbG9tZXRlcnMgd2l0aGluIHdoaWNoIHRvIHNlYXJjaCBmb3IgZmVhdHVyZXMuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBmaWx0ZXIgLSBPcHRpb25hbCBmaWx0ZXIgdG8gYXBwbHkgdG8gdGhlIHF1ZXJ5LlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEFuIGFycmF5IG9mIGZlYXR1cmVzIHRoYXQgZmFsbCB3aXRoaW4gdGhlIHNwZWNpZmllZCByYWRpdXMgYXJvdW5kIHRoZSBnaXZlbiBwb2ludC5cblx0ICovXG4gICAgdGhpcy5nZXRSZW5kZXJlZFNuYXBGZWF0dXJlcyA9IGZ1bmN0aW9uIChsbmdMYXQsIHJhZGl1c0luS20sIGZpbHRlcikge1xuICAgICAgICBpZiAoIXRoaXMubWVzaEluZGV4KSByZXR1cm4gW107XG5cbiAgICAgICAgdmFyIHJhZGl1cyA9IHR1cmYuZGlzdGFuY2VUb0RlZ3JlZXMocmFkaXVzSW5LbSk7XG4gICAgICAgIHZhciBiYm94ID0gW3RoaXMubWFwLnByb2plY3QoW2xuZ0xhdC5sbmcgLSByYWRpdXMsIGxuZ0xhdC5sYXQgLSByYWRpdXNdKSwgdGhpcy5tYXAucHJvamVjdChbbG5nTGF0LmxuZyArIHJhZGl1cywgbG5nTGF0LmxhdCArIHJhZGl1c10pXTtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7IGxheWVyczogW3RoaXMuc3RhdGljcy5jb25zdGFudHMubGF5ZXJzLk1FU0ggKyAnLWxpbmUnLCB0aGlzLnN0YXRpY3MuY29uc3RhbnRzLmxheWVycy5NRVNIICsgJy1jaXJjbGUnXSB9O1xuICAgICAgICBmaWx0ZXIgPyBvcHRpb25zLmZpbHRlciA9IGZpbHRlciA6IGZhbHNlO1xuICAgICAgICB2YXIgZmVhdHVyZXMgPSB0aGlzLm1hcC5xdWVyeVJlbmRlcmVkRmVhdHVyZXMoYmJveCwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBmZWF0dXJlcyAmJiBmZWF0dXJlcy5sZW5ndGggPyB0aGlzLm1lc2hJbmRleC5nZXRGZWF0dXJlc0Zyb21JbmRleChmZWF0dXJlcykgOiBbXTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIGdldEZlYXR1cmVCeUlkXG5cdCAqIEBkZXNjcmlwdGlvbiBSZXRyaWV2ZXMgYSBmZWF0dXJlIGJ5IGl0cyBJRCBmcm9tIHRoZSBGZWF0dXJlcyBvYmplY3QuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIFRoZSBJRCBvZiB0aGUgZmVhdHVyZSB0byByZXRyaWV2ZS5cblx0ICogQHJldHVybnMge2Jvb2xlYW58b2JqZWN0fSBSZXR1cm5zIHRoZSBmZWF0dXJlIG9iamVjdCBpZiBmb3VuZCwgb3RoZXJ3aXNlIGZhbHNlLlxuXHQgKi9cbiAgICB0aGlzLmdldEZlYXR1cmVCeUlkID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIGlmICghaWQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuRmVhdHVyZXMuZ2V0RmVhdHVyZUJ5SWQoaWQpO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgZ2V0RmVhdHVyZXNCeUxheWVyXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHF1ZXJpZXMgdGhlIG1hcCBmb3IgZmVhdHVyZXMgd2l0aGluIGEgc3BlY2lmaWVkIHJhZGl1cyBhcm91bmQgYSBnaXZlbiBsb2NhdGlvbiBmcm9tIGEgc3BlY2lmaWMgc291cmNlIGxheWVyLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIC0gVGhlIHNvdXJjZSBsYXllciB0byBxdWVyeSBmZWF0dXJlcyBmcm9tLlxuXHQgKiBAcGFyYW0ge0xuZ0xhdH0gbG5nTGF0IC0gVGhlIGxvbmdpdHVkZSBhbmQgbGF0aXR1ZGUgY29vcmRpbmF0ZXMgb2YgdGhlIGNlbnRlciBwb2ludCBmb3IgdGhlIHF1ZXJ5LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzSW5LbSAtIFRoZSByYWRpdXMgaW4ga2lsb21ldGVycyB3aXRoaW4gd2hpY2ggdG8gc2VhcmNoIGZvciBmZWF0dXJlcy5cblx0ICogQHBhcmFtIHtPYmplY3R9IGZpbHRlciAtIE9wdGlvbmFsIGZpbHRlciBvYmplY3QgdG8gYXBwbHkgdG8gdGhlIHF1ZXJ5LlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEFuIGFycmF5IG9mIGZlYXR1cmVzIHRoYXQgbWF0Y2ggdGhlIHF1ZXJ5IGNyaXRlcmlhLlxuXHQgKi9cbiAgICB0aGlzLmdldEZlYXR1cmVzQnlMYXllciA9IGZ1bmN0aW9uIChzb3VyY2UsIGxuZ0xhdCwgcmFkaXVzSW5LbSwgZmlsdGVyKSB7XG4gICAgICAgIHZhciBsYXllcnMgPSBbXTtcbiAgICAgICAgdmFyIGJib3g7XG5cbiAgICAgICAgdGhpcy5MYXllcnMuZ2V0TGF5ZXJzKCkuZm9yRWFjaChmdW5jdGlvbihsYXllcikge1xuICAgICAgICAgICAgaWYgKCFsYXllci5pZC5pbmNsdWRlcyhzb3VyY2UpKSByZXR1cm47XG4gICAgICAgICAgICBsYXllcnMucHVzaChsYXllci5pZCk7XG4gICAgICAgIH0pXG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7IGxheWVyczogbGF5ZXJzIH07XG5cbiAgICAgICAgaWYgKHJhZGl1c0luS20pIHtcbiAgICAgICAgICAgIHZhciByYWRpdXMgPSB0dXJmLmRpc3RhbmNlVG9EZWdyZWVzKHJhZGl1c0luS20pO1xuICAgICAgICAgICAgYmJveCA9IFt0aGlzLm1hcC5wcm9qZWN0KFtsbmdMYXQubG5nIC0gcmFkaXVzLCBsbmdMYXQubGF0IC0gcmFkaXVzXSksIHRoaXMubWFwLnByb2plY3QoW2xuZ0xhdC5sbmcgKyByYWRpdXMsIGxuZ0xhdC5sYXQgKyByYWRpdXNdKV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcG9pbnQgPSBsbmdMYXQgPyB0aGlzLm1hcC5wcm9qZWN0KFtsbmdMYXQubG5nLCBsbmdMYXQubGF0XSkgOiBudWxsO1xuICAgICAgICAgICAgYmJveCA9IHBvaW50ID8gW1twb2ludC54IC0gNSwgcG9pbnQueSAtIDVdLCBbcG9pbnQueCArIDUsIHBvaW50LnkgKyA1XV0gOiBudWxsXG4gICAgICAgIH1cblxuICAgICAgICBmaWx0ZXIgPyBvcHRpb25zLmZpbHRlciA9IGZpbHRlciA6IGZhbHNlO1xuXG4gICAgICAgIHZhciBmZWF0dXJlcyA9IHRoaXMubWFwLnF1ZXJ5UmVuZGVyZWRGZWF0dXJlcyhiYm94LCBvcHRpb25zKTtcbiAgICAgICAgdmFyIGlkcyA9IGZlYXR1cmVzLm1hcChmdW5jdGlvbihmZWF0dXJlKSB7IHJldHVybiBmZWF0dXJlLnBhcmVudCB8fCBmZWF0dXJlLnByb3BlcnRpZXMucGFyZW50IHx8IGZlYXR1cmUuaWQgfHwgZmVhdHVyZS5wcm9wZXJ0aWVzLmlkOyB9KTtcblxuICAgICAgICByZXR1cm4gZmVhdHVyZXMgJiYgZmVhdHVyZXMubGVuZ3RoID8gdGhpcy5GZWF0dXJlcy5nZXRGZWF0dXJlc0J5SWQoaWRzKSA6IFtdOztcbiAgICB9XG5cblxuXG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIGdldFNlbGVjdGVkRmVhdHVyZXNcblx0ICogQGRlc2NyaXB0aW9uIFJldHJpZXZlcyB0aGUgc2VsZWN0ZWQgZmVhdHVyZXMgc3RvcmVkIGluIHRoZSBzZWxlY3RlZEZlYXR1cmVzIGFycmF5LlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIHNlbGVjdGVkIGZlYXR1cmVzLlxuXHQgKi9cbiAgICB0aGlzLmdldFNlbGVjdGVkRmVhdHVyZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3RlZEZlYXR1cmVzO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgZ2V0U2VsZWN0ZWRGZWF0dXJlSWRzXG5cdCAqIEBkZXNjcmlwdGlvbiBSZXRyaWV2ZXMgdGhlIElEcyBvZiBzZWxlY3RlZCBmZWF0dXJlcy5cblx0ICogQHJldHVybnMge0FycmF5fSBBbiBhcnJheSBvZiBmZWF0dXJlIElEcy5cblx0ICovXG4gICAgdGhpcy5nZXRTZWxlY3RlZEZlYXR1cmVJZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNlbGVjdGVkRmVhdHVyZXMoKS5tYXAoKGZlYXR1cmUpID0+IHsgcmV0dXJuIGZlYXR1cmUucGFyZW50IHx8IGZlYXR1cmUucHJvcGVydGllcy5wYXJlbnQgfHwgZmVhdHVyZS5pZCB8fCBmZWF0dXJlLnByb3BlcnRpZXMuaWQ7IH0pO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgZ2V0U2VsZWN0ZWRGZWF0dXJlc0Jib3hcblx0ICogQGRlc2NyaXB0aW9uIFJldHJpZXZlcyB0aGUgYm91bmRpbmcgYm94IG9mIHRoZSBzZWxlY3RlZCBmZWF0dXJlcy5cblx0ICogQHJldHVybnMge0FycmF5PG51bWJlcj59IFRoZSBib3VuZGluZyBib3ggY29vcmRpbmF0ZXMgW21pblgsIG1pblksIG1heFgsIG1heFldLlxuXHQgKi9cbiAgICB0aGlzLmdldFNlbGVjdGVkRmVhdHVyZXNCYm94ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuaGFzU2VsZWN0aW9uKCkpIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gdHVyZi5iYm94KHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24odGhpcy5nZXRTZWxlY3RlZEZlYXR1cmVzKCkpKTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIGdldFNlbGVjdGVkUHJvcGVydHlOYW1lc1xuXHQgKiBAZGVzY3JpcHRpb24gUmV0cmlldmVzIHRoZSB1bmlxdWUgcHJvcGVydHkgbmFtZXMgb2Ygc2VsZWN0ZWQgZmVhdHVyZXMgZXhjbHVkaW5nIHRoZSBJRCBwcm9wZXJ0eS5cblx0ICogQHJldHVybnMge0FycmF5fSBBbiBhcnJheSBvZiB1bmlxdWUgcHJvcGVydHkgbmFtZXMuXG5cdCAqL1xuICAgIHRoaXMuZ2V0U2VsZWN0ZWRQcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBpZCA9IHRoaXMuaWQ7XG4gICAgICAgIGNvbnN0IG5hbWVzID0gW107XG5cbiAgICAgICAgdGhpcy5nZXRTZWxlY3RlZEZlYXR1cmVzKCkuZm9yRWFjaCgoZmVhdHVyZSkgPT4ge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoZmVhdHVyZS5wcm9wZXJ0aWVzKS5mb3JFYWNoKChwcm9wZXJ0eU5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobmFtZXMuaW5kZXhPZihwcm9wZXJ0eU5hbWUpID09PSAtMSAmJiBwcm9wZXJ0eU5hbWUgIT09IGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWVzLnB1c2gocHJvcGVydHlOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG5hbWVzO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgZ2V0U2VsZWN0ZWRQcm9wZXJ0eVZhbHVlc1xuXHQgKiBAZGVzY3JpcHRpb24gUmV0cmlldmVzIHRoZSBwcm9wZXJ0aWVzIG9mIHNlbGVjdGVkIGZlYXR1cmVzIGV4Y2x1ZGluZyB0aGUgcHJvcGVydHkgd2l0aCB0aGUgc3BlY2lmaWVkIElELlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiBzZWxlY3RlZCBmZWF0dXJlcy5cblx0ICovXG4gICAgdGhpcy5nZXRTZWxlY3RlZFByb3BlcnR5VmFsdWVzID0gZnVuY3Rpb24gICgpIHtcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLmlkO1xuICAgICAgICB2YXIgcHJvcHMgPSB7fTtcblxuICAgICAgICB0aGlzLmdldFNlbGVjdGVkRmVhdHVyZXMoKS5mb3JFYWNoKGZ1bmN0aW9uIChmZWF0dXJlKSB7IE9iamVjdC5hc3NpZ24ocHJvcHMsIGZlYXR1cmUucHJvcGVydGllcyk7IH0pO1xuICAgICAgICBpZiAocHJvcHNbaWRdICE9PSB1bmRlZmluZWQpIHsgZGVsZXRlIHByb3BzW2lkXTsgfVxuICAgICAgICByZXR1cm4gcHJvcHM7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBjb21tb24gZ2VvbWV0cnkgdHlwZSBvZiB0aGUgc2VsZWN0ZWQgZmVhdHVyZXMuIElmIGFsbCBzZWxlY3RlZCBmZWF0dXJlcyBoYXZlIHRoZSBzYW1lIGdlb21ldHJ5IHR5cGUsIGl0IHJldHVybnMgdGhhdCB0eXBlLiBJZiB0aGUgc2VsZWN0ZWQgZmVhdHVyZXMgaGF2ZSBkaWZmZXJlbnQgZ2VvbWV0cnkgdHlwZXMsIGl0IHJldHVybnMgXCJpbGxlZ2FsXCIuXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIGdldENvbW1vbkdlb21ldHJ5VHlwZVxuXHQgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IFRoZSBjb21tb24gZ2VvbWV0cnkgdHlwZSBvciBudWxsIGlmIGRpZmZlcmVudCB0eXBlcyBhcmUgcHJlc2VudC5cblx0ICovXG4gICAgdGhpcy5nZXRDb21tb25HZW9tZXRyeVR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBhbGxGZWF0dXJlc1R5cGUgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuZ2V0U2VsZWN0ZWRGZWF0dXJlcygpLmZvckVhY2goKGZlYXR1cmUpID0+IHtcbiAgICAgICAgICAgIGlmIChhbGxGZWF0dXJlc1R5cGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhbGxGZWF0dXJlc1R5cGUgPSBmZWF0dXJlLmdlb21ldHJ5LnR5cGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZlYXR1cmUuZ2VvbWV0cnkudHlwZSAhPT0gYWxsRmVhdHVyZXNUeXBlKSB7XG4gICAgICAgICAgICAgICAgYWxsRmVhdHVyZXNUeXBlID0gXCJpbGxlZ2FsXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChhbGxGZWF0dXJlc1R5cGUgPT09IFwiaWxsZWdhbFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBhbGxGZWF0dXJlc1R5cGU7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG4gICAgdGhpcy5zZWxlY3RGZWF0dXJlID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHZhciBmZWF0dXJlID0gdGhpcy5nZXRGZWF0dXJlQnlJZChpZCk7XG4gICAgICAgIGlmICghZmVhdHVyZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgc2VsZWN0ZWQgPSB0aGlzLkZlYXR1cmVzLnNlbGVjdEZlYXR1cmVzKFtmZWF0dXJlXSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gc2VsZWN0ZWQ7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSBlZGl0RmVhdHVyZVxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBhbGxvd3MgZWRpdGluZyBhIGZlYXR1cmUgYnkgcHJvdmlkaW5nIGl0cyBJRCBvciB1c2luZyB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGZlYXR1cmUuIEl0IHRyaWdnZXJzIGEgJ2ZlYXR1cmUuZWRpdCcgZXZlbnQgYW5kIHNldHMgdGhlIG1vZGUgdG8gJ2VkaXQnLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBUaGUgSUQgb2YgdGhlIGZlYXR1cmUgdG8gZWRpdC5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBBZGRpdGlvbmFsIG9wdGlvbnMgZm9yIGVkaXRpbmcgdGhlIGZlYXR1cmUuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLmZlYXR1cmUgLSBUaGUgZmVhdHVyZSBvYmplY3QgdG8gZWRpdC5cblx0ICogQHJldHVybnMge09iamVjdH0gVGhlIGVkaXRlZCBmZWF0dXJlLlxuXHQgKi9cbiAgICB0aGlzLmVkaXRGZWF0dXJlID0gZnVuY3Rpb24gKGlkLCBvcHRpb25zPXt9KSB7XG4gICAgICAgIHZhciBmZWF0dXJlID0gb3B0aW9ucy5mZWF0dXJlIHx8IHRoaXMuZ2V0RmVhdHVyZUJ5SWQoaWQpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFmZWF0dXJlKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaGFzU2luZ2xlU2VsZWN0aW9uKCkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGZlYXR1cmUgPSB0aGlzLmdldFNlbGVjdGVkRmVhdHVyZXMoKVswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9wdGlvbnMuaWQgPSBmZWF0dXJlLmlkO1xuICAgICAgICBvcHRpb25zLm1vZGUgPSAnZWRpdCc7XG4gICAgICAgIG9wdGlvbnMuZmVhdHVyZSA9IGZlYXR1cmU7XG5cbiAgICAgICAgdGhpcy5maXJlKCdmZWF0dXJlLmVkaXQnLCB7IGZlYXR1cmU6IGZlYXR1cmUsIGlkOiBmZWF0dXJlLmlkIH0pO1xuICAgICAgICB0aGlzLnNldE1vZGUob3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBmZWF0dXJlO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgY2FuY2VsRWRpdFxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBjYW5jZWxzIHRoZSBjdXJyZW50IGVkaXQgbW9kZSBpZiBpdCBpcyBpbiAnZHJhdycgbW9kZSBhbmQgZGVhY3RpdmF0ZXMgdGhlIGVkaXRpbmcgZmVhdHVyZS5cblx0ICogQHBhcmFtIHtib29sZWFufSBzdGFuZGJ5IC0gSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGNhbmNlbCBvcGVyYXRpb24gaXMgc3RhbmRieS5cblx0ICogQHBhcmFtIHtvYmplY3R9IGZlYXR1cmUgLSBUaGUgZmVhdHVyZSB0byBiZSBkZWFjdGl2YXRlZC4gSWYgbm90IHByb3ZpZGVkLCB0aGUgZWRpdGluZyBmZWF0dXJlIHdpbGwgYmUgdXNlZC5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgZmFsc2UgaWYgdGhlIGN1cnJlbnQgbW9kZSBpcyBub3QgJ2RyYXcnLCBvdGhlcndpc2UgZGVhY3RpdmF0ZXMgdGhlIGVkaXRpbmcgZmVhdHVyZS5cblx0ICovXG4gICAgdGhpcy5jYW5jZWxFZGl0ID0gZnVuY3Rpb24gKHN0YW5kYnksIGZlYXR1cmUpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudE1vZGUuaWQgIT09ICdkcmF3JykgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50TW9kZS5kZWFjdGl2YXRlKHRydWUsIHN0YW5kYnksIGZlYXR1cmUgfHwgdGhpcy5lZGl0aW5nKTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIHNhdmVFZGl0XG5cdCAqIEBkZXNjcmlwdGlvbiBTYXZlcyB0aGUgZWRpdGVkIGZlYXR1cmUgdXNpbmcgdGhlIGN1cnJlbnRNb2RlcyBzYXZlRWRpdCBtZXRob2QuXG5cdCAqIEByZXR1cm4ge2FueX0gVGhlIHJlc3VsdCBvZiB0aGUgc2F2ZUVkaXQgbWV0aG9kIG9mIHRoZSBjdXJyZW50IG1vZGUuXG5cdCAqL1xuICAgIHRoaXMuc2F2ZUVkaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRNb2RlLnNhdmVFZGl0KCk7XG4gICAgfVxuXG5cblxuXG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIGFkZEZlYXR1cmVzXG5cdCAqIEBkZXNjcmlwdGlvbiBBZGRzIGZlYXR1cmVzIHRvIHRoZSBtYXAgYW5kIG9wdGlvbmFsbHkgem9vbXMgdG8gdGhlbS5cblx0ICogQHBhcmFtIHtBcnJheX0gZmVhdHVyZXMgLSBBcnJheSBvZiBmZWF0dXJlcyB0byBiZSBhZGRlZCB0byB0aGUgbWFwLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IG5vWm9vbSAtIEZsYWcgdG8gaW5kaWNhdGUgd2hldGhlciB0byB6b29tIHRvIHRoZSBhZGRlZCBmZWF0dXJlcy5cblx0ICovXG4gICAgdGhpcy5hZGRGZWF0dXJlcyA9IGZ1bmN0aW9uIChmZWF0dXJlcywgbm9ab29tKSB7XG4gICAgICAgIGlmICghZmVhdHVyZXMpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGZlYXR1cmVzLmZlYXR1cmVzKSBmZWF0dXJlcyA9IGZlYXR1cmVzLmZlYXR1cmVzO1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZmVhdHVyZXMpKSBmZWF0dXJlcyA9IFtmZWF0dXJlc107XG4gICAgICAgIGlmICghZmVhdHVyZXMubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5GZWF0dXJlcy5hZGRGZWF0dXJlcyhmZWF0dXJlcyk7XG4gICAgICAgICFub1pvb20gPyB0aGlzLnpvb21Ub0ZlYXR1cmVzKCkgOiBmYWxzZTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIGFkZEZlYXR1cmVzVG9TZWxlY3RlZFxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBhZGRzIHRoZSBwcm92aWRlZCBmZWF0dXJlcyB0byB0aGUgc2VsZWN0ZWQgZmVhdHVyZXMgbGlzdCwgdXBkYXRlcyB0aGUgbWFwIHNvdXJjZXMsIHNldHMgYnV0dG9ucyBhbmQgdXBkYXRlcyB0aGUgdGV4dC5cblx0ICogQHBhcmFtIHtBcnJheX0gZmVhdHVyZXMgLSBUaGUgZmVhdHVyZXMgdG8gYmUgYWRkZWQgdG8gdGhlIHNlbGVjdGVkIGZlYXR1cmVzIGxpc3QuXG5cdCAqL1xuICAgIHRoaXMuYWRkRmVhdHVyZXNUb1NlbGVjdGVkID0gZnVuY3Rpb24gKGZlYXR1cmVzLCBvcHRpb25zPXt9KSB7XG4gICAgICAgIGlmICghZmVhdHVyZXMgfHwgIWZlYXR1cmVzLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIHRoaXMuZ2V0U2VsZWN0ZWRGZWF0dXJlcygpLnB1c2goLi4uZmVhdHVyZXMpO1xuICAgICAgICB0aGlzLnNldFZpZXdwb3J0KCk7XG4gICAgICAgIHRoaXMuc2V0QnV0dG9ucygpO1xuICAgICAgICB0aGlzLm1hcC5nZXRTb3VyY2UodGhpcy5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLlNFTEVDVCkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKHRoaXMuZ2V0U2VsZWN0ZWRGZWF0dXJlcygpKSk7XG4gICAgICAgIHRoaXMubWFwLmdldFNvdXJjZSh0aGlzLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuVkVSVEVYKS5zZXREYXRhKHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24odGhpcy5nZXRTZWxlY3RlZEZlYXR1cmVzKCkpKTtcbiAgICAgICAgdGhpcy5GZWF0dXJlcy5zZXRUZXh0KGZlYXR1cmVzKTtcbiAgICAgICAgdGhpcy5GZWF0dXJlcy51cGRhdGVGZWF0dXJlcyhmZWF0dXJlcyk7XG5cbiAgICAgICAgdGhpcy5nZXRTZWxlY3RlZEZlYXR1cmVzKCkuZm9yRWFjaChmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgY29uc3Qgc291cmNlID0gZmVhdHVyZS5zb3VyY2U7XG4gICAgICAgICAgICBjb25zdCBsYXllciA9IGdlb2Zsby5MYXllcnMuZ2V0TGF5ZXIoc291cmNlLCB0cnVlKTtcblxuICAgICAgICAgICAgY29uc3QgdHlwZSA9IGxheWVyID8gbGF5ZXIuZGV0YWlscy50eXBlIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXR5cGUgfHwgdHlwZSAhPT0gJ0ltYWdlJykgcmV0dXJuO1xuXG4gICAgICAgICAgICBjb25zdCBzdHlsZSA9ICFsYXllciA/IGZhbHNlIDogbGF5ZXIuc3R5bGU7XG4gICAgICAgICAgICBpZiAoIXN0eWxlKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgIHNlbGVjdExheWVyLmZvckVhY2goZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWwubWV0YWRhdGEgfHwgIWwubWV0YWRhdGEudHlwZXMgfHwgIWwubWV0YWRhdGEudHlwZXMuaW5jbHVkZXModHlwZSkpIHJldHVybjtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlVHlwZSA9IHN0eWxlW3R5cGUudG9Mb3dlckNhc2UoKV07XG4gICAgICAgICAgICAgICAgaWYgKCFzdHlsZVR5cGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgIGlmIChzdHlsZVR5cGUucGFpbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoc3R5bGVUeXBlLnBhaW50KS5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gZW50cnlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGVudHJ5WzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbC5zZXRQYWludFByb3BlcnR5KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0eWxlVHlwZS5sYXlvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoc3R5bGVUeXBlLmxheW91dCkuZm9yRWFjaChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGVudHJ5WzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBlbnRyeVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGwuc2V0TGF5b3V0UHJvcGVydHkoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAob3B0aW9ucy56b29tKSB0aGlzLnpvb21Ub0ZlYXR1cmVzKGZlYXR1cmVzLCB7IGNlbnRlcjogb3B0aW9ucy5jZW50ZXIgfSk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMudGV4dCkge1xuICAgICAgICAgICAgdGhpcy5MYXllcnMuYWRkVGV4dExheWVyKHtcbiAgICAgICAgICAgICAgICBzZWxlY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgaWRzOiBvcHRpb25zLnRleHQuaWRzLFxuICAgICAgICAgICAgICAgIGZpZWxkOiBvcHRpb25zLnRleHQuZmllbGQgfHwgJ3RleHQnLFxuICAgICAgICAgICAgICAgIGxheW91dDogb3B0aW9ucy50ZXh0LmxheW91dCB8fCB7XG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LXRyYW5zZm9ybSc6ICd1cHBlcmNhc2UnLFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1zaXplJzogMTAsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0LW9mZnNldCc6IFswLCAwLjVdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIGFkZEZlYXR1cmVzVG9NZXNoXG5cdCAqIEBkZXNjcmlwdGlvbiBBZGRzIGZlYXR1cmVzIHRvIHRoZSBtZXNoIGluZGV4IGFuZCB1cGRhdGVzIGl0cyBkYXRhLlxuXHQgKiBAcGFyYW0ge0FycmF5fSBmZWF0dXJlcyAtIEFuIGFycmF5IG9mIGZlYXR1cmVzIHRvIGJlIGFkZGVkIHRvIHRoZSBtZXNoLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBhcnJheSBvZiBmZWF0dXJlcyB0aGF0IHdlcmUgYWRkZWQgdG8gdGhlIG1lc2guXG5cdCAqL1xuICAgIHRoaXMuYWRkRmVhdHVyZXNUb01lc2ggPSBmdW5jdGlvbiAoZmVhdHVyZXM9W10pIHtcbiAgICAgICAgaWYgKCFmZWF0dXJlcy5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdGhpcy51cGRhdGVNZXNoRGF0YShmZWF0dXJlcyk7XG4gICAgICAgIHJldHVybiBmZWF0dXJlcztcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIGFkZEdhbWVwYWRcblx0ICogQGRlc2NyaXB0aW9uIEFkZHMgYSBnYW1lcGFkIHRvIHRoZSBsaXN0IG9mIGF2YWlsYWJsZSBnYW1lcGFkcyBhbmQgZmlyZXMgYW4gZXZlbnQuIEZpcmVzIGEgY3VzdG9tIGV2ZW50ICdnYW1lcGFkLmFkZCcgd2l0aCB0aGUgZ2FtZXBhZCBvYmplY3QuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBnYW1lcGFkIC0gVGhlIGdhbWVwYWQgb2JqZWN0IHRvIGJlIGFkZGVkLlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBmYWxzZSBpZiB0aGUgJ0dhbWVwYWQnIHBsdWdpbiBpcyBub3QgYXZhaWxhYmxlLlxuXHQgKi9cbiAgICB0aGlzLmFkZEdhbWVwYWQgPSBmdW5jdGlvbiAoZ2FtZXBhZCkge1xuICAgICAgICB0aGlzLmdhbWVwYWRzW2dhbWVwYWQuaW5kZXhdID0gbmV3IEdhbWVwYWQoZ2FtZXBhZCk7XG4gICAgICAgIHRoaXMuZmlyZSgnZ2FtZXBhZC5hZGQnLCB7IGdhbWVwYWQ6IGdhbWVwYWQgfSk7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSBhZGRUb29sdGlwXG5cdCAqIEBkZXNjcmlwdGlvbiBBdHRhY2hlcyBhIHRvb2x0aXAgYnkgY2FsbGluZyBzZXRUb29sdGlwIHRvIGEgc3BlY2lmaWVkIGVsZW1lbnQgd2l0aGluIGEgcGFyZW50IGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7RWxlbWVudH0gcGFyZW50IC0gVGhlIHBhcmVudCBlbGVtZW50IHRvIHdoaWNoIHRoZSB0b29sdGlwIHdpbGwgYmUgYXR0YWNoZWQuXG5cdCAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAtIFRoZSBlbGVtZW50IHRvIHdoaWNoIHRoZSB0b29sdGlwIHdpbGwgYmUgYXBwbGllZC5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgY3VzdG9taXppbmcgdGhlIHRvb2x0aXAuXG5cdCAqIEBwYXJhbSB7RWxlbWVudH0gYXBwZW5kVG8gLSBUaGUgZWxlbWVudCB0byB3aGljaCB0aGUgdG9vbHRpcCB3aWxsIGJlIGFwcGVuZGVkLlxuXHQgKi9cbiAgICB0aGlzLmFkZFRvb2x0aXAgPSBmdW5jdGlvbiAocGFyZW50LCBlbGVtZW50LCBvcHRpb25zLCBhcHBlbmRUbykge1xuICAgICAgICBpZiAoIXRoaXMuc2V0VG9vbHRpcCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIHRoaXMuc2V0VG9vbHRpcChlbGVtZW50LCB7XG4gICAgICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgICAgIGFwcGVuZFRvOiBhcHBlbmRUbyxcbiAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICAgICAgfSlcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIGFkZFBsdWdpblxuXHQgKiBAZGVzY3JpcHRpb24gQWRkcyBhIHBsdWdpbiB0byB0aGUgcGx1Z2lucyBvYmplY3Qgb2YgdGhlIGN1cnJlbnQgaW5zdGFuY2UuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBwbHVnaW4gLSBUaGUgcGx1Z2luIG9iamVjdCB0byBiZSBhZGRlZC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHBsdWdpbi5pZCAtIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgcGx1Z2luLlxuXHQgKiBAdGhyb3dzIHtFcnJvcn0gSWYgbm8gUGx1Z2luIElEIGlzIHByb3ZpZGVkLlxuXHQgKi9cbiAgICB0aGlzLmFkZFBsdWdpbiA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAgICAgaWYgKCFwbHVnaW4uaWQpIHRocm93IG5ldyBFcnJvcignTm8gUGx1Z2luIElEIHByb3ZpZGVkJylcbiAgICAgICAgdmFyIGlkID0gcGx1Z2luLmlkO1xuICAgICAgICB0aGlzLnBsdWdpbnNbaWRdID0gcGx1Z2luO1xuICAgIH1cblxuXG5cbiAgICBcblxuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIFJlbW92ZXMgdGhlIHNlbGVjdGlvbiBvZiBmZWF0dXJlcyBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgZmVhdHVyZSBJRC4gSWYgbm8gSUQgaXMgcHJvdmlkZWQsIGFsbCBzZWxlY3RlZCBmZWF0dXJlcyBhcmUgZGVzZWxlY3RlZC5cblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgcmVtb3ZlU2VsZWN0aW9uXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIFRoZSBJRCBvZiB0aGUgZmVhdHVyZSB0byBiZSBkZXNlbGVjdGVkLlxuXHQgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIGZlYXR1cmVzIHRoYXQgd2VyZSBkZXNlbGVjdGVkLlxuXHQgKi9cbiAgICB0aGlzLnJlbW92ZVNlbGVjdGlvbiA9IGZ1bmN0aW9uIChpZCwgb3B0aW9ucz17fSkge1xuICAgICAgICB0aGlzLnJlbW92ZVBvcHVwKCk7XG4gICAgICAgIGlmICghdGhpcy5oYXNTZWxlY3Rpb24oKSkgcmV0dXJuIHRoaXMuRmVhdHVyZXMuc2V0VGV4dCgpLCB0aGlzLnVwZGF0ZUZlYXR1cmVzKCk7XG4gICAgICAgIHZhciBmZWF0dXJlcyA9IHRoaXMuVXRpbGl0aWVzLmNsb25lKHRoaXMuZ2V0U2VsZWN0ZWRGZWF0dXJlcygpKTtcbiAgICAgICAgdGhpcy5GZWF0dXJlcy5hZGRGZWF0dXJlcyhmZWF0dXJlcywgdHJ1ZSwgaWQpO1xuICAgICAgICB0aGlzLmdldFNlbGVjdGVkRmVhdHVyZXMoKS5zcGxpY2UoMCwgZmVhdHVyZXMubGVuZ3RoKTtcbiAgICAgICAgdGhpcy5tYXAuZ2V0U291cmNlKHRoaXMuc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5TRUxFQ1QpLnNldERhdGEodHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXSkpO1xuICAgICAgICB0aGlzLm1hcC5nZXRTb3VyY2UodGhpcy5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLlZFUlRFWCkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtdKSk7XG4gICAgICAgIHRoaXMuRmVhdHVyZXMuc2V0VGV4dCgpO1xuICAgICAgICB0aGlzLnVwZGF0ZUZlYXR1cmVzKGZlYXR1cmVzKTtcbiAgICAgICAgdGhpcy5zZXRCdXR0b25zKCk7XG4gICAgICAgIGlmIChvcHRpb25zLmV4dGVudCkgdGhpcy5zZXRWaWV3cG9ydCgpLCB0aGlzLnNldEV4dGVudCgpO1xuICAgICAgICBpZiAob3B0aW9ucy5yZW1vdmVUZXh0KSB0aGlzLkxheWVycy5yZW1vdmVUZXh0TGF5ZXIoKTtcbiAgICAgICAgcmV0dXJuIGZlYXR1cmVzLmxlbmd0aDtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIHJlbW92ZUNvbnRyb2xzXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGlzIHJlc3BvbnNpYmxlIGZvciByZW1vdmluZyBjb250cm9scy5cblx0ICogQHBhcmFtcyB7bm9uZX0gTm8gcGFyYW1ldGVycyBuZWVkZWQuXG5cdCAqL1xuICAgIHRoaXMucmVtb3ZlQ29udHJvbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdORUVEIFRPIFJFTU9WRSBDT05UUk9MUycpXG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSByZW1vdmVHYW1lcGFkXG5cdCAqIEBkZXNjcmlwdGlvbiBSZW1vdmVzIGEgZ2FtZXBhZCBmcm9tIHRoZSBsaXN0IG9mIGNvbm5lY3RlZCBnYW1lcGFkcyBhbmQgdHJpZ2dlcnMgdGhlIG9uRGlzY29ubmVjdCBldmVudC4gRmlyZXMgYSBjdXN0b20gZXZlbnQgJ2dhbWVwYWQucmVtb3ZlJyB3aXRoIHRoZSBnYW1lcGFkIG9iamVjdC5cblx0ICogQHBhcmFtIHtPYmplY3R9IGdhbWVwYWQgLSBUaGUgZ2FtZXBhZCBvYmplY3QgdG8gYmUgcmVtb3ZlZC5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgZmFsc2UgaWYgdGhlIGdhbWVwYWQgaXMgbm90IGZvdW5kIGluIHRoZSBsaXN0LlxuXHQgKi9cbiAgICB0aGlzLnJlbW92ZUdhbWVwYWQgPSBmdW5jdGlvbiAoZ2FtZXBhZCkge1xuICAgICAgICBpZiAoIXRoaXMuZ2FtZXBhZHNbZ2FtZXBhZC5pbmRleF0pIHJldHVybiBmYWxzZTtcbiAgICAgICAgdGhpcy5nYW1lcGFkc1tnYW1lcGFkLmluZGV4XS5vbkRpc2Nvbm5lY3QoZ2FtZXBhZCk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmdhbWVwYWRzW2dhbWVwYWQuaW5kZXhdXG4gICAgICAgIHRoaXMuZmlyZSgnZ2FtZXBhZC5yZW1vdmUnLCB7IGdhbWVwYWQ6IGdhbWVwYWQgfSk7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSByZW1vdmVGZWF0dXJlc1xuXHQgKiBAZGVzY3JpcHRpb24gUmVtb3ZlcyBzcGVjaWZpZWQgZmVhdHVyZXMgZnJvbSB0aGUgbWFwLiBJZiBubyBsYXllcnMgYXJlIHByb3ZpZGVkLCBhbGwgZmVhdHVyZXMgYXJlIHJlbW92ZWQuIElmIHRoZSBsYXllcnMgcGFyYW1ldGVyIGlzIG5vdCBhbiBhcnJheSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgZmFsc2UuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGxheWVycyAtIEFuIGFycmF5IG9mIGxheWVycyB0byByZW1vdmUgZmVhdHVyZXMgZnJvbS5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBBZGRpdGlvbmFsIG9wdGlvbnMgZm9yIHJlbW92aW5nIGZlYXR1cmVzLlxuXHQgKi9cbiAgICB0aGlzLnJlbW92ZUZlYXR1cmVzID0gZnVuY3Rpb24gKGxheWVycywgb3B0aW9ucykge1xuICAgICAgICBpZiAoIWxheWVycykgcmV0dXJuIHRoaXMuRmVhdHVyZXMuZGVsZXRlRmVhdHVyZXMoKTtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGxheWVycykpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdGhpcy5GZWF0dXJlcy5yZW1vdmVGZWF0dXJlcyhsYXllcnMsIHRydWUpO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgcmVtb3ZlRmVhdHVyZVxuXHQgKiBAZGVzY3JpcHRpb24gUmVtb3ZlcyBhIGZlYXR1cmUgZnJvbSB0aGUgRmVhdHVyZXMgY29sbGVjdGlvbiBhbmQgZmlyZXMgYW4gZXZlbnQgaWYgZWRpdCBtb2RlIGlzIG5vdCBlbmFibGVkLiBGaXJlcyBhIGN1c3RvbSBldmVudCAnZmVhdHVyZS5kZWxldGUnIHdpdGggdGhlIElEIGFuZCBmZWF0dXJlIG9iamVjdC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGlkIC0gVGhlIElEIG9mIHRoZSBmZWF0dXJlIHRvIGJlIHJlbW92ZWQuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gZWRpdCAtIEEgZmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgZWRpdCBtb2RlIGlzIGVuYWJsZWQuXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSAtIFJldHVybnMgdHJ1ZSBpZiB0aGUgZmVhdHVyZSB3YXMgc3VjY2Vzc2Z1bGx5IHJlbW92ZWQsIG90aGVyd2lzZSBmYWxzZS5cblx0ICovXG4gICAgdGhpcy5yZW1vdmVGZWF0dXJlID0gZnVuY3Rpb24gKGlkLCBlZGl0KSB7XG4gICAgICAgIHZhciByZW1vdmVkID0gaWQgPyB0aGlzLkZlYXR1cmVzLnJlbW92ZUZlYXR1cmVzKGlkLCBlZGl0KSA6IGZhbHNlO1xuICAgICAgICAhZWRpdCA/IHRoaXMuZmlyZSgnZmVhdHVyZS5kZWxldGUnLCB7IGlkOiBpZCwgZmVhdHVyZTogcmVtb3ZlZCB9KSA6IGZhbHNlO1xuICAgICAgICByZXR1cm4gcmVtb3ZlZDtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIHJlbW92ZVBvcHVwXG5cdCAqIEBkZXNjcmlwdGlvbiBSZW1vdmVzIHRoZSBwb3B1cCBlbGVtZW50IGZyb20gdGhlIERPTS5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoZSBwb3B1cCB3YXMgc3VjY2Vzc2Z1bGx5IHJlbW92ZWQsIGZhbHNlIG90aGVyd2lzZS5cblx0ICovXG4gICAgdGhpcy5yZW1vdmVQb3B1cCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9wdXAgJiYgdGhpcy5wb3B1cC5yZW1vdmUgPyB0aGlzLnBvcHVwLnJlbW92ZSgpIDogdGhpcy5jdXJyZW50TW9kZS5wb3B1cCAmJiB0aGlzLmN1cnJlbnRNb2RlLnBvcHVwLnJlbW92ZSA/IHRoaXMuY3VycmVudE1vZGUucG9wdXAucmVtb3ZlKCkgOiBmYWxzZTtcbiAgICB9XG5cblxuXG5cblxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSB1cGRhdGVNZXNoRGF0YVxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiB1cGRhdGVzIHRoZSBtZXNoIGRhdGEgb24gdGhlIG1hcCBieSBhZGRpbmcgbmV3IGZlYXR1cmVzIHRvIHRoZSBtZXNoIGluZGV4IGFuZCB1cGRhdGluZyB0aGUgbWFwIHNvdXJjZSB3aXRoIHRoZSBuZXcgZGF0YS4gSWYgdGhlIG1lc2ggaW5kZXggaXMgbm90IGF2YWlsYWJsZSBvciB0aGUgcmVzZXQgZmxhZyBpcyBzZXQgdG8gdHJ1ZSwgdGhlIG1lc2ggaW5kZXggaXMgcmVzZXQgYmVmb3JlIGFkZGluZyBuZXcgZmVhdHVyZXMuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGZlYXR1cmVzIC0gQW4gYXJyYXkgb2YgZmVhdHVyZXMgdG8gYmUgYWRkZWQgdG8gdGhlIG1lc2ggaW5kZXguXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVzZXQgLSBBIGZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIHRvIHJlc2V0IHRoZSBtZXNoIGluZGV4IGJlZm9yZSBhZGRpbmcgbmV3IGZlYXR1cmVzLlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgdXBkYXRlZCBmZWF0dXJlIGNvbGxlY3Rpb24gdGhhdCB3YXMgc2V0IG9uIHRoZSBtYXAgc291cmNlLlxuXHQgKi9cbiAgICB0aGlzLnVwZGF0ZU1lc2hEYXRhID0gZnVuY3Rpb24gKGZlYXR1cmVzPVtdLCByZXNldCkge1xuICAgICAgICBpZiAoIXRoaXMubWVzaEluZGV4IHx8IHJlc2V0KSB0aGlzLm1lc2hJbmRleCA9IG5ldyBNZXNoKFtdKTtcbiAgICAgICAgdGhpcy5tZXNoSW5kZXguYWRkTmV3RmVhdHVyZXMoZmVhdHVyZXMpO1xuXG4gICAgICAgIHZhciBzb3VyY2UgPSB0aGlzLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuTUVTSDtcbiAgICAgICAgdmFyIGZlYXR1cmVzID0gdHVyZi5mZWF0dXJlQ29sbGVjdGlvbih0aGlzLm1lc2hJbmRleC5nZXRGZWF0dXJlcygpKTtcblxuICAgICAgICB0aGlzLm1hcC5nZXRTb3VyY2Uoc291cmNlKS5zZXREYXRhKGZlYXR1cmVzKTtcbiAgICAgICAgdGhpcy5maXJlKCdtZXNoLnVwZGF0ZScsIHsgZmVhdHVyZXM6IGZlYXR1cmVzIH0pO1xuICAgICAgICByZXR1cm4gZmVhdHVyZXM7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSB1cGRhdGVTZWxlY3RlZFByb3BlcnRpZXNcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gdXBkYXRlcyB0aGUgc2VsZWN0ZWQgcHJvcGVydGllcyBvZiBmZWF0dXJlcyBiYXNlZCBvbiB0aGUgbmV3IHByb3BlcnRpZXMgcHJvdmlkZWQgd2hpbGUga2VlcGluZyBzcGVjaWZpZWQgcHJvcGVydGllcy5cblx0ICogQHBhcmFtIHtPYmplY3R9IG5ld1Byb3BlcnRpZXMgLSBUaGUgbmV3IHByb3BlcnRpZXMgdG8gdXBkYXRlIHRoZSBmZWF0dXJlcyB3aXRoLlxuXHQgKiBAcGFyYW0ge0FycmF5fSBwcm9wZXJ0aWVzVG9LZWVwIC0gQW4gYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgdG8ga2VlcCB3aGlsZSB1cGRhdGluZyB0aGUgZmVhdHVyZXMuXG5cdCAqL1xuICAgIHRoaXMudXBkYXRlU2VsZWN0ZWRQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG5ld1Byb3BlcnRpZXMsIHByb3BlcnRpZXNUb0tlZXApIHtcbiAgICAgICAgdGhpcy5nZXRTZWxlY3RlZEZlYXR1cmVzKCkuZm9yRWFjaCgoZmVhdHVyZSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2F2ZWRJZCA9IGZlYXR1cmUucGFyZW50IHx8IGZlYXR1cmUucHJvcGVydGllcy5wYXJlbnQgfHwgZmVhdHVyZS5pZCB8fCBmZWF0dXJlLnByb3BlcnRpZXMuaWQ7XG4gICAgICAgICAgICBjb25zdCBiYXNlUHJvcGVydGllcyA9IHt9O1xuXG4gICAgICAgICAgICBwcm9wZXJ0aWVzVG9LZWVwLmZvckVhY2goKHByb3BlcnR5TmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlLnByb3BlcnRpZXNbcHJvcGVydHlOYW1lXSkgYmFzZVByb3BlcnRpZXNbcHJvcGVydHlOYW1lXSA9IGZlYXR1cmUucHJvcGVydGllc1twcm9wZXJ0eU5hbWVdO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZlYXR1cmUucHJvcGVydGllcyA9IE9iamVjdC5hc3NpZ24oYmFzZVByb3BlcnRpZXMsIG5ld1Byb3BlcnRpZXMsIHsgaWQ6IHNhdmVkSWQgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgdXBkYXRlT3JpZW50YXRpb25cblx0ICogQGRlc2NyaXB0aW9uIFVwZGF0ZXMgdGhlIG9yaWVudGF0aW9uIG9mIHRoZSB1c2VyIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBvcHRpb25zLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvcHRpb25zIGZvciB1cGRhdGluZyB0aGUgb3JpZW50YXRpb24uXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBsb2NhdGlvbiBvZiB0aGUgdXNlciBhZnRlciB1cGRhdGluZyB0aGUgb3JpZW50YXRpb24uXG5cdCAqL1xuICAgIHRoaXMudXBkYXRlT3JpZW50YXRpb24gPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICBpZiAoIXRoaXMuTG9jYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHRoaXMuTG9jYXRlLnVwZGF0ZShvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuTG9jYXRlLmxvY2F0ZTtcbiAgICB9XG5cbiAgICAvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cbiAgICAgKiBAbmFtZSB1cGRhdGVGZWF0dXJlc1xuICAgICAqIEBkZXNjcmlwdGlvbiBVcGRhdGVzIHRoZSBmZWF0dXJlcyBvZiBhIGxheWVyIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBmZWF0dXJlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBmZWF0dXJlcyAtIEFuIGFycmF5IG9mIGZlYXR1cmVzIHRvIHVwZGF0ZSB0aGUgbGF5ZXIgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSB1cGRhdGVkIGZlYXR1cmVzIG9mIHRoZSBsYXllci5cbiAgICAgKi9cbiAgICB0aGlzLnVwZGF0ZUZlYXR1cmVzID0gZnVuY3Rpb24gKGZlYXR1cmVzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkZlYXR1cmVzLnVwZGF0ZUZlYXR1cmVzKGZlYXR1cmVzKTtcbiAgICB9XG5cbiAgICBcblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgc2F2ZUZlYXR1cmVzXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHByZXBhcmVzIHRoZSBmZWF0dXJlcyBvZiBhIGxheWVyIGZvciBleHBvcnQgaW4gZGlmZmVyZW50IGZvcm1hdHMgc3VjaCBhcyBLTVosIEdQWCwgYW5kIEdlb0pTT04uIEl0IHN0eWxlcyB0aGUgZmVhdHVyZXMsIGNyZWF0ZXMgbmVjZXNzYXJ5IG1ldGFkYXRhLCBhbmQgZ2VuZXJhdGVzIHRoZSBleHBvcnQgZmlsZXMuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBsYXllciAtIFRoZSBsYXllciBvYmplY3QgY29udGFpbmluZyB0aGUgZmVhdHVyZXMgdG8gYmUgZXhwb3J0ZWQuXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cbiAgICB0aGlzLnNhdmVGZWF0dXJlcyA9IGZ1bmN0aW9uIChsYXllcikge1xuICAgICAgICBjb25zdCBpZCA9IHRoaXMuaWQ7XG4gICAgICAgIHZhciBmYywgZm9sZGVyTmFtZTtcblxuICAgICAgICBpZiAoIWxheWVyKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXNTZWxlY3Rpb24oKSkge1xuICAgICAgICAgICAgICAgIGZvbGRlck5hbWUgPSAnU2VsZWN0ZWQgRmVhdHVyZXMnO1xuICAgICAgICAgICAgICAgIGZjID0gdHVyZi5mZWF0dXJlQ29sbGVjdGlvbih0aGlzLmdldFNlbGVjdGVkRmVhdHVyZXMoKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvbGRlck5hbWUgPSBmb2xkZXJOYW1lID0gJ0FsbCBGZWF0dXJlcyc7XG4gICAgICAgICAgICAgICAgZmMgPSB0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKHRoaXMuRmVhdHVyZXMuZ2V0Q29sZEZlYXR1cmVzKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFsYXllci5pZCB8fCAhbGF5ZXIubmFtZSkgcmV0dXJuIHdpbmRvdy5hbGVydCgnTGF5ZXIgSUQgYW5kIE5hbWUgYXJlIHJlcXVpcmVkIScpO1xuICAgICAgICAgICAgZm9sZGVyTmFtZSA9IGxheWVyLm5hbWUgKyAnLScgKyBsYXllci5pZDtcbiAgICAgICAgICAgIGZjID0gdHVyZi5mZWF0dXJlQ29sbGVjdGlvbih0aGlzLkZlYXR1cmVzLmdldEZlYXR1cmVzQnlMYXllcihsYXllcikpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFmYy5mZWF0dXJlcy5sZW5ndGgpIHJldHVybiB3aW5kb3cuYWxlcnQoJ05vIEZlYXR1cmVzIHRvIEV4cG9ydCEnKTtcblxuICAgICAgICB2YXIgZmVhdHVyZXMgPSBnZW9mbG8uVXRpbGl0aWVzLmNsb25lRGVlcChmYy5mZWF0dXJlcyk7XG5cblx0XHRmZWF0dXJlcyA9IGZlYXR1cmVzLm1hcChmdW5jdGlvbiAoZikge1xuICAgICAgICAgICAgZi5zdHlsZSA9IHt9O1xuICAgICAgICAgICAgZi5zdHlsZVsnc3Ryb2tlJ10gPSBmLnByb3BlcnRpZXMuc3R5bGUgJiYgZi5wcm9wZXJ0aWVzLnN0eWxlLnByaW1hcnlDb2xvciA/IGYucHJvcGVydGllcy5zdHlsZS5wcmltYXJ5Q29sb3IgOiB0aGlzLm9wdGlvbnMuY29sb3JzLnByaW1hcnlDb2xvcjtcbiAgICAgICAgICAgIGYuc3R5bGVbJ3N0cm9rZS13aWR0aCddID0gMztcbiAgICAgICAgICAgIGYuc3R5bGVbJ2ZpbGwnXSA9IGYucHJvcGVydGllcy5zdHlsZSAmJiBmLnByb3BlcnRpZXMuc3R5bGUuc2Vjb25kYXJ5Q29sb3IgPyBmLnByb3BlcnRpZXMuc3R5bGUuc2Vjb25kYXJ5Q29sb3IgOiB0aGlzLm9wdGlvbnMuY29sb3JzLnNlY29uZGFyeUNvbG9yO1xuICAgICAgICAgICAgZi5zdHlsZVsnZmlsbC1vcGFjaXR5J10gPSAxO1xuXHRcdFx0XG4gICAgICAgICAgICBmLnByb3BlcnRpZXMuaWQgPSBmLmlkO1xuICAgICAgICAgICAgZi5wcm9wZXJ0aWVzLnVuaXQgPSBmLmdlb21ldHJ5LnVuaXQ7XG4gICAgICAgICAgICBmLnByb3BlcnRpZXMudW5pdHMgPSBmLmdlb21ldHJ5LnVuaXRzO1xuXG4gICAgICAgICAgICBkZWxldGUgZi5wcm9wZXJ0aWVzLnN0eWxlO1xuICAgICAgICAgICAgZGVsZXRlIGYuZ2VvbWV0cnkudW5pdDtcbiAgICAgICAgICAgIGRlbGV0ZSBmLmdlb21ldHJ5LnVuaXRzO1xuXG5cdFx0XHRyZXR1cm4gZjtcblx0XHR9LCB0aGlzKTtcblxuICAgICAgICBmYyA9IHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oZmVhdHVyZXMpO1xuXG4gICAgICAgIHZhciBkID0gbmV3IERhdGUoKTtcbiAgICAgICAgdmFyIG5hbWUgPSBpZCArIFwiX2V4cG9ydCAtIFwiICsgKGQuZ2V0TW9udGgoKSArIDEpICsgXCIuXCIgKyBkLmdldERhdGUoKSArIFwiLlwiICsgZC5nZXRGdWxsWWVhcigpICsgXCJfXCIgKyBkLmdldEhvdXJzKCkgKyBkLmdldE1pbnV0ZXMoKTtcblxuICAgICAgICBjb25zdCBleHRlbnNpb25zID0gWydrbXonLCAnZ3B4JywgJ2dlb2pzb24nXTtcbiAgICAgICAgY29uc3QgemlwID0gbmV3IHdpbmRvdy5KU1ppcCgpO1xuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHtcblx0XHRcdElkOiB0aGlzLmlkLFxuICAgICAgICAgICAgVmVyc2lvbjogdGhpcy52ZXJzaW9uLFxuXHRcdFx0RmVhdHVyZXM6IGZjLmZlYXR1cmVzLmxlbmd0aFxuXHRcdH1cblxuICAgICAgICBleHRlbnNpb25zLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIGNvbnN0IGZvbGRlciA9IHppcC5mb2xkZXIoZm9sZGVyTmFtZSArICcgJyArIHQudG9VcHBlckNhc2UoKSk7XG5cblx0XHRcdHN3aXRjaCAodCkge1xuXHRcdFx0XHRjYXNlICdrbXonOlxuICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0YWJsZScpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGVCb2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGJvZHknKTtcbiAgICAgICAgICAgICAgICAgICAgdGFibGUuYXBwZW5kQ2hpbGQodGFibGVCb2R5KTtcblxuXHRcdFx0XHRcdE9iamVjdC5lbnRyaWVzKGRlc2NyaXB0aW9uKS5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyeSkge1xuXHRcdFx0XHRcdFx0dmFyIGggPSBlbnRyeVswXTtcblx0XHRcdFx0XHRcdHZhciBkID0gZW50cnlbMV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlci50ZXh0Q29udGVudCA9IGggKyAnOiAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS50ZXh0Q29udGVudCA9IGQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChoZWFkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKGRhdGEpO1xuXG5cdFx0XHRcdFx0XHR0YWJsZUJvZHkuYXBwZW5kQ2hpbGQocm93KTtcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdHZhciBrbWwgPSBvbW5pdm9yZS50b0tNTChmYywge1xuXHRcdFx0XHRcdFx0bmFtZTogJ2lkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpbXBsZXN0eWxlOiB0cnVlLFxuXHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLklkLFxuXHRcdFx0XHRcdFx0ZG9jdW1lbnROYW1lOiBmb2xkZXJOYW1lLFxuXHRcdFx0XHRcdFx0ZG9jdW1lbnREZXNjcmlwdGlvbjogdGFibGUuaW5uZXJIVE1MXG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtrbWxdLCB7IHR5cGU6IFwiYXBwbGljYXRpb24vdm5kLmdvb2dsZS1lYXJ0aC5rbWwreG1sXCIgfSk7XG5cdFx0XHRcdFx0Zm9sZGVyLmZpbGUoZm9sZGVyTmFtZS50b0xvd2VyQ2FzZSgpICsgXCIua21sXCIsIGJsb2IpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdncHgnOlxuXHRcdFx0XHRcdGZlYXR1cmVzLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcblx0XHRcdFx0XHRcdHZhciB0aXRsZSA9IGYuaWQ7XG5cdFx0XHRcdFx0XHR2YXIgZmVhdHVyZSA9IHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW2ZdKTtcblx0XHRcdFx0XHRcdHZhciBncHggPSBvbW5pdm9yZS50b0dQWChmZWF0dXJlLCB7XG5cdFx0XHRcdFx0XHRcdGNyZWF0b3I6IGRlc2NyaXB0aW9uLklkLFxuXHRcdFx0XHRcdFx0XHRmZWF0dXJlVGl0bGU6IGZ1bmN0aW9uIChwKSB7IHJldHVybiBwLmlkOyB9XG5cdFx0XHRcdFx0XHR9KVxuXG5cdFx0XHRcdFx0XHRmb2xkZXIuZmlsZShmb2xkZXJOYW1lLnRvTG93ZXJDYXNlKCkgKyAnXycgKyB0aXRsZSArIFwiLmdweFwiLCBncHgpO1xuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2dlb2pzb24nOlxuXHRcdFx0XHRcdHZhciBnZW9qc29uID0gZmM7XG5cdFx0XHRcdFx0dmFyIGJsb2IgPSBuZXcgQmxvYihbSlNPTi5zdHJpbmdpZnkoZ2VvanNvbildLCB7IHR5cGU6IFwiYXBwbGljYXRpb24vZ2VvanNvblwiIH0pO1xuXHRcdFx0XHRcdGZvbGRlci5maWxlKGZvbGRlck5hbWUudG9Mb3dlckNhc2UoKSArIFwiLmdlb2pzb25cIiwgYmxvYik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fSlcblxuICAgICAgICB6aXAuZ2VuZXJhdGVBc3luYyh7IHR5cGU6IFwiYmxvYlwiIH0pLnRoZW4oZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICAgICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW2NvbnRlbnRdLCB7IHR5cGU6IFwiYXBwbGljYXRpb24vemlwO2NoYXJzZXQ9dXRmLThcIiB9KTtcblxuICAgICAgICAgICAgd2luZG93Lmdlb2Zsby5maXJlKCdmZWF0dXJlcy5leHBvcnQnLCB7IGZlYXR1cmVzOiBmZWF0dXJlcywgYmxvYjogYmxvYiwgZGF0ZTogZCwgbmFtZTogbmFtZSB9KTtcblxuICAgICAgICAgICAgdmFyIHRlbXBMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgICAgICAgICB0ZW1wTGluay5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpKTtcbiAgICAgICAgICAgIHRlbXBMaW5rLnNldEF0dHJpYnV0ZSgnZG93bmxvYWQnLCBuYW1lICsgXCIuemlwXCIpO1xuICAgICAgICAgICAgdGVtcExpbmsuY2xpY2soKTtcbiAgICAgICAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwodGVtcExpbmsuaHJlZik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgbG9hZEZlYXR1cmVzXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGNyZWF0ZXMgYW4gaW5wdXQgZWxlbWVudCBvZiB0eXBlIGZpbGUsIGFsbG93cyBtdWx0aXBsZSBmaWxlIHNlbGVjdGlvbiwgYW5kIHRyaWdnZXJzIGEgZmlsZSBzZWxlY3Rpb24gZXZlbnQuIEl0IHRoZW4gcHJvY2Vzc2VzIHRoZSBzZWxlY3RlZCBmaWxlcyBieSBjYWxsaW5nIHRoZSBVdGlsaXRpZXMucHJvY2Vzc0ZpbGVzIGZ1bmN0aW9uLlxuXHQgKiBAcGFyYW1zIHtFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgb2JqZWN0IHRyaWdnZXJlZCBieSBmaWxlIHNlbGVjdGlvbi5cblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuICAgIHRoaXMubG9hZEZlYXR1cmVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgIGlucHV0LnR5cGUgPSAnZmlsZSc7XG4gICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCAnbXVsdGlwbGUnKTtcbiAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgaGFuZGxlU2VsZWN0aW9uLCBmYWxzZSk7XG4gICAgICAgIGlucHV0LmNsaWNrKCk7XG5cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlU2VsZWN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlcyA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGV2ZW50LnRhcmdldC5maWxlcy5sZW5ndGg7IHgrKykge1xuICAgICAgICAgICAgICAgIGZpbGVzLnB1c2goZXZlbnQudGFyZ2V0LmZpbGVzW3hdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ2VvZmxvLlV0aWxpdGllcy5wcm9jZXNzRmlsZXMoZmlsZXMsIHByb2Nlc3NGaWxlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwcm9jZXNzRmlsZXMgKGZpbGUsIG5hbWUsIGV4dCkge1xuICAgICAgICAgICAgdmFyIGZlYXR1cmVzID0gW107XG4gICAgICAgIFxuICAgICAgICAgICAgaWYgKGV4dCA9PT0gJ2dlb2pzb24nIHx8IGV4dCA9PT0gJ2pzb24nKSB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZXMgPSBKU09OLnBhcnNlKGZpbGUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvbW5pdm9yZVtleHRdKSB7XG4gICAgICAgICAgICAgICAgb21uaXZvcmVbZXh0XS5wYXJzZShmaWxlLCBudWxsLCB7IGFkZERhdGE6IGZ1bmN0aW9uIChmZWF0cykgeyBmZWF0dXJlcyA9IGZlYXRzOyB9IH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxlcnQoXCJGaWxlIHR5cGUgbm90IHN1cHBvcnRlZDogXCIgKyBleHQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZmVhdHVyZXMuZmVhdHVyZXMpIGZlYXR1cmVzID0gZmVhdHVyZXMuZmVhdHVyZXM7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZmVhdHVyZXMpKSBmZWF0dXJlcyA9IFtmZWF0dXJlc107XG5cbiAgICAgICAgICAgIGZlYXR1cmVzLmZvckVhY2goZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlLnByb3BlcnRpZXMuaW1wb3J0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmZWF0dXJlLnNvdXJjZSA9IGZlYXR1cmUuc291cmNlIHx8IGZlYXR1cmUucHJvcGVydGllcy5zb3VyY2UgfHwgZ2VvZmxvLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuQ09MRDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGdlb2Zsby5maXJlKCdmZWF0dXJlcy5pbXBvcnQnLCB7IGZlYXR1cmVzOiBmZWF0dXJlcywgZmlsZTogZmlsZSwgZXh0OiBleHQsIG5hbWU6IG5hbWUgfSlcbiAgICAgICAgICAgIGdlb2Zsby5hZGRGZWF0dXJlcyhmZWF0dXJlcyk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgbW92ZU1hcEFsb25nTGluZVxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBhbmltYXRlcyB0aGUgbW92ZW1lbnQgb2YgdGhlIG1hcCBhbG9uZyBhIHNwZWNpZmllZCBsaW5lLiBUaGUgY2FtZXJhIGZvbGxvd3MgdGhlIHJvdXRlLCBlbnN1cmluZyBzeW5jaHJvbml6ZWQgbW92ZW1lbnQuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGxpbmUgLSBUaGUgbGluZSByZXByZXNlbnRpbmcgdGhlIHJvdXRlIG9uIHRoZSBtYXAuXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cbiAgICB0aGlzLm1vdmVNYXBBbG9uZ0xpbmUgPSBmdW5jdGlvbiAobGluZSkge1xuICAgICAgICBpZiAoIWxpbmUpIHJldHVybjtcblxuICAgICAgICBjb25zdCBhbmltYXRpb25EdXJhdGlvbiA9IDgwMDAwO1xuICAgICAgICBjb25zdCBjYW1lcmFBbHRpdHVkZSA9IDQwMDA7XG4gICAgICAgIC8vIGdldCB0aGUgb3ZlcmFsbCBkaXN0YW5jZSBvZiBlYWNoIHJvdXRlIHNvIHdlIGNhbiBpbnRlcnBvbGF0ZSBhbG9uZyB0aGVtXG4gICAgICAgIGNvbnN0IHJvdXRlRGlzdGFuY2UgPSB0dXJmLmxpbmVEaXN0YW5jZShsaW5lKTtcbiAgICAgICAgY29uc3QgY2FtZXJhUm91dGVEaXN0YW5jZSA9IHR1cmYubGluZURpc3RhbmNlKGxpbmUpO1xuXG4gICAgICAgIGxldCBzdGFydDtcblxuICAgICAgICBjb25zb2xlLmxvZyhsaW5lLCByb3V0ZURpc3RhbmNlLCBjYW1lcmFSb3V0ZURpc3RhbmNlKVxuXG4gICAgICAgIGZ1bmN0aW9uIGZyYW1lKHRpbWUpIHtcbiAgICAgICAgICAgIGlmICghc3RhcnQpIHN0YXJ0ID0gdGltZTtcbiAgICAgICAgICAgIC8vIHBoYXNlIGRldGVybWluZXMgaG93IGZhciB0aHJvdWdoIHRoZSBhbmltYXRpb24gd2UgYXJlXG4gICAgICAgICAgICBjb25zdCBwaGFzZSA9ICh0aW1lIC0gc3RhcnQpIC8gYW5pbWF0aW9uRHVyYXRpb247XG5cbiAgICAgICAgICAgIC8vIHBoYXNlIGlzIG5vcm1hbGl6ZWQgYmV0d2VlbiAwIGFuZCAxXG4gICAgICAgICAgICAvLyB3aGVuIHRoZSBhbmltYXRpb24gaXMgZmluaXNoZWQsIHJlc2V0IHN0YXJ0IHRvIGxvb3AgdGhlIGFuaW1hdGlvblxuICAgICAgICAgICAgaWYgKHBoYXNlID4gMSkge1xuICAgICAgICAgICAgICAgIC8vIHdhaXQgMS41IHNlY29uZHMgYmVmb3JlIGxvb3BpbmdcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSAwLjA7XG4gICAgICAgICAgICAgICAgfSwgMTUwMCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHVzZSB0aGUgcGhhc2UgdG8gZ2V0IGEgcG9pbnQgdGhhdCBpcyB0aGUgYXBwcm9wcmlhdGUgZGlzdGFuY2UgYWxvbmcgdGhlIHJvdXRlXG4gICAgICAgICAgICAvLyB0aGlzIGFwcHJvYWNoIHN5bmNzIHRoZSBjYW1lcmEgYW5kIHJvdXRlIHBvc2l0aW9ucyBlbnN1cmluZyB0aGV5IG1vdmVcbiAgICAgICAgICAgIC8vIGF0IHJvdWdobHkgZXF1YWwgcmF0ZXMgZXZlbiBpZiB0aGV5IGRvbid0IGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIHBvaW50c1xuICAgICAgICAgICAgY29uc3QgYWxvbmdSb3V0ZSA9IHR1cmYuYWxvbmcoIHR1cmYubGluZVN0cmluZyhsaW5lKSwgcm91dGVEaXN0YW5jZSAqIHBoYXNlICkuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgICAgICAgICBjb25zdCBhbG9uZ0NhbWVyYSA9IHR1cmYuYWxvbmcoIHR1cmYubGluZVN0cmluZyhsaW5lKSwgY2FtZXJhUm91dGVEaXN0YW5jZSAqIHBoYXNlICkuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgICAgICAgICBjb25zdCBjYW1lcmEgPSBnZW9mbG8ubWFwLmdldEZyZWVDYW1lcmFPcHRpb25zKCk7XG5cbiAgICAgICAgICAgIC8vIHNldCB0aGUgcG9zaXRpb24gYW5kIGFsdGl0dWRlIG9mIHRoZSBjYW1lcmFcbiAgICAgICAgICAgIGNhbWVyYS5wb3NpdGlvbiA9IG1hcGJveGdsLk1lcmNhdG9yQ29vcmRpbmF0ZS5mcm9tTG5nTGF0KHsgbG5nOiBhbG9uZ0NhbWVyYVswXSwgbGF0OiBhbG9uZ0NhbWVyYVsxXSB9LCBjYW1lcmFBbHRpdHVkZSApO1xuXG4gICAgICAgICAgICAvLyB0ZWxsIHRoZSBjYW1lcmEgdG8gbG9vayBhdCBhIHBvaW50IGFsb25nIHRoZSByb3V0ZVxuICAgICAgICAgICAgY2FtZXJhLmxvb2tBdFBvaW50KHtcbiAgICAgICAgICAgICAgICBsbmc6IGFsb25nUm91dGVbMF0sXG4gICAgICAgICAgICAgICAgbGF0OiBhbG9uZ1JvdXRlWzFdXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZ2VvZmxvLm1hcC5zZXRGcmVlQ2FtZXJhT3B0aW9ucyhjYW1lcmEpO1xuXG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZyYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnJhbWUpO1xuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgcmVmcmVzaE1lc2hEYXRhXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHJlZnJlc2hlcyB0aGUgbWVzaCBkYXRhIGJ5IHRyaWdnZXJpbmcgYSAnc25hcHBpbmcucmVmcmVzaCcgZXZlbnQgd2l0aCB0aGUgY3VycmVudCBtZXNoIGZlYXR1cmVzLlxuXHQgKiBAcGFyYW1zIHt2b2lkfSAtIE5vIHBhcmFtZXRlcnMgbmVlZGVkIGZvciB0aGlzIGZ1bmN0aW9uLlxuXHQgKi9cbiAgICB0aGlzLnJlZnJlc2hNZXNoRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1lc2hJbmRleCkgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5tYXBNb3ZpbmcpIHJldHVybjtcbiAgICAgICAgLy90aGlzLmRlbGV0ZU1lc2hEYXRhKCk7XG4gICAgICAgIC8vdGhpcy5hZGRGZWF0dXJlc1RvTWVzaCh0aGlzLmdldERyYXduRmVhdHVyZXMoKSlcbiAgICAgICAgdGhpcy5maXJlKCdzbmFwcGluZy5yZWZyZXNoJywgeyBmZWF0dXJlczogdGhpcy5tZXNoSW5kZXguZ2V0RmVhdHVyZXMoKSB9KVxuICAgIH1cblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgZGVsZXRlTWVzaERhdGFcblx0ICogQGRlc2NyaXB0aW9uIERlbGV0ZXMgdGhlIG1lc2ggZGF0YSBieSB1cGRhdGluZyBpdCB3aXRoIGFuIGVtcHR5IGFycmF5IGFuZCB0cmlnZ2VyaW5nIGEgJ3NuYXBwaW5nLmRlbGV0ZScgZXZlbnQgd2l0aCB0aGUgZmVhdHVyZXMgZnJvbSB0aGUgbWVzaCBpbmRleC5cblx0ICogQHBhcmFtcyB7QXJyYXl9IGZlYXR1cmVzIC0gVGhlIGZlYXR1cmVzIHRvIHVwZGF0ZSB0aGUgbWVzaCBkYXRhIHdpdGguXG5cdCAqIEBwYXJhbXMge0Jvb2xlYW59IHRyaWdnZXJFdmVudCAtIEEgZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIHRvIHRyaWdnZXIgdGhlICdzbmFwcGluZy5kZWxldGUnIGV2ZW50LlxuXHQgKi9cbiAgICB0aGlzLmRlbGV0ZU1lc2hEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZU1lc2hEYXRhKFtdLCB0cnVlKTtcbiAgICAgICAgdGhpcy5maXJlKCdzbmFwcGluZy5kZWxldGUnLCB7IGZlYXR1cmVzOiB0aGlzLm1lc2hJbmRleC5nZXRGZWF0dXJlcygpIH0pXG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSBkZWxldGVVc2VyRGF0YVxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBhbGxvd3MgdGhlIHVzZXIgdG8gZGVsZXRlIHNlbGVjdGVkIGZlYXR1cmVzIG9yIGFsbCBmZWF0dXJlcyBiYXNlZCBvbiBjb25maXJtYXRpb24gcHJvbXB0cy4gSXQgdXBkYXRlcyB0aGUgbWFwIGRhdGEgYW5kIHJlc2V0cyB2YXJpb3VzIHByb3BlcnRpZXMuXG5cdCAqIEBwYXJhbXMge3ZvaWR9IC0gTm8gcGFyYW1ldGVycyByZXF1aXJlZC5cblx0ICogQHJldHVybnMge3ZvaWR9IC0gTm8gcmV0dXJuIHZhbHVlLlxuXHQgKi9cbiAgICB0aGlzLmRlbGV0ZVVzZXJEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaWRcblxuICAgICAgICBpZiAodGhpcy5oYXNTaW5nbGVTZWxlY3Rpb24oKSkge1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5jb25maXJtKCdEZWxldGUgU2VsZWN0ZWQgRmVhdHVyZT8nKSkge1xuICAgICAgICAgICAgICAgIHZhciBmZWF0dXJlID0gdGhpcy5nZXRTZWxlY3RlZEZlYXR1cmVzKClbMF07XG4gICAgICAgICAgICAgICAgaWQgPSBmZWF0dXJlLnBhcmVudCB8fCBmZWF0dXJlLnByb3BlcnRpZXMucGFyZW50IHx8IGZlYXR1cmUuaWQgfHwgZmVhdHVyZS5wcm9wZXJ0aWVzLmlkO1xuICAgICAgICAgICAgICAgIHRoaXMuRmVhdHVyZXMucmVtb3ZlRmVhdHVyZXMoaWQsIHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMubWVzaEluZGV4ID8gdGhpcy5tZXNoSW5kZXgucmVtb3ZlRmVhdHVyZShpZCkgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUoJ2ZlYXR1cmU6ZGVsZXRlJywgeyBmZWF0dXJlczogdGhpcy5GZWF0dXJlcy5nZXRDb2xkRmVhdHVyZXMoKSB9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAod2luZG93LmNvbmZpcm0oJ0RlbGV0ZSBBbGwgRmVhdHVyZXM/JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLkZlYXR1cmVzLmRlbGV0ZUZlYXR1cmVzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKCdmZWF0dXJlcy5kZWxldGUnLCB7IGZlYXR1cmVzOiB0aGlzLkZlYXR1cmVzLmdldENvbGRGZWF0dXJlcygpIH0pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5ob3RGZWF0dXJlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zbmFwRmVhdHVyZSA9IG51bGw7XG4gICAgICAgIHRoaXMubGFzdENsaWNrID0gbnVsbDtcbiAgICAgICAgdGhpcy5maXJzdENsaWNrID0gbnVsbDtcbiAgICAgICAgdGhpcy5kcmF3U3RhcnRlZCA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5yZW1vdmVTZWxlY3Rpb24oaWQpO1xuXG4gICAgICAgIHRoaXMubWFwLmdldFNvdXJjZSh0aGlzLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuU05BUCkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtdKSk7XG4gICAgICAgIHRoaXMubWFwLmdldFNvdXJjZSh0aGlzLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuSE9UKS5zZXREYXRhKHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW10pKTtcbiAgICAgICAgdGhpcy5tYXAuZ2V0U291cmNlKHRoaXMuc3RhdGljcy5jb25zdGFudHMuc291cmNlcy5IT1RURVhUKS5zZXREYXRhKHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW10pKTtcblxuICAgICAgICBpZiAodGhpcy5lZGl0TW9kZSkge1xuICAgICAgICAgICAgdGhpcy5lZGl0TW9kZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5zZXRNb2RlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmRvdWJsZUNsaWNrWm9vbSA9IHtcbiAgICAgICAgZW5hYmxlKG1hcCkge1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFtYXAgfHwgIW1hcC5kb3VibGVDbGlja1pvb20pIHJldHVybjtcbiAgICAgICAgICAgICAgICBtYXAuZG91YmxlQ2xpY2tab29tLmVuYWJsZSgpO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgIH0sXG4gICAgICAgIGRpc2FibGUobWFwKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIW1hcCB8fCAhbWFwLmRvdWJsZUNsaWNrWm9vbSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIG1hcC5kb3VibGVDbGlja1pvb20uZGlzYWJsZSgpO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG5cbiAgICBcblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpnZW9mbG9cblx0ICogQG5hbWUgaGlkZVNlbGVjdGVkRmVhdHVyZXNcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gaGlkZXMgdGhlIHNlbGVjdGVkIGZlYXR1cmVzIG9uIHRoZSBtYXAgYnkgbW92aW5nIHRoZW0gdG8gYSBoaWRkZW4gZmVhdHVyZXMgYXJyYXkgYW5kIHVwZGF0aW5nIHRoZSBtYXAgc291cmNlcy5cblx0ICogQHBhcmFtcyB7QXJyYXl9IGhpZGRlbkZlYXR1cmVzIC0gQXJyYXkgdG8gc3RvcmUgdGhlIGhpZGRlbiBmZWF0dXJlcy5cblx0ICogQHBhcmFtcyB7QXJyYXl9IHNlbGVjdGVkRmVhdHVyZXMgLSBBcnJheSBvZiBzZWxlY3RlZCBmZWF0dXJlcyBvbiB0aGUgbWFwLlxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG4gICAgdGhpcy5oaWRlU2VsZWN0ZWRGZWF0dXJlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGhpZGRlbkZlYXR1cmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0U2VsZWN0ZWRGZWF0dXJlcygpLnB1c2goLi4uaGlkZGVuRmVhdHVyZXMpO1xuICAgICAgICAgICAgaGlkZGVuRmVhdHVyZXMuc3BsaWNlKDAsIGhpZGRlbkZlYXR1cmVzLmxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5oYXNTZWxlY3Rpb24oKSkge1xuICAgICAgICAgICAgaGlkZGVuRmVhdHVyZXMucHVzaCguLi50aGlzLmdldFNlbGVjdGVkRmVhdHVyZXMoKS5zcGxpY2UoMCwgdGhpcy5nZXRTZWxlY3RlZEZlYXR1cmVzKCkubGVuZ3RoKSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1hcC5nZXRTb3VyY2UodGhpcy5zdGF0aWNzLmNvbnN0YW50cy5zb3VyY2VzLlNFTEVDVCkuc2V0RGF0YSh0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKHRoaXMuZ2V0U2VsZWN0ZWRGZWF0dXJlcygpKSk7XG4gICAgICAgIHRoaXMubWFwLmdldFNvdXJjZSh0aGlzLnN0YXRpY3MuY29uc3RhbnRzLnNvdXJjZXMuVkVSVEVYKS5zZXREYXRhKHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24odGhpcy5nZXRTZWxlY3RlZEZlYXR1cmVzKCkpKTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIGNvbWJpbmVTZWxlY3RlZEZlYXR1cmVzXG5cdCAqIEBkZXNjcmlwdGlvbiBDb21iaW5lcyBzZWxlY3RlZCBmZWF0dXJlcyBiYXNlZCBvbiB0aGVpciBnZW9tZXRyeSB0eXBlLlxuXHQgKiBAcGFyYW1zIHt2b2lkfVxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG4gICAgdGhpcy5jb21iaW5lU2VsZWN0ZWRGZWF0dXJlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMubW9kZSA9PT0gdGhpcy5zdGF0aWNzLmNvbnN0YW50cy5tb2Rlcy5TRUxFQ1QpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc1NlbGVjdGlvbigpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFsbEZlYXR1cmVzVHlwZSA9IHRoaXMuZ2V0Q29tbW9uR2VvbWV0cnlUeXBlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoYWxsRmVhdHVyZXNUeXBlID09PSBcIlBvbHlnb25cIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9seWdvbnMgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvckVhY2hTZWxlY3RlZEZlYXR1cmUoZnVuY3Rpb24ocG9seWdvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9seWdvbnMucHVzaC5hcHBseShwb2x5Z29ucywgY29uc3VtYWJsZUFycmF5KHBvbHlnb24uZ2VvbWV0cnkuY29vcmRpbmF0ZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvbHlnb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuRmVhdHVyZXMuYWRkRmVhdHVyZXMoW3R1cmYucG9seWdvbihwb2x5Z29ucywgdGhpcy5nZXRTZWxlY3RlZFByb3BlcnR5VmFsdWVzKCkpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVNlbGVjdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhbGxGZWF0dXJlc1R5cGUgPT09IFwiTGluZVN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb29yZHMgPSBnZW9mbG8uVXRpbGl0aWVzLmNvbWJpbmVTYW1lVHlwZUZlYXR1cmVzKHRoaXMuZ2V0U2VsZWN0ZWRGZWF0dXJlcygpKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY29vcmRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuRmVhdHVyZXMuYWRkRmVhdHVyZXMoW3R1cmYubGluZVN0cmluZyhjb29yZHMsIHRoaXMuZ2V0U2VsZWN0ZWRQcm9wZXJ0eVZhbHVlcygpKV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJPbmx5IG9iamVjdHMgb2YgdGhlIHNhbWUgdHlwZSBjYW4gYmUgY29tYmluZWQsIFwiICsgXCJpLmUuIGxpbmVzIHdpdGggbGluZXMgYW5kIHBvbHlnb25zIHdpdGggcG9seWdvbnNcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkNvbWJpbmUgY2FuIG9ubHkgYmUgZXhlY3V0ZWQgaW4gc2VsZWN0aW9uIG1vZGVcIik7XG4gICAgICAgIH1cbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIG1vdmVTZWxlY3RlZEZlYXR1cmVzXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGNoZWNrcyBpZiBtb3ZpbmcgaXMgZW5hYmxlZCBhbmQgaWYgdGhlcmUgYXJlIHNlbGVjdGVkIGZlYXR1cmVzIG9mIExpbmVTdHJpbmcgdHlwZS4gSWYgc28sIGl0IG9mZnNldHMgdGhlIHNlbGVjdGVkIExpbmVTdHJpbmcgZmVhdHVyZXMgYnkgdGhlIHNwZWNpZmllZCBkaXN0YW5jZSBpbiB0aGUgcHJvdmlkZWQgZGlyZWN0aW9uLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZGlyZWN0aW9uIC0gVGhlIGRpcmVjdGlvbiBpbiB3aGljaCB0byBtb3ZlIHRoZSBzZWxlY3RlZCBmZWF0dXJlcyAoMSBmb3IgZm9yd2FyZCwgLTEgZm9yIGJhY2t3YXJkKS5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgZmFsc2UgaWYgbW92aW5nIGlzIG5vdCBlbmFibGVkIG9yIHRoZXJlIGFyZSBubyBzZWxlY3RlZCBMaW5lU3RyaW5nIGZlYXR1cmVzLlxuXHQgKi9cbiAgICB0aGlzLm1vdmVTZWxlY3RlZEZlYXR1cmVzID0gZnVuY3Rpb24gKGRpcmVjdGlvbikge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5tb3ZpbmcgfHwgIXRoaXMub3B0aW9ucy5tb3ZpbmcuZW5hYmxlKSB7IHJldHVybiBmYWxzZSB9XG4gICAgICAgIHZhciBkaXN0YW5jZSA9IHRoaXMub3B0aW9ucy5tb3ZpbmcuZGlzdGFuY2U7XG5cbiAgICAgICAgaWYgKHRoaXMubW9kZSA9PT0gdGhpcy5zdGF0aWNzLmNvbnN0YW50cy5tb2Rlcy5TRUxFQ1QpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc1NlbGVjdGlvbigpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFsbEZlYXR1cmVzVHlwZSA9IHRoaXMuZ2V0Q29tbW9uR2VvbWV0cnlUeXBlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoYWxsRmVhdHVyZXNUeXBlID09PSBcIkxpbmVTdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3U2VsZWN0ZWRGZWF0dXJlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvckVhY2hTZWxlY3RlZEZlYXR1cmUoZnVuY3Rpb24oZmVhdHVyZSkgeyBuZXdTZWxlY3RlZEZlYXR1cmVzLnB1c2godHVyZi5saW5lT2Zmc2V0KGZlYXR1cmUsIGRpc3RhbmNlICogZGlyZWN0aW9uKSk7IH0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFNlbGVjdGVkRmVhdHVyZXMobmV3U2VsZWN0ZWRGZWF0dXJlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSBtb3ZlRmVhdHVyZVxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBjYWxjdWxhdGVzIHRoZSBuZXcgY29vcmRpbmF0ZXMgb2YgYSBmZWF0dXJlIGJhc2VkIG9uIHRoZSBkaXJlY3Rpb24gYW5kIGRpc3RhbmNlIHByb3ZpZGVkLiBOT1QgV09SS0lORyBZRVQuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBmZWF0dXJlIC0gVGhlIGZlYXR1cmUgb2JqZWN0IHRvIGJlIG1vdmVkLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZGlyZWN0aW9uIC0gVGhlIGRpcmVjdGlvbiBpbiB3aGljaCB0aGUgZmVhdHVyZSBzaG91bGQgYmUgbW92ZWQgKDEgZm9yIGZvcndhcmQsIC0xIGZvciBiYWNrd2FyZCkuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gQW4gYXJyYXkgb2YgbmV3IGNvb3JkaW5hdGVzIGZvciB0aGUgZmVhdHVyZSBhZnRlciBtb3ZpbmcuXG5cdCAqL1xuICAgIHRoaXMubW92ZUZlYXR1cmUgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGlyZWN0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMubW92aW5nIHx8ICF0aGlzLm9wdGlvbnMubW92aW5nLmVuYWJsZSkgcmV0dXJuIGZhbHNlXG4gICAgICAgIFxuICAgICAgICB2YXIgZGlzdGFuY2UgPSB0aGlzLm9wdGlvbnMubW92aW5nLmRpc3RhbmNlO1xuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgIHZhciBsYXN0RGVzdGluYXRpb25Qb2ludCA9IG51bGw7XG4gICAgICAgIHZhciBjb29yZGluYXRlcyA9IGZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG5cbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGNvb3JkaW5hdGVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgdmFyIG1vdmVCZWFyaW5nID0gMDtcbiAgICAgICAgICAgIHZhciBzdGFydFBvaW50ID0gbnVsbDtcbiAgICAgICAgICAgIHZhciBtaWRkbGVQb2ludCA9IGNvb3JkaW5hdGVzW2luZGV4XTtcblxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVuZFBvaW50ID0gY29vcmRpbmF0ZXNbaW5kZXggKyAxXTtcbiAgICAgICAgICAgICAgICB2YXIgc2Vjb25kQmVhcmluZyA9IHR1cmYuYmVhcmluZyhtaWRkbGVQb2ludCwgZW5kUG9pbnQpO1xuICAgICAgICAgICAgICAgIG1vdmVCZWFyaW5nID0gc2Vjb25kQmVhcmluZyAtIDkwO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChtb3ZlQmVhcmluZyA8IC0xODApIHtcbiAgICAgICAgICAgICAgICAgICAgbW92ZUJlYXJpbmcgKz0gMTgwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IGNvb3JkaW5hdGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICBzdGFydFBvaW50ID0gY29vcmRpbmF0ZXNbaW5kZXggLSAxXTtcbiAgICAgICAgICAgICAgICB2YXIgZmlyc3RCZWFyaW5nID0gdHVyZi5iZWFyaW5nKG1pZGRsZVBvaW50LCBzdGFydFBvaW50KTtcbiAgICAgICAgICAgICAgICBtb3ZlQmVhcmluZyA9IGZpcnN0QmVhcmluZyAtIDkwO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1vdmVCZWFyaW5nIDwgLTE4MCkge1xuICAgICAgICAgICAgICAgICAgICBtb3ZlQmVhcmluZyArPSAxODA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdGFydFBvaW50ID0gY29vcmRpbmF0ZXNbaW5kZXggLSAxXTtcbiAgICAgICAgICAgICAgICB2YXIgX2VuZFBvaW50ID0gY29vcmRpbmF0ZXNbaW5kZXggKyAxXTtcblxuICAgICAgICAgICAgICAgIHZhciBfZmlyc3RCZWFyaW5nID0gdHVyZi5iZWFyaW5nKG1pZGRsZVBvaW50LCBzdGFydFBvaW50KTtcbiAgICAgICAgICAgICAgICB2YXIgX3NlY29uZEJlYXJpbmcgPSB0dXJmLmJlYXJpbmcobWlkZGxlUG9pbnQsIF9lbmRQb2ludCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgYW5nbGUgPSAwO1xuXG4gICAgICAgICAgICAgICAgaWYgKF9maXJzdEJlYXJpbmcgPCAwICYmIF9zZWNvbmRCZWFyaW5nIDwgMCB8fCBfZmlyc3RCZWFyaW5nID4gMCAmJiBfc2Vjb25kQmVhcmluZyA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYW5nbGUgPSBNYXRoLmFicyhNYXRoLmFicyhfZmlyc3RCZWFyaW5nKSAtIE1hdGguYWJzKF9zZWNvbmRCZWFyaW5nKSk7XG4gICAgICAgICAgICAgICAgICAgIG1vdmVCZWFyaW5nID0gX2ZpcnN0QmVhcmluZyA8IDAgPyBfZmlyc3RCZWFyaW5nIC0gYW5nbGUgLyAyIDogX2ZpcnN0QmVhcmluZyArIGFuZ2xlIC8gMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbmdsZSA9IE1hdGguYWJzKE1hdGguYWJzKF9maXJzdEJlYXJpbmcpICsgTWF0aC5hYnMoX3NlY29uZEJlYXJpbmcpKTtcbiAgICAgICAgICAgICAgICAgICAgbW92ZUJlYXJpbmcgPSBfZmlyc3RCZWFyaW5nIDwgMCA/IF9maXJzdEJlYXJpbmcgLSBhbmdsZSAvIDIgOiAoYW5nbGUgLyAyIC0gX2ZpcnN0QmVhcmluZykgKiAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBkZXN0aW5hdGlvblBvaW50ID0gdHVyZi5kZXN0aW5hdGlvbihtaWRkbGVQb2ludCwgZGlyZWN0aW9uICogZGlzdGFuY2UsIG1vdmVCZWFyaW5nKTtcblxuICAgICAgICAgICAgaWYgKGxhc3REZXN0aW5hdGlvblBvaW50ICYmIHN0YXJ0UG9pbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3Jvc3NpbmdMaW5lID0gdHVyZi5saW5lU3RyaW5nKFtsYXN0RGVzdGluYXRpb25Qb2ludC5nZW9tZXRyeS5jb29yZGluYXRlcywgZGVzdGluYXRpb25Qb2ludC5nZW9tZXRyeS5jb29yZGluYXRlc10pO1xuICAgICAgICAgICAgICAgIHZhciBpbnRlcnNlY3RGYyA9IHR1cmYubGluZUludGVyc2VjdCh0dXJmLmxpbmVTdHJpbmcoW3N0YXJ0UG9pbnQsIG1pZGRsZVBvaW50XSksIGNyb3NzaW5nTGluZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJzZWN0RmMuZmVhdHVyZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvblBvaW50ID0gdHVyZi5kZXN0aW5hdGlvbihtaWRkbGVQb2ludCwgZGlyZWN0aW9uICogLWRpc3RhbmNlLCBtb3ZlQmVhcmluZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXN1bHQucHVzaChkZXN0aW5hdGlvblBvaW50Lmdlb21ldHJ5LmNvb3JkaW5hdGVzKTtcbiAgICAgICAgICAgIGxhc3REZXN0aW5hdGlvblBvaW50ID0gZGVzdGluYXRpb25Qb2ludDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgXG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIGZvckVhY2hTZWxlY3RlZEZlYXR1cmVcblx0ICogQGRlc2NyaXB0aW9uIEl0ZXJhdGVzIG92ZXIgZWFjaCBzZWxlY3RlZCBmZWF0dXJlIGFuZCBhcHBsaWVzIGEgaGFuZGxlciBmdW5jdGlvbiB0byBpdC5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciAtIFRoZSBmdW5jdGlvbiB0byBiZSBhcHBsaWVkIHRvIGVhY2ggc2VsZWN0ZWQgZmVhdHVyZS5cblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuICAgIHRoaXMuZm9yRWFjaFNlbGVjdGVkRmVhdHVyZSA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuZ2V0U2VsZWN0ZWRGZWF0dXJlcygpLmZvckVhY2goaGFuZGxlcik7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOmdlb2Zsb1xuXHQgKiBAbmFtZSB6b29tVG9GZWF0dXJlc1xuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiB6b29tcyB0byB0aGUgcHJvdmlkZWQgZmVhdHVyZXMgb24gdGhlIG1hcC4gSWYgbm8gZmVhdHVyZXMgYXJlIHByb3ZpZGVkLCBpdCB6b29tcyB0byB0aGUgc2VsZWN0ZWQgZmVhdHVyZXMsIGNvbGQgZmVhdHVyZXMsIG9yIHRoZSBtYXAgZXh0ZW50IGlmIG5vIG90aGVyIGZlYXR1cmVzIGFyZSBhdmFpbGFibGUuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGZlYXR1cmVzIC0gVGhlIGZlYXR1cmVzIHRvIHpvb20gdG8gb24gdGhlIG1hcC5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBBZGRpdGlvbmFsIG9wdGlvbnMgZm9yIHpvb21pbmcgKGRlZmF1bHQ6IHt9KS5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgZmFsc2UgaWYgbm8gZmVhdHVyZXMgYXJlIGF2YWlsYWJsZSB0byB6b29tIHRvLlxuXHQgKi9cbiAgICB0aGlzLnpvb21Ub0ZlYXR1cmVzID0gZnVuY3Rpb24gKGZlYXR1cmVzLCBvcHRpb25zPXt9KSB7XG4gICAgICAgIGZlYXR1cmVzID0gZmVhdHVyZXMgfHwgKHRoaXMuaGFzU2VsZWN0aW9uKCkgPyB0aGlzLmdldFNlbGVjdGVkRmVhdHVyZXMoKSA6IHRoaXMuZ2V0RHJhd25GZWF0dXJlcygpKTtcbiAgICAgICAgdGhpcy5zZXRFeHRlbnQoZmVhdHVyZXMsIGZhbHNlLCBvcHRpb25zKTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6Z2VvZmxvXG5cdCAqIEBuYW1lIGNyZWF0ZVBvbHlnb25cblx0ICogQGRlc2NyaXB0aW9uIENyZWF0ZXMgYSBwb2x5Z29uIGZyb20gc2VsZWN0ZWQgTGluZVN0cmluZyBmZWF0dXJlcyBhbmQgYWRkcyBpdCB0byB0aGUgbWFwLlxuXHQgKiBAcGFyYW1zIHtBcnJheX0gc2VsZWN0ZWRGZWF0dXJlcyAtIEFuIGFycmF5IG9mIHNlbGVjdGVkIGZlYXR1cmVzIHRvIGJlIGNvbWJpbmVkIGludG8gYSBwb2x5Z29uLlxuXHQgKiBAcGFyYW1zIHtPYmplY3R9IHNlbGVjdGVkUHJvcGVydHlWYWx1ZXMgLSBQcm9wZXJ0eSB2YWx1ZXMgb2YgdGhlIHNlbGVjdGVkIGZlYXR1cmVzLlxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG4gICAgdGhpcy5jcmVhdGVQb2x5Z29uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5tb2RlID09PSB0aGlzLnN0YXRpY3MuY29uc3RhbnRzLm1vZGVzLlNFTEVDVCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzU2VsZWN0aW9uKCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgYWxsRmVhdHVyZXNUeXBlID0gdGhpcy5nZXRDb21tb25HZW9tZXRyeVR5cGUoKTtcblxuICAgICAgICAgICAgICAgIGlmIChhbGxGZWF0dXJlc1R5cGUgPT09IFwiTGluZVN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb29yZHMgPSBnZW9mbG8uVXRpbGl0aWVzLmNvbWJpbmVTYW1lVHlwZUZlYXR1cmVzKHRoaXMuZ2V0U2VsZWN0ZWRGZWF0dXJlcygpKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY29vcmRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZ2VvZmxvLlV0aWxpdGllcy5pc1BvaW50RXF1YWwoY29vcmRzWzBdLCBjb29yZHNbY29vcmRzLmxlbmd0aCAtIDFdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3Jkcy5wdXNoKGNvb3Jkc1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkRmVhdHVyZXNUb1NlbGVjdGVkKFt0dXJmLnBvbHlnb24oW2Nvb3Jkc10sIHRoaXMuZ2V0U2VsZWN0ZWRQcm9wZXJ0eVZhbHVlcygpKV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJPbmx5IG9iamVjdHMgb2YgdHlwZSBMaW5lU3RyaW5nIGNhbiBiZSBjb21iaW5lZCBpbnRvIGEgcG9seWdvblwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQ3JlYXRlIHBvbHlnb24gY2FuIG9ubHkgYmUgZXhlY3V0ZWQgaW4gc2VsZWN0aW9uIG1vZGVcIik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIHRoaXMub25Mb2FkID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICghZXZlbnQudGFyZ2V0IHx8ICFldmVudC50YXJnZXQuZ2V0Q29udGFpbmVyKSB0aHJvdyBuZXcgRXJyb3IoJ01hcGJveEdMIG1hcCBvYmplY3QgaXMgcmVxdWlyZWQhJyk7XG5cbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBldmVudC50YXJnZXQuX2NvbnRhaW5lcjtcbiAgICAgICAgdGhpcy52aWV3cG9ydCA/IHRoaXMuY29udGFpbmVyLmluc2VydEJlZm9yZSh0aGlzLnZpZXdwb3J0LCB0aGlzLmNvbnRhaW5lci5maXJzdENoaWxkKSA6IGZhbHNlO1xuXG4gICAgICAgIGV2ZW50LnRhcmdldC5vZmYoJ3N0eWxlLmxvYWQnLCB0aGlzLm9uU3R5bGVMb2FkLmJpbmQodGhpcykpO1xuICAgICAgICBldmVudC50YXJnZXQub24oJ3N0eWxlLmxvYWQnLCB0aGlzLm9uU3R5bGVMb2FkLmJpbmQodGhpcykpO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubWFwLm1heFBpdGNoKSBldmVudC50YXJnZXQuc2V0TWF4UGl0Y2godGhpcy5vcHRpb25zLm1hcC5tYXhQaXRjaCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubWFwLm1heFpvb20pIGV2ZW50LnRhcmdldC5zZXRNYXhab29tKHRoaXMub3B0aW9ucy5tYXAubWF4Wm9vbSk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubWFwLm1pblBpdGNoKSBldmVudC50YXJnZXQuc2V0TWluUGl0Y2godGhpcy5vcHRpb25zLm1hcC5taW5QaXRjaCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubWFwLm1pblpvb20pIGV2ZW50LnRhcmdldC5zZXRNaW5ab29tKHRoaXMub3B0aW9ucy5tYXAubWluWm9vbSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZChldmVudC50YXJnZXQpO1xuICAgIH1cblxuICAgIHRoaXMub25TdHlsZUxvYWQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgZ2VvZmxvLnJlZHJhdygpOyB9LCA1MDApXG4gICAgfVxuXG4gICAgdGhpcy5vbk1hcE1vdmUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblxuICAgIH1cblxuICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xufTtcblxuY29uc3QgZ2VvZmxvID0gbmV3IEdlb0ZsbygpO1xuXG5VdGlsaXRpZXMucHJvdG90eXBlLmdlb2ZsbyA9IGdlb2ZsbztcbkZlYXR1cmVzLnByb3RvdHlwZS5nZW9mbG8gPSBnZW9mbG87XG5MYXllcnMucHJvdG90eXBlLmdlb2ZsbyA9IGdlb2ZsbztcbkNvbnRyb2wucHJvdG90eXBlLmdlb2ZsbyA9IGdlb2ZsbztcbkxvY2F0ZS5wcm90b3R5cGUuZ2VvZmxvID0gZ2VvZmxvO1xuTWVzaC5wcm90b3R5cGUuZ2VvZmxvID0gZ2VvZmxvO1xuRHJhdy5wcm90b3R5cGUuZ2VvZmxvID0gZ2VvZmxvO1xuU2VsZWN0LnByb3RvdHlwZS5nZW9mbG8gPSBnZW9mbG87XG5HYW1lcGFkLnByb3RvdHlwZS5nZW9mbG8gPSBnZW9mbG87XG5TdHlsZXMucHJvdG90eXBlLmdlb2ZsbyA9IGdlb2ZsbztcblNuYXBwaW5nLnByb3RvdHlwZS5nZW9mbG8gPSBnZW9mbG87XG5QaW5uaW5nLnByb3RvdHlwZS5nZW9mbG8gPSBnZW9mbG87XG5Sb3V0aW5nLnByb3RvdHlwZS5nZW9mbG8gPSBnZW9mbG87XG5FeHBsb3JpbmcucHJvdG90eXBlLmdlb2ZsbyA9IGdlb2ZsbztcblBhaW50aW5nLnByb3RvdHlwZS5nZW9mbG8gPSBnZW9mbG87XG5cblxuYXN5bmMgZnVuY3Rpb24gbG9hZFNjcmlwdCh1cmwpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCk7XG5cbiAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICBjb25zdCBzY3JpcHRUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICAgICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgICAgICBzY3JpcHQudGV4dENvbnRlbnQgPSBzY3JpcHRUZXh0O1xuICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGxvYWQgc2NyaXB0IGZyb20gJHt1cmx9LiBTdGF0dXM6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgbG9hZGluZyBzY3JpcHQ6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRTdHlsZXNoZWV0KHVybCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsKTtcblxuICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIGNvbnN0IHNjcmlwdFRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICAgICAgc2NyaXB0LnRleHRDb250ZW50ID0gc2NyaXB0VGV4dDtcbiAgICAgICAgICAgIGRvY3VtZW50LmhlYWQucHJlcGVuZChzY3JpcHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGxvYWQgc2NyaXB0IGZyb20gJHt1cmx9LiBTdGF0dXM6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgbG9hZGluZyBzdHlsZXNoZWV0OiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgfVxufVxuXG5cbmZ1bmN0aW9uIGlzTW9iaWxlKCkge1xuICAgIGNvbnN0IGUgPSAvKGlwaG9uZXxpcG9kfGlwYWR8YW5kcm9pZHxpZW1vYmlsZXxibGFja2JlcnJ5fGJhZGEpLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpO1xuICAgIHJldHVybiBlIHx8IChuYXZpZ2F0b3IudXNlckFnZW50LmluY2x1ZGVzKFwiTWFjXCIpICYmIFwib250b3VjaGVuZFwiaW4gZG9jdW1lbnQpXG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlYWR5IChpZCkge1xuICAgIHZhciBjb3VudCA9IDA7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB2YXIgcmVhZHkgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoY291bnQgPT09IDEwMDAwKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChyZWFkeSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChmYWxzZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghZWxlbWVudCkgcmV0dXJuIGNvdW50Kys7XG5cbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocmVhZHkpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZWxlbWVudCk7XG4gICAgICAgIH0sIDEpO1xuICAgIH0pXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRlZCAoZ2VvZmxvKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIHJlYWR5ID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoIWdlb2Zsby5pc0xvYWRlZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChyZWFkeSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShnZW9mbG8uaXNMb2FkZWQpO1xuICAgICAgICB9LCAxKTtcbiAgICB9KVxufVxuXG5mdW5jdGlvbiBidWlsZE1hcGJveCAoKSB7XG4gICAgY29uc3QgRE9NID0ge1xuICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSAodGFnTmFtZSwgY2xhc3NOYW1lLCBjb250YWluZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gICAgICAgICAgICBpZiAoY2xhc3NOYW1lICE9PSB1bmRlZmluZWQpIGVsLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgICAgICAgICAgIGlmIChjb250YWluZXIpIGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbCk7XG4gICAgICAgICAgICByZXR1cm4gZWw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBPdmVycmlkZSB0byBhZGQgYSBUb3AtQ2VudGVyXG4gICAgbWFwYm94Z2wuTWFwLnByb3RvdHlwZS5fc2V0dXBDb250YWluZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuX2NvbnRhaW5lcjtcbiAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ21hcGJveGdsLW1hcCcpO1xuXG4gICAgICAgIGNvbnN0IG1pc3NpbmdDU1NDYW5hcnkgPSB0aGlzLl9taXNzaW5nQ1NTQ2FuYXJ5ID0gRE9NLmNyZWF0ZSgnZGl2JywgJ21hcGJveGdsLWNhbmFyeScsIGNvbnRhaW5lcik7XG4gICAgICAgIG1pc3NpbmdDU1NDYW5hcnkuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICB0aGlzLl9kZXRlY3RNaXNzaW5nQ1NTKCk7XG5cbiAgICAgICAgY29uc3QgY2FudmFzQ29udGFpbmVyID0gdGhpcy5fY2FudmFzQ29udGFpbmVyID0gRE9NLmNyZWF0ZSgnZGl2JywgJ21hcGJveGdsLWNhbnZhcy1jb250YWluZXInLCBjb250YWluZXIpO1xuICAgICAgICBpZiAodGhpcy5faW50ZXJhY3RpdmUpIHtcbiAgICAgICAgICAgIGNhbnZhc0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1pbnRlcmFjdGl2ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY2FudmFzID0gRE9NLmNyZWF0ZSgnY2FudmFzJywgJ21hcGJveGdsLWNhbnZhcycsIGNhbnZhc0NvbnRhaW5lcik7XG4gICAgICAgIC8vICRGbG93Rml4TWVbbWV0aG9kLXVuYmluZGluZ11cbiAgICAgICAgdGhpcy5fY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmdsY29udGV4dGxvc3QnLCB0aGlzLl9jb250ZXh0TG9zdCwgZmFsc2UpO1xuICAgICAgICAvLyAkRmxvd0ZpeE1lW21ldGhvZC11bmJpbmRpbmddXG4gICAgICAgIHRoaXMuX2NhbnZhcy5hZGRFdmVudExpc3RlbmVyKCd3ZWJnbGNvbnRleHRyZXN0b3JlZCcsIHRoaXMuX2NvbnRleHRSZXN0b3JlZCwgZmFsc2UpO1xuICAgICAgICB0aGlzLl9jYW52YXMuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICcwJyk7XG4gICAgICAgIHRoaXMuX2NhbnZhcy5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCB0aGlzLl9nZXRVSVN0cmluZygnTWFwLlRpdGxlJykpO1xuICAgICAgICB0aGlzLl9jYW52YXMuc2V0QXR0cmlidXRlKCdyb2xlJywgJ3JlZ2lvbicpO1xuXG4gICAgICAgIHRoaXMuX3VwZGF0ZUNvbnRhaW5lckRpbWVuc2lvbnMoKTtcbiAgICAgICAgdGhpcy5fcmVzaXplQ2FudmFzKHRoaXMuX2NvbnRhaW5lcldpZHRoLCB0aGlzLl9jb250YWluZXJIZWlnaHQpO1xuXG4gICAgICAgIGNvbnN0IGNvbnRyb2xDb250YWluZXIgPSB0aGlzLl9jb250cm9sQ29udGFpbmVyID0gRE9NLmNyZWF0ZSgnZGl2JywgJ21hcGJveGdsLWNvbnRyb2wtY29udGFpbmVyJywgY29udGFpbmVyKTtcbiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gdGhpcy5fY29udHJvbFBvc2l0aW9ucyA9IHt9O1xuXG4gICAgICAgIFsndG9wLWxlZnQnLCAndG9wLXJpZ2h0JywgJ3RvcC1jZW50ZXInLCAnYm90dG9tLWxlZnQnLCAnYm90dG9tLXJpZ2h0J10uZm9yRWFjaCgocG9zaXRpb25OYW1lKSA9PiB7XG4gICAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25OYW1lXSA9IERPTS5jcmVhdGUoJ2RpdicsIGBtYXBib3hnbC1jdHJsLSR7cG9zaXRpb25OYW1lfWAsIGNvbnRyb2xDb250YWluZXIpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyAkRmxvd0ZpeE1lW21ldGhvZC11bmJpbmRpbmddXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLl9vbk1hcFNjcm9sbCwgZmFsc2UpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgZ2VvZmxvIGFzIGRlZmF1bHQgfSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==