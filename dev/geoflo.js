/*!
 * /*!
 *  * GeoFlo SDK
 *  * Version 1.1.7
 *  * Generated on: 2025-02-07T04:55:22.304Z
 *  * Copyright (c) 2022 - present | @solutegrate/geoflo
 *  * /
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Control.js":
/*!************************!*\
  !*** ./src/Control.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * @mixin
 * @memberof module:geoflo
 * @name Control
 * @description This module is responsible for creating and managing the control buttons in the Geoflo application.
 * @param {Array} controls - An array of control objects to be added to the map.
 * @param {Object} options - An object containing options for the control buttons.
 * @returns {Object} Returns the Control object.
 */

var Control = function Control(controls) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var geoflo = this.geoflo;
  this.controls = controls;
  this.options = options;
  var rgba = function rgba(hex, alpha) {
    hex = hex.trim();
    if (hex.includes('rgba')) {
      hex = this.hex(hex);
    } else {
      if (!hex || [4, 7].indexOf(hex.length) === -1) {
        return false;
      }
      hex = hex.substr(1);
      if (hex.length === 3) {
        hex = hex.split('').map(function (el) {
          return el + el + '';
        }).join('');
      }
    }
    var r = parseInt(hex.slice(0, 2), 16),
      g = parseInt(hex.slice(2, 4), 16),
      b = parseInt(hex.slice(4, 6), 16);
    return alpha !== undefined ? "rgba(" + r + " " + g + " " + b + " / " + alpha + "%)" : "rgb(" + r + " " + g + " " + b + ")";
  };
  var hex = function hex(rgba) {
    var a,
      rgb = rgba.replace(/\s/g, '').match(/^rgba?\((\d+),(\d+),(\d+),?([^,\s)]+)?/i),
      alpha = (rgb && rgb[4] || "").trim(),
      hex = rgb ? (rgb[1] | 1 << 8).toString(16).slice(1) + (rgb[2] | 1 << 8).toString(16).slice(1) + (rgb[3] | 1 << 8).toString(16).slice(1) : rgba;
    if (alpha !== "") {
      a = alpha;
    } else {
      a = 1;
    }
    a = (a * 255 | 1 << 8).toString(16).slice(1);
    hex = hex + a;
    return hex;
  };

  /**
  * @function
   * @memberof module:geoflo.Control
  * @name enable
   * @description Enables the control buttons.
   * @param {Object} control - The control object to enable.
   * @returns {Object} Returns the control object.
   */
  this.enable = function (position) {
    this.position = position || 'top-center';
    geoflo.map.addControl(this, this.position);
  };

  /**
  * @function
   * @memberof module:geoflo.Control
  * @name disable
   * @description Disables the control buttons.
   * @returns {Object} Returns the control object.
   */
  this.disable = function () {
    geoflo.map.removeControl(this);
  };

  /**
  * @function
   * @memberof module:geoflo.Control
  * @name onAdd
   * @description Adds the control buttons to the map.
   * @param {Object} map - The map object to add the control buttons to.
   * @returns {Object} Returns the control object.
   */
  this.onAdd = function (map) {
    if (!this.options) return false;
    if (this.options.attribution) return this.setAttribution(map);
    this.setTheme(options.colors || geoflo.options.colors);
    geoflo.fire('control.add', {
      control: this,
      element: this.element
    });
    return this.element;
  };

  /**
  * @function
   * @memberof module:geoflo.Control
  * @name onRemove
   * @description Removes the control buttons from the map.
   * @returns {Object} Returns the control object.
   */
  this.onRemove = function () {
    geoflo.fire('control.remove', {
      element: this.element,
      control: this
    });
  };

  /**
  * @function
   * @memberof module:geoflo.Control
  * @name setAttribution
   * @description Sets the attribution for the control buttons.
   * @returns {Object} Returns the control object.
   */
  this.setAttribution = function () {
    var attr = Attr(geoflo, this.control, options);
    Object.assign(this, attr);
    this.setTheme(options.colors || geoflo.options.colors);
    geoflo.fire('control.add', {
      control: this,
      element: this.element
    });
    return this.element;
  };

  /**
  * @function
   * @memberof module:geoflo.Control
  * @name setMode
   * @description Sets the mode for the control buttons.
   * @param {String} mode - The mode to set the control buttons to.
   * @returns {Object} Returns the control object.
   */
  this.setMode = function (mode) {
    geoflo.setActiveButton(!mode ? 'select' : mode === 'draw' ? mode : mode);
  };

  /**
  * @function
   * @memberof module:geoflo.Control
  * @name setTheme
   * @description Sets the theme for the control buttons.
   * @param {Object} colors - The colors to set the theme to.
   * @returns {Object} Returns the control object.
   */
  this.setTheme = function (colors) {
    if (!colors) {
      return console.error('Control colors not provided!');
    }
    ;
    colors.primaryColor ? document.documentElement.style.setProperty('--' + geoflo.id + '-primary-color', rgba(colors.primaryColor)) : false;
    colors.primaryBackground ? document.documentElement.style.setProperty('--' + geoflo.id + '-primary-background', rgba(colors.primaryBackground)) : false;
    colors.primaryText ? document.documentElement.style.setProperty('--' + geoflo.id + '-primary-text', rgba(colors.primaryText)) : false;
    colors.primaryBorder ? document.documentElement.style.setProperty('--' + geoflo.id + '-primary-border', rgba(colors.primaryBorder)) : false;
    colors.secondaryColor ? document.documentElement.style.setProperty('--' + geoflo.id + '-secondary-color', rgba(colors.secondaryColor)) : false;
    colors.secondaryBackground ? document.documentElement.style.setProperty('--' + geoflo.id + '-secondary-background', rgba(colors.secondaryBackground)) : false;
    colors.secondaryText ? document.documentElement.style.setProperty('--' + geoflo.id + '-secondary-text', rgba(colors.secondaryText)) : false;
    colors.secondaryBorder ? document.documentElement.style.setProperty('--' + geoflo.id + '-secondary-border', rgba(colors.secondaryBorder)) : false;
    geoflo.fire('theme.change', {
      colors: colors
    });
    return this.getTheme();
  };

  /**
  * @function
   * @memberof module:geoflo.Control
  * @name setControl
   * @description Sets the control buttons.
   * @param {Array} controls - The control buttons to set.
   * @returns {Object} Returns the control object.
   */
  this.setControl = function (controls) {
    if (!controls) return false;
    var buttons;
    this.element = document.createElement('div');
    this.element.className = geoflo.id + '-control-wrap';
    this.control = document.createElement('div');
    this.control.className = geoflo.statics.constants.classes.PREDEFINED_CONTROL_BASE + ' ' + geoflo.statics.constants.classes.PREDEFINED_CONTROL_GROUP;
    this.element.appendChild(this.control);
    if (Array.isArray(controls)) {
      buttons = Buttons(this.control, controls);
      Object.assign(this, buttons);
    }
    this.enable(buttons.position);
  };

  /**
  * @function
   * @memberof module:geoflo.Control
  * @name getTheme
   * @description Gets the theme for the control buttons.
   * @returns {Object} Returns the theme for the control buttons.
   */
  this.getTheme = function () {
    return geoflo.options.colors;
  };

  /**
  * @function
   * @memberof module:geoflo.Control
  * @name getButtons
   * @description Gets the control buttons.
   * @returns {Object} Returns the control buttons.
   */
  this.getButtons = function () {
    return this._buttons;
  };

  /**
  * @function
   * @memberof module:geoflo.Control
  * @name getControl
   * @description Gets the control buttons.
   * @param {String} id - The id of the control button to get.
   * @returns {Object} Returns the control button.
   */
  this.getControl = function (id) {
    var nodes = this.control.childNodes;
    if (!nodes.length) return;
    var control;
    if (id) nodes.forEach(function (n) {
      if (n.classList.contains(id)) control = n;
    });
    return control;
  };

  /**
  * @function
   * @memberof module:geoflo.Control
  * @name showControl
   * @description Shows the control buttons.
   * @param {String} id - The id of the control button to show.
   * @returns {Object} Returns the control button.
   */
  this.showControl = function (id) {
    var control = this.getControl(id);
    if (!control) return false;
    control.style.display = this.position.includes('center') ? 'flex' : 'block';
    return control;
  };

  /**
  * @function
   * @memberof module:geoflo.Control
  * @name hideControl
   * @description Hides the control buttons.
   * @param {String} id - The id of the control button to hide.
   * @returns {Object} Returns the control button.
   */
  this.hideControl = function (id) {
    var control = this.getControl(id);
    if (!control) return false;
    control.style.display = 'none';
    return control;
  };
  this.setControl(controls);
  function Buttons(element, controls) {
    if (!controls || !element) return false;
    var classTypes = ['mode', 'feature', 'mouse'];
    var buttonElements = {};
    var buttonOptions = {};
    var activeButton = null;
    var currentControl;
    var position;
    var currentMapClasses = {
      mode: null,
      feature: null,
      mouse: null
    };
    var nextMapClasses = {
      mode: null,
      feature: null,
      mouse: null
    };
    var mouseleave = function mouseleave(event) {
      if (!geoflo.currentMode) return false;
      geoflo.currentMode.handleOffMap ? geoflo.currentMode.handleOffMap(event) : false;
    };
    var mouseover = function mouseover(event) {
      if (!geoflo.currentMode) return false;
      geoflo.currentMode.handleOnMap ? geoflo.currentMode.handleOnMap(event) : false;
    };
    controls.forEach(function (control) {
      if (!getControlOptions(control)) control.show = false;
      setPosition(control);
      createButtons(element, control);
    });
    return {
      setActiveButton: setActiveButton,
      queueMapClasses: queueMapClasses,
      updateMapClasses: updateMapClasses,
      removeButtons: removeButtons,
      getButtonOptions: getButtonOptions,
      getButtonElements: getButtonElements,
      position: position
    };
    function queueMapClasses(options) {
      nextMapClasses = geoflo.Utilities.extend(nextMapClasses, options);
    }
    function updateMapClasses() {
      if (!geoflo.container) return;
      var classesToRemove = [];
      var classesToAdd = [];
      classTypes.forEach(function (type) {
        if (nextMapClasses[type] === currentMapClasses[type]) return;
        classesToRemove.push(type + '-' + currentMapClasses[type]);
        if (nextMapClasses[type] !== null) {
          classesToAdd.push(type + '-' + nextMapClasses[type]);
        }
      });
      if (classesToRemove.length > 0) {
        var _geoflo$container$classL;
        (_geoflo$container$classL = geoflo.container.classList).remove.apply(_geoflo$container$classL, classesToRemove);
      }
      if (classesToAdd.length > 0) {
        var _geoflo$container$classL2;
        (_geoflo$container$classL2 = geoflo.container.classList).add.apply(_geoflo$container$classL2, classesToAdd);
      }
      currentMapClasses = geoflo.Utilities.extend(currentMapClasses, nextMapClasses);
    }
    function createTitle(options) {
      return '' + options.title + (options.key ? ' (' + options.key + ')' : "");
    }
    function createButtons(element, control) {
      var buttons = document.createElement('div');
      var group = (control.group ? control.group.toUpperCase() : control.attribution ? 'ATTR' : 'NONE') + '_GROUP';
      element.appendChild(buttons);
      buttons.className = '' + geoflo.statics.constants.classes[group] + ' ' + control.type;
      buttons.style.display = control.show ? position.includes('center') ? 'flex' : 'block' : 'none';
      control.show && control.divider ? element.appendChild(createDivider()) : false;
      buttons.addEventListener('mouseover', mouseover);
      buttons.addEventListener('mouseleave', mouseleave);
      addButtons(control, buttons);
      return buttons;
    }
    function createBaseButton(id, options) {
      if (!currentControl || !currentControl.buttons[id]) return false;
      var position = options.position;
      var button = options.button || document.createElement('button');
      options.key = geoflo.options.keys && geoflo.options.keys[id] ? geoflo.options.keys[id] : options.key;
      if (options.title) {
        button.setAttribute('title', createTitle(options));
      }
      options.container.appendChild(button);
      options["id"] = id;
      options["button"] = button;
      options.add = function () {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        this.button.style.display = 'flex';
        this.onAdd ? this.onAdd(opts) : this;
      };
      options.remove = function () {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        this.button.style.display = 'none';
        this.onRemove ? this.onRemove(opts) : this;
      };
      options.activate = function () {
        this.button.classList.remove(options.inactiveClass);
        this.button.classList.add(options.activeClass);
        this.button.classList.add(geoflo.statics.constants.classes.ACTIVE_BUTTON);
        this.activated = true;
      };
      options.deactivate = function () {
        button.classList.remove(options.activeClass);
        button.classList.remove(geoflo.statics.constants.classes.ACTIVE_BUTTON);
        button.classList.add(options.inactiveClass);
        this.activated = false;
      };
      options.dontShow ? button.style.display = 'none' : false;
      buttonElements[id] = button;
      buttonOptions[id] = options;
      if (position) {
        position = position.includes('right') ? 'left' : position.includes('left') ? 'right' : position.includes('bottom') ? 'top' : position.includes('top') ? 'bottom' : 'absolute';
      }
      options.container.tooltipPosition = position;
      //geoflo.addTooltip(options.container, button, createTitle(options));
      return button;
    }
    function createControlButton(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var button = createBaseButton(id, options);
      if (!button) return false;
      button.className = geoflo.statics.constants.classes.CONTROL_BUTTON + ' ' + options.className;
      button.addEventListener('click', function (e) {
        e.preventDefault();
        e.stopPropagation();
        if (options.onClick) return options.onClick(e.target, options);
        if (e.target === activeButton) {
          deactivateButtons();
          options.onDeactivate ? options.onDeactivate(options) : false;
        } else if (options.onActivate(options)) {
          setActiveButton(id);
        }
      }, true);
      return button;
    }
    function createOptionButton(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var button = createBaseButton(id, options);
      if (!button) return false;
      button.className = '' + geoflo.statics.constants.classes.CONTROL_BUTTON;
      if (geoflo.options[options.name] && geoflo.options[options.name].enable) {
        button.classList.add(options.activeClass);
        button.classList.add(geoflo.statics.constants.classes.ACTIVE_BUTTON);
      } else {
        button.classList.add(options.inactiveClass);
      }
      button.addEventListener('click', function (e) {
        e.preventDefault();
        e.stopPropagation();
        if (!geoflo.options[options.name]) {
          geoflo.options[options.name] = {};
        }
        if (geoflo.options[options.name].enable) {
          if (options.onDeactivate) options.onDeactivate(options);
        } else {
          options.onActivate(options);
        }
      }, true);
      return button;
    }
    function createActionButton(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var button = createBaseButton(id, options);
      if (!button) return false;
      button.className = geoflo.statics.constants.classes.ACTION_BUTTON + ' ' + options.className;
      if (id === 'locate' && geoflo.locate) if (geoflo.locate.control) geoflo.locate.control._container.remove();
      button.addEventListener('click', function (e) {
        e.preventDefault();
        e.stopPropagation();
        options.onActivate(options);
      }, true);
      return button;
    }
    function createDivider() {
      var divider = document.createElement('div');
      divider.className = '' + geoflo.statics.constants.classes.DIVIDER;
      return divider;
    }
    function setPosition(control) {
      if (!position) {
        if (!control.position) throw new Error('The first control needs to have a position');
        position = control.position;
      }
    }
    function deactivateButtons() {
      if (!activeButton) return;
      activeButton.classList.remove(geoflo.statics.constants.classes.ACTIVE_BUTTON);
      activeButton = null;
    }
    function setActiveButton(id) {
      deactivateButtons();
      var button = !id && geoflo.editMode ? buttonElements['edit'] : !id ? buttonElements['select'] : id === 'edit' ? buttonElements['select'] : buttonElements[id];
      if (!button) return;
      if (button && id !== 'trash') {
        if (button.title.includes('Draw ')) {
          if (button.title.includes(geoflo.currentMode.type)) {
            button.classList.add(geoflo.statics.constants.classes.ACTIVE_BUTTON);
            activeButton = button;
          }
        } else {
          button.classList.add(geoflo.statics.constants.classes.ACTIVE_BUTTON);
        }
      }
    }
    function addButtons(control, buttons) {
      currentControl = control;
      if (control.type === 'modes') {
        createControlButton("select", {
          container: buttons,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_SELECT,
          key: "s",
          title: 'Select Features',
          onAdd: function onAdd() {
            if (geoflo.editMode || geoflo.drawMode) {
              geoflo.getButtons('edit').remove();
              geoflo.getButtons('save').add();
            } else if (geoflo.hasSelection()) {
              geoflo.getButtons('save').remove();
              geoflo.getButtons('edit').add();
            } else {
              geoflo.getButtons('save').remove();
              geoflo.getButtons('edit').remove();
              geoflo.getButtons('undo').remove();
              geoflo.getButtons('cancel').remove();
              geoflo.getButtons('redo').remove();
              geoflo.getButtons('import').add();
              geoflo.getButtons('export').add();
              geoflo.getButtons('clear').add();
            }
          },
          onActivate: function onActivate() {
            geoflo.noSelect = false;
            geoflo.setMode();
            return true;
          },
          onDeactivate: function onDeactivate() {
            geoflo.noSelect = true;
          }
        });
        createControlButton("edit", {
          container: buttons,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_EDIT,
          key: "Enter",
          title: 'Edit Feature',
          dontShow: true,
          onAdd: function onAdd() {
            geoflo.getButtons('select').remove();
            this.button.classList.remove(geoflo.statics.constants.classes.ACTIVE_BUTTON);
            this.button.style.display = 'flex';
            this.button.style['background-color'] = geoflo.options.colors.secondaryBackground;
          },
          onActivate: function onActivate() {
            geoflo.editFeature();
            geoflo.getButtons('save').add();
          },
          onDeactivate: function onDeactivate() {
            geoflo.currentMode.deactivate();
          },
          onRemove: function onRemove(e) {
            geoflo.getButtons('save') ? false : createSelect(e);
          }
        });
        createControlButton("save", {
          container: buttons,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_FINSIH,
          key: "Enter",
          title: 'Save Edit',
          dontShow: true,
          onAdd: function onAdd(e) {
            geoflo.getButtons('select').remove();
            geoflo.getButtons('edit').remove();
            geoflo.getButtons('import').remove();
            geoflo.getButtons('export').remove();
            geoflo.getButtons('clear').remove();
            geoflo.getButtons('undo').add();
            geoflo.getButtons('cancel').add();
            geoflo.getButtons('redo').add();
            this.button.style['background-color'] = geoflo.options.colors.secondaryColor;
          },
          onActivate: function onActivate(e) {
            geoflo.options.repeatDraw = false;
            geoflo.getButtons('repeat').deactivate();
            geoflo.currentMode.handleClick({
              finish: true
            });
          }
        });
      } else if (control.type === 'options') {
        createActionButton("import", {
          container: buttons,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_IMPORT,
          key: "u",
          title: 'Import Features',
          onActivate: function onActivate() {
            return geoflo.loadFeatures();
          }
        });
        createActionButton("export", {
          container: buttons,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_EXPORT,
          key: "d",
          title: 'Export Features',
          onActivate: function onActivate() {
            return geoflo.saveFeatures();
          }
        });
        createActionButton("clear", {
          container: buttons,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_CLEAR,
          key: "Delete",
          title: 'Delete Selected or All Features',
          onActivate: function onActivate() {
            geoflo.deleteUserData();
            geoflo.getButtons('select').add();
            return true;
          }
        });
        createActionButton("undo", {
          container: buttons,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_UNDO,
          key: "u",
          title: 'Undo Edit',
          dontShow: true,
          onActivate: function onActivate() {
            return geoflo.currentMode.handleUndo();
          }
        });
        createActionButton("redo", {
          container: buttons,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_REDO,
          key: "r",
          title: 'Redo Edit',
          dontShow: true,
          onActivate: function onActivate() {
            return geoflo.currentMode.handleRedo();
          }
        });
        createActionButton("cancel", {
          container: buttons,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_CANCEL,
          key: "Escape",
          title: 'Cancel Edit',
          dontShow: true,
          onActivate: function onActivate() {
            geoflo.options.repeatDraw = false;
            geoflo.getButtons('repeat').deactivate();
            return geoflo.cancelEdit();
          }
        });
      } else if (control.type === 'actions') {
        createOptionButton("snapping", {
          container: buttons,
          name: "snapping",
          title: 'Enable/Disable Snapping',
          activeClass: geoflo.id + '-snapping-enabled',
          inactiveClass: geoflo.id + '-snapping-disabled',
          onActivate: function onActivate() {
            return geoflo.activateSnapping();
          },
          onDeactivate: function onDeactivate() {
            return geoflo.deactivateSnapping();
          }
        });
        createOptionButton("pinning", {
          container: buttons,
          name: "pinning",
          title: 'Enable/Disable Pinning',
          activeClass: geoflo.id + '-pinning-enabled',
          inactiveClass: geoflo.id + '-pinning-disabled',
          onActivate: function onActivate() {
            return geoflo.activatePinning();
          },
          onDeactivate: function onDeactivate() {
            return geoflo.deactivatePinning();
          }
        });
        createOptionButton("routing", {
          container: buttons,
          name: "routing",
          title: 'Enable/Disable Routing',
          activeClass: geoflo.id + '-routing-enabled',
          inactiveClass: geoflo.id + '-routing-disabled',
          onActivate: function onActivate() {
            return geoflo.activateRouting();
          },
          onDeactivate: function onDeactivate() {
            return geoflo.deactivateRouting();
          }
        });
        createOptionButton("exploring", {
          container: buttons,
          name: "exploring",
          title: "Enable/Disable Exploring",
          activeClass: geoflo.id + '-exploring-enabled',
          inactiveClass: geoflo.id + '-exploring-disabled',
          onActivate: function onActivate() {
            return geoflo.activateExploring();
          },
          onDeactivate: function onDeactivate() {
            return geoflo.deactivateExploring();
          }
        });
        createOptionButton("painting", {
          container: buttons,
          name: "painting",
          title: 'Enable/Disable Painting',
          activeClass: geoflo.id + '-painting-enabled',
          inactiveClass: geoflo.id + '-painting-disabled',
          onActivate: function onActivate() {
            return geoflo.activatePainting();
          },
          onDeactivate: function onDeactivate() {
            return geoflo.deactivatePainting();
          }
        });
      } else if (control.type === 'types') {
        createControlButton("polyline", {
          container: buttons,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_LINE,
          key: "l",
          title: 'Draw Polyline',
          onActivate: function onActivate() {
            return geoflo.setMode({
              mode: geoflo.statics.constants.modes.DRAW,
              type: "Polyline"
            });
          },
          onDeactivate: function onDeactivate() {
            geoflo.currentMode.deactivate();
            geoflo.setMode();
          }
        });
        createControlButton("polygon", {
          container: buttons,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_POLYGON,
          key: "p",
          title: 'Draw Polygon',
          onActivate: function onActivate() {
            return geoflo.setMode({
              mode: geoflo.statics.constants.modes.DRAW,
              type: "Polygon"
            });
          },
          onDeactivate: function onDeactivate() {
            geoflo.currentMode.deactivate();
            geoflo.setMode();
          }
        });
        createControlButton("rectangle", {
          container: buttons,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_RECTANGLE,
          key: "r",
          title: 'Draw Rectangle',
          onActivate: function onActivate() {
            return geoflo.setMode({
              mode: geoflo.statics.constants.modes.DRAW,
              type: "Rectangle"
            });
          },
          onDeactivate: function onDeactivate() {
            geoflo.currentMode.deactivate();
            geoflo.setMode();
          }
        });
        createControlButton("circle", {
          container: buttons,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_POINT,
          key: "o",
          title: 'Draw Circle',
          onActivate: function onActivate() {
            return geoflo.setMode({
              mode: geoflo.statics.constants.modes.DRAW,
              type: "Circle"
            });
          },
          onDeactivate: function onDeactivate() {
            geoflo.currentMode.deactivate();
            geoflo.setMode();
          }
        });
        createControlButton("text", {
          container: buttons,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_TEXT,
          key: "t",
          title: 'Draw Text',
          onActivate: function onActivate() {
            return geoflo.setMode({
              mode: geoflo.statics.constants.modes.DRAW,
              type: "Text"
            });
          },
          onDeactivate: function onDeactivate() {
            geoflo.currentMode.deactivate();
            geoflo.setMode();
          }
        });
        createControlButton("icon", {
          container: buttons,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_ICON,
          key: "i",
          title: 'Draw Icon',
          onActivate: function () {
            var _onActivate = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
              return _regeneratorRuntime().wrap(function _callee$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    return _context.abrupt("return", geoflo.setMode({
                      mode: geoflo.statics.constants.modes.DRAW,
                      type: "Icon"
                    }));
                  case 1:
                  case "end":
                    return _context.stop();
                }
              }, _callee);
            }));
            function onActivate() {
              return _onActivate.apply(this, arguments);
            }
            return onActivate;
          }(),
          onDeactivate: function onDeactivate() {
            geoflo.currentMode.deactivate();
            geoflo.setMode();
          }
        });
      } else if (control.type === 'utils') {
        createControlButton("repeat", {
          container: buttons,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_REPEAT,
          key: "`",
          title: 'Repeat Selected Mode',
          onClick: function onClick(target, options) {
            geoflo.options.repeatDraw = !geoflo.options.repeatDraw;
            geoflo.options.repeatDraw ? options.activate() : options.deactivate();
          }
        });
        createActionButton("zoom", {
          container: buttons,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_ZOOM_IN_FEATURES,
          key: "x",
          title: 'Zoom to Extent',
          onActivate: function onActivate() {
            return geoflo.zoomToFeatures();
          }
        });
        createActionButton("refresh", {
          container: buttons,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_REFRESH,
          key: "q",
          title: 'Refresh',
          onActivate: function onActivate() {
            return geoflo.refresh();
          }
        });
      }

      /* createActionButton("delete-snap", {
          container: action2Group,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_DELETE_SNAP,
          title: 'Delete Snap Layer Features',
          onAction: function onAction() {
              return geoflo.deleteMeshData();
          }
      }); */

      /* createControlButton("cut", {
          container: controlGroup,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_CUT,
          key: "a",
          title: 'Cut Features',
          onActivate: function onActivate() {
              return geoflo.setMode(geoflo.statics.constants.modes.CUT);
          }
      }); */

      /* createActionButton("combine", {
          container: action2Group,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_COMBINE_FEATURES,
          title: 'Combine Features',
          key: '+',
          onAction: function onAction() {
              return geoflo.combineFeatures();
          }
      }); */

      /* createActionButton("group-elements", {
          container: action2Group,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_GROUP_FEATURES,
          key: "g",
          title: 'Group Similar Features',
          onAction: function onAction() {
              return geoflo.groupFeatures();
          }
      });
           createActionButton("ungroup-elements", {
          container: action2Group,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_UNGROUP_FEATURES,
          key: "G",
          title: 'Ungroup Similar Features',
          onAction: function onAction() {
              return geoflo.ungroupFeatures();
          }
      }); */

      /* createActionButton("create-polygon", {
          container: action2Group,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_CREATE_POLYGON,
          key: 'p',
          title: 'Create Polygon from Selected Feature',
          onAction: function onAction() {
              return geoflo.createPolygon();
          }
      }); */

      /* createActionButton("hide-selected", {
          container: action2Group,
          className: geoflo.statics.constants.classes.CONTROL_BUTTON_HIDE_SELECTED,
          title: 'Hide Selected Feature',
          onAction: function onAction() {
              return geoflo.hideFeatures();
          }
      }); */
    }
    function removeButtons() {
      Object.keys(buttonElements).forEach(function (buttonId) {
        var button = buttonElements[buttonId];
        if (button.parentNode) {
          button.parentNode.removeChild(button);
        } else if (button) {
          button.remove();
        }
        delete buttonElements[buttonId];
        delete buttonOptions[buttonId];
      });
    }
    function getControlOptions(control) {
      if (!control) return false;
      var controls = geoflo.options.controls && _typeof(geoflo.options.controls) === 'object';
      var dontShow = controls ? !geoflo.options.controls[control.type] : false;
      return dontShow || control.dontShow || !geoflo.options.controls ? false : true;
    }
    function getButtonOptions() {
      return buttonOptions;
    }
    function getButtonElements() {
      return buttonElements;
    }
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Control);

/***/ }),

/***/ "./src/Draw.js":
/*!*********************!*\
  !*** ./src/Draw.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Draw
 * @description This module provides the functionality for drawing features on the map.
 * @returns {Object} The current instance for method chaining.
 * 
 */
var Draw = function Draw() {
  var geoflo = this.geoflo;
  this.id = 'draw';

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name canHandle
   * @description Checks if the given modeName is equal to the constant mode DRAW.
   * @param {string} modeName - The name of the mode to be checked.
   * @returns {boolean} Returns true if the modeName is equal to DRAW, false otherwise.
   */
  this.canHandle = function (modeName) {
    return geoflo.statics.constants.modes.DRAW === modeName;
  };

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name activate
   * @description This function activates the drawing mode with the provided options. It sets up the necessary properties and event listeners for drawing features on the map.
   * @param {Object} options - The options for activating the drawing mode.
   * @param {Object} [options.feature] - The feature to be edited or drawn.
   * @param {String} [options.type] - The type of feature to be drawn.
   * @param {Object} [options.lngLat] - The longitude and latitude coordinates for drawing.
   * @param {String} [options.id] - The unique identifier for the feature.
   * @returns {Object} Returns the current instance for method chaining.
   */
  this.activate = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (this.activated) return false;
    if (geoflo.currentMode.id !== this.id) return options.mode = this.id, geoflo.setMode(options);
    this.activated = true;
    this._handleHistory = this.handleHistory.bind(this);
    this.history = [];
    this.undo = [];
    if (options.feature) editMode(options.feature);
    geoflo.drawMode = !geoflo.editMode;
    var lngLat = options.lngLat;
    delete options.lngLat;
    var newType = this.type = options.type;
    var properties = options.feature ? options.feature.properties : options;
    this.properties = Object.assign({}, properties);
    delete this.properties.mode;
    delete this.properties.location;
    var id = options.id || properties.id || URL.createObjectURL(new Blob([])).slice(-36);
    this.properties.id = id;
    this.properties.type = newType;
    geoflo.setButtons();
    geoflo.setActiveButton(newType);
    if (geoflo.Utilities.isPoint(geoflo.hotFeature, newType)) this.isPoint = true;
    geoflo.fire('draw.activate', {
      id: id,
      type: newType,
      activated: this.activated,
      editing: geoflo.editMode,
      feature: geoflo.hotFeature || options.feature,
      properties: this.properties
    });
    geoflo.on('source.hot', this._handleHistory);
    if (lngLat) this.handleMove({
      lngLat: lngLat
    });
    geoflo.options.painting.enable || geoflo.mobile && newType === 'Rectangle' ? geoflo.activatePainting() : false;
    geoflo.refreshMeshData();
    this.updateHotSource();
    return this;
  };

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name deactivate
   * @description Deactivates the draw feature by canceling the current edit, cleaning up the draw, setting buttons, and handling events.
   * @param {boolean} cancel - Flag to determine if the edit should be canceled.
   * @param {boolean} standby - Flag to indicate if the feature is in standby mode.
   * @param {object} feature - The feature to be deactivated.
   */
  this.deactivate = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (!this.activated) return false;
    var type = options.type || this.type;
    if (options.cancel) this.cancelEdit(options.standby, options.feature);
    cleanupDraw(this);
    geoflo.setButtons();
    geoflo.off('source.hot', this._handleHistory);
    geoflo.fire('draw.deactivate', {
      activated: this.activated
    });
    setTimeout(function () {
      geoflo.map.getSource(geoflo.statics.constants.sources.SELECT).setData(turf.featureCollection([]));
    }, 300);
    !geoflo.options.repeatDraw ? geoflo.setMode() : geoflo.setMode({
      mode: geoflo.statics.constants.modes.DRAW,
      type: type
    });
  };

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name updateHotSource
   * @description This function updates the hot source feature with new properties and assigns it to the geoflo.hotFeature. It then updates the data of the VERTEX and HOT sources on the map with the updated feature.
   * @param {Object} feature - The feature object to be updated.
   * @param {Object} properties - The new properties to be assigned to the feature.
   * @returns {Object} The updated hot source feature.
   */
  this.updateHotSource = function (feature, properties) {
    if (feature) geoflo.hotFeature = feature;
    if (!geoflo.hotFeature || geoflo.overpassDownloading) return;
    geoflo.hotFeature.properties = geoflo.Utilities.assignDeep(geoflo.hotFeature.properties, properties || {});
    geoflo.hotFeature.properties.style = geoflo.hotFeature.properties.style || {};
    geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([geoflo.hotFeature]));
    geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
    return geoflo.hotFeature;
  };

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name deleteVertex
   * @description Deletes a vertex from the current feature being edited on the map.
   * @param {number} index - The index of the vertex to be deleted.
   * @returns {void}
   */
  this.deleteVertex = function (index) {
    if (geoflo.hotFeature) {
      var coords = geoflo.hotFeature.geometry.coordinates;
      index = index !== undefined ? index : coords.length - 1;
      if (coords.length > 1) {
        coords.splice(index, 1);
        geoflo.lastClick = {
          coords: coords[coords.length - 1]
        };
        if (coords.length > 0) {
          geoflo.snapFeature = turf.point(coords[coords.length - 1]);
        } else {
          geoflo.snapFeature = null;
        }
        if (coords.length > 1) {
          geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
        } else {
          geoflo.hotFeature = null;
          geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([]));
        }
        geoflo.fire('vertex.delete', {
          coords: coords,
          index: index,
          feature: geoflo.hotFeature
        });
      }
      if (geoflo.lastMouseEvent) {
        geoflo.currentMode.handleMove ? geoflo.currentMode.handleMove(geoflo.lastMouseEvent) : false;
      }
    } else if (geoflo.snapFeature) {
      geoflo.snapFeature = null;
      geoflo.lastClick = null;
      geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
    }
  };

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name getFeature
   * @description Retrieves the hot feature from the context.
   * @returns {any} The hot feature stored in the context.
   */
  this.getFeature = function () {
    return geoflo.hotFeature;
  };

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name selectFeature
   * @description Selects a feature based on the provided ID.
   * @param {string} id - The ID of the feature to be selected.
   * @returns {boolean} Returns false if no ID is provided, otherwise returns the result of selecting the feature.
   */
  this.selectFeature = function (id) {
    if (!id) return false;
    geoflo.setMode();
    return geoflo.currentMode.selectFeature(id);
  };

  /** 
   * @function
      * @memberof module:geoflo.Draw
   * @name saveEdit
   * @description This function saves the edited feature in the map.
   * @param {Object} feature - The feature to be saved.
   * @returns {boolean} - Returns true if the feature is successfully saved, false otherwise.
   */
  this.saveEdit = function (feature) {
    var hot = geoflo.hotFeature;
    if (!hot) return false;
    var type = hot.properties.type || feature.properties.type || this.type;
    feature = feature || hot;
    this.savingEdit = true;
    return finishDraw(type, feature);
  };

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name cancelEdit
   * @description This function cancels the current editing operation by setting the 'cancelled' flag to true. If the 'feature' parameter is not provided or does not have a 'type' property, it sets 'geoflo.hotFeature' to null and finishes the draw process. It then sets the 'standby' property, updates 'geoflo.hotFeature', fires a 'draw.cancel' event with the feature, and returns the result of 'finishDraw()'.
   * @param {boolean} standby - The standby value to set.
   * @param {object} feature - The feature being edited.
   * @returns {any} The result of the 'finishDraw()' function.
   */
  this.cancelEdit = function (standby, feature) {
    this.cancelled = true;
    if (!feature || !feature.properties.type) return geoflo.hotFeature = null, finishDraw();
    this.standby = standby;
    geoflo.hotFeature = feature;
    geoflo.fire('draw.cancel', {
      feature: feature
    });
    return finishDraw();
  };

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name handleDown
   * @description Handles the mouse or touch down event on the map. Updates the mouse/touch position, adds a vertex if allowed, and sets features for pinning.
   * @param {Object} event - The event object containing information about the mouse or touch event.
   * @returns {void}
   */
  this.handleDown = function (event) {
    var point;
    geoflo.mouseIsDown = [event.lngLat.lng, event.lngLat.lat];
    if (event.touch) {
      geoflo.touchDown = true;
      point = turf.point(geoflo.mouseIsDown);
      onVertex(getVertex(point));
    }
    if (geoflo.canAddVertex) {
      point = addVertex(geoflo.canAddVertex, event);
      return onVertex(getVertex(point), true);
    }
    if (geoflo.Pinning) geoflo.Pinning.setFeatures(geoflo.snappedVertex);
    startIdleTime();
  };

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name handleUp
   * @description This function is responsible for handling the mouse up event during drawing and editing operations on the map. It checks various conditions and triggers corresponding actions based on the context and user interactions.
   * @param {Event} event - The mouse up event object.
   * @returns {void}
   */
  this.handleUp = function (event) {
    geoflo.mouseIsDown = false;
    geoflo.touchDown = false;
    if (geoflo.Painting && geoflo.Painting.enabled) return geoflo.Painting.handleUp(event);
    if (geoflo.addedVertexOnLine && !geoflo.dragMoving) return;
    if (event.touch && geoflo.touchMoving) return geoflo.dragMoving = false;
    if (geoflo.Utilities.isPoint(geoflo.hotFeature) && geoflo.snappedVertex) return geoflo.editMode ? this.saveEdit() : finishDraw(this.type);
    if (geoflo.snappedVertex && geoflo.dragMoving && !geoflo.mapMoving && this.type !== 'Rectangle') {
      geoflo.gamepadDrag = event.gamepad;
      var isLastIndex = geoflo.Utilities.isLastIndex(geoflo.dragIndex, geoflo.hotFeature);
      isLastIndex = isLastIndex ? isLastIndex : geoflo.Utilities.isPolygon(geoflo.hotFeature) && geoflo.dragIndex == 0 ? true : false;
      var coords = geoflo.Utilities.getLastIndexCoords(geoflo.hotFeature);
      onVertex(getVertex(turf.point(geoflo.snappedVertex)));
      this.updateHotSource();
      if (isLastIndex) setTimeout(function () {
        geoflo.lastClick = {
          coords: coords
        };
      }, 100);
    }
    geoflo.mouseIsIdle = false;
    addText.call(this, this.type, geoflo.snapFeature);
    geoflo.refreshMeshData();
  };

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name handleClick
   * @description This function processes the click event for drawing features on the map. It determines the action based on the event type and context state, such as editing mode, touch input, vertex addition, and gamepad interaction.
   * @param {Object} event - The event object containing information about the click event.
   * @returns {Object} The updated event object or the result of the drawing action.
   */
  this.handleClick = function (event) {
    if (event.finish) return geoflo.editMode ? this.saveEdit() : finishDraw(this.type);
    if (event.touch && geoflo.touchMoving) {
      geoflo.touchMoving = false;
      if (geoflo.Snapping) geoflo.Snapping.setFeature();
      return this.updateHotSource();
    }
    if (event.touch) geoflo.touchClick = true;
    if (geoflo.addedVertexOnLine) {
      if (geoflo.Snapping) geoflo.Snapping.setFeature();
      this.updateHotSource();
      onVertex(getVertex(geoflo.addedVertexOnLine));
      this.handleDrag(event);
      geoflo.dragMoving = false;
      geoflo.gamepadDrag = false;
      geoflo.mouseIsIdle = false;
      return event;
    }
    if (geoflo.gamepadDrag) return geoflo.gamepadDrag = false;
    if (geoflo.editMode && (this.type === 'Polygon' || this.type === 'Text')) return;
    if (!this.firstClick && !geoflo.drawStarted) {
      geoflo.drawStarted = true;
      geoflo.fire('draw.start', {
        type: this.type,
        editing: geoflo.editMode,
        coords: [event.lngLat.lng, event.lngLat.lat]
      });
    } else {
      geoflo.fire('vertex.add', {
        type: this.type,
        coords: [event.lngLat.lng, event.lngLat.lat]
      });
    }
    var lastPoint = geoflo.closestPoint || {
      coords: [event.lngLat.lng, event.lngLat.lat]
    };
    var point = turf.point(lastPoint.coords);
    point.properties = this.properties;
    point.source = this.source;
    geoflo.lastMove = lastPoint.coords.length > 1 ? {
      lat: lastPoint.coords[lastPoint.coords.length - 1][1],
      lng: lastPoint.coords[lastPoint.coords.length - 1][0]
    } : false;
    if (!geoflo.startPoint) {
      if (this.type === 'Rectangle') {
        geoflo.startPoint = lastPoint.coords;
        geoflo.hotFeature = turf.polygon([[geoflo.startPoint, [event.lngLat.lng, event.lngLat.lat], [geoflo.startPoint[0], event.lngLat.lat], geoflo.startPoint]]);
        return geoflo.Utilities.setProperty(geoflo.hotFeature, 'type', this.type);
      } else if (this.type === 'Polygon') {
        geoflo.startPoint = lastPoint.coords;
      }
    }
    if (!geoflo.snapFeature && lastPoint) geoflo.snapFeature = lastPoint;
    if (needsToFinish(this.type, lastPoint.coords)) return finishDraw(this.type, point);
    this.firstClick = geoflo.firstClick ? false : {
      coords: lastPoint.coords
    };
    geoflo.lastClick = lastPoint;
    geoflo.firstClick = geoflo.firstClick ? geoflo.firstClick : {
      coords: lastPoint.coords
    };
    if (geoflo.Snapping) geoflo.Snapping.setFeature();
    addText.call(this, this.type);
    if (geoflo.Exploring) geoflo.Exploring.setFeatures(lastPoint.coords, {
      set: true
    });
    delete geoflo.touchClick;
    return this.updateHotSource();
  };

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name handleMove
   * @description This function determines the behavior based on the event type and context state. It handles various actions such as dragging, painting, snapping, routing, and snapping to points.
   * @param {Object} event - The event object containing information about the mouse or touch event.
   * @returns {boolean} Returns false in certain conditions to prevent default behavior.
   */
  this.handleMove = function (event) {
    if (event.touch && geoflo.mouseIsDown) geoflo.touchMoving = true;
    if (geoflo.overpassDownloading) return false;
    if (geoflo.mouseIsDown && geoflo.canAddVertex) return false;
    if (geoflo.canDragMove && geoflo.snappedVertex && geoflo.mouseIsDown) return this.handleDrag(event);
    if (geoflo.mouseIsDown && geoflo.Painting && geoflo.Painting.enabled) return this.handlePainting(event);
    if (event.touch && geoflo.touchMoving) return geoflo.snapFeature = false;
    var button = !event.originalEvent ? false : event.originalEvent.buttons !== undefined ? event.originalEvent.buttons : event.originalEvent.which;
    if (button === 1) return false;
    var calculateRoute = geoflo.Routing && geoflo.Routing.enabled;
    if (event.originalEvent && event.originalEvent.altKey) calculateRoute = false;
    var snapToPoint = false;
    if (geoflo.Snapping) snapToPoint = geoflo.Snapping.enabled;
    if (event.originalEvent && event.originalEvent.shiftKey) snapToPoint = false;
    var evtCoords = [event.lngLat.lng, event.lngLat.lat];
    var isPoint = geoflo.Utilities.isPoint(geoflo.hotFeature);
    var editPolygon = geoflo.editMode && (this.type === 'Polygon' || this.type === 'Rectangle');
    var point = turf.point(evtCoords);
    var snapFeature = null;
    if (editPolygon) {
      snapFeature = point;
    } else if (snapToPoint) {
      if (geoflo.Snapping) snapFeature = geoflo.Snapping.setClosest(evtCoords, isPoint);
    } else if (!isPoint) {
      if (geoflo.Snapping) snapFeature = geoflo.Snapping.updateFeature(evtCoords);
    }
    if (isPoint) {
      snapFeature = snapFeature ? snapFeature : geoflo.firstClick ? turf.lineString([geoflo.firstClick.coords, evtCoords]) : point;
    }
    if (calculateRoute) snapFeature = geoflo.Routing.getClosest() || snapFeature;
    if (!snapFeature) snapFeature = point;
    if (geoflo.Snapping) geoflo.Snapping.addFeature(snapFeature, this.properties, editPolygon);
    onVertex(getVertex(point));
    if (!snapFeature && this.isPoint) delete this.isPoint;
    if (editPolygon && calculateRoute) geoflo.map.getSource(geoflo.statics.constants.sources['ROUTE']).setData(turf.featureCollection([]));
    if (this.type === 'Rectangle' /* && !geoflo.editMode */) return this.handleRectangle(event);
    if (this.type === 'Icon') return this.handleIcon(event, geoflo.snapFeature);
    if (this.type === 'Text') return this.handleText(event, geoflo.snapFeature);
  };

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name handleDrag
   * @description This function is responsible for handling the drag event of a vertex on the map. It updates the position of the vertex based on the user's interaction and triggers various actions accordingly.
   * @param {Object} event - The event object containing information about the drag event.
   * @returns {boolean} Returns false if the drag index is not valid.
   */
  this.handleDrag = function (event) {
    var validIndex = geoflo.dragIndex > -1;
    var map = geoflo.map;
    if (!validIndex) {
      offVertex();
      if (geoflo.mouseIsDown && geoflo.Painting && geoflo.Painting.enabled) this.handlePainting(event);
      return false;
    }
    !event.gamepad ? event.originalEvent.stopPropagation() : false;
    geoflo.dragMoving = true;
    geoflo.lastDragMove = 0;
    geoflo.snappedVertex = [event.lngLat.lng, event.lngLat.lat];
    geoflo.bypassRouting = true; //!event.gamepad ? event.originalEvent.altKey : false;
    geoflo.bypassSnapping = !event.gamepad ? event.originalEvent.shiftKey : false;
    geoflo.lastIndex = geoflo.Utilities.isLastIndex(geoflo.dragIndex, geoflo.hotFeature);
    var vertex = turf.point(geoflo.snappedVertex);
    if (geoflo.lastIndex) geoflo.lastClick = {
      coords: geoflo.snappedVertex
    };
    if (this.type === 'Circle' || this.type === 'Icon' || this.type === 'Image') {
      if (!geoflo.Painting || !geoflo.Painting.enabled) geoflo.hotFeature.geometry.coordinates = geoflo.snappedVertex;
    } else if (this.type === 'Rectangle') {
      var startPointPx = map.project(geoflo.startPoint);
      var eventPx = map.project(geoflo.snappedVertex);

      // Identify which corner is being dragged
      var startPointIndex = geoflo.dragIndex;
      var oppositeIndex, adjacentXIndex, adjacentYIndex;

      // Determine the opposite and adjacent indices based on which corner is being moved
      switch (startPointIndex) {
        case 1:
          // Top-left
          oppositeIndex = 3; // Bottom-right
          adjacentXIndex = 2; // Bottom-left
          adjacentYIndex = 4; // Top-right
          break;
        case 2:
          // Bottom-left
          oppositeIndex = 4; // Top-right
          adjacentXIndex = 1; // Top-left
          adjacentYIndex = 3; // Bottom-right
          break;
        case 3:
          // Bottom-right
          oppositeIndex = 1; // Top-left
          adjacentXIndex = 4; // Top-right
          adjacentYIndex = 2; // Bottom-left
          break;
        case 4:
          // Top-right
          oppositeIndex = 2; // Bottom-left
          adjacentXIndex = 3; // Bottom-right
          adjacentYIndex = 1; // Top-left
          break;
      }

      // Create new pixel points ensuring a rectangle
      var newPxCoords = [eventPx,
      // Dragged corner
      {
        x: eventPx.x,
        y: startPointPx.y
      },
      // Adjusted X for one adjacent
      {
        x: startPointPx.x,
        y: eventPx.y
      },
      // Adjusted Y for the other adjacent
      {
        x: startPointPx.x,
        y: startPointPx.y
      } // Opposite corner calculated dynamically
      ];

      // Convert pixel coordinates back to lng/lat
      var geoCoords = newPxCoords.map(function (px) {
        return map.unproject(px);
      });
      geoCoords.push(geoCoords[0]);

      // Update rectangle coordinates
      updateCoordinate(geoflo.hotFeature, "0.".concat(startPointIndex), geoCoords[0].lng, geoCoords[0].lat);
      updateCoordinate(geoflo.hotFeature, "0.".concat(adjacentXIndex), geoCoords[1].lng, geoCoords[1].lat);
      updateCoordinate(geoflo.hotFeature, "0.".concat(adjacentYIndex), geoCoords[2].lng, geoCoords[2].lat);
      updateCoordinate(geoflo.hotFeature, "0.".concat(oppositeIndex), geoCoords[3].lng, geoCoords[3].lat);
    } else {
      var isLastIndex = geoflo.Utilities.isLastIndex(geoflo.dragIndex, geoflo.hotFeature);
      geoflo.hotFeature.geometry.coordinates[geoflo.dragIndex] = geoflo.snappedVertex;
      if (this.type === 'Polygon') {
        if (isLastIndex) geoflo.hotFeature.geometry.coordinates[0] = geoflo.snappedVertex;
        if (geoflo.dragIndex == 0) geoflo.hotFeature.geometry.coordinates[geoflo.hotFeature.geometry.coordinates.length - 1] = geoflo.snappedVertex;
      }
    }
    geoflo.Utilities.setProperty(geoflo.hotFeature, 'type', this.type);
    geoflo.Utilities.setProperty(vertex, 'type', this.type);
    geoflo.map.getSource(geoflo.statics.constants.sources.ROUTE).setData(turf.featureCollection([]));
    geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
    geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
    geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([vertex]));
    geoflo.fire('vertex.drag', {
      type: this.type,
      coords: [event.lngLat.lng, event.lngLat.lat],
      feature: geoflo.hotFeature,
      vertex: vertex
    });
    if (geoflo.Pinning) geoflo.Pinning.updateFeatures(vertex);
  };

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name handleTouch
   * @description This function is responsible for handling touch events and triggering corresponding actions.
   * @param {Event} event - The touch event object.
   * @returns {void}
   */
  this.handleTouch = function (event) {
    event.touch = true;
    if (event.type === 'touchstart') {
      this.handleDown(event);
    } else if (event.type === 'touchend') {
      this.handleUp(event);
      this.handleClick(event);
    } else if (event.type === 'touchmove') {
      this.handleMove(event);
    }
  };

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name handleOffMap
   * @description This function is triggered when an off-map event occurs and clears the data of a specific source on the map.
   * @param {Event} event - The event object triggering the function.
   */
  this.handleOffMap = function (event) {
    if (geoflo.map.getSource(geoflo.statics.constants.sources.SNAP)) geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
  };

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name handleOnMap
   * @description This function updates the data of the SNAP source on the map with the snapFeature.
   * @param {Event} event - The event triggering the function.
   */
  this.handleOnMap = function (event) {
    if (geoflo.map.getSource(geoflo.statics.constants.sources.SNAP) && geoflo.snapFeature) geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([geoflo.snapFeature]));
  };

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name handlePainting
   * @description This function is triggered when painting on the map. It disables drag pan, sets the map class to 'painting', and updates the feature coordinates.
   * @param {Object} event - The event object triggering the function.
   * @returns {boolean} Returns false if mouse is not down or no coordinates are available, otherwise updates the feature coordinates.
   */
  this.handlePainting = function (event) {
    if (!geoflo.mouseIsDown || !geoflo.Painting) return false;
    geoflo.map.dragPan.disable();
    geoflo.setMapClass('painting');
    var paintFeature = geoflo.Painting && geoflo.Painting.feature;
    var snapCoords = geoflo.snapFeature && !paintFeature;
    var coords = event.lngLat && event.lngLat.lng ? [event.lngLat.lng, event.lngLat.lat] : false;
    if (snapCoords) coords = geoflo.snapFeature.geometry.coordinates;
    if (!coords) return false;
    return geoflo.Painting.updateFeature(coords);
  };

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name handleRectangle
   * @description Handles the creation and manipulation of a rectangle feature on a map.
   * @param {Object} event - The event object triggering the function.
   * @returns {void}
   */
  this.handleRectangle = function (event) {
    if (geoflo.editMode && geoflo.hotFeature) geoflo.startPoint = geoflo.hotFeature.geometry.coordinates[0][0];
    if (!geoflo.startPoint) return;
    if (!geoflo.dragMoving) geoflo.Utilities.setProperty(geoflo.hotFeature, 'type', this.type);
    geoflo.dragMoving = true;
    var map = geoflo.map;

    // Convert start point to pixel space
    var startPointPx = map.project(geoflo.startPoint);
    var eventPx = map.project([event.lngLat.lng, event.lngLat.lat]);
    if (geoflo.dragIndex > -1) {
      var startPointIndex = geoflo.dragIndex == 0 || geoflo.dragIndex == 4 ? 4 : geoflo.dragIndex;
      var endPointIndex = startPointIndex == 1 ? 3 : startPointIndex == 2 ? 4 : startPointIndex == 3 ? 1 : 2;
      var leftPointIndex = endPointIndex == 1 ? 4 : endPointIndex == 2 ? 1 : endPointIndex == 3 ? 2 : 3;
      var rightPointIndex = leftPointIndex == 1 ? 3 : leftPointIndex == 2 ? 4 : leftPointIndex == 3 ? 1 : 2;

      // Create new pixel points ensuring a rectangle
      var newPxCoords = [eventPx, {
        x: eventPx.x,
        y: startPointPx.y
      }, {
        x: startPointPx.x,
        y: eventPx.y
      }, startPointPx];

      // Convert pixel coordinates back to lng/lat
      var geoCoords = newPxCoords.map(function (px) {
        return map.unproject(px);
      });
      updateCoordinate(geoflo.hotFeature, "0.".concat(startPointIndex), geoCoords[0].lng, geoCoords[0].lat);
      updateCoordinate(geoflo.hotFeature, "0.".concat(leftPointIndex), geoCoords[1].lng, geoCoords[1].lat);
      updateCoordinate(geoflo.hotFeature, "0.".concat(rightPointIndex), geoCoords[2].lng, geoCoords[2].lat);
      updateCoordinate(geoflo.hotFeature, "0.".concat(endPointIndex), geoCoords[3].lng, geoCoords[3].lat);
    } else {
      var newPxCoords = [eventPx, {
        x: eventPx.x,
        y: startPointPx.y
      }, {
        x: startPointPx.x,
        y: eventPx.y
      }, startPointPx];
      var geoCoords = newPxCoords.map(function (px) {
        return map.unproject(px);
      });
      updateCoordinate(geoflo.hotFeature, "0.1", geoCoords[1].lng, geoCoords[1].lat);
      updateCoordinate(geoflo.hotFeature, "0.2", geoCoords[0].lng, geoCoords[0].lat);
      updateCoordinate(geoflo.hotFeature, "0.3", geoCoords[2].lng, geoCoords[2].lat);
      updateCoordinate(geoflo.hotFeature, "0.4", geoCoords[3].lng, geoCoords[3].lat);
    }
    geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
    geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([geoflo.hotFeature]));
  };

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name handleText
   * @description Handles text input events and logs relevant properties.
   * @param {Event} event - The event object triggering the function.
   * @param {string} feature - The feature to be handled.
   */
  this.handleText = function (event, feature) {
    console.log('handleText', this.properties, geoflo.snapFeature);
  };

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name handleIcon
   * @description Handles the icon based on the event and feature provided.
   * @param {Event} event - The event triggering the function.
   * @param {Object} feature - The feature object to be handled.
   */
  this.handleIcon = function (event, feature) {
    console.log('handleIcon', this.properties, geoflo.snapFeature);
  };

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name handleContext
   * @description Handles the context of dragging and moving a feature vertex.
   * @param {Event} event - The event triggering the context handling.
   * @returns {void}
   */
  this.handleContext = function (event) {
    if (!geoflo.canDragMove || !geoflo.snappedVertex) return;
    var validIndex = geoflo.dragIndex > -1;
    if (!validIndex) return;
    geoflo.hotFeature.geometry.coordinates.splice(geoflo.dragIndex, 1);
    geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
    geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([geoflo.hotFeature]));
    geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
  };

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name handleHistory
   * @description Handles the history of features in the current mode.
   * @param {Object} event - The event triggering the history update.
   * @returns {void}
   */
  this.handleHistory = function handleHistory(event) {
    if (geoflo.dragMoving) return;
    var history = geoflo.currentMode.history;
    var date = new Date();
    var features = event.detail.data.features;
    if (!features || !features.length) return;
    var feature = geoflo.Utilities.cloneDeep(features[0]);
    feature.historyDate = date;
    history.push(feature);
    geoflo.fire('feature.history', {
      type: geoflo.currentMode.type,
      feature: feature,
      history: history
    });
  };

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name handleUndo
   * @description This function is responsible for undoing the last action performed in the application. It retrieves the history and undo arrays from the current mode, pops the last feature from the history, sets the undo flag to true for the feature, updates the hotFeature, pushes the feature to the undo array, and updates the map source data with the hotFeature.
   * @returns {void}
   */
  this.handleUndo = function () {
    return false;
    var history = geoflo.currentMode.history;
    var undo = geoflo.currentMode.undo;
    var feature = history.pop();
    feature.undo = true;
    geoflo.hotFeature = feature;
    undo.push(geoflo.hotFeature);
    geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
  };

  /**
   * @function
      * @memberof module:geoflo.Draw
   * @name handleRedo
   * @description Handles the redo functionality (currently under development).
   * @returns {void}
   */
  this.handleRedo = function () {
    return false;
    var redo = false;
  };
  function editMode(feature) {
    var type = geoflo.Features.getType(feature);
    if (!type) throw new Error('No Feature Type Found to edit');
    var id = geoflo.Utilities.getFeatureId(feature);
    if (!id) throw new Error('No Feature ID Found to edit');
    geoflo.currentMode.type = type;
    geoflo.currentMode.source = feature.source;
    geoflo.editMode = true;
    geoflo.hotFeature = feature;
    geoflo.Utilities.setProperty(geoflo.hotFeature, 'type', type);
    geoflo.Utilities.setProperty(geoflo.hotFeature, 'edit', true);
    geoflo.map.getSource(geoflo.statics.constants.sources.SELECT).setData(turf.featureCollection([]));
    if (type === 'Polygon') {
      geoflo.hotFeature = turf.polygonToLine(geoflo.hotFeature);
    }
    if (type === 'Circle' || type === 'Icon' || type === 'Image') {
      geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
    } else if (type === 'Text') {
      geoflo.map.getSource(geoflo.statics.constants.sources.HOTTEXT).setData(turf.featureCollection([geoflo.hotFeature]));
      addText.call(geoflo.currentMode, type, geoflo.hotFeature);
    } else {
      geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
      geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([geoflo.hotFeature]));
    }
    var coords = geoflo.Utilities.isPoint(geoflo.hotFeature) ? geoflo.hotFeature.geometry.coordinates : geoflo.hotFeature.geometry.coordinates[geoflo.hotFeature.geometry.coordinates.length - 1];
    geoflo.lastClick = {
      coords: coords
    };
    geoflo.firstClick = {
      coords: coords
    };
    setTimeout(function () {
      geoflo.hideFeatures([id]);
    }, 100);
    return geoflo.currentMode.type;
  }
  function finishDraw(type, point, text) {
    var feature;
    var cancelled = geoflo.currentMode.cancelled;
    if (geoflo.editMode && !geoflo.currentMode.savingEdit && !cancelled) return geoflo.currentMode.saveEdit(point);
    if (cancelled || !type) {
      finishText();
      if (geoflo.hotFeature) {
        geoflo.removeSelection();
        geoflo.addFeatures([geoflo.editing || geoflo.hotFeature], true);
      }
      if (geoflo.Pinning) geoflo.Pinning.resetFeatures();
      if (!geoflo.editMode) geoflo.fire('draw.cancel', {
        cancel: true,
        feature: geoflo.hotFeature
      });
      return false;
    } else if (type === 'Text' && !text) {
      return addText.call(geoflo.currentMode, type, point);
    } else if (geoflo.hotFeature) {
      if (geoflo.Utilities.isPoint(geoflo.hotFeature)) {
        var coords = Array.isArray(geoflo.hotFeature.geometry.coordinates[0]) ? geoflo.hotFeature.geometry.coordinates[0] : [geoflo.hotFeature.geometry.coordinates[0], geoflo.hotFeature.geometry.coordinates[1]];
        point = geoflo.Painting && geoflo.Painting.enabled || geoflo.currentMode.savingEdit ? point : turf.point(coords);
        feature = point;
      } else if (geoflo.Utilities.isPolygon(geoflo.hotFeature, type)) {
        geoflo.hotFeature.geometry.type = "Polygon";
        if (type === 'Rectangle') {
          geoflo.endPoint ? updateCoordinate(geoflo.hotFeature, "0.2", geoflo.endPoint[0], geoflo.endPoint[1]) : false;
          updateCoordinate(geoflo.hotFeature, "0.5", geoflo.hotFeature.geometry.coordinates[0][0][0], geoflo.hotFeature.geometry.coordinates[0][0][1]);
        } else {
          geoflo.hotFeature.geometry.coordinates.push(geoflo.hotFeature.geometry.coordinates[0]);
          geoflo.hotFeature.geometry.coordinates = [geoflo.hotFeature.geometry.coordinates];
        }
      } else if (geoflo.Utilities.isLineString(geoflo.hotFeature, type)) {
        if (type === 'Polygon') {
          geoflo.hotFeature.geometry.type = type;
          geoflo.hotFeature.geometry.coordinates.push(geoflo.hotFeature.geometry.coordinates[0]);
          geoflo.hotFeature.geometry.coordinates = [geoflo.hotFeature.geometry.coordinates];
        } else if (type === 'Rectangle') {
          geoflo.endPoint ? updateCoordinate(geoflo.hotFeature, "0.2", geoflo.endPoint[0], geoflo.endPoint[1]) : false;
          updateCoordinate(geoflo.hotFeature, "0.5", geoflo.hotFeature.geometry.coordinates[0][0][0], geoflo.hotFeature.geometry.coordinates[0][0][1]);
        }
      } else if (point) {
        feature = point;
      }
      if (geoflo.Painting && geoflo.Painting.enabled) {
        var tolerance = geoflo.options.painting.tolerance;
        geoflo.hotFeature = type === 'Circle' ? geoflo.hotFeature : turf.simplify(geoflo.hotFeature, {
          mutate: true,
          tolerance: typeof tolerance === 'function' ? tolerance(geoflo.map) : tolerance,
          highQuality: true
        });
        if (geoflo.startPoint) geoflo.hotFeature.geometry.coordinates[0] = geoflo.startPoint;
      }
    } else if (point) {
      feature = point;
    }
    var exploreFeature = false;
    if (geoflo.Exploring) exploreFeature = geoflo.Exploring.currentFeature;
    feature = exploreFeature || feature || geoflo.hotFeature;
    if (!feature || !geoflo.currentMode.activated) return geoflo.currentMode.deactivate();
    geoflo.map.getSource(geoflo.statics.constants.sources.ROUTE).setData(turf.featureCollection([]));
    geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
    geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([]));
    geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([]));
    geoflo.map.getSource(geoflo.statics.constants.sources.HOTTEXT).setData(turf.featureCollection([]));
    geoflo.map.getSource(geoflo.statics.constants.sources.SELECT).setData(turf.featureCollection([]));
    feature = geoflo.Features.addFeature(feature, geoflo.currentMode.source, geoflo.currentMode.properties);
    var pinnedFeatures = [];
    if (geoflo.Pinning && geoflo.Pinning.enabled) pinnedFeatures = geoflo.Pinning.saveFeatures();
    geoflo.fire('draw.finish', {
      feature: feature,
      pinned: pinnedFeatures,
      type: type,
      editing: geoflo.editMode
    });
    return geoflo.currentMode.deactivate();
  }
  function finishText(e, type, feature) {
    var marker = geoflo.textMarker;
    if (!marker) return false;
    var element = marker.getElement();
    var text = element.value;
    if (!text.length || geoflo.currentMode.cancelled) return marker.remove(), geoflo.textInput = false, addText.call(this, type, feature);
    var coords = [element.getAttribute('lng'), element.getAttribute('lat')];
    type = type || element.getAttribute('type');
    geoflo.currentMode.properties.text = text;
    var feature = {
      "type": "Feature",
      "properties": {
        type: type,
        text: text
      },
      "geometry": {
        "type": "Point",
        "coordinates": coords
      }
    };
    marker.remove();
    finishDraw(type, feature, text);
  }
  function cleanupDraw(mode) {
    geoflo.map.getSource(geoflo.statics.constants.sources.ROUTE).setData(turf.featureCollection([]));
    geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
    geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([]));
    geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([]));
    geoflo.map.getSource(geoflo.statics.constants.sources.HOTTEXT).setData(turf.featureCollection([]));
    geoflo.map.getSource(geoflo.statics.constants.sources.SELECT).setData(turf.featureCollection([]));
    geoflo.deleteMeshData();
    mode.history = [];
    mode.undo = [];
    mode.type = null;
    mode.cancelled = false;
    mode.activated = false;
    mode.savingEdit = false;
    geoflo.editMode = false;
    geoflo.drawMode = false;
    delete geoflo.startPoint;
    delete geoflo.lastClick;
    delete geoflo.firstClick;
    delete geoflo.endPoint;
    delete geoflo.snapFeature;
    delete geoflo.hotFeature;
    delete geoflo.drawStarted;
    delete geoflo.dragMoving;
    delete geoflo.editing;
    delete geoflo.textMarker;
    delete geoflo.textInput;
    delete geoflo.touchMoving;
    delete geoflo.touchDown;
    delete geoflo.canDragMove;
    delete geoflo.canAddVertex;
    delete geoflo.dragIndex;
    delete geoflo.addedVertexOnLine;
    delete geoflo.snappedVertex;
  }
  function getVertex(point) {
    var hotFeature = geoflo.hotFeature;
    var vertex;
    if (geoflo.dragMoving) return false;
    if (!hotFeature) return false;
    var closest = {};
    if (geoflo.Snapping) closest = geoflo.Snapping.getClosest(point.geometry.coordinates);
    var coords = closest.coords;
    var type = closest.point ? closest.point.type : false;
    if (!type) return false;
    if (!coords && type === 'linepoint' && closest.point.borders) {
      var segment = turf.lineString([closest.point.border1, closest.point.border2]);
      vertex = turf.along(segment, closest.point.distance1);
      coords = vertex.geometry.coordinates;
    }
    if (!coords) return false;
    point = turf.point(coords);
    var isLineVertex = geoflo.Utilities.isLineString(hotFeature) && type === 'vertex';
    var nearestVertex = isLineVertex ? turf.nearestPointOnLine(hotFeature, point) : false;
    vertex = nearestVertex || point;
    vertex.properties.type = type;
    geoflo.fire('vertex.find', {
      vertex: vertex,
      feature: geoflo.hotFeature,
      closest: closest
    });
    return vertex;
  }
  function addVertex(point, event) {
    var feature;
    if (event && point) {
      var coords = geoflo.hotFeature.geometry.coordinates;
      var line = turf.lineString(coords);
      var start = turf.point(coords[0]);
      var split = turf.lineSlice(start, point, line);
      var index = split.geometry.coordinates.length - 1;
      var vertex = split.geometry.coordinates[index];
      point = turf.point(vertex);
      line.geometry.coordinates.splice.apply(line.geometry.coordinates, [index, 0].concat([vertex]));
      line = turf.cleanCoords(line);
      feature = turf.truncate(line, {
        precision: 6,
        coordinates: 2,
        mutate: true
      });
      geoflo.hotFeature.geometry.coordinates = feature.geometry.coordinates;
      geoflo.hotFeature = geoflo.Utilities.cloneDeep(geoflo.hotFeature);
    } else if (point) {
      geoflo.canDragMove = true;
      geoflo.canAddVertex = point;
    }
    return point;
  }
  function onVertex(vertex, add) {
    var hotFeature = geoflo.hotFeature;
    var dragIndex = null;
    if (geoflo.dragMoving) return offVertex();
    if (!hotFeature || !vertex) return offVertex();
    geoflo.updateMeshData();
    var type = vertex.properties.type;
    var index = vertex.properties.index || vertex.properties.index == 0;
    dragIndex = index ? vertex.properties.index : geoflo.currentMode.type === 'Circle' || geoflo.currentMode.type === 'Icon' || geoflo.currentMode.type === 'Image' ? 0 : false;
    geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([vertex]));
    geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([hotFeature]));
    if (type === 'linepoint') return addVertex(vertex);
    geoflo.map.dragPan.disable();
    geoflo.dragIndex = dragIndex;
    geoflo.addedVertexOnLine = add ? vertex : false;
    geoflo.canAddVertex = false;
    geoflo.canDragMove = true;
    geoflo.snappedVertex = vertex.geometry.coordinates;
    if (geoflo.Pinning) geoflo.Pinning.setFeatures(geoflo.snappedVertex);
    geoflo.fire('vertex.on', {
      vertex: vertex,
      index: dragIndex,
      feature: hotFeature
    });
  }
  function offVertex() {
    if (geoflo.mouseIsDown && geoflo.Painting && geoflo.Painting.enabled) return false;
    if (geoflo.hotFeature && geoflo.snappedVertex) {
      geoflo.lastIndex ? geoflo.lastClick = {
        coords: geoflo.snappedVertex
      } : false;
      geoflo.fire('vertex.off', {
        vertex: false,
        index: geoflo.dragIndex,
        feature: geoflo.hotFeature
      });
    }
    geoflo.map.dragPan.enable();
    geoflo.dragMoving = false;
    geoflo.canDragMove = false;
    geoflo.snappedVertex = null;
    geoflo.dragIndex = -1;
    geoflo.mouseIsDown = geoflo.touchDown || false;
    geoflo.lastIndex = false;
    geoflo.canAddVertex = false;
    geoflo.addedVertexOnLine = false;
  }
  function addText(type, feature) {
    feature = feature || geoflo.hotFeature;
    if (!feature) return false;
    type = type || feature.properties.type;
    feature.properties.type = type;
    if (type !== 'Text') return; //geoflo.Features.setText(feature);
    if (geoflo.textInput) return finishText(false, type, feature);
    var lngLat = {
      lng: feature.geometry.coordinates[0],
      lat: feature.geometry.coordinates[1]
    };
    var el = geoflo.textInput = document.createElement('input');
    el.value = feature.properties.text || '';
    el.className = 'text-marker';
    el.setAttribute('contenteditable', 'true');
    el.setAttribute('autocorrect', 'off');
    el.setAttribute('spellcheck', 'false');
    el.setAttribute('placeholder', 'Press Enter or Select Button When Done...');
    el.setAttribute('type', type);
    el.setAttribute('lng', lngLat.lng);
    el.setAttribute('lat', lngLat.lat);
    geoflo.textMarker = new mapboxgl.Marker(el).setLngLat(lngLat).addTo(geoflo.map);
    geoflo.textMarker.setOffset([0, -25]);
    el.addEventListener("submit", finishText);
    el.addEventListener("keydown", inputText);
    el.addEventListener("paste", handlePaste);
    el.focus();
    geoflo.fire('text.add', {
      feature: feature,
      marker: geoflo.textMarker,
      type: type
    });
    function inputText(e) {
      if ([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {
        e.stopPropagation();
      } else if (e.keyCode === 13) {
        e.preventDefault();
        finishText(e);
      }
    }
    function handlePaste(e) {
      var clipboardData, pastedData;
      e.stopImmediatePropagation();
      e.preventDefault();
      clipboardData = e.clipboardData || window.clipboardData;
      pastedData = clipboardData.getData('text/plain').slice(0, CHAR_LIMIT);
      e.target.innerText = pastedData;
    }
  }
  function updateCoordinate(f, t, e, n) {
    var o = t.split("."),
      r = parseInt(o[0], 10),
      i = parseInt(o[1], 10);
    void 0 === f.geometry.coordinates[r] && (f.geometry.coordinates[r] = []), f.geometry.coordinates[r][i] = [e, n];
  }
  function updateRectangle(event, type) {
    if (type !== 'Rectangle') return false;
    var geometry = geoflo.hotFeature.geometry;
    var coords = geometry.coordinates;
    var coordType = geometry.type;
    //coords = coordType === 'Linestring' ? coords : coords[0];

    if (geoflo.currentVertexPosition === 2) {
      var getpXY3 = calculatepXY3(geometry, event, type);
      if (getpXY3[2]) return updateCoordinate("0.".concat(geoflo.currentVertexPosition + 1), getpXY3[2][0], getpXY3[2][1]);
      return geoflo.hotFeature;
    }
    updateCoordinate("0.".concat(geoflo.currentVertexPosition), event.lngLat.lng, event.lngLat.lat);
    geoflo.currentVertexPosition++;
    updateCoordinate("0.".concat(geoflo.currentVertexPosition), event.lngLat.lng, event.lngLat.lat);
    function calculatepXY3(geometry, event, type) {
      var coords = geometry.coordinates;
      var pXY0 = coords[0];
      var pXY0_3857 = geoflo.Utilities.degrees2meters(pXY0);
      var pXY1 = coords[1];
      var pXY1_3857 = geoflo.Utilities.degrees2meters(pXY1);
      var pXY2_3857 = geoflo.Utilities.degrees2meters([event.lngLat.lng, event.lngLat.lat]);
      var mouse_3857 = geoflo.Utilities.degrees2meters([event.lngLat.lng, event.lngLat.lat]);
      if (pXY0_3857[0] === pXY1_3857[0]) {
        pXY2_3857 = [mouse_3857[0], pXY1_3857[1]];
      } else if (pXY0_3857[1] === pXY1_3857[1]) {
        pXY2_3857 = [pXY1_3857[0], mouse_3857[1]];
      } else {
        var vector1_3857 = (pXY1_3857[1] - pXY0_3857[1]) / (pXY1_3857[0] - pXY0_3857[0]);
        var vector2_3857 = -1.0 / vector1_3857;
        if (Math.abs(vector2_3857) < 1) {
          pXY2_3857[1] = vector2_3857 * (mouse_3857[0] - pXY1_3857[0]) + pXY1_3857[1];
        } else {
          pXY2_3857[0] = pXY1_3857[0] + (pXY2_3857[1] - pXY1_3857[1]) / vector2_3857;
        }
      }
      var vector_3857 = [pXY1_3857[0] - pXY0_3857[0], pXY1_3857[1] - pXY0_3857[1]];
      var pXY3_3857 = [pXY2_3857[0] - vector_3857[0], pXY2_3857[1] - vector_3857[1]];
      var pXY2G = geoflo.Utilities.meters2degrees(pXY2_3857);
      var pXY3G = geoflo.Utilities.meters2degrees(pXY3_3857);
      return [coords, pXY2G, pXY3G];
    }
    return false;
  }
  function startIdleTime() {
    var ready = setInterval(function () {
      if (geoflo.mouseIsDown) {
        geoflo.lastDragMove += 1;
        checkIdleMove();
      } else {
        geoflo.lastDragMove = 0;
        geoflo.mouseIsIdle = false;
        clearInterval(ready);
      }
    }, 1);
  }
  function checkIdleMove() {
    if (geoflo.lastDragMove < geoflo.options.pinning.idle) return geoflo.mouseIsIdle = false, false;
    geoflo.mouseIsIdle = true;
    if (geoflo.Snapping) geoflo.Snapping.setVertex();
    if (!geoflo.snappedVertex) return false;
    var vertex = turf.point(geoflo.snappedVertex);
    if (geoflo.Pinning) geoflo.Pinning.updateFeatures(vertex);
    return true;
  }
  function needsToFinish(type, coords) {
    var types = ['Circle', 'Icon', 'Text', 'Image'];
    if (!type) return true;
    if (types.includes(type)) return true;
    if (type === 'Rectangle' && geoflo.startPoint) return geoflo.endPoint = coords, true;
    if (type === 'Polygon' && geoflo.snappedVertex && geoflo.startPoint && geoflo.Utilities.isPointEqual(geoflo.startPoint, geoflo.snappedVertex)) return true;
    if (geoflo.snappedVertex && geoflo.Utilities.isLastIndex(geoflo.dragIndex, geoflo.hotFeature)) return true;
    if (geoflo.lastClick && geoflo.Utilities.isPointEqual(geoflo.lastClick.coords, coords)) return true;
    return false;
  }
  function constrainFeatureMovement(geojsonFeatures, delta) {
    // "inner edge" = a feature's latitude closest to the equator
    var northInnerEdge = geoflo.statics.constants.LAT_MIN;
    var southInnerEdge = geoflo.statics.constants.LAT_MAX;
    // "outer edge" = a feature's latitude furthest from the equator
    var northOuterEdge = geoflo.statics.constants.LAT_MIN;
    var southOuterEdge = geoflo.statics.constants.LAT_MAX;
    var westEdge = geoflo.statics.constants.LNG_MAX;
    var eastEdge = geoflo.statics.constants.LNG_MIN;
    geojsonFeatures.forEach(function (feature) {
      //const bounds = extent(feature); Need to add Turf bounds here
      var featureSouthEdge = bounds[1];
      var featureNorthEdge = bounds[3];
      var featureWestEdge = bounds[0];
      var featureEastEdge = bounds[2];
      if (featureSouthEdge > northInnerEdge) northInnerEdge = featureSouthEdge;
      if (featureNorthEdge < southInnerEdge) southInnerEdge = featureNorthEdge;
      if (featureNorthEdge > northOuterEdge) northOuterEdge = featureNorthEdge;
      if (featureSouthEdge < southOuterEdge) southOuterEdge = featureSouthEdge;
      if (featureWestEdge < westEdge) westEdge = featureWestEdge;
      if (featureEastEdge > eastEdge) eastEdge = featureEastEdge;
    });

    // These changes are not mutually exclusive: we might hit the inner
    // edge but also have hit the outer edge and therefore need
    // another readjustment
    var constrainedDelta = delta;
    if (northInnerEdge + constrainedDelta.lat > geoflo.statics.constants.LAT_RENDERED_MAX) {
      constrainedDelta.lat = geoflo.statics.constants.LAT_RENDERED_MAX - northInnerEdge;
    }
    if (northOuterEdge + constrainedDelta.lat > geoflo.statics.constants.LAT_MAX) {
      constrainedDelta.lat = geoflo.statics.constants.LAT_MAX - northOuterEdge;
    }
    if (southInnerEdge + constrainedDelta.lat < geoflo.statics.constants.LAT_RENDERED_MIN) {
      constrainedDelta.lat = geoflo.statics.constants.LAT_RENDERED_MIN - southInnerEdge;
    }
    if (southOuterEdge + constrainedDelta.lat < geoflo.statics.constants.LAT_MIN) {
      constrainedDelta.lat = geoflo.statics.constants.LAT_MIN - southOuterEdge;
    }
    if (westEdge + constrainedDelta.lng <= geoflo.statics.constants.LNG_MIN) {
      constrainedDelta.lng += Math.ceil(Math.abs(constrainedDelta.lng) / 360) * 360;
    }
    if (eastEdge + constrainedDelta.lng >= geoflo.statics.constants.LNG_MAX) {
      constrainedDelta.lng -= Math.ceil(Math.abs(constrainedDelta.lng) / 360) * 360;
    }
    return constrainedDelta;
  }
  function calculateOrientedAnglePolygon(feature) {
    var geometry = feature.geometry;
    var coords = geometry.coordinates;
    var coordType = geometry.type;
    coords = coordType === 'Linestring' ? coords : coords[0];
    var pXY0 = coords[0];
    var pXY0_3857 = geoflo.Utilities.degrees2meters(pXY0);
    var pXY1 = coords[1];
    var pXY1_3857 = geoflo.Utilities.degrees2meters(pXY1);
    var angleStdGraus = Math.atan2(pXY1_3857[1] - pXY0_3857[1], pXY1_3857[0] - pXY0_3857[0]) * 180 / Math.PI;
    var angleSudGraus = -1.0 * (angleStdGraus + 90);
    var angle = angleSudGraus < 0 ? angleSudGraus + 360 : angleSudGraus;
    return parseFloat(angle.toFixed(2));
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Draw);

/***/ }),

/***/ "./src/Events.js":
/*!***********************!*\
  !*** ./src/Events.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
var events = ['map.enable', 'map.disable', 'map.ready', 'map.redraw', 'map.refresh', 'mode.change', 'theme.change', 'sources.add', 'source.add', 'source.hot', 'layers.add', 'layers.remove', 'layer.add', 'control.add', 'control.remove', 'features.zoom', 'features.add', 'features.remove', 'features.update', 'features.import', 'features.export', 'features.offset', 'features.hide', 'feature.add', 'feature.remove', 'feature.select', 'feature.deselect', 'feature.update', 'feature.history', 'select.load', 'select.add', 'select.remove', 'select.activate', 'select.deactivate', 'draw.activate', 'draw.deactivate', 'draw.start', 'draw.finish', 'draw.cancel', 'mesh.load', 'text.add', 'icon.add', 'vertex.find', 'vertex.on', 'vertex.off', 'vertex.add', 'vertex.drag', 'vertex.dragsnap', 'vertex.delete', 'overpass.add', 'snapping.activate', 'snapping.deactivate', 'snapping.add', 'snapping.refresh', 'snapping.delete', 'pinning.activate', 'pinning.deactivate', 'pinning.add', 'pinning.update', 'routing.activate', 'routing.deactivate', 'routing.add', 'painting.activate', 'painting.deactivate', 'painting.start', 'painting.update', 'gamepad.init', 'gamepad.add', 'gamepad.remove', 'gamepad.hold', 'gamepad.press', 'gamepad.release', 'gamepad.connect', 'gamepad.disconnect', 'locate.on', 'locate.off', 'locate.update'];

/**
 * @mixin
 * @memberof module:geoflo
 * @name Events
 * @description This module handles various map and user interaction events for the geoflo application.
 * @param {Object} geoflo - The geoflo instance to which the events are bound.
 * @returns {Object} An object containing methods to add and remove event listeners.
 * @function addEventListeners - Adds event listeners to the map and other elements.
 * @function removeEventListeners - Removes event listeners from the map and other elements.
 */

var Events = function Events(geoflo) {
  /**
   * @function
   * @memberof module:geoflo.Events
   * @name mapMoveStart
   * @description Handles the `movestart` event on the map.
   * @param {Object} event - The event object containing map movement details.
   */
  var mapMoveStart = function mapMoveStart(event) {
    geoflo.mapMoving = event;
    if (geoflo.settingExtent) return;
    if (geoflo.locate) geoflo.locate.onMapMove(event);
    geoflo.setIcon(event);
  };

  /**
   * @function
   * @memberof module:geoflo.Events
   * @name mapMoving
   * @description Handles the `move` event on the map, updating icons and tracking movements.
   * @param {Object} event - The event object containing map movement details.
   */
  var mapMoving = function mapMoving(event) {
    geoflo.mapMoving = event;
    if (geoflo.settingExtent) return;
    geoflo.setIcon(event);
    geoflo.setCenterMarker();
    geoflo.locate && geoflo.locate.following ? geoflo.setMapClass('disable') : false;
  };

  /**
   * @function
   * @memberof module:geoflo.Events
   * @name mapMoveEnd
   * @description Handles the `moveend` event on the map, updating icons and tracking movements.
   * @param {Object} event - The event object containing map movement details.
   */
  var mapMoveEnd = function mapMoveEnd(event) {
    geoflo.mapMoving = false;
    if (geoflo.settingExtent) return;
    if (geoflo.locate) geoflo.locate.onMapMove(event);
    geoflo.setIcon(event);
  };

  /**
   * @function
   * @memberof module:geoflo.Events
   * @name mouseMove
   * @description Handles the `mousemove` event on the map, updating icons and tracking movements.
   * @param {Object} event - The event object containing mouse movement details.
   */
  var mouseMove = function mouseMove(event) {
    var painting = geoflo.options.painting && geoflo.options.painting.enable;
    painting = painting && geoflo.currentMode && geoflo.currentMode.id === 'draw';
    geoflo.locate && geoflo.locate.following ? geoflo.setMapClass('disable') : geoflo.dragMoving ? geoflo.setMapClass('grabbing') : geoflo.addingVertexOnLine || geoflo.canAddVertex ? geoflo.setMapClass('pointer') : geoflo.canDragMove ? geoflo.setMapClass('grab') : painting ? geoflo.setMapClass('painting') : geoflo.setMapClass('pointer');
    geoflo.lastMouseEvent = event;
    if (!geoflo.currentMode) return;
    geoflo.currentMode.handleMove ? geoflo.currentMode.handleMove(event) : false;
  };

  /**
   * @function
   * @memberof module:geoflo.Events
   * @name mouseDown
   * @description Handles the `mousedown` event on the map, updating icons and tracking movements.
   * @param {Object} event - The event object containing mouse movement details.
   */
  var mouseDown = function mouseDown(event) {
    var painting = geoflo.options.painting && geoflo.options.painting.enable;
    painting = painting && geoflo.currentMode && geoflo.currentMode.id === 'draw';
    geoflo.locate && geoflo.locate.following ? geoflo.setMapClass('disable') : painting ? geoflo.setMapClass('painting') : geoflo.dragMoving ? geoflo.setMapClass('grabbing') : geoflo.addingVertexOnLine ? geoflo.setMapClass('grabbing') : geoflo.canDragMove ? geoflo.setMapClass('grab') : geoflo.lastClick ? geoflo.setMapClass('grabbing') : geoflo.setMapClass('pointer');
    geoflo.mouseIsDown = [event.lngLat.lng, event.lngLat.lat];
    geoflo.currentMode.handleDown ? geoflo.currentMode.handleDown(event) : false;
  };

  /**
   * @function
   * @memberof module:geoflo.Events
   * @name mouseUp
   * @description Handles the `mouseup` event on the map, updating icons and tracking movements.
   * @param {Object} event - The event object containing mouse movement details.
   */
  var mouseUp = function mouseUp(event) {
    geoflo.mouseIsDown = false;
    geoflo.locate && geoflo.locate.following ? geoflo.setMapClass('disable') : geoflo.setMapClass('pointer');
    geoflo.currentMode.handleUp ? geoflo.currentMode.handleUp(event) : false;
  };

  /**
   * @function
   * @memberof module:geoflo.Events
   * @name mouseClick
   * @description Handles the `click` event on the map, updating icons and tracking movements.
   * @param {Object} event - The event object containing mouse movement details.
   */
  var mouseClick = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (!event.type.includes('preclick')) {
              _context.next = 2;
              break;
            }
            return _context.abrupt("return", geoflo.currentMode.handlePreclick ? geoflo.currentMode.handlePreclick(event) : false);
          case 2:
            geoflo.currentMode.handleClick ? geoflo.currentMode.handleClick(event) : false;
          case 3:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function mouseClick(_x) {
      return _ref.apply(this, arguments);
    };
  }();

  /**
   * @function
   * @memberof module:geoflo.Events
   * @name mouseDrag
   * @description Handles the `drag` event on the map, updating icons and tracking movements.
   * @param {Object} event - The event object containing mouse movement details.
   */
  var mouseDrag = function mouseDrag(event) {
    geoflo.locate && geoflo.locate.following ? geoflo.setMapClass('disable') : geoflo.dragMoving ? geoflo.setMapClass('grabbing') : geoflo.canDragMove ? geoflo.setMapClass('grab') : geoflo.setMapClass('move');
    geoflo.currentMode.handleDrag ? geoflo.currentMode.handleDrag(event) : false;
  };

  /**
   * @function
   * @memberof module:geoflo.Events
   * @name mouseleave
   * @description Handles the `mouseleave` event on the map, updating icons and tracking movements.
   * @param {Object} event - The event object containing mouse movement details.
   */
  var mouseleave = function mouseleave(event) {
    if (!geoflo.currentMode) return;
    geoflo.currentMode.handleOffMap ? geoflo.currentMode.handleOffMap(event) : false;
  };

  /**
   * @function
   * @memberof module:geoflo.Events
   * @name mouseover
   * @description Handles the `mouseover` event on the map, updating icons and tracking movements.
   * @param {Object} event - The event object containing mouse movement details.
   */
  var mouseover = function mouseover(event) {
    if (!geoflo.currentMode) return;
    geoflo.currentMode.handleOnMap ? geoflo.currentMode.handleOnMap(event) : false;
  };

  /**
   * @function
   * @memberof module:geoflo.Events
   * @name keypress
   * @description Handles the `keypress` event on the map, updating icons and tracking movements.
   * @param {Object} event - The event object containing keypress details.
   */
  var keypress = function keypress(event) {
    if (geoflo.textMarker) return;
    console.log("keycode: ", event.keyCode, " =>", event.key, " | Code:", event.code, " Event:", event);
    var buttonOptions = geoflo.getButtons();
    var keyHandled = false;
    Object.keys(buttonOptions).forEach(function (buttonId) {
      var option = buttonOptions[buttonId];
      var key = geoflo.options.keys[buttonId];
      if (key === event.key) {
        option.button.click();
        keyHandled = true;
      } else if (key === event.keyCode) {
        option.button.click();
        keyHandled = true;
      } else if (option.keycode && option.keycode === event.keyCode) {
        option.button.click();
        keyHandled = true;
      }
    });
    if (geoflo.options.commands) {
      geoflo.options.commands.forEach(function (c) {
        if (c.key === event.keyCode || c.key === event.key || c.key === event.code) {
          if (!c.command || typeof c.command !== 'function') return;
          c.command(event, geoflo, c);
          keyHandled = true;
        }
      });
    }
    if (keyHandled) return keyHandled;
    if (event.key.includes('Arrow')) {}
    geoflo.currentKeyPress = event.key;
    switch (event.code) {
      case "Enter":
        {
          geoflo.setMode();
          break;
        }
      case "NumpadEnter":
        {
          geoflo.setMode();
          break;
        }
      case "Escape":
        {
          geoflo.hotFeature = null;
          geoflo.setMode();
          break;
        }
      case "Home":
        {
          geoflo.moveSelectedFeatures(1);
          break;
        }
      case "End":
        {
          geoflo.moveSelectedFeatures(-1);
          break;
        }
      case "Delete":
        {
          if (geoflo.mode === geoflo.statics.constants.modes.SELECT) {
            if (geoflo.hasSelection()) {
              geoflo.removeSelection();
            }
          } else if (geoflo.mode === geoflo.statics.constants.modes.DRAW) {
            geoflo.currentMode.deleteVertex();
          }
          break;
        }
    }
  };

  /**
   * @function
   * @memberof module:geoflo.Events
   * @name keyrelease
   * @description Handles the `keyrelease` event on the map, updating icons and tracking movements.
   * @param {Object} event - The event object containing keypress details.
   */
  var keyrelease = function keyrelease(event) {
    console.log("keyrelease: ", event);
    geoflo.currentKeyPress = false;
  };

  /**
   * @function
   * @memberof module:geoflo.Events
   * @name touchstart
   * @description Handles the touchstart event by delegating to the current mode's handleTouch method if it exists.
   * @param {Event} event - The touchstart event object.
   */
  var touchstart = function touchstart(event) {
    geoflo.currentMode.handleTouch ? geoflo.currentMode.handleTouch(event) : false;
  };

  /**
   * @function
   * @name touchend
   * @memberof module:geoflo.Events
   * @description Handles the touchend event by invoking the handleTouch method of the current mode if it exists.
   *
   * @param {Event} event - The touchend event object.
   * @returns {boolean} Returns false if the handleTouch method does not exist; otherwise, it returns undefined.
   */
  var touchend = function touchend(event) {
    geoflo.currentMode.handleTouch ? geoflo.currentMode.handleTouch(event) : false;
  };

  /**
   * @function
   * @name touchmove
   * @memberof module:geoflo.Events
   * @description Handles the touchmove event by invoking the handleTouch method of the current mode if it exists.
   *
   * @param {Event} event - The touchmove event object.
   * @returns {boolean} Returns false if the handleTouch method does not exist.
   */
  var touchmove = function touchmove(event) {
    geoflo.currentMode.handleTouch ? geoflo.currentMode.handleTouch(event) : false;
  };

  /**
   * @function
   * @name touchcancel
   * @memberof module:geoflo.Events
   * @description Handles the touch cancel event by invoking the handleTouch method of the current mode if it exists.
   *
   * @param {Event} event - The touch cancel event object.
   * @returns {boolean} Returns false if the handleTouch method does not exist; otherwise, it returns the result of the handleTouch method.
   */
  var touchcancel = function touchcancel(event) {
    geoflo.currentMode.handleTouch ? geoflo.currentMode.handleTouch(event) : false;
  };

  /**
   * @function
   * @name gamepadconnected
   * @memberof module:geoflo.Events
   * @description Handles the event when a gamepad is connected and adds it to the geoflo instance.
   *
   * @param {Event} event - The event object containing information about the connected gamepad.
   * @returns {void} This function does not return a value.
   */
  var gamepadconnected = function gamepadconnected(event) {
    var gamepad = event.gamepad || event.detail.gamepad;
    if (!geoflo.license || !geoflo.license.enabled || !geoflo.premiumModules) throw new Error('GeoFlo Premium Required!');
    geoflo.gamepads[gamepad.index] = new geoflo.premiumModules.Gaming(gamepad);
    geoflo.fire('gamepad.add', {
      gamepad: gamepad
    });
  };

  /**
   * @function
   * @name gamepaddisconnected
   * @memberof module:geoflo.Events
   * @description Handles the event when a gamepad is disconnected and removes it from the geoflo system.
   *
   * @param {Event} event - The event object containing information about the disconnected gamepad.
   * @returns {void} This function does not return a value.
   */
  var gamepaddisconnected = function gamepaddisconnected(event) {
    var gamepad = event.gamepad || event.detail.gamepad;
    if (!geoflo.gamepads[gamepad.index]) return false;
    geoflo.gamepads[gamepad.index].onDisconnect(gamepad);
    delete geoflo.gamepads[gamepad.index];
    geoflo.fire('gamepad.remove', {
      gamepad: gamepad
    });
  };

  /**
   * @function
   * @name handleOrientation
   * @memberof module:geoflo.Events
   * @description Updates the orientation of the geoflo object based on the device's orientation event.
   *
   * @param {Event} event - The orientation event containing alpha, beta, and gamma values.
   * @returns {void} This function does not return a value.
   */
  var handleOrientation = function handleOrientation(event) {
    geoflo.updateOrientation({
      alpha: event.alpha,
      beta: event.beta,
      gamma: event.gamma
    });
  };

  /**
   * @function
   * @name dragStart
   * @memberof module:geoflo.Events
   * @description Handles the drag start event for an element.
   *
   * @param {Event} event - The event object representing the drag start event.
   * @returns {void} This function does not return a value.
   */
  var dragStart = function dragStart(event) {
    //if (geoflo.locate && geoflo.locate.following) return event.originalEvent.preventDefault();
  };

  /**
   * @function
   * @name rotatePitch
   * @memberof module:geoflo.Events
   * @description Adjusts the map's pitch based on the provided event, setting the map class to 'grabbing', updating the icon, and repositioning the center marker.
   *
   * @param {Object} event - The event object that contains information about the interaction.
   * @returns {void} This function does not return a value.
   */
  var rotatePitch = function rotatePitch(event) {
    geoflo.setMapClass('grabbing');
    geoflo.setIcon(event);
    geoflo.setCenterMarker({
      transform: true
    });
  };

  /**
   * @function
   * @name fireEvent
   * @memberof module:geoflo.Events
   * @description Triggers a custom event on the geoflo map based on the provided event object.
   *
   * @param {Object} event - The event object containing details about the event.
   * @param {string} event.type - The type of the event, which includes the action and target information.
   * @param {Object} event.detail - Additional details associated with the event.
   * @returns {void} This function does not return a value.
   */
  var fireEvent = function fireEvent(event) {
    var name = event.type.split(':')[1];
    var detail = {
      data: event.detail,
      type: name.split('.')[0],
      action: name.split('.')[1],
      target: geoflo
    };
    var details = {
      name: name,
      detail: detail
    };
    geoflo.map.fire(geoflo.id, details);
  };

  /**
   * @function
   * @name contextMenu
   * @memberof module:geoflo.Events
   * @description Handles the context menu event by invoking the current mode's context handling function if it exists.
   *
   * @param {Event} event - The event object representing the context menu event.
   * @returns {boolean} Returns false if the current mode does not have a context handler.
   */
  var contextMenu = function contextMenu(event) {
    geoflo.currentMode.handleContext ? geoflo.currentMode.handleContext(event) : false;
  };

  /**
   * @function
   * @name sourceData
   * @memberof module:geoflo.Events
   * @description Processes the source data from an event and triggers an action based on the source ID.
   *
   * @param {Object} event - The event object containing source data.
   * @param {string} event.sourceDataType - The type of the source data.
   * @param {string} event.sourceId - The ID of the source.
   * @param {Object} event.source - The source object containing data.
   * @param {string} event.type - The type of the event.
   * @returns {boolean} Returns false if the source data type is invalid or if the source ID is not present; otherwise, it triggers an event based on the source ID.
   */
  var sourceData = function sourceData(event) {
    if (!event.sourceDataType || !event.sourceDataType === 'content' || !event.sourceId) return false;
    var id = event.sourceId;
    var detail = {
      id: id,
      data: event.source.data,
      type: event.type,
      target: geoflo
    };
    id === geoflo.statics.constants.sources.HOT ? geoflo.fire('source.hot', detail) : false;
  };

  /**
   * @function
   * @name addEventListeners
   * @memberof module:geoflo.Events
   * @description Attaches various event listeners to the map and container for handling user interactions and map events.
   *
   * @returns {void} This function does not return a value.
   */
  function addEventListeners() {
    geoflo.map.on("movestart", mapMoveStart);
    geoflo.map.on("move", mapMoving);
    geoflo.map.on("moveend", mapMoveEnd);
    geoflo.map.on("mousemove", mouseMove);
    geoflo.map.on('preclick', mouseClick);
    geoflo.map.on('click', mouseClick);
    geoflo.map.on('tap', mouseClick);
    geoflo.map.on('dragstart', dragStart);
    geoflo.map.on('drag', mouseDrag);
    geoflo.map.on('mousedown', mouseDown);
    geoflo.map.on('mouseup', mouseUp);
    geoflo.map.on('rotatestart', rotatePitch);
    geoflo.map.on('pitchstart', rotatePitch);
    geoflo.map.on('rotate', rotatePitch);
    geoflo.map.on('pitch', rotatePitch);
    geoflo.map.on('touchstart', touchstart);
    geoflo.map.on('touchend', touchend);
    geoflo.map.on('touchmove', touchmove);
    geoflo.map.on('touchcancel', touchcancel);
    geoflo.map.on('contextmenu', contextMenu);
    geoflo.map.on('sourcedata', sourceData);
    events.forEach(function (event) {
      geoflo.map.on(geoflo.id + ':' + event, fireEvent);
    });
    geoflo.container.addEventListener('keydown', keypress);
    geoflo.container.addEventListener('keyup', keyrelease);
    geoflo.container.addEventListener('mouseover', mouseover);
    geoflo.container.addEventListener('mouseleave', mouseleave);
    window.addEventListener("gamepadconnected", gamepadconnected);
    window.addEventListener("gamepaddisconnected", gamepaddisconnected);
    window.addEventListener("deviceorientation", handleOrientation, true);
  }

  /**
   * @function
   * @name removeEventListeners
   * @memberof module:geoflo.Events
   * @description Removes various event listeners from the map and container to prevent further interactions.
   *
   * @returns {void} This function does not return a value.
   */
  function removeEventListeners() {
    geoflo.map.off("movestart", mapMoveStart);
    geoflo.map.off("move", mapMoving);
    geoflo.map.off("moveend", mapMoveEnd);
    geoflo.map.off("mousemove", mouseMove);
    geoflo.map.off('preclick', mouseClick);
    geoflo.map.off('click', mouseClick);
    geoflo.map.off('tap', mouseClick);
    geoflo.map.off('dragstart', dragStart);
    geoflo.map.off('drag', mouseDrag);
    geoflo.map.off('mousedown', mouseDown);
    geoflo.map.off('mouseup', mouseUp);
    geoflo.map.off('rotatestart', rotatePitch);
    geoflo.map.off('pitchstart', rotatePitch);
    geoflo.map.off('touchstart', touchstart);
    geoflo.map.off('touchend', touchend);
    geoflo.map.off('touchmove', touchmove);
    geoflo.map.off('touchcancel', touchcancel);
    geoflo.map.off('contextmenu', contextMenu);
    geoflo.map.off('sourcedata', sourceData);
    events.forEach(function (event) {
      geoflo.map.off(geoflo.id + ':' + event, fireEvent);
    });
    geoflo.container.removeEventListener('keydown', keypress);
    geoflo.container.removeEventListener('mouseover', mouseover);
    geoflo.container.removeEventListener('mouseleave', mouseleave);
    window.removeEventListener("gamepadconnected", gamepadconnected);
    window.removeEventListener("gamepaddisconnected", gamepaddisconnected);
    window.removeEventListener("deviceorientation", handleOrientation, true);
  }
  return {
    addEventListeners: addEventListeners,
    removeEventListeners: removeEventListeners
  };
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Events);

/***/ }),

/***/ "./src/Features.js":
/*!*************************!*\
  !*** ./src/Features.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/**
 * @mixin
 * @memberof module:geoflo
 * @name Features
 * @description This module provides the features functionality for the Geoflo application. It allows users to add, remove, update, and retrieve features from the map.
 * @returns {Object} Returns the Features object.
 * @throws {Error} Throws an error if no map object is provided.
 */
var Features = function Features() {
  var geoflo = this.geoflo;
  if (!geoflo.map) {
    throw new Error('No map object provided!');
  }
  var coldFeatures = [];
  this.offsetLines = false;

  /**
   * @function
      * @memberof module:geoflo.Features
   * @name getFeatures
   * @description This function returns an array of cold features.
   * @return {Array} An array of cold features.
   */
  this.getFeatures = function () {
    return coldFeatures;
  };

  /**
   * @function
      * @memberof module:geoflo.Features
   * @name getFeatureById
   * @description Retrieves a feature by its ID from a given source. If the ID is an array with multiple IDs, it retrieves multiple features. If the ID is an object, it tries to extract the ID from the object's parent, properties, or id fields.
   * @param {string|number|Array} id - The ID or array of IDs of the feature(s) to retrieve.
   * @returns {Object|Array} The feature or array of features corresponding to the provided ID(s).
   */
  this.getFeatureById = function (id) {
    if (Array.isArray(id) && id.length > 1) return this.getFeaturesById(id);
    if (_typeof(id) === 'object') id = id.parent || id.properties.parent || id.id || id.properties.id;
    return getFeatureById(id);
  };

  /**
   * @function
      * @memberof module:geoflo.Features
   * @name getFeaturesById
   * @description Retrieves features by their IDs.
   * @param {Array} ids - An array of feature IDs to retrieve.
   * @returns {Array} - An array of features corresponding to the provided IDs.
   */
  this.getFeaturesById = function () {
    var _this = this;
    var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var addedIds = [];
    var result = [];
    ids.forEach(function (id) {
      var feature = _this.getFeatureById(id);
      if (feature && !addedIds.includes(id)) addedIds.push(id), result.push(feature);
    }, this);
    return result;
  };

  /**
   * @function
      * @memberof module:geoflo.Features
   * @name getType
   * @description This function returns the type of the input feature.
   * @param {any} feature - The feature whose type needs to be determined.
   * @returns {string} The type of the input feature.
   */
  this.getType = function (feature) {
    return getType(feature);
  };

  /**
   * @function
      * @memberof module:geoflo.Features getUnit
   * @name getUnit
   * @description Retrieves the unit associated with a given feature type from the context options.
   * @param {Object} feature - The feature object for which the unit needs to be retrieved.
   * @returns {string|boolean} The unit associated with the feature type if found, otherwise false.
   */
  this.getUnit = function (feature) {
    if (!feature) return false;
    var type = feature.properties.type;
    if (!type) return false;
    if (!geoflo.options.units || !geoflo.options.units[type]) return false;
    return geoflo.options.units[type];
  };

  /**
   * @function
      * @memberof module:geoflo.Features
   * @name getUnits
   * @param {Object} feature - The feature for which units need to be calculated.
   * @returns {number} - The calculated units (length or area) of the feature.
   */
  this.getUnits = function (feature) {
    var unit = this.getUnit(feature);
    if (!unit || !feature) return false;
    var units = 1;
    var type = feature.properties.type;
    if (type === "Polyline") {
      units = turf.length(feature, {
        units: 'meters'
      });
    } else if (type === 'Polygon') {
      units = turf.area(feature);
    } else if (type === 'Rectangle') {
      units = turf.area(feature);
    }
    return units;
  };
  this.getFeatureState = function (id) {
    if (!id) return false;
    return geoflo.map.getFeatureState({
      source: geoflo.statics.constants.sources.COLD,
      id: id
    });
  };

  /**
   * @function
      * @memberof module:geoflo.Features
   * @name setFeaturesState
   * @description Sets the state of multiple features in a map.
   * @param {Array} features - An array of features to set the state for.
   * @param {boolean} state - The state to set for the features.
   * @returns {Array} - The updated array of features with the new state.
   */
  this.setFeaturesState = function () {
    var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var state = arguments.length > 1 ? arguments[1] : undefined;
    if (!state || !features.length) return [];
    features.forEach(function (feature) {
      var id = feature.id || feature.properties.id;
      if (geoflo.hotFeature && geoflo.hotFeature.id === id) return;
      this.setFeatureState(id, state);
    }, this);
    return features;
  };

  /**
   * @function
      * @memberof module:geoflo.Features
   * @name setFeatureState
   * @description This function sets the state of a feature and its children in the map by updating their feature state.
   * @param {string} id - The ID of the parent feature.
   * @param {object} state - The state object to set for the features.
   * @returns {array} - An array of features whose state was updated.
   */
  this.setFeatureState = function (id, state) {
    if (!state || !id) return false;
    var features = getFeaturesByParent(id);
    features.forEach(function (feature) {
      var id = feature.id || feature.properties.id;
      geoflo.map.setFeatureState({
        source: feature.source,
        id: id
      }, state);
    });
    return features;
  };

  /**
   * @function
      * @memberof module:geoflo.Features
   * @name setText
   * @description Sets text features on the map based on the provided features.
   * @param {Object} features - The features to set text on.
   * @returns {boolean} Returns false if no features are provided or if the features array is empty.
   */
  this.setText = function () {
    var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    if (!geoflo.options.showFeatureText) return false;
    var source = geoflo.statics.constants.sources.HOTTEXT;
    this.textFeatures = [];
    if (features.features) features = features.features;
    if (!Array.isArray(features)) features = [features];
    features.forEach(function (feature) {
      var type = feature.properties.type;
      if (!type) return;
      this.currentType = type;
      if (type === 'Polyline' && geoflo.Utilities.isValidLineString(feature) && geoflo.options.showLineUnits) {
        turf.segmentEach(feature, setLineText.bind(this));
      } else {
        source = geoflo.statics.constants.sources.SELECT;
        var feat = geoflo.Utilities.cloneDeep(feature);
        feat.properties = {
          type: 'Text',
          text: feature.properties.text,
          style: feature.properties.style
        };
        this.textFeatures.push(feat);
      }
    }, this);
    geoflo.map.getSource(source).setData(turf.featureCollection(this.textFeatures));
    delete this.textFeatures;
    delete this.currentType;
  };
  this.isFeatureHidden = function (id) {
    if (!id) return false;
    var state = this.getFeatureState(id);
    return state.hidden;
  };

  /**
   * @function
      * @memberof module:geoflo.Features
   * @name addFeature
   * @description This function adds a feature to the map with the given properties. It cleans the coordinates, truncates them, assigns deep properties, sets the source, and removes unnecessary properties before adding the feature to the map.
   * @param {Object} feature - The feature object to be added to the map.
   * @param {Object} [properties={}] - Additional properties to be assigned to the feature.
   * @returns {Object} The feature object that was added to the map.
   */
  this.addFeature = function (feature, source) {
    var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    if (!feature || !feature.properties) return false;
    feature = turf.cleanCoords(feature);
    feature = turf.truncate(feature, {
      precision: 6,
      coordinates: 3,
      mutate: true
    });
    feature.properties = geoflo.Utilities.assignDeep(properties, feature.properties);
    feature.source = source || feature.source || feature.properties.source || geoflo.statics.constants.sources.COLD;
    delete feature.properties.source;
    delete feature.properties.painting;
    delete feature.properties.edit;
    delete feature.properties["new"];
    delete feature.properties._selected;
    delete feature.properties.hidden;
    delete feature.properties.offset;
    feature.properties.style = feature.properties.style || {};
    this.addUnits(feature);
    this.addFeatures([feature]);
    return feature;
  };

  /**
   * @function
      * @memberof module:geoflo.Features
   * @name addFeatures
   * @description This function takes an array of features and adds them to the map. It also updates the source if any changes are made.
   * @param {Array} features - An array of features to be added to the map.
   * @param {boolean} unselect - A flag indicating whether to unselect the features.
   * @returns {Array} The array of features that were added to the map.
   */
  this.addFeatures = function (features, unselect, id) {
    var _this2 = this;
    var update;
    var sources = [];
    features.forEach(function (feature) {
      feature.id = feature.id || feature.properties.id || URL.createObjectURL(new Blob([])).slice(-36);
      if (id && feature.id !== id) return false;
      feature.source = feature.source || feature.properties.source || geoflo.statics.constants.sources.COLD;
      feature.properties.id = feature.id;
      feature.properties.type = _this2.getType(feature);
      var index = coldFeatures.findIndex(function (f) {
        if (f.id === feature.id || f.properties.id === feature.id) return f;
      });
      if (index > -1) {
        _this2.setFeatureState(feature.id, {
          hidden: !unselect
        });
        coldFeatures[index] = feature;
        update = !unselect;
        if (unselect) delete coldFeatures[index].properties._selected;
      } else {
        update = !_this2.updatingFeatures;
        coldFeatures.push(feature);
      }
      if (unselect) delete feature.properties._selected;
      if (update && !sources.includes(feature.source)) sources.push(feature.source);
    }, this);
    if (update) this.updateSource(sources);
    return features;
  };

  /**
   * @function
      * @memberof module:geoflo.Features
   * @name addUnits
   * @description Adds units to a feature's geometry based on the specified conversion or default unit.
   * @param {Object} feature - The feature object to which units will be added.
   * @param {String} convertTo - The unit to which the feature's units will be converted. If not provided, the default unit will be used.
   * @returns {Object} The feature object with added units.
   */
  this.addUnits = function (feature, convertTo) {
    var unit = convertTo || this.getUnit(feature);
    if (!unit) return false;
    var units = this.convertUnits(feature, null, convertTo);
    feature.geometry.units = units;
    feature.geometry.unit = unit;
    return feature;
  };

  /**
   * @function
      * @memberof module:geoflo.Features
   * @name updateFeatures
   * @description This function updates the coordinates of features in a map based on the provided coordinates. It iterates through the features array, retrieves the original feature by ID, and updates its geometry coordinates based on the feature type. It then adds units to the updated feature and updates the source of the map.
   * @param {Array} features - An array of features to update.
   * @param {Array} coords - The new coordinates to set for the features.
   */
  this.updateFeatures = function (features) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    features = features || [geoflo.getDrawnFeatures(), geoflo.getSelectedFeatures()].flat();
    var sources = [];
    var selectedFeatures = geoflo.getSelectedFeatures();
    this.updatingFeatures = true;
    features.forEach(function (feature) {
      var id = feature.id || feature.properties.id;
      if (!id) return false;
      var originalFeature = this.getFeatureById(id);
      if (!originalFeature || originalFeature === undefined) return this.addFeature(feature);
      var selected = selectedFeatures.find(function (feature) {
        return feature.id === id || feature.properties.id === id;
      });
      if (selected && !geoflo.noSelect) {
        selected.geometry.coordinates = feature.geometry.coordinates;
        selected.properties = feature.properties;
        selected.properties._selected = true;
        geoflo.map.getSource(geoflo.statics.constants.sources.SELECT).setData(turf.featureCollection(selectedFeatures));
        geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection(selectedFeatures));
        return true;
      } else if (!sources.includes(originalFeature.source)) {
        sources.push(originalFeature.source);
      }
      originalFeature.geometry.coordinates = feature.geometry.coordinates;
      originalFeature.properties = feature.properties;
      options.addUnits ? this.addUnits(originalFeature) : false;
    }, this);
    this.updatingFeatures = false;
    if (!sources.length) return false;
    return this.updateSource(sources);
  };

  /**
   * @function
      * @memberof module:geoflo.Features
   * @name updateSource
   * @description Updates the source of the current object with the provided sources.
   * @param {Array} sources - An array of sources to update the current object with.
   * @returns {any} The result of calling the updateSource function with the provided sources.
   */
  this.updateSource = function (sources) {
    return updateSource.call(this, sources);
  };

  /**
   * @function
      * @memberof module:geoflo.Features
   * @name removeFeatures
   * @description This function permenantly removes a feature from the map based on the provided ID. It updates the map source after removing the features.
   * @param {string|string[]} id - The ID of the features to be removed.
   * @returns {Object[]} An array containing the removed feature.
   */
  this.removeFeature = function (id) {
    var removedFeatures = [];
    var feature = coldFeatures.find(function (feature) {
      return feature.id === id || feature.properties.id === id;
    });
    var index = coldFeatures.findIndex(function (feature) {
      return feature.id === id || feature.properties.id === id;
    });
    if (index < 0) return removedFeatures;
    removedFeatures.push.apply(removedFeatures, _toConsumableArray(coldFeatures.splice(feature, 1)));
    this.updateSource(removedFeatures.map(function (feature) {
      return feature.source;
    }));
    return removedFeatures;
  };
  this.removeLayers = function () {
    var layers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var sources = layers.map(function (layer) {
      return layer.source ? layer.source : layer.details ? layer.details.id : layer.id ? layer.id : layer;
    });
    coldFeatures.forEach(function (feature) {
      var _removedFeatures;
      if (!sources.includes(feature.source)) return;
      var index = coldFeatures.findIndex(function (f) {
        return feature.id === f.id || feature.properties.id === f.id;
      });
      if (index > -1) (_removedFeatures = removedFeatures).push.apply(_removedFeatures, _toConsumableArray(coldFeatures.splice(index, 1)));
    });
    if (sources.length) this.updateSource(sources);
  };

  /**
   * @function
      * @memberof module:geoflo.Features
   * @name deleteFeatures
   * @description Deletes all features from the coldFeatures array and updates the source.
   * @params {Array} coldFeatures - The array of features to be deleted.
   * @returns {void}
   */
  this.deleteFeatures = function () {
    coldFeatures.splice(0, coldFeatures.length);
    this.updateSource();
  };

  /**
   * @function
      * @memberof module:geoflo.Features
   * @name convertUnits
   * @description Converts the given units of a feature to the specified target units based on the feature type (Polyline, Polygon, or Rectangle).
   * @param {Object} feature - The feature object containing properties like type.
   * @param {number} units - The units to be converted.
   * @param {string} convertTo - The target units to convert to (optional).
   * @returns {number} The converted units in the target unit format.
   */
  this.convertUnits = function (feature, units, convertTo) {
    if (!feature) return 0;
    var type = feature.properties.type;
    var unit = convertTo || this.getUnit(feature);
    units = units || this.getUnits(feature);
    if (type === "Polyline") {
      units = Math.round(turf.convertLength(units, 'meters', unit));
    } else if (type === 'Polygon') {
      units = Math.round(turf.convertArea(units, 'meters', unit));
    } else if (type === 'Rectangle') {
      units = Math.round(turf.convertArea(units, 'meters', unit));
    }
    units = units ? Number(units.toFixed(2)) : 0;
    return units;
  };
  function getFeatureById(id) {
    var feature = coldFeatures.find(function (feature) {
      return feature.id === id || feature.properties.id === id;
    });
    feature = feature || geoflo.getSelectedFeatures().find(function (feature) {
      return feature.id === id || feature.properties.id === id;
    });
    return feature;
  }
  ;
  function getFeaturesByParent(id) {
    var feature = _typeof(id) === 'object' && id.id ? id : getFeatureById(id);
    if (!feature || !feature.source || !geoflo.map.getSource(feature.source) || !geoflo.map.getSource(feature.source)._data) return [];
    var field = geoflo.options.offsetOverlappingLines ? 'parent' : 'id';
    var features = geoflo.map.getSource(feature.source)._data.features.filter(function (f) {
      return f[field] === id || f.properties[field] === id;
    });
    return features;
  }
  ;
  function createTextFeatures(feature) {
    var isLine = geoflo.Utilities.isValidLineString(feature);
    var segments = [];
    if (isLine) {
      turf.segmentEach(feature, function (currentSegment) {
        var segment = geoflo.Utilities.cloneDeep(currentSegment);
        var footage = Math.round(turf.length(segment, {
          units: 'miles'
        }) * 5280);
        var mileage = Number(turf.length(segment, {
          units: 'miles'
        }).toFixed(3));
        footage = Number(footage.toFixed(2));
        mileage = Number(mileage.toFixed(2));
        segment.properties.footage = footage;
        segment.properties.mileage = mileage;
        segment.properties.text = "".concat(mileage, " miles");
        ;
        segments.push(segment);
      });
    }
    return segments;
  }
  ;
  function updateSource() {
    var _this3 = this;
    var sources = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var sourceFeatures = {};
    var unsourceFeatures = [];
    var textSource = geoflo.map.getSource(geoflo.statics.constants.sources.COLDTEXT);
    var coldSource = geoflo.map.getSource(geoflo.statics.constants.sources.COLD);
    geoflo.updatingSource = true;
    textSource ? textSource.setData(turf.featureCollection([])) : false;
    coldSource ? coldSource.setData(turf.featureCollection([])) : false;
    geoflo.map.getSource(geoflo.statics.constants.sources.SELECT).setData(turf.featureCollection([]));
    coldFeatures.forEach(function (feature) {
      delete feature.properties["new"];
      delete feature.properties.offset;
      var source = feature.source;
      if (sources.length && !sources.includes(source)) return;
      if (!source) return unsourceFeatures.push(feature);
      if (!sourceFeatures[source]) sourceFeatures[source] = [];
      sourceFeatures[source].push(feature);
    });
    if (!coldFeatures.length) {
      geoflo.Layers.getCustomLayers().forEach(function (layer) {
        if (!layer.details || !layer.details.source) return;
        var source = layer.details.source;
        if (!geoflo.map.getSource(source)) return false;
        geoflo.map.getSource(source).setData(turf.featureCollection([]));
      });
    }
    Object.entries(sourceFeatures).forEach(function (entry) {
      var source = entry[0];
      var features = entry[1];
      if (!geoflo.map.getSource(source)) return unsourceFeatures.push(features);
      setLineOffset(features, source);
    });
    setLineOffset(unsourceFeatures.flat(), geoflo.statics.constants.sources.COLD);
    setTimeout(function () {
      _this3.setFeaturesState(coldFeatures, {
        hidden: false
      });
    }, 100);
    geoflo.fire('features.update', {
      features: coldFeatures
    });
    sourceFeatures = null;
    unsourceFeatures = null;
    geoflo.updatingSource = false;
    return coldFeatures;
  }
  ;
  function setLineText(segment) {
    segment = geoflo.Utilities.cloneDeep(segment);
    segment.properties.type = this.currentType;
    var text = turf.point(segment.geometry.coordinates[1]);
    var units = this.getUnits(segment);
    var unit = 'feet';
    units = this.convertUnits(segment, units, unit);
    text.properties.units = units;
    text.properties.unit = unit;
    text.properties.text = "".concat(units, " ").concat(unit);
    text.properties.transform = 'uppercase';
    text.properties.anchor = 'bottom-left';
    this.textFeatures.push(text);
    return text;
  }
  function setLineOffset(features, source) {
    if (!features || !features.length || !source || !geoflo.map.getSource(source)) return false;
    if (!geoflo.options.offsetOverlappingLines) return geoflo.map.getSource(source).setData(turf.featureCollection(features));
    var mesh = new geoflo.Mesh(features, true);
    var offset = mesh.getFeatures();
    offset.forEach(function (feature) {
      var f = features.find(function (fe) {
        return fe.id === feature.parent;
      });
      if (!f) return;
      feature.source = source;
      feature.properties.style = f.properties.style || feature.properties.style;
      setOverlapOffset(offset, feature);
    });
    geoflo.map.getSource(source).setData(turf.featureCollection(offset));
    geoflo.fire('features.offset', {
      features: features,
      offset: offset,
      source: source
    });
    mesh = null;
    offset = null;
  }
  ;
  function setOverlapOffset(features, feature) {
    if (!geoflo.options.offsetOverlappingLines) return false;
    if (!isPolyline(feature)) return false;
    if (feature.properties.offset) return false;
    var offset = 6;
    var overlaps = [];
    features.forEach(function (f) {
      if (!isPolyline(f)) return false;
      if (f.parent === feature.parent) return false;
      if (f.properties.offset) return false;
      var overlap = turf.booleanOverlap(f, feature) || turf.booleanWithin(f, feature);
      if (!overlap) return false;
      overlaps.push(f);
    }, this);
    overlaps.forEach(function (f) {
      f.properties.offset = offset;
      offset = offset * 2;
    }, this);
  }
  ;
  function setWithinOffset(features) {
    if (!geoflo.options.offsetOverlappingLines) return false;
    var adder = 4;
    var miles = 0.00189394; // 10 Feet
    var explode = turf.explode(turf.featureCollection(features));
    if (!explode || !explode.features.length) return;
    explode.features.forEach(function (feature) {
      if (feature.properties.offset) return false;
      var buffer = turf.buffer(feature, miles, {
        units: 'miles'
      });
      var within = turf.pointsWithinPolygon(explode, buffer);
      if (!within || !within.features.length) return;
      var offset = adder;
      within.features.forEach(function (f) {
        if (f.properties.id === feature.properties.id || f.properties.offset) return;
        f.properties.offset = offset;
        offset = offset + adder;
      });
    });
  }
  ;
  function isPolyline(feature) {
    if (!feature) return false;
    var type = geoflo.Layers.getLayerType(feature.source);
    return turf.getType(feature) === 'LineString';
  }
  ;
  function isPolygon(feature) {
    if (!feature) return false;
    var type = geoflo.Layers.getLayerType(feature.source);
    return turf.getType(feature) === 'Polygon' || feature.properties.type === 'Polygon' || type === 'Polygon';
  }
  ;
  function isRectangle(feature) {
    if (!feature) return false;
    var type = geoflo.Layers.getLayerType(feature.source);
    return turf.getType(feature) === 'Polygon' && feature.properties.type === 'Rectangle' || type === 'Rectangle';
  }
  ;
  function isPoint(feature) {
    if (!feature) return false;
    var type = geoflo.Layers.getLayerType(feature.source);
    if (turf.getType(feature) === 'Point' && (!feature.properties.type || feature.properties.type === 'Circle')) return true;
    if (turf.getType(feature) === 'Point' && (type === 'Point' || type === 'Circle')) return true;
    return turf.getType(feature) === 'Point' && feature.properties.type !== 'Text' && feature.properties.type !== 'Icon' && feature.properties.type !== 'Image';
  }
  ;
  function isText(feature) {
    if (!feature) return false;
    var type = geoflo.Layers.getLayerType(feature.source);
    if (type === 'Text') return true;
    return turf.getType(feature) === 'Point' && feature.properties.type === 'Text';
  }
  ;
  function isIcon(feature) {
    if (!feature) return false;
    var type = geoflo.Layers.getLayerType(feature.source);
    if (type === 'Icon') return true;
    return turf.getType(feature) === 'Point' && feature.properties.type === 'Icon';
  }
  ;
  function isImage(feature) {
    if (!feature) return false;
    var type = geoflo.Layers.getLayerType(feature.source);
    if (type === 'Image') return true;
    return turf.getType(feature) === 'Point' && feature.properties.type === 'Image';
  }
  ;
  function getType(feature) {
    if (!feature) return null;
    return isRectangle(feature) ? 'Rectangle' : isPolygon(feature) ? 'Polygon' : isPolyline(feature) ? 'Polyline' : isText(feature) ? 'Text' : isIcon(feature) ? 'Icon' : isImage(feature) ? 'Image' : isPoint(feature) ? 'Circle' : null;
  }
  ;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Features);

/***/ }),

/***/ "./src/Layers.js":
/*!***********************!*\
  !*** ./src/Layers.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * @mixin
 * @memberof module:geoflo
 * @name Layers
 * @description This module provides the layer functionality for the Geoflo application. It allows users to add, remove, and manipulate layers on the map.
 * @param {Object} options - The options object to configure the object.
 * @returns {Object} Returns the Layers object.
 */

var Layers = function Layers() {
  var geoflo = this.geoflo;
  if (!geoflo.map) throw new Error('No map object provided!');
  var Layers = this;
  var map = geoflo.map;
  var id = geoflo.id;
  var layerTypes = {
    Polygon: ['-fill', '-border'],
    Polyline: ['-line', '-dash', '-buffer'],
    Point: ['-circle', '-icon', '-cluster-circle', '-cluster-icon', '-count-icon', '-count-text'],
    Image: ['-image'],
    All: ['-fill', '-border', '-line', '-dash', '-buffer', '-circle', '-icon', '-cluster-circle', '-cluster-icon', '-count-icon', '-count-text', '-image']
  };
  this.options = {};
  this.sources = [];
  this.layers = [];
  this._layers = [];
  this._sources = [];

  /** 
   * @function
      * @memberof module:geoflo.Layers
   * @name init
   * @description Initializes the object with the provided options and refreshes it.
   * @param {Object} options - The options object to configure the object.
   * @returns {Object} The refreshed object with the updated options.
   */
  this.init = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.options = Object.assign(this.options, options);
    this.defaultLayers = [{
      source: geoflo.statics.constants.sources.COLD,
      id: id + '-fill-cold',
      type: 'fill',
      layout: {},
      filter: ["==", "$type", "Polygon"],
      paint: {
        'fill-color': geoflo.options.colors.secondaryCold,
        'fill-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 0.3]
      }
    }, {
      source: geoflo.statics.constants.sources.COLD,
      id: id + '-line-cold',
      type: 'line',
      layout: {
        'line-cap': 'round',
        'line-join': 'miter'
      },
      paint: {
        'line-color': geoflo.options.colors.primaryCold,
        'line-width': 4,
        'line-gap-width': ["match", ["get", "type"], "Polygon", 0, 0],
        'line-offset': ['case', ["boolean", ["has", "offset"], true], ["get", "offset"], 0],
        'line-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 1]
      }
    }, {
      source: geoflo.statics.constants.sources.COLD,
      id: id + '-circle-cold',
      filter: ['all', ['==', ['get', 'type'], 'Circle'], ["!=", ["geometry-type"], "Polygon"]],
      type: 'circle',
      paint: {
        'circle-radius': {
          'base': 6,
          'stops': [[10, 8], [14, 10]]
        },
        'circle-stroke-width': 2,
        'circle-color': geoflo.options.colors.primaryCold,
        'circle-stroke-color': geoflo.options.colors.secondaryCold,
        'circle-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 1],
        'circle-stroke-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 1]
      }
    }, {
      source: geoflo.statics.constants.sources.COLD,
      id: id + '-icon-cold',
      type: 'symbol',
      filter: ['==', ['get', 'type'], 'Icon'],
      layout: {
        'visibility': 'visible',
        'icon-optional': true,
        'text-field': ['get', 'primaryIcon', ['get', 'style', ['properties']]],
        'text-size': {
          'base': 16,
          'stops': [[10, 16], [14, 12]]
        },
        'text-line-height': 1,
        'text-padding': 0,
        'text-offset': [0, 0.2],
        'text-justify': 'auto',
        'text-anchor': 'center',
        'text-allow-overlap': true,
        'text-font': ['Font Awesome 6 Pro Solid'],
        'text-ignore-placement': true
      },
      paint: {
        'text-translate-anchor': 'viewport',
        'text-halo-width': 0,
        'text-halo-color': geoflo.options.colors.primaryCold,
        'text-color': geoflo.options.colors.secondaryBackground,
        'text-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 1]
      }
    }, {
      source: geoflo.statics.constants.sources.COLD,
      id: id + '-text-cold',
      type: 'symbol',
      filter: ["==", "$type", "Point"],
      layout: {
        "symbol-placement": "point",
        'text-field': ['get', 'text'],
        'text-font': ['DIN Pro Regular', 'DIN Pro Italic', 'Arial Unicode MS Regular', 'DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
        'text-keep-upright': true,
        'text-size': 18,
        'text-justify': ['get', 'justify'],
        'text-letter-spacing': 0.05,
        'text-line-height': 1.2,
        'text-max-angle': 10,
        'text-offset': [0, 0],
        'text-padding': 2,
        'text-rotate': 0,
        'text-transform': ['get', 'transform']
      },
      paint: {
        'text-color': geoflo.options.colors.primaryCold,
        'text-halo-color': geoflo.options.colors.primaryBackground,
        'text-halo-width': 0.5,
        'text-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 1]
      }
    }, {
      source: geoflo.statics.constants.sources.COLD,
      id: id + '-text-icon-cold',
      type: 'symbol',
      filter: ['==', ['get', 'type'], 'Text'],
      layout: {
        'visibility': 'visible',
        'icon-optional': true,
        'text-field': ['get', 'primaryIcon', ['get', 'style', ['properties']]],
        'text-size': {
          'base': 16,
          'stops': [[10, 16], [14, 12]]
        },
        'text-line-height': 1,
        'text-padding': 0,
        'text-offset': [0, 0.2],
        'text-justify': 'auto',
        'text-anchor': 'center',
        'text-allow-overlap': true,
        'text-font': ['Font Awesome 6 Pro Solid'],
        'text-ignore-placement': true
      },
      paint: {
        'text-translate-anchor': 'viewport',
        'text-halo-width': 0,
        'text-halo-color': geoflo.options.colors.primaryCold,
        'text-color': geoflo.options.colors.secondaryBackground,
        'text-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 1]
      }
    }, {
      id: geoflo.statics.constants.layers.MESH + '-line',
      source: geoflo.statics.constants.sources.MESH,
      type: "line",
      paint: {
        "line-color": geoflo.options.colors.primaryBase,
        "line-width": 2,
        "line-opacity": 0.3
      }
    }, {
      id: geoflo.statics.constants.layers.MESH + '-circle',
      source: geoflo.statics.constants.sources.MESH,
      type: 'circle',
      paint: {
        'circle-radius': 2,
        'circle-color': geoflo.options.colors.primaryBase,
        'circle-opacity': 0.3
      }
    }, {
      source: geoflo.statics.constants.sources.HOT,
      id: id + '-fill-hot',
      type: 'fill',
      layout: {},
      filter: ["==", "$type", "Polygon"],
      paint: {
        'fill-color': geoflo.options.colors.secondaryHot,
        'fill-opacity': ['case', ["boolean", ["has", "new"], true], 0.5, 0.1]
      }
    }, {
      'source': geoflo.statics.constants.sources.HOT,
      'id': id + '-line-hot',
      'type': 'line',
      'layout': {
        'line-cap': 'round',
        'line-join': 'round'
      },
      'paint': {
        'line-color': geoflo.options.colors.primaryHot,
        'line-width': 4,
        'line-dasharray': [1, 2]
      }
    }, {
      'source': geoflo.statics.constants.sources.HOT,
      'id': id + '-point-hot',
      'filter': ['==', '$type', 'Point'],
      'type': 'circle',
      //'filter': ["==", 0, ['number', ['get', 'painting']]],
      'paint': {
        'circle-radius': ["match", ["get", "type"], "Circle", 10, 4],
        'circle-stroke-width': 2,
        'circle-color': geoflo.options.colors.primaryHot,
        'circle-stroke-color': geoflo.options.colors.secondaryHot
      }
    }, {
      source: geoflo.statics.constants.sources.HOT,
      id: id + '-icon-hot',
      filter: ['==', ['get', 'type'], 'Icon'],
      type: 'symbol',
      layout: {
        'visibility': 'visible',
        'icon-optional': true,
        'text-field': ['get', 'primaryIcon', ['get', 'style', ['properties']]],
        'text-size': {
          'base': 16,
          'stops': [[10, 16], [14, 12]]
        },
        'text-line-height': 1,
        'text-padding': 0,
        'text-offset': [0, 0.2],
        'text-justify': 'auto',
        'text-anchor': 'center',
        'text-allow-overlap': true,
        'text-font': ['Font Awesome 6 Pro Solid'],
        'text-ignore-placement': true
      },
      paint: {
        'text-translate-anchor': 'viewport',
        'text-halo-color': geoflo.options.colors.primaryHot,
        'text-halo-width': 0,
        //[ 'case', ['boolean', ['feature-state', 'hover'], false], 0.5, 0 ],
        'text-color': geoflo.options.colors.secondaryHot
      }
    }, {
      source: geoflo.statics.constants.sources.HOT,
      id: id + '-image-hot',
      filter: ['==', ['get', 'type'], 'Image'],
      type: 'symbol',
      layout: {
        'visibility': 'visible',
        'icon-image': ['get', 'primaryImage', ['get', 'style', ['properties']]],
        'icon-size': ['interpolate', ['linear'], ['zoom'], 1, 0.4, 15, 1],
        'icon-allow-overlap': true,
        'icon-anchor': 'bottom'
      }
    }, {
      source: geoflo.statics.constants.sources.PIN,
      id: id + '-fill-pin',
      type: 'fill',
      layout: {},
      filter: ["==", "$type", "Polygon"],
      paint: {
        'fill-color': geoflo.options.colors.primaryHot,
        'fill-opacity': ['case', ["boolean", ["has", "new"], true], 0.5, 0.1]
      }
    }, {
      'source': geoflo.statics.constants.sources.PIN,
      'id': id + '-line-pin',
      'type': 'line',
      'layout': {
        'line-cap': 'round',
        'line-join': 'round'
      },
      'paint': {
        'line-color': geoflo.options.colors.primaryDebug,
        'line-width': 4,
        'line-dasharray': [1, 2]
      }
    }, {
      'source': geoflo.statics.constants.sources.PIN,
      'id': id + '-point-pin',
      'filter': ['==', '$type', 'Point'],
      'type': 'circle',
      //'filter': ["==", 0, ['number', ['get', 'painting']]],
      'paint': {
        'circle-radius': ["match", ["get", "type"], "Circle", 10, 4],
        'circle-stroke-width': 2,
        'circle-color': geoflo.options.colors.primaryDebug,
        'circle-stroke-color': geoflo.options.colors.primaryHot
      }
    }, {
      source: geoflo.statics.constants.sources.PIN,
      id: id + '-icon-pin',
      filter: ['==', ['get', 'type'], 'Icon'],
      type: 'symbol',
      layout: {
        'visibility': 'visible',
        'icon-optional': true,
        'text-field': ['get', 'primaryIcon', ['get', 'style', ['properties']]],
        'text-size': {
          'base': 16,
          'stops': [[10, 16], [14, 12]]
        },
        'text-line-height': 1,
        'text-padding': 0,
        'text-offset': [0, 0.2],
        'text-justify': 'auto',
        'text-anchor': 'center',
        'text-allow-overlap': true,
        'text-font': ['Font Awesome 6 Pro Solid'],
        'text-ignore-placement': true
      },
      paint: {
        'text-translate-anchor': 'viewport',
        'text-halo-color': geoflo.options.colors.primaryDebug,
        'text-halo-width': 0,
        //[ 'case', ['boolean', ['feature-state', 'hover'], false], 0.5, 0 ],
        'text-color': geoflo.options.colors.primaryHot
      }
    }, {
      source: geoflo.statics.constants.sources.PIN,
      id: id + '-image-pin',
      filter: ['==', ['get', 'type'], 'Image'],
      type: 'symbol',
      layout: {
        'visibility': 'visible',
        'icon-image': ['get', 'primaryImage', ['get', 'style', ['properties']]],
        'icon-size': ['interpolate', ['linear'], ['zoom'], 1, 0.4, 15, 1],
        'icon-allow-overlap': true,
        'icon-anchor': 'bottom'
      }
    }, {
      'source': geoflo.statics.constants.sources.HOTTEXT,
      'id': id + '-text-hot',
      'type': 'symbol',
      'layout': {
        'symbol-placement': 'point',
        'text-field': ['get', 'text'],
        'text-font': ['Arial Unicode MS Regular', 'DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
        'text-keep-upright': true,
        'text-anchor': ['get', 'anchor'],
        'text-size': 18,
        'text-justify': ['get', 'justify'],
        'text-letter-spacing': 0.1,
        'text-line-height': 1.2,
        'text-max-angle': 10,
        'text-offset': [0, -1.5],
        'text-padding': 2,
        'text-rotate': 0,
        'text-transform': ['get', 'transform']
      },
      'paint': {
        'text-color': geoflo.options.colors.primaryText,
        'text-halo-color': geoflo.options.colors.primaryBackground,
        'text-halo-width': 1,
        'text-opacity': 1
      }
    }, {
      'source': geoflo.statics.constants.sources.SNAP,
      'id': id + '-point-snap',
      'type': 'circle',
      'filter': ['==', '$type', 'Point'],
      'paint': {
        'circle-radius': ["match", ["get", "type"], "Circle", 6, "Icon", 0, 6],
        'circle-stroke-width': 2,
        'circle-color': geoflo.options.colors.primarySnap,
        'circle-stroke-color': geoflo.options.colors.secondarySnap
      }
    }, {
      source: geoflo.statics.constants.sources.SNAP,
      id: id + '-icon-snap',
      type: 'symbol',
      filter: ['==', ['get', 'type'], 'Icon'],
      layout: {
        'visibility': 'visible',
        'icon-optional': true,
        'text-field': ['get', 'primaryIcon', ['get', 'style', ['properties']]],
        'text-size': {
          'base': 18,
          'stops': [[10, 18], [14, 16]]
        },
        'text-line-height': 1,
        'text-padding': 0,
        'text-offset': [0, 0.2],
        'text-justify': 'auto',
        'text-anchor': 'center',
        'text-allow-overlap': true,
        'text-font': ['Font Awesome 6 Pro Solid'],
        'text-ignore-placement': true
      },
      paint: {
        'text-translate-anchor': 'viewport',
        'text-halo-color': geoflo.options.colors.primarySnap,
        'text-halo-width': 0,
        //[ 'case', ['boolean', ['feature-state', 'hover'], false], 0.5, 0 ],
        'text-color': geoflo.options.colors.secondarySnap
      }
    }, {
      source: geoflo.statics.constants.sources.SNAP,
      id: id + '-image-snap',
      filter: ['==', ['get', 'type'], 'Image'],
      type: 'symbol',
      layout: {
        'visibility': 'visible',
        'icon-image': ['get', 'primaryImage', ['get', 'style', ['properties']]],
        'icon-size': ['interpolate', ['linear'], ['zoom'], 1, 0.4, 15, 1],
        'icon-allow-overlap': true,
        'icon-anchor': 'bottom'
      }
    }, {
      'source': geoflo.statics.constants.sources.SNAP,
      'id': id + '-line-snap',
      'type': 'line',
      //'filter': ["==", "$type", "LineString"],
      'layout': {
        'visibility': 'visible',
        'line-cap': 'round',
        'line-join': 'round'
      },
      'paint': {
        'line-color': geoflo.options.colors.secondarySnap,
        'line-width': 4,
        'line-dasharray': [1, 2]
      }
    }, {
      'source': geoflo.statics.constants.sources.ROUTE,
      'id': id + '-line-route',
      'type': 'line',
      'filter': ["==", "$type", "LineString"],
      'layout': {
        'visibility': 'visible',
        'line-cap': 'round',
        'line-join': 'round'
      },
      'paint': {
        'line-color': geoflo.options.colors.error,
        'line-width': 4,
        'line-dasharray': []
      }
    }, {
      'source': geoflo.statics.constants.sources.VERTEX,
      'id': id + '-point-vertex',
      'type': 'circle',
      'filter': ['==', "$type", 'LineString'],
      'paint': {
        'circle-radius': 4,
        'circle-stroke-width': 3,
        'circle-color': geoflo.options.colors.primaryVertex,
        'circle-stroke-color': geoflo.options.colors.secondaryVertex
      }
    }, {
      'source': geoflo.statics.constants.sources.GAMEPAD,
      'id': id + '-gamepad',
      'type': 'symbol',
      'layout': {
        'visibility': 'visible',
        'icon-image': 'gamepad',
        'icon-size': 0.25
      }
    }];
    this.selectLayers = [{
      'source': geoflo.statics.constants.sources.SELECT,
      'id': id + '-line-select',
      'type': 'line',
      'layout': {
        'visibility': 'visible',
        'line-cap': 'round',
        'line-join': 'round'
      },
      'paint': {
        'line-color': geoflo.options.colors.secondarySelect,
        'line-width': 4
      },
      'metadata': {
        types: ['Polyline', 'Polygon', 'Rectangle']
      }
    }, {
      'source': geoflo.statics.constants.sources.SELECT,
      'id': id + '-fill-select',
      'type': 'fill',
      'layout': {},
      'filter': ["==", "$type", "Polygon"],
      'paint': {
        'fill-color': geoflo.options.colors.primarySelect,
        'fill-opacity': 0.4
      },
      'metadata': {
        types: ['Polygon', 'Rectangle']
      }
    }, {
      'source': geoflo.statics.constants.sources.SELECT,
      'id': id + '-point-select',
      'filter': ['all', ['!=', ['get', 'type'], 'Text'], ["==", ["geometry-type"], "Point"]],
      'type': 'circle',
      'layout': {
        'visibility': 'visible'
      },
      'paint': {
        'circle-radius': 10,
        'circle-stroke-width': 3,
        'circle-color': geoflo.options.colors.primarySelect,
        'circle-stroke-color': geoflo.options.colors.secondarySelect,
        'circle-stroke-opacity': 1,
        'circle-opacity': 0.8
      },
      'metadata': {
        types: ['Point', 'Circle', 'Marker', 'Icon']
      }
    }, {
      'source': geoflo.statics.constants.sources.SELECT,
      'id': id + '-symbol-select',
      'filter': ['==', ['get', 'type'], 'Icon'],
      'type': 'symbol',
      'layout': {
        'visibility': 'visible',
        'icon-optional': true,
        'symbol-placement': 'point',
        'text-rotation-alignment': 'viewport',
        'text-field': ['get', 'primaryIcon', ['get', 'style', ['properties']]],
        'text-rotate': ['get', 'rotate', ['get', 'style', ['properties']]],
        'text-size': 14,
        'text-line-height': 1,
        'text-padding': 0,
        'text-offset': [0, 0.2],
        'text-justify': 'auto',
        'text-anchor': 'center',
        'text-allow-overlap': true,
        'text-font': ['Font Awesome 6 Pro Solid'],
        'text-ignore-placement': true
      },
      'paint': {
        'text-translate-anchor': 'viewport',
        'text-halo-color': geoflo.options.colors.secondarySelect,
        'text-halo-width': 2,
        'text-color': geoflo.options.colors.primaryBackground
      },
      'metadata': {
        types: ['Icon']
      }
    }, {
      'source': geoflo.statics.constants.sources.SELECT,
      'id': id + '-text-select',
      'filter': ['==', ['get', 'type'], 'Text'],
      'type': 'symbol',
      'layout': {
        'visibility': 'visible',
        "symbol-placement": "point",
        'text-rotation-alignment': 'viewport',
        'text-field': ['get', 'text'],
        'text-font': ['DIN Pro Regular', 'DIN Pro Italic', 'Arial Unicode MS Regular', 'DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
        'text-keep-upright': true,
        'text-allow-overlap': true,
        'text-size': 18,
        'text-justify': ['get', 'justify'],
        'text-letter-spacing': 0.12,
        'text-line-height': 1.2,
        'text-max-angle': 10,
        'text-offset': [0, 1.5],
        'text-padding': 2,
        'text-rotate': 0,
        'text-transform': ['get', 'transform']
      },
      'paint': {
        'text-color': geoflo.options.colors.primaryBackground,
        'text-halo-color': geoflo.options.colors.primaryColor,
        'text-halo-width': 2,
        'text-opacity': 1
      },
      'metadata': {
        types: ['Text']
      }
    }, {
      'source': geoflo.statics.constants.sources.SELECT,
      'id': id + '-image-select',
      'filter': ['==', ['get', 'type'], 'Image'],
      'type': 'symbol',
      'layout': {
        'visibility': 'visible',
        'icon-image': ['get', 'primaryImage', ['get', 'style', ['properties']]],
        'icon-size': ['interpolate', ['linear'], ['zoom'], 1, 0.4, 15, 1],
        'icon-allow-overlap': true,
        'icon-anchor': 'bottom'
      },
      'metadata': {
        types: ['Image']
      }
    }];
    return this.refresh({
      init: true
    });
  };

  /**
   * @function
      * @memberof module:geoflo.Layers
   * @name refresh
   * @description This function refreshes the map by removing existing layers and sources, adding default layers and sources, and rebuilding the layers.
   * @param {Object} options - Optional parameter for additional options.
   * @returns {Array} - An array of layers after the refresh operation.
   */
  this.refresh = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var options,
      layers,
      _args = arguments;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
          if (!options.select) {
            _context.next = 3;
            break;
          }
          return _context.abrupt("return", geoflo.Layers.moveLayers(this.selectLayers));
        case 3:
          if (options.init) {
            _context.next = 5;
            break;
          }
          return _context.abrupt("return", this.init(options));
        case 5:
          layers = geoflo.Utilities.cloneDeep(this._layers);
          this._layers = [];
          this._sources = [];
          this.removeEventListeners();
          this.removeLayers(this.defaultLayers);
          this.removeLayers(this.selectLayers);
          this.removeSources(Object.values(geoflo.statics.constants.sources));
          this.addEventListeners();
          this.addSources(Object.values(geoflo.statics.constants.sources));
          this.addLayers(this.defaultLayers, this.options);
          _context.next = 17;
          return buildLayers.call(this, layers);
        case 17:
          this.addLayers(this.selectLayers, this.options);
          setTimeout(function () {
            geoflo.Layers.moveLayers(this.selectLayers);
          }, 250);
          return _context.abrupt("return", this.getLayers());
        case 20:
        case "end":
          return _context.stop();
      }
    }, _callee, this);
  }));

  /**
   * @function
      * @memberof module:geoflo.Layers
   * @name setCustomLayers
   * @description This function takes an array of custom layers and options, builds the layers using the buildLayers function, and returns the resulting layers.
   * @param {Array} layers - An array of custom layers to be processed.
   * @param {Object} options - Additional options for building the layers.
   * @returns {Promise<Array>} The processed custom layers.
   */
  this.setCustomLayers = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(layers, options) {
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            if (layers) {
              _context2.next = 2;
              break;
            }
            return _context2.abrupt("return", []);
          case 2:
            _context2.next = 4;
            return buildLayers.call(this, layers, options);
          case 4:
            return _context2.abrupt("return", _context2.sent);
          case 5:
          case "end":
            return _context2.stop();
        }
      }, _callee2, this);
    }));
    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }();

  /**
   * @function
      * @memberof module:geoflo.Layers
   * @name getCustomLayers
   * @description Retrieves the custom layers stored in the object.
   * @returns {Array} An array containing the custom layers.
   */
  this.getCustomLayers = function () {
    return this._layers;
  };

  /**
   * @function
      * @memberof module:geoflo.Layers
   * @name hasCustomLayers
   * @description This function determines if there are any custom layers present in the application.
   * @returns {number} The number of custom layers available.
   */
  this.hasCustomLayers = function () {
    return this.getCustomLayers().length;
  };

  /**
   * @function
      * @memberof module:geoflo.Layers
   * @name getFeatures
   * @description Retrieves the features from a source based on the provided ID.
   * @param {string} id - The ID of the source to retrieve features from.
   * @returns {Array} An array of features from the specified source, or an empty array if the source or features are not found.
   */
  this.getFeatures = function (id) {
    var source = this.getSource(id);
    if (!source || !source._data) return [];
    return source._data.features;
  };

  /**
   * @function
      * @memberof module:geoflo.Layers
   * @name getSelection
   * @description This function determines the selected feature based on the provided features array and coordinates.
   * @param {Array} features - An array of features to select from.
   * @param {Object} coords - The coordinates of the selected feature.
   * @returns {boolean} Returns true if a feature is selected, false otherwise.
   */
  this.getSelection = function () {
    var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var coords = arguments.length > 1 ? arguments[1] : undefined;
    var feature = features && features.length ? features[0] : false;
    if (!feature) return false;
    if (feature.properties.cluster) return Layers.onClusterClick(feature, coords), false;
    return true;
  };

  /**
   * @function
      * @memberof module:geoflo.Layers
   * @name getType
   * @description This function takes a geometry type as input and returns the corresponding general type (Polygon, Polyline, or Point).
   * @param {string} type - The type of geometry to be evaluated.
   * @returns {string|boolean} Returns the general type of the geometry (Polygon, Polyline, Point) or false if the type is not recognized.
   */
  this.getType = function (type) {
    return type === 'Polygon' || type === 'Rectangle' ? 'Polygon' : type === 'Polyline' || type === 'LineString' || type === 'Line' ? 'Polyline' : type === 'Point' || type === 'Circle' || type === 'Marker' || type === 'Icon' || type === 'Text' ? 'Point' : type === 'Image' ? 'Image' : false;
  };

  /**
   * @function
      * @memberof module:geoflo.Layers
   * @name getSources
   * @description Retrieves the sources stored in the object.
   * @returns {Array} An array containing the sources.
   */
  this.getSources = function () {
    return this.sources;
  };

  /**
   * @function
      * @memberof module:geoflo.Layers
   * @name getSource
   * @description Retrieves a specific source object by its ID from the list of sources.
   * @param {string} id - The ID of the source to retrieve.
   * @returns {object|boolean} The source object with the specified ID if found, otherwise false.
   */
  this.getSource = function (id) {
    if (!id) return false;
    var sources = this.getSources();
    return sources.find(function (source) {
      return source.id === id;
    });
  };

  /** 
   * @function
      * @memberof module:geoflo.Layers
   * @name getSourceIds
   * @description Retrieves the IDs of all sources.
   * @returns {Array} An array of source IDs.
   */
  this.getSourceIds = function () {
    return this.getSources().map(function (s) {
      return s.id;
    });
  };

  /**
   * @function
      * @memberof module:geoflo.Layers
   * @name getLayers
   * @description Retrieves the layers array from the object.
   * @returns {Array} The layers array.
   */
  this.getLayers = function () {
    return this.layers;
  };

  /**
   * @function
      * @memberof module:geoflo.Layers
   * @name getLayer
   * @description Retrieves a layer based on the provided ID or source ID.
   * @param {string} id - The ID of the layer to retrieve.
   * @returns {object|boolean} The layer object if found, or false if not found.
   */
  this.getLayer = function (id, custom) {
    if (!id) return false;
    var layers = custom ? this.getCustomLayers() : this.getLayers();
    var layer = layers.find(function (layer) {
      return layer.id === id;
    });
    if (!layer) layer = layers.filter(function (layer) {
      return layer.source === id;
    });
    return layer;
  };

  /**
   * @function
      * @memberof module:geoflo.Layers
   * @name getLayerIds
   * @description Retrieves the IDs of the layers provided or the default layers if none are provided.
   * @param {Array} layers - An array of layer objects.
   * @returns {Array} An array of layer IDs.
   */
  this.getLayerIds = function (layers) {
    var _layers = layers || this.getCustomLayers();
    return _layers.map(function (l) {
      return l.id;
    });
  };
  this.getLayerType = function (id) {
    var type = '';
    var layer = this.getLayer(id, true);
    if (layer && layer.details) type = layer.details.type;
    return type;
  };

  /**
   * @function
      * @memberof module:geoflo.Layers
   * @name addSources
   * @description Adds multiple sources to the context with the given options.
   * @param {Array} sources - An array of sources to be added.
   * @param {Object} options - Additional options for adding the sources.
   * @returns {Array} - An array of all the added sources.
   */
  this.addSources = function () {
    var sources = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    sources.forEach(function (source) {
      this.addSource(source, false, options);
    }, this);
    geoflo.fire('sources.add', {
      sources: this.getSources()
    });
    return this.getSources();
  };

  /**
   * @function
      * @memberof module:geoflo.Layers
   * @name addSource
   * @description This function adds a new source to the map using the provided ID and type. It also accepts optional configuration options for the source.
   * @param {string} id - The unique identifier for the source.
   * @param {string} type - The type of the source (e.g., 'geojson', 'vector', 'raster', etc.).
   * @param {Object} [options={}] - Additional configuration options for the source (e.g., features, promoteId, clusterMaxZoom, clusterRadius).
   * @returns {Object} The newly added source object.
   */
  this.addSource = function (id, type) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    if (!id) throw new Error('No source was provided!');
    var opts = {
      type: options.type || "geojson",
      data: turf.featureCollection(options.features || []),
      promoteId: options.promoteId || 'id'
    };
    if (type && type === 'Point' && !options.noCluster) {
      opts = Object.assign(opts, {
        cluster: true,
        clusterMaxZoom: options.clusterMaxZoom || 14,
        clusterRadius: options.clusterRadius || 50
      });
    }
    map.addSource(id, opts);
    this.sources.push(map.getSource(id));
    geoflo.fire('source.add', {
      id: id,
      source: this.getSource(id)
    });
    return this.getSource(id);
  };

  /**
   * @function
      * @memberof module:geoflo.Layers
   * @name addLayers
   * @description Adds multiple layers to the map.
   * @param {Array} layers - An array of layers to be added to the map.
   * @param {Object} options - Additional options for adding the layers.
   * @returns {Array} - An array of layers that have been added to the map.
   */
  this.addLayers = function () {
    var layers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    layers.forEach(function (layer, index) {
      this.addLayer(layer, options, index);
    }, this);
    geoflo.fire('layers.add', {
      layers: this.getLayers()
    });
    buildEvents.call(this);
    return this.getLayers();
  };

  /**
   * @function
      * @memberof module:geoflo.Layers
   * @name addLayer
   * @description This function adds a layer to the map with the provided options. It also updates the layer's metadata, adds the layer to the map, and pushes the layer to the layers array. It triggers a 'layer.add' event and returns the added layer.
   * @param {Object} layer - The layer object to be added to the map.
   * @param {Object} [options={}] - Additional options for the layer.
   * @returns {Object} The added layer.
   */
  this.addLayer = function (layer) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var index = arguments.length > 2 ? arguments[2] : undefined;
    if (!layer || !layer.id) return false;
    layer.metadata = layer.metadata || options;
    if (map.getLayer(layer.id)) {
      if (!this.layers.find(function (l) {
        return l.id === layer.id;
      })) this.layers.push(layer);
      return this.getLayer(layer.id);
    }
    map.addLayer(layer);
    layer = map.getLayer(layer.id);
    if (!layer) return console.error(id, 'Layer Not Added!');
    this.layers.push(layer);
    geoflo.fire('layer.add', {
      id: layer.id,
      layer: this.getLayer(layer.id)
    });
    return this.getLayer(layer.id);
  };
  this.addTextLayer = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var layers = options.select ? this.getLayer(geoflo.statics.constants.sources.SELECT) : this.getCustomLayers();
    var field = options.field || 'text';
    this.removeTextLayer(options);
    layers.forEach(function (layer) {
      var id = layer.id + '-Text';
      var filter = ['all', ['==', ["geometry-type"], 'Point'], ["has", field]];
      if (options.filter) filter = options.filter;
      if (!options.select && options.ids) filter = ['in', 'id'].concat(_toConsumableArray(options.ids));
      var layout = Object.assign({}, {
        'visibility': 'visible',
        'symbol-placement': 'point',
        'text-rotation-alignment': 'viewport',
        'text-field': ['get', field],
        'text-keep-upright': true,
        'text-allow-overlap': true,
        'text-anchor': 'top',
        'text-size': 12,
        'text-justify': 'center',
        'text-letter-spacing': 0.25,
        'text-line-height': 1.2,
        'text-max-angle': 10,
        'text-offset': [0, 0.5],
        'text-padding': 2,
        'text-rotate': 0,
        'text-transform': 'none',
        'text-font': ['Arial Unicode MS Regular', 'DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
        'text-ignore-placement': false,
        'text-max-width': 15
      }, layer.text ? layer.text.layout || {} : {}, options.layout);
      var paint = Object.assign({}, {
        'text-translate-anchor': 'viewport',
        'text-halo-color': ['get', 'primaryColor', ['get', 'style', ['properties']]],
        'text-halo-width': 1.2,
        'text-color': ['get', 'secondaryColor', ['get', 'style', ['properties']]],
        'text-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['get', 'opacity', ['get', 'style', ['properties']]]]
      }, layer.text ? layer.text.paint || {} : {}, options.paint);
      var style = {
        id: id,
        type: 'symbol',
        source: layer.source || layer.details.source || id,
        slot: 'top',
        filter: filter,
        layout: layout,
        paint: paint,
        metadata: {
          text: true,
          name: id
        }
      };
      if (!map.getLayer(id)) map.addLayer(style);
      this.layers.push(map.getLayer(id));
    }, this);
    this.showTextLayers = true;
  };

  /**
   * @function
      * @memberof module:geoflo.Layers
   * @name removeSources
   * @description Removes sources from the map.
   * @param {Array} sources - An array of source IDs to be removed. If not provided, it defaults to all source IDs.
   * @returns {void}
   */
  this.removeSources = function (sources) {
    sources = sources || this.getSourceIds();
    sources.forEach(function (id) {
      this.removeSource(id);
    }, this);
    geoflo.fire('sources.remove', {
      removed: true
    });
  };

  /**
   * @function
      * @memberof module:geoflo.Layers
   * @name removeSource
   * @description This function removes a source from the map and the internal sources array based on the provided id.
   * @param {string} id - The id of the source to be removed.
   * @returns {string} The id of the removed source.
   */
  this.removeSource = function (id) {
    if (!id) return false;
    if (map.getSource(id)) map.removeSource(id);
    var index = -1;
    index = this.sources.findIndex(function (l) {
      return l.id === id;
    });
    if (index > -1) this.sources.splice(index, 1);
    geoflo.fire('source.remove', {
      removed: id
    });
    return id;
  };

  /**
   * @function
      * @memberof module:geoflo.Layers
   * @name removeLayers
   * @description Removes multiple layers from the context.
   * @param {Array} layers - An array of layer objects to be removed.
   * @returns {Array} - An array of IDs of the removed layers.
   */
  this.removeLayers = function (layers) {
    var ids = this.getLayerIds(layers);
    this.removeTextLayer();
    ids.forEach(function (id) {
      this.removeLayer(id);
    }, this);
    geoflo.fire('layers.remove', {
      removed: ids
    });
    return ids;
  };

  /**
   * @function
      * @memberof module:geoflo.Layers
   * @name removeLayer
   * @description This function removes a layer from the map and the layers array based on the provided id.
   * @param {string} id - The id of the layer to be removed.
   * @returns {string} The id of the removed layer.
   */
  this.removeLayer = function (id) {
    if (!id) return false;
    if (map.getLayer(id)) map.removeLayer(id);
    var index = -1;
    index = this.layers.findIndex(function (l) {
      return l.id === id;
    });
    if (index > -1) this.layers.splice(index, 1);
    geoflo.fire('layer.remove', {
      removed: id
    });
    return id;
  };
  this.removeTextLayer = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var layers = this.getLayers();
    layers.forEach(function (layer) {
      if (layer.metadata.text && map.getLayer(layer.id)) map.removeLayer(layer.id);
    }, this);
    this.showTextLayers = false;
  };

  /**
   * @function
      * @memberof module:geoflo.Layers
   * @name moveLayers
   * @description Moves the specified layers on the map.
   * @param {Array} layers - An array of layer objects to be moved on the map.
   * @returns {void}
   */
  this.moveLayers = function (layers) {
    layers = !layers ? this.defaultLayers || [] : layers;
    layers.forEach(function (layer) {
      if (geoflo.map.getLayer(layer.id)) geoflo.map.moveLayer(layer.id);
    });
  };

  /**
   * @function
      * @memberof module:geoflo.Layers
   * @name addEventListeners
   * @description Attaches event listeners based on the provided options.
   * @param {Object} options - An object containing configuration options for event listeners.
   * @returns {Object} - The result of the buildEvents function with the provided options.
   */
  this.addEventListeners = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return buildEvents.call(this, {
      on: true
    });
  };

  /**
   * @function
      * @memberof module:geoflo.Layers
   * @name removeEventListeners
   * @description Removes event listeners from the element.
   * @param {Object} options - An object containing options for removing event listeners.
   * @param {boolean} options.off - A boolean flag to indicate whether to turn off event listeners.
   * @returns {void}
   */
  this.removeEventListeners = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return buildEvents.call(this, {
      off: true
    });
  };

  /**
   * @function
   * @name onClusterClick
   * @memberof module:geoflo.Layers
   * @description Handles the click event on a cluster feature, expanding the cluster if applicable.
   *
   * @param {Object} feature - The cluster feature that was clicked.
   * @returns {boolean} Returns false if the feature does not have a source; otherwise, it performs an action without returning a value.
   */
  this.onClusterClick = function (feature) {
    if (!feature.source) return false;
    var source = map.getSource(feature.source);
    source.getClusterExpansionZoom(feature.properties.cluster_id, function (err, zoom) {
      if (!err) map.easeTo({
        center: feature.geometry.coordinates,
        zoom: zoom + 2
      });
    });
  };

  /**
   * @function
   * @name onLayerMouseover
   * @memberof module:geoflo.Layers
   * @description Handles the mouseover event on a layer, highlighting the features if certain conditions are met.
   *
   * @param {Object} event - The event object containing information about the mouseover event.
   * @returns {boolean} Returns false if editing, drawing, or viewing actions are active, if the layer is importing, or if there are no features; otherwise, it highlights the features.
   */
  this.onLayerMouseover = function (event) {
    return;
    var Map = app.Map;
    if (Map.getActions().editing || Map.getActions().drawing || Map.getActions().viewing) {
      return false;
    }
    ;
    if (app[app.ns('layer')]._importing) {
      return false;
    }
    if (!event.features.length) {
      return false;
    }
    Map.setHighlight({
      clear: true,
      features: event.features
    });
  };

  /**
   * @function
   * @name onLayerMouseout
   * @memberof module:geoflo.Layers
   * @description Handles the mouseout event for a layer, removing highlights if certain conditions are met.
   *
   * @param {Object} event - The event object associated with the mouseout event.
   * @returns {boolean} Returns false if the map is in editing, drawing, or viewing mode, or if the layer is being imported; otherwise, it returns undefined.
   */
  this.onLayerMouseout = function (event) {
    return;
    var Map = app.Map;
    if (Map.getActions().editing || Map.getActions().drawing || Map.getActions().viewing) {
      return false;
    }
    ;
    if (app[app.ns('layer')]._importing) {
      return false;
    }
    Map._removeHighlight();
  };
  this.init();
  function buildLayers() {
    return _buildLayers.apply(this, arguments);
  }
  function _buildLayers() {
    _buildLayers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      var _this = this;
      var layers,
        options,
        _args3 = arguments;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            layers = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : [];
            options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};
            _context3.next = 4;
            return buildText.call(this);
          case 4:
            if (layers.length) {
              _context3.next = 6;
              break;
            }
            return _context3.abrupt("return", false);
          case 6:
            _context3.next = 8;
            return Promise.all(layers.map(function (layer) {
              return buildLayer.call(_this, layer, options);
            }));
          case 8:
            setTimeout(function () {
              geoflo.Layers.moveLayers();
            }, 250);
            if (this.showTextLayers) this.addTextLayer();
            return _context3.abrupt("return", this.getLayers());
          case 11:
          case "end":
            return _context3.stop();
        }
      }, _callee3, this);
    }));
    return _buildLayers.apply(this, arguments);
  }
  function buildLayer(_x3, _x4) {
    return _buildLayer.apply(this, arguments);
  }
  function _buildLayer() {
    _buildLayer = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(layer, opts) {
      var _this2 = this;
      var details, options, layers, features, hasFeatures, style, error, type, metadata, source, settings, promises, results;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            details = !layer.details && layer.id ? layer : layer.details || {};
            options = layer.options || {};
            layers = layer.layers || [];
            features = layer.features || [];
            hasFeatures = features && features.length;
            style = layer.style || false;
            if (!details.id || !details.type) error = true;
            type = details.type === 'ALL' ? 'ALL' : this.getType(details.type);
            if (!type) error = true;
            metadata = {
              type: details.type
            };
            details["default"] ? metadata["default"] = true : metadata.custom = true;
            details.name ? metadata.name = details.name : false;
            source = details.source || details.id;
            metadata.source = source;
            if (details.style) delete details.style;
            settings = {
              type: type,
              source: source,
              id: details.id,
              types: layerTypes[type],
              style: style || {},
              filter: layer.filter,
              images: layer.images,
              details: details,
              options: options,
              layers: layers
            };
            if (!(type === 'ALL')) {
              _context5.next = 24;
              break;
            }
            promises = Object.keys(layerTypes).filter(function (key) {
              return key !== 'All';
            }).map(/*#__PURE__*/function () {
              var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(key) {
                var layerConfig;
                return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                  while (1) switch (_context4.prev = _context4.next) {
                    case 0:
                      layerConfig = _objectSpread(_objectSpread({}, settings), {}, {
                        type: key,
                        types: layerTypes[key]
                      });
                      return _context4.abrupt("return", key === 'Image' ? buildImage.call(_this2, layerConfig, options) : key === 'Polygon' ? buildPolygon.call(_this2, layerConfig, options) : key === 'Polyline' ? buildPolyline.call(_this2, layerConfig, options) : key === 'Point' ? buildPoint.call(_this2, layerConfig, options) : []);
                    case 2:
                    case "end":
                      return _context4.stop();
                  }
                }, _callee4);
              }));
              return function (_x5) {
                return _ref3.apply(this, arguments);
              };
            }());
            _context5.next = 20;
            return Promise.all(promises);
          case 20:
            results = _context5.sent;
            layers = results.flat();
            _context5.next = 53;
            break;
          case 24:
            if (!(type === 'Image')) {
              _context5.next = 30;
              break;
            }
            _context5.next = 27;
            return buildImage.call(this, settings, options);
          case 27:
            _context5.t0 = _context5.sent;
            _context5.next = 52;
            break;
          case 30:
            if (!(type === 'Polygon')) {
              _context5.next = 36;
              break;
            }
            _context5.next = 33;
            return buildPolygon.call(this, settings, options);
          case 33:
            _context5.t1 = _context5.sent;
            _context5.next = 51;
            break;
          case 36:
            if (!(type === 'Polyline')) {
              _context5.next = 42;
              break;
            }
            _context5.next = 39;
            return buildPolyline.call(this, settings, options);
          case 39:
            _context5.t2 = _context5.sent;
            _context5.next = 50;
            break;
          case 42:
            if (!(type === 'Point')) {
              _context5.next = 48;
              break;
            }
            _context5.next = 45;
            return buildPoint.call(this, settings, options);
          case 45:
            _context5.t3 = _context5.sent;
            _context5.next = 49;
            break;
          case 48:
            _context5.t3 = [];
          case 49:
            _context5.t2 = _context5.t3;
          case 50:
            _context5.t1 = _context5.t2;
          case 51:
            _context5.t0 = _context5.t1;
          case 52:
            layers = _context5.t0;
          case 53:
            this.removeLayers(layers);
            this.removeSource(source);
            this.addSource(source, type, options);
            this.addLayers(layers, metadata);
            removeLayer.call(this, {
              layer: details.id,
              source: source
            });
            settings.metadata = metadata;
            if (metadata.custom) {
              this._layers.push(settings);
              this._sources.push({
                id: source,
                type: type,
                options: options
              });
            }
            if (hasFeatures) geoflo.Features.addFeatures(features);
            return _context5.abrupt("return", new Promise(function (resolve, reject) {
              if (error) return resolve(error);
              var ready = setInterval(function () {
                var feats = geoflo.Layers.getFeatures(metadata.source);
                if (hasFeatures && !feats.length) return;
                if (!map.getSource(metadata.source)) return;
                clearInterval(ready);
                resolve({
                  layer: settings,
                  features: feats
                });
              }, 1);
            }));
          case 62:
          case "end":
            return _context5.stop();
        }
      }, _callee5, this);
    }));
    return _buildLayer.apply(this, arguments);
  }
  function buildText() {
    return _buildText.apply(this, arguments);
  }
  function _buildText() {
    _buildText = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
      var map;
      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) switch (_context8.prev = _context8.next) {
          case 0:
            map = geoflo.map;
            return _context8.abrupt("return", new Promise(/*#__PURE__*/function () {
              var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(resolve, reject) {
                var url;
                return _regeneratorRuntime().wrap(function _callee7$(_context7) {
                  while (1) switch (_context7.prev = _context7.next) {
                    case 0:
                      url = 'https://docs.mapbox.com/mapbox-gl-js/assets/popup.png';
                      if (!map.hasImage('text-marker')) {
                        _context7.next = 3;
                        break;
                      }
                      return _context7.abrupt("return", resolve(true));
                    case 3:
                      map.loadImage(url, /*#__PURE__*/function () {
                        var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(error, image) {
                          return _regeneratorRuntime().wrap(function _callee6$(_context6) {
                            while (1) switch (_context6.prev = _context6.next) {
                              case 0:
                                if (!error) {
                                  _context6.next = 2;
                                  break;
                                }
                                return _context6.abrupt("return", reject(error));
                              case 2:
                                if (!map.hasImage('text-marker')) {
                                  _context6.next = 4;
                                  break;
                                }
                                return _context6.abrupt("return", resolve(image));
                              case 4:
                                map.addImage('text-marker', image, {
                                  content: [25, 25, 115, 100],
                                  stretchX: [[25, 115]],
                                  stretchY: [[25, 100]],
                                  pixelRatio: 2,
                                  sdf: false
                                });
                                return _context6.abrupt("return", resolve(image));
                              case 6:
                              case "end":
                                return _context6.stop();
                            }
                          }, _callee6);
                        }));
                        return function (_x8, _x9) {
                          return _ref5.apply(this, arguments);
                        };
                      }());
                    case 4:
                    case "end":
                      return _context7.stop();
                  }
                }, _callee7);
              }));
              return function (_x6, _x7) {
                return _ref4.apply(this, arguments);
              };
            }()));
          case 2:
          case "end":
            return _context8.stop();
        }
      }, _callee8);
    }));
    return _buildText.apply(this, arguments);
  }
  function buildImage() {
    return _buildImage.apply(this, arguments);
  }
  function _buildImage() {
    _buildImage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
      var settings,
        options,
        layers,
        source,
        i,
        type,
        style,
        id,
        layout,
        paint,
        j,
        image,
        img,
        _args9 = arguments;
      return _regeneratorRuntime().wrap(function _callee9$(_context9) {
        while (1) switch (_context9.prev = _context9.next) {
          case 0:
            settings = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};
            options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};
            if (settings.source) {
              _context9.next = 4;
              break;
            }
            return _context9.abrupt("return", []);
          case 4:
            layers = [];
            source = settings.source;
            i = 0;
          case 7:
            if (!(i < settings.types.length)) {
              _context9.next = 36;
              break;
            }
            type = settings.types[i];
            style = settings.style;
            id = settings.id + type;
            if (!(!settings.images || !settings.images.length)) {
              _context9.next = 13;
              break;
            }
            return _context9.abrupt("continue", 33);
          case 13:
            j = 0;
          case 14:
            if (!(j < settings.images.length)) {
              _context9.next = 27;
              break;
            }
            image = settings.images[j];
            if (image) {
              _context9.next = 18;
              break;
            }
            return _context9.abrupt("continue", 24);
          case 18:
            _context9.next = 20;
            return loadImage(image);
          case 20:
            img = _context9.sent;
            if (img) {
              _context9.next = 23;
              break;
            }
            return _context9.abrupt("continue", 24);
          case 23:
            map.hasImage(image.id) ? map.updateImage(image.id, img, {
              pixelRatio: 2
            }) : map.addImage(image.id, img, {
              pixelRatio: 2
            });
          case 24:
            j++;
            _context9.next = 14;
            break;
          case 27:
            layout = Object.assign({}, {
              'visibility': options.visibility || 'visible',
              'icon-image': ['get', 'primaryImage', ['get', 'style', ['properties']]],
              'icon-size': ['interpolate', ['linear'], ['zoom'], 1, 0.6, 10, 0.8, 15, 1],
              'icon-allow-overlap': true,
              'icon-anchor': 'bottom'
            }, style.image ? style.image.layout || {} : {});
            paint = Object.assign({}, {
              'icon-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['get', 'opacity', ['get', 'style', ['properties']]]]]
            }, style.image ? style.image.paint || {} : {});
            style = {
              id: id,
              type: 'symbol',
              source: source,
              slot: style.slot || 'top',
              filter: settings.filter || ['==', "$type", "Point"],
              layout: layout,
              paint: paint
            };
            if (style) {
              _context9.next = 32;
              break;
            }
            return _context9.abrupt("continue", 33);
          case 32:
            layers.push(style);
          case 33:
            i++;
            _context9.next = 7;
            break;
          case 36:
            return _context9.abrupt("return", layers);
          case 37:
          case "end":
            return _context9.stop();
        }
      }, _callee9);
    }));
    return _buildImage.apply(this, arguments);
  }
  function buildPolygon() {
    return _buildPolygon.apply(this, arguments);
  }
  function _buildPolygon() {
    _buildPolygon = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
      var settings,
        options,
        layers,
        source,
        i,
        type,
        style,
        id,
        layout,
        paint,
        _args10 = arguments;
      return _regeneratorRuntime().wrap(function _callee10$(_context10) {
        while (1) switch (_context10.prev = _context10.next) {
          case 0:
            settings = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {};
            options = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : {};
            if (settings.source) {
              _context10.next = 4;
              break;
            }
            return _context10.abrupt("return", []);
          case 4:
            layers = [];
            source = settings.source;
            i = 0;
          case 7:
            if (!(i < settings.types.length)) {
              _context10.next = 18;
              break;
            }
            type = settings.types[i];
            style = settings.style;
            id = settings.id + type;
            if (type.includes('border')) {
              layout = Object.assign({}, {
                'visibility': options.visibility || 'visible'
              }, style.border ? style.border.layout || {} : {});
              paint = Object.assign({}, {
                'line-color': ['get', 'primaryColor', ['get', 'style', ['properties']]],
                'line-width': ['case', ["boolean", ['has', 'width', ['get', 'style', ['properties']]], true], ['get', 'width', ['get', 'style', ['properties']]], 2],
                'line-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 0.8]
              }, style.border ? style.border.paint || {} : {});
              style = {
                id: id,
                type: 'line',
                source: source,
                slot: style.slot || 'bottom',
                filter: style.border ? style.border.filter || ['==', "$type", "Polygon"] : ['==', '$type', 'Polygon'],
                layout: layout,
                paint: paint
              };
            } else if (type.includes('fill')) {
              layout = Object.assign({}, {
                'visibility': options.visibility || 'visible'
              }, style.fill ? style.fill.layout || {} : {});
              paint = Object.assign({}, {
                'fill-color': ['get', 'secondaryColor', ['get', 'style', ['properties']]],
                'fill-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 0.5]
              }, style.fill ? style.fill.paint || {} : {});
              style = {
                id: id,
                type: 'fill',
                source: source,
                slot: style.slot || 'bottom',
                filter: style.fill ? style.fill.filter || ['==', "$type", "Polygon"] : ['==', '$type', 'Polygon'],
                layout: layout,
                paint: paint
              };
            }
            if (style) {
              _context10.next = 14;
              break;
            }
            return _context10.abrupt("continue", 15);
          case 14:
            layers.push(style);
          case 15:
            i++;
            _context10.next = 7;
            break;
          case 18:
            return _context10.abrupt("return", layers);
          case 19:
          case "end":
            return _context10.stop();
        }
      }, _callee10);
    }));
    return _buildPolygon.apply(this, arguments);
  }
  function buildPolyline() {
    return _buildPolyline.apply(this, arguments);
  }
  function _buildPolyline() {
    _buildPolyline = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
      var settings,
        options,
        layers,
        source,
        i,
        type,
        style,
        id,
        layout,
        paint,
        _args11 = arguments;
      return _regeneratorRuntime().wrap(function _callee11$(_context11) {
        while (1) switch (_context11.prev = _context11.next) {
          case 0:
            settings = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {};
            options = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : {};
            if (settings.source) {
              _context11.next = 4;
              break;
            }
            return _context11.abrupt("return", []);
          case 4:
            layers = [];
            source = settings.source;
            i = 0;
          case 7:
            if (!(i < settings.types.length)) {
              _context11.next = 18;
              break;
            }
            type = settings.types[i];
            style = settings.style;
            id = settings.id + type;
            if (type.includes('line')) {
              layout = Object.assign({}, {
                'visibility': options.visibility || 'visible',
                'line-miter-limit': 2,
                'line-join': 'round',
                'line-cap': 'round'
              }, style.line ? style.line.layout || {} : {});
              paint = Object.assign({}, {
                'line-color': ['get', 'primaryColor', ['get', 'style', ['properties']]],
                'line-width': ['case', ["boolean", ['has', 'width', ['get', 'style', ['properties']]], true], ['get', 'width', ['get', 'style', ['properties']]], 4],
                'line-offset': ['case', ["boolean", ["has", "offset"], true], ["get", "offset"], 0],
                'line-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, 1]
              }, style.line ? style.line.paint || {} : {});
              style = {
                id: id,
                type: 'line',
                source: source,
                slot: style.slot || 'middle',
                filter: style.line ? style.line.filter || ['==', "$type", "LineString"] : ['==', '$type', 'LineString'],
                layout: layout,
                paint: paint
              };
            }
            if (style) {
              _context11.next = 14;
              break;
            }
            return _context11.abrupt("continue", 15);
          case 14:
            layers.push(style);
          case 15:
            i++;
            _context11.next = 7;
            break;
          case 18:
            return _context11.abrupt("return", layers);
          case 19:
          case "end":
            return _context11.stop();
        }
      }, _callee11);
    }));
    return _buildPolyline.apply(this, arguments);
  }
  function buildPoint() {
    return _buildPoint.apply(this, arguments);
  }
  function _buildPoint() {
    _buildPoint = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
      var settings,
        options,
        layers,
        source,
        dontRender,
        i,
        type,
        style,
        id,
        layout,
        paint,
        _args12 = arguments;
      return _regeneratorRuntime().wrap(function _callee12$(_context12) {
        while (1) switch (_context12.prev = _context12.next) {
          case 0:
            settings = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : {};
            options = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : {};
            if (settings.source) {
              _context12.next = 4;
              break;
            }
            return _context12.abrupt("return", []);
          case 4:
            layers = [];
            source = settings.source;
            dontRender = false; //map.getStyle().imports && map.getStyle().imports.length;
            i = 0;
          case 8:
            if (!(i < settings.types.length)) {
              _context12.next = 64;
              break;
            }
            type = settings.types[i];
            style = settings.style;
            id = settings.id + type;
            if (!type.includes('circle')) {
              _context12.next = 26;
              break;
            }
            if (!options.noCircle) {
              _context12.next = 15;
              break;
            }
            return _context12.abrupt("continue", 61);
          case 15:
            layout = Object.assign({}, {
              'visibility': options.visibility || 'visible'
            }, style.circle ? style.circle.layout || {} : {});
            paint = Object.assign({}, {
              'circle-radius': 10,
              'circle-stroke-width': 2,
              'circle-color': ['get', 'secondaryColor', ['get', 'style', ['properties']]],
              'circle-stroke-color': ['get', 'primaryColor', ['get', 'style', ['properties']]],
              'circle-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['get', 'opacity', ['get', 'style', ['properties']]]]],
              'circle-stroke-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['get', 'opacity', ['get', 'style', ['properties']]]]]
            }, style.circle ? style.circle.paint || {} : {});
            style = {
              id: id,
              type: 'circle',
              source: source,
              slot: style.slot || 'top',
              filter: style.circle ? style.circle.filter || ['==', "$type", "Point"] : ['==', "$type", "Point"],
              layout: layout,
              paint: paint
            };
            if (!type.includes('cluster')) {
              _context12.next = 24;
              break;
            }
            if (!options.noCluster) {
              _context12.next = 21;
              break;
            }
            return _context12.abrupt("continue", 61);
          case 21:
            style.filter = ['has', 'point_count'];
            style.paint['circle-color'] = options.secondaryColor || geoflo.options.colors.secondaryColor;
            style.paint['circle-stroke-color'] = options.primaryColor || geoflo.options.colors.primaryColor;
          case 24:
            _context12.next = 58;
            break;
          case 26:
            if (!type.includes('icon')) {
              _context12.next = 49;
              break;
            }
            if (!dontRender) {
              _context12.next = 29;
              break;
            }
            return _context12.abrupt("continue", 61);
          case 29:
            layout = Object.assign({}, {
              'visibility': options.visibility || 'visible',
              'icon-optional': true,
              'text-field': ['get', 'primaryIcon', ['get', 'style', ['properties']]],
              'text-rotate': ['get', 'rotate', ['get', 'style', ['properties']]],
              'text-rotation-alignment': 'viewport',
              'text-size': 14,
              'text-line-height': 1,
              'text-padding': 0,
              'text-offset': [0, 0.2],
              'text-justify': 'auto',
              'text-anchor': 'center',
              'text-allow-overlap': true,
              'text-font': ['Font Awesome 6 Pro Solid'],
              'text-ignore-placement': true
            }, style.icon ? style.icon.layout || {} : {});
            paint = Object.assign({}, {
              'text-translate-anchor': 'viewport',
              'text-halo-color': ['get', 'primaryColor', ['get', 'style', ['properties']]],
              'text-halo-width': 0,
              'text-color': ['get', 'primaryColor', ['get', 'style', ['properties']]],
              'text-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['get', 'opacity', ['get', 'style', ['properties']]]]]
            }, style.icon ? style.icon.paint || {} : {});
            style = {
              id: id,
              type: 'symbol',
              source: source,
              slot: style.slot || 'top',
              filter: style.icon ? style.icon.filter || ['==', "$type", "Point"] : ['==', "$type", "Point"],
              layout: layout,
              paint: paint
            };
            if (!type.includes('cluster')) {
              _context12.next = 41;
              break;
            }
            if (!options.noCluster) {
              _context12.next = 35;
              break;
            }
            return _context12.abrupt("continue", 61);
          case 35:
            style.filter = ['has', 'point_count'];
            style.layout['text-field'] = options.primaryIcon || '';
            style.paint['text-halo-color'] = options.secondaryColor || geoflo.options.colors.secondaryCold;
            style.paint['text-color'] = options.primaryColor || geoflo.options.colors.secondaryText;
            _context12.next = 47;
            break;
          case 41:
            if (!type.includes('count')) {
              _context12.next = 47;
              break;
            }
            if (!options.noCluster) {
              _context12.next = 44;
              break;
            }
            return _context12.abrupt("continue", 61);
          case 44:
            style.filter = ['has', 'point_count'];
            style.layout = {
              'visibility': options.visibility || 'visible',
              'icon-optional': true,
              'text-field': options.countIcon || '',
              'text-size': {
                'base': 14,
                'stops': [[10, 16], [14, 14]]
              },
              'text-line-height': 1,
              'text-padding': 0,
              'text-offset': [0.5, -0.6],
              'text-justify': 'auto',
              'text-anchor': 'center',
              'text-allow-overlap': true,
              'text-font': ['Font Awesome 6 Pro Solid'],
              'text-ignore-placement': true
            };
            style.paint = {
              'text-translate-anchor': 'viewport',
              'text-color': options.countIconColor || geoflo.options.colors.primaryText,
              'text-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['get', 'opacity', ['get', 'style', ['properties']]]]
            };
          case 47:
            _context12.next = 58;
            break;
          case 49:
            if (!type.includes('text')) {
              _context12.next = 58;
              break;
            }
            if (!dontRender) {
              _context12.next = 52;
              break;
            }
            return _context12.abrupt("continue", 61);
          case 52:
            if (!type.includes('count')) {
              _context12.next = 58;
              break;
            }
            if (!options.noCluster) {
              _context12.next = 55;
              break;
            }
            return _context12.abrupt("continue", 61);
          case 55:
            layout = Object.assign({}, {
              'text-field': ['get', 'point_count_abbreviated'],
              'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
              'text-size': {
                'base': 14,
                'stops': [[10, 14], [14, 12]]
              },
              'text-offset': [0.55, -0.9]
            }, style.text ? style.text.layout || {} : {});
            paint = Object.assign({}, {
              'text-color': options.countTextColor || geoflo.options.colors.secondaryText,
              'text-opacity': ['case', ["boolean", ["feature-state", "hidden"], true], 0, ['get', 'opacity', ['get', 'style', ['properties']]]]
            }, style.text ? style.text.paint || {} : {});
            style = {
              id: id,
              type: 'symbol',
              source: source,
              slot: style.slot || 'top',
              filter: ['has', 'point_count'],
              layout: layout,
              paint: paint
            };
          case 58:
            if (style) {
              _context12.next = 60;
              break;
            }
            return _context12.abrupt("continue", 61);
          case 60:
            layers.push(style);
          case 61:
            i++;
            _context12.next = 8;
            break;
          case 64:
            return _context12.abrupt("return", layers);
          case 65:
          case "end":
            return _context12.stop();
        }
      }, _callee12);
    }));
    return _buildPoint.apply(this, arguments);
  }
  function buildEvents() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var ids = this.getLayerIds();
    if (!ids.length) return;
    if (options.off) {
      map.off('mousemove', ids, this.onLayerMouseover);
      map.off('mouseleave', ids, this.onLayerMouseout);
    } else if (options.on) {
      map.on('mousemove', ids, this.onLayerMouseover);
      map.on('mouseleave', ids, this.onLayerMouseout);
    } else if (!options) {
      buildEvents({
        off: true
      });
      buildEvents({
        on: true
      });
    }
  }
  function removeLayer(options) {
    if (!options) return false;
    var layer = this._layers.findIndex(function (e) {
      return e.id === options.layer;
    });
    var source = this._sources.findIndex(function (e) {
      return e.id === options.source;
    });
    if (layer !== -1) this._layers.splice(layer, 1);
    if (source !== -1) this._sources.splice(source, 1);
  }
  function loadImage() {
    return _loadImage.apply(this, arguments);
  }
  function _loadImage() {
    _loadImage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
      var options,
        _args14 = arguments;
      return _regeneratorRuntime().wrap(function _callee14$(_context14) {
        while (1) switch (_context14.prev = _context14.next) {
          case 0:
            options = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : {};
            if (!(!options.url || !options.id)) {
              _context14.next = 3;
              break;
            }
            return _context14.abrupt("return", false);
          case 3:
            return _context14.abrupt("return", new Promise(/*#__PURE__*/function () {
              var _ref6 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee13(resolve, reject) {
                var url;
                return _regeneratorRuntime().wrap(function _callee13$(_context13) {
                  while (1) switch (_context13.prev = _context13.next) {
                    case 0:
                      url = options.url + '?' + new Date().getTime();
                      map.loadImage(url, function (error, image) {
                        return error ? reject(error) : resolve(image);
                      });
                    case 2:
                    case "end":
                      return _context13.stop();
                  }
                }, _callee13);
              }));
              return function (_x10, _x11) {
                return _ref6.apply(this, arguments);
              };
            }()));
          case 4:
          case "end":
            return _context14.stop();
        }
      }, _callee14);
    }));
    return _loadImage.apply(this, arguments);
  }
  function loadImageAsDataURL(imageUrl, callback) {
    /* loadImageAsDataURL(options.url, (data) => {
        options.data = data;
        const svgMarker = createSVGMarker(options);
        svgToImage(svgMarker, (img) => resolve(img) );
    }); */

    var img = new Image();
    img.setAttribute('crossOrigin', 'anonymous');
    img.onload = function () {
      var canvas = document.createElement("canvas");
      canvas.width = img.width;
      canvas.height = img.height;
      var ctx = canvas.getContext("2d");
      ctx.drawImage(img, 0, 0);
      var dataURL = canvas.toDataURL("image/png");
      callback(dataURL);
    };
    img.src = imageUrl + '?' + new Date().getTime();
  }
  function createSVGMarker() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var svgNS = "http://www.w3.org/2000/svg";
    var data = options.data;
    var width = options.width;
    var height = options.height;
    var borderWidth = options["stroke-width"] || 5;
    var svg = document.createElementNS(svgNS, "svg");
    svg.setAttribute("width", width);
    svg.setAttribute("height", height);
    svg.setAttribute("viewBox", "0 0 ".concat(width + 2 * borderWidth, " ").concat(height + 2 * borderWidth));
    var marker = document.createElementNS(svgNS, "ellipse");
    marker.setAttribute("cx", (width + 2 * borderWidth) / 2);
    marker.setAttribute("cy", (height + 2 * borderWidth) / 2);
    marker.setAttribute("rx", width / 2);
    marker.setAttribute("ry", height / 2);
    marker.setAttribute("fill", 'transparent');
    marker.setAttribute("stroke", options.stroke || geoflo.getColors().secondaryBackground);
    marker.setAttribute("stroke-width", borderWidth);
    var image = document.createElementNS(svgNS, "image");
    image.setAttributeNS("http://www.w3.org/1999/xlink", "href", data);
    image.setAttribute("x", borderWidth);
    image.setAttribute("y", borderWidth);
    image.setAttribute("width", width);
    image.setAttribute("height", height);
    image.setAttribute("preserveAspectRatio", "xMidYMid slice");
    image.setAttribute("clip-path", "ellipse()");
    svg.appendChild(marker);
    svg.appendChild(image);
    return svg;
  }
  function svgToImage(svgElement, callback) {
    var svgData = new XMLSerializer().serializeToString(svgElement);
    var svgBlob = new Blob([svgData], {
      type: "image/svg+xml;charset=utf-8"
    });
    var url = URL.createObjectURL(svgBlob);
    var img = new Image();
    img.onload = function () {
      URL.revokeObjectURL(url), callback(img);
    };
    img.src = url;
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Layers);

/***/ }),

/***/ "./src/Locate.js":
/*!***********************!*\
  !*** ./src/Locate.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Locate
 * @description This module provides the geolocation functionality for the Geoflo application. It allows users to locate their current position on the map and track their location.
 * @returns {Object} Returns the Locate object.
 */
var Locate = function Locate() {
  var geoflo = this.geoflo;

  /**
   * @function
      * @memberof module:geoflo.Locate
   * @name init
   * @description This function initializes the geolocation control on the map with the specified options.
   * @param {Object} options - The options for configuring the geolocation control.
   * @param {boolean} [options.enableHighAccuracy=true] - Whether to enable high accuracy for geolocation.
   * @param {boolean} [options.trackUserLocation=true] - Whether to track the user's location.
   * @param {boolean} [options.showUserHeading=true] - Whether to show the user's heading.
   * @param {boolean} [options.showAccuracyCircle=false] - Whether to show the accuracy circle.
   * @returns {Object} The current instance of the map with the geolocation control added.
   */
  this.init = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.options = geoflo.Utilities.extend({}, options);
    this.control = new mapboxgl.GeolocateControl({
      positionOptions: {
        enableHighAccuracy: true
      },
      trackUserLocation: true,
      showUserHeading: true,
      showAccuracyCircle: false
    });
    this.control.on('geolocate', this.onControlEvent.bind(this));
    geoflo.map.addControl(this.control, 'top-right');
    //this.ready();
    return this;
  };
  this.hide = function () {
    this.control._container.style.display = 'none';
  };
  this.show = function () {
    this.control._container.style.display = 'block';
  };

  /**
   * @function
      * @memberof module:geoflo.Locate
   * @name ready
   * @description This function checks if the geolocate button is available in the control and then calls the build function.
   * @params {Object} control - The control object containing the geolocate button.
   * @returns {void}
   */
  this.ready = function () {
    var _this = this;
    var control = this.control;
    var ready = setInterval(function () {
      if (!control._geolocateButton) return;
      _this.build();
      return clearInterval(ready);
    }, 1);
  };

  /**
   * @function
      * @memberof module:geoflo.Locate
   * @name build
   * @description This function hides the user location dot marker and the associated button.
   * @params {void} None
   * @returns {void}
   */
  this.build = function () {
    this.button = this.control._geolocateButton;
    this.marker = this.control._userLocationDotMarker;
    this.button.addEventListener('click', this.onControlEvent.bind(this));
    //this.getButton().style.display = 'none';
  };

  /**
   * @function
      * @memberof module:geoflo.Locate
   * @name update
   * @description This function updates the map bearing and center based on the provided options.
   * @param {Object} options - The options object.
   * @param {number} options.alpha - The alpha value.
   * @returns {void}
   */
  this.update = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var alpha = options.alpha;
    var heading = this.heading();
    var bearing = this.bearing();
    var following = this.following;
    if (!heading || !following || geoflo.mapMoving) return;
    geoflo.map.setBearing(heading - 1);
    geoflo.map.setCenter(this.marker._lngLat);
  };

  /**
   * @function
      * @memberof module:geoflo.Locate
   * @name heading
   * @description Retrieves the heading value from the control object.
   * @returns {string} The heading value from the control object.
   */
  this.heading = function () {
    return this.control._heading;
  };

  /**
   * @function
      * @memberof module:geoflo.Locate
   * @name bearing
   * @description This function retrieves the current bearing of the map.
   * @returns {number} The bearing of the map.
   */
  this.bearing = function () {
    return geoflo.map.getBearing();
  };

  /**
   * @function
      * @memberof module:geoflo.Locate
   * @name locate
   * @description Initiates the process of locating the user's current position on the map.
   * @returns {void}
   */
  this.locate = function () {
    this.locating = true;
    this.unlocated = false;
    this.control._follow = this.following = false;
    addClasses(this.button, ['mapboxgl-ctrl-geolocate-waiting']);
    geoflo.fire('locate.on', {
      state: this.state()
    });
    return this.control.trigger();
  };

  /**
   * @function
      * @memberof module:geoflo.Locate
   * @name relocate
   * @description Relocates the geolocation control to the user's current location. If the control is set to follow the user's location, it changes the state to 'ACTIVE_LOCK'. Adds the 'mapboxgl-ctrl-geolocate-active' class to the button element. Triggers the control
   * @params {void}
   * @returns {void}
   */
  this.relocate = function () {
    if (this.following) this.state('ACTIVE_LOCK');
    addClasses(this.button, ['mapboxgl-ctrl-geolocate-active']);
    return this.control.trigger();
  };

  /**
   * @function
      * @memberof module:geoflo.Locate
   * @name unlocate
   * @description Sets the state to 'ACTIVE_LOCK', disables following, enables drag pan on the map, and triggers the control.
   * @returns {Object} The result of triggering the control.
   */
  this.unlocate = function () {
    this.state('ACTIVE_LOCK');
    this.control._follow = this.following = false;
    geoflo.map.dragPan.enable();
    this.unlocated = true;
    geoflo.fire('locate.off', {
      state: this.state()
    });
    return this.control.trigger();
  };

  /**
   * @function
      * @memberof module:geoflo.Locate
   * @name follow
   * @description Enables the follow functionality for the geolocate control. When activated, adds a specific class to the button, disables drag panning on the map, and sets the follow state to true.
   * @params {Object} geoflo - The context object containing the map and control references.
   * @returns {boolean} - Returns true to indicate that the follow functionality has been enabled.
   */
  this.follow = function () {
    addClasses(this.button, ['mapboxgl-ctrl-geolocate-follow']);
    geoflo.map.dragPan.disable();
    return this.control._follow = this.following = true;
  };

  /**
   * @function
      * @memberof module:geoflo.Locate
   * @name state
   * @description This function is used to get or set the state of the control. If a state parameter is provided, it sets the control's watch state to that value. If no state parameter is provided, it returns the current watch state of the control.
   * @param {boolean} state - The state to set for the control.
   * @returns {boolean} - The current watch state of the control.
   */
  this.state = function (state) {
    return state ? this.control._watchState = state : this.control._watchState;
  };

  /**
   * @function
      * @memberof module:geoflo.Locate
   * @name getButton
   * @description Returns the geolocate button element from the control.
   * @returns {Element} The geolocate button element.
   */
  this.getButton = function () {
    return this.control._geolocateButton;
  };

  /**
   * @function
      * @memberof module:geoflo.Locate
   * @name removeClasses
   * @description This function removes classes related to geolocation control from a button element.
   * @params {Element} button - The button element from which classes will be removed.
   */
  this.removeClasses = function () {
    var button = this.button;
    if (!button) return;
    button.classList.remove('mapboxgl-ctrl-geolocate-waiting');
    button.classList.remove('mapboxgl-ctrl-geolocate-active');
    button.classList.remove('mapboxgl-ctrl-geolocate-active-error');
    button.classList.remove('mapboxgl-ctrl-geolocate-background');
    button.classList.remove('mapboxgl-ctrl-geolocate-background-error');
    button.classList.remove('mapboxgl-ctrl-geolocate-follow');
  };

  /**
   * @function
   * @name onAdd
   * @memberof module:geoflo.Locate
   * @description Logs the event object to the console.
   *
   * @param {Event} event - The event object that is triggered when an action occurs.
   * @returns {void} This function does not return a value.
   * 
   * @author Solutegrate
   * @copyright 2025
   */
  this.onAdd = function (event) {
    console.log(event);
  };

  /**
   * @function
   * @name onControlEvent
   * @memberof module:geoflo.Locate
   * @description Handles control events, updating the marker and managing the state based on the event details.
   *
   * @param {Object} event - The event object containing details about the control event.
   * @param {Object} event.coords - The coordinates associated with the event, if available.
   * @param {HTMLElement} event.target - The target element that triggered the event.
   * @returns {void} This function does not return a value.
   * 
   * @author Solutegrate
   * @copyright 2025
   */
  this.onControlEvent = function (event) {
    //this.button = this.button || event.button;
    this.marker = this.control._userLocationDotMarker;
    this.removeClasses();
    if (event.coords) {
      this.onLocate(event);
    } else if (event.target === this.button) {
      console.error('Locate: ', this.state(), event, this.button);
      geoflo.map.dragPan.enable();
      if (this.state() === 'OFF') return this.locate();
      if (this.state() === 'BACKGROUND' && !this.following) return this.relocate();
      if (this.state() === 'ACTIVE_LOCK' && !this.following) return this.follow();
      this.unlocate();
    }
  };

  /**
   * @function
   * @name onLocate
   * @memberof module:geoflo.Locate
   * @description Handles the location update event, updating the current location and firing an event with the new state.
   *
   * @param {Object} event - The event object containing location data.
   * @param {Object} event.coords - The coordinates of the current location.
   * @returns {void} This function does not return a value.
   * 
   * @author Solutegrate
   * @copyright 2025
   */
  this.onLocate = function (event) {
    if (this.state() === 'ACTIVE_LOCK' && this.locating) {
      this.locating = false;
      this.currentLocation = event.coords;
      addClasses(this.button, ['mapboxgl-ctrl-geolocate-active']);
    }
    geoflo.fire('locate.update', {
      locating: this.locating,
      coords: event.coords,
      state: this.state()
    });
  };

  /**
   * @function
   * @name onMapMove
   * @memberof module:geoflo.Locate
   * @description Handles the map movement event, updating the button classes based on the current state and conditions.
   *
   * @param {Object} event - The event object representing the map movement.
   * @returns {void} This function does not return a value.
   * 
   * @author Solutegrate
   * @copyright 2025
   */
  this.onMapMove = function (event) {
    if (!this.button || this.following || this.unlocated) return;
    if (this.state() === 'ACTIVE_LOCK') return addClasses(this.button, ['mapboxgl-ctrl-geolocate-active']);
    addClasses(this.button, ['mapboxgl-ctrl-geolocate-background']);
  };
  this.init();
  function addClasses(button) {
    var classes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    if (!button) return;
    classes.forEach(function (c) {
      c ? button.classList.add(c) : false;
    });
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Locate);

/***/ }),

/***/ "./src/Mesh.js":
/*!*********************!*\
  !*** ./src/Mesh.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Mesh
 * @description This module provides the mesh functionality for the Geoflo application. It allows users to create a mesh of features by splitting them into segments and checking for intersections.
 * @param {Array} originalFeatures - An array of features to be added to the mesh.
 * @param {boolean} linesOnly - A flag indicating whether only lines should be added to the mesh.
 * @returns {Object} Returns the Mesh object.
 */
var Mesh = function Mesh(originalFeatures, linesOnly) {
  var segmentId = 1;
  var allSegments = [];
  var featureIndex = {};
  var geoflo = this.geoflo;

  /**
   * @function
      * @memberof module:geoflo.Mesh
   * @name addNewFeatures
   * @description This function takes new features, splits them into segments, checks for intersections, and updates the existing segments accordingly.
   * @param {Array} features - An array of new features to be added.
   * @return {Array} Returns an array containing all mesh segments.
   */
  this.addNewFeatures = function (features) {
    var allNewFeatures = splitAndCheckForIntersections(features);
    var newSegments = splitIntoTwoPointSegmentsAndAddIds(allNewFeatures);
    var segmentsWithCutPoints = checkForIntersections(newSegments, allSegments);
    allSegments = [].concat(geoflo.Utilities.consumableArray(cutSegments(allSegments, segmentsWithCutPoints)), geoflo.Utilities.consumableArray(cutSegments(newSegments, segmentsWithCutPoints)));
    return this.getFeatures();
  };

  /**
   * @function
      * @memberof module:geoflo.Mesh
   * @name getFeatures
   * @description Returns all of the features in the mesh.
   * @return {Array} Returns an array containing all feature segments.
   */
  this.getFeatures = function () {
    return allSegments;
  };

  /**
   * @function
      * @memberof module:geoflo.Mesh
   * @name splitSegmentAtPoint
   * @description This function takes a segment ID and coordinates of a point to split the segment. It creates two new segments by splitting the original segment at the specified point and updates the feature index.
   * @param {string} segmentId - The ID of the segment to be split.
   * @param {Array<number>} pointCoords - The coordinates of the point where the segment should be split.
   */
  this.splitSegmentAtPoint = function (segmentId, pointCoords) {
    var feature = featureIndex[segmentId];
    if (feature !== undefined) {
      var pos = allSegments.indexOf(feature);
      allSegments.splice(pos, 1);
      var line1 = createLineWithLength([pointCoords, feature.geometry.coordinates[0]]);
      var line2 = createLineWithLength([pointCoords, feature.geometry.coordinates[1]]);
      addFeatureToIndex(line1);
      addFeatureToIndex(line2);
      allSegments.push(line1, line2);
    } else {
      console.error("splitSegmentAtPoint: no original feature for id ", segmentId);
    }
  };

  /**
   * @function
      * @memberof module:geoflo.Mesh
   * @name getFeaturesFromIndex
   * @description This function takes an array of features and retrieves the corresponding features from an index based on their IDs.
   * @param {Array} features - The array of features to retrieve from the index.
   * @returns {Array} The array of features retrieved from the index.
   */
  this.getFeaturesFromIndex = function (features) {
    var result = [];
    features.forEach(function (feature) {
      var id = feature.id || feature.properties.id;
      var originalFeature = featureIndex[id];
      if (originalFeature !== undefined) {
        result.push(originalFeature);
      }
    });
    return result;
  };

  /**
   * @function
      * @memberof module:geoflo.Mesh
   * @name getFeatureById
   * @description Retrieves a feature by its ID.
   * @param {number} id - The ID of the feature to retrieve.
   * @returns {object} The feature object corresponding to the provided ID.
   */
  this.getFeatureById = function (id) {
    return getFeatureById(id);
  };

  /**
   * @function
      * @memberof module:geoflo.Mesh
   * @name getFeaturesByParentId
   * @description Retrieves features based on the parent ID. The parent ID is used to retrieve cold features associated with the segment.
   * @param {number} id - The parent ID to retrieve features for.
   * @returns {Array} - An array of features associated with the parent ID.
   */
  this.getFeaturesByParentId = function (id) {
    return getFeaturesByParentId(id);
  };

  /**
   * @function
      * @memberof module:geoflo.Mesh
   * @name removeFeature
   * @description Removes a feature with the specified ID.
   * @param {number} id - The ID of the feature to be removed.
   * @returns {boolean} - Returns true if the feature was successfully removed, false otherwise.
   */
  this.removeFeature = function (id) {
    return removeFeature(id);
  };
  if (originalFeatures) allSegments = splitAndCheckForIntersections(originalFeatures);
  function addFeatureToIndex(feature, parent) {
    if (featureIndex[segmentId] || getFeatureById(segmentId)) return false;
    featureIndex[segmentId] = feature;
    feature.id = segmentId;
    feature.parent = parent;
    geoflo.Utilities.setProperty(feature, 'id', segmentId);
    geoflo.Utilities.setProperty(feature, 'parent', parent);
    segmentId++;
    return true;
  }
  function addClickSegementsToMesh() {
    if (!geoflo.options.snapping.enable) return false;
    var meshFeatures = [];
    if (geoflo.Mesh && geoflo.closestPoint && geoflo.closestPoint.borders && geoflo.closestPoint.id !== undefined) {
      geoflo.Mesh.splitSegmentAtPoint(geoflo.closestPoint.id, geoflo.closestPoint.coords);
      geoflo.updateMeshData();
    }
    if (geoflo.snapFeature) {
      if (geoflo.snapFeature.geometry.type === "LineString") {
        if (!geoflo.Utilities.isEmptyLineString(geoflo.snapFeature)) {
          meshFeatures.push(geoflo.snapFeature);
        }
      } else if (geoflo.snapFeature.geometry.type === "Point") {
        geoflo.Utilities.setProperty(geoflo.snapFeature, 'startPoint', true);
        geoflo.startPoint = geoflo.Utilities.cloneDeep(geoflo.snapFeature);
        meshFeatures.push(geoflo.snapFeature);
      }
    }
    if (meshFeatures.length > 0) geoflo.addFeaturesToMesh(meshFeatures);
  }
  function coordinatesToLineStrings(coords, result, parent) {
    var firstPoint = turf.truncate(turf.point(coords[0]), {
      precision: 7,
      coordinates: 2,
      mutate: true
    });
    var secondPoint = null;
    for (var index = 1; index < coords.length; index++) {
      secondPoint = turf.truncate(turf.point(coords[index]), {
        precision: 7,
        coordinates: 2,
        mutate: true
      });
      if (!geoflo.Utilities.isPointEqual(firstPoint.geometry.coordinates, secondPoint.geometry.coordinates)) {
        var line = turf.lineString([firstPoint.geometry.coordinates, secondPoint.geometry.coordinates]);
        var added = addFeatureToIndex(line, parent);
        added ? result.push(line) : false;
      }
      firstPoint = secondPoint;
    }
  }
  function splitIntoTwoPointSegmentsAndAddIds(features) {
    var result = [];
    if (!features || !features.length) return result;
    features.forEach(function (feature) {
      var type = feature.geometry.type;
      var id = feature.parent || feature.properties.parent || feature.id || feature.properties.id;
      var added;
      if (linesOnly && type !== "LineString" && !feature.properties.unfill) {
        feature = geoflo.Utilities.cloneDeep(feature);
        added = addFeatureToIndex(feature, id);
        return added ? result.push(feature) : false;
      }
      if (type === "MultiPolygon") {
        feature.geometry.coordinates.forEach(function (coords) {
          coords.forEach(function (subCoords) {
            coordinatesToLineStrings(subCoords, result, id);
          });
        });
      } else if (type === "Polygon") {
        feature.geometry.coordinates.forEach(function (coords) {
          coordinatesToLineStrings(coords, result, id);
        });
      } else if (type === "MultiLineString") {
        feature.geometry.coordinates.forEach(function (coords) {
          coordinatesToLineStrings(coords, result, id);
        });
      } else if (type === "LineString") {
        coordinatesToLineStrings(feature.geometry.coordinates, result, id);
      } else if (type === "Point") {
        feature = geoflo.Utilities.cloneDeep(feature);
        added = addFeatureToIndex(feature, id);
        added ? result.push(feature) : false;
      }
    });
    return result;
  }
  function appendCutFeatures(segmentsWithCutPoints, feature, cutPointFeatures) {
    var id = feature.id || feature.properties.id;
    var segCutPoints = segmentsWithCutPoints[id];
    if (segCutPoints === undefined) {
      segCutPoints = [];
      segmentsWithCutPoints[id] = segCutPoints;
    }
    cutPointFeatures.forEach(function (feature) {
      var newCutPoint = geoflo.Utilities.reducePrecision(feature.geometry.coordinates);
      var cutPoint = segCutPoints.findIndex(function (element) {
        return element[0] === newCutPoint[0] && element[1] === newCutPoint[1];
      });
      if (cutPoint === -1) {
        segCutPoints.push(newCutPoint);
      }
    });
  }
  ;
  function checkForIntersections(knownSegments, newSegments) {
    var segmentsWithCutPoints = {};
    var processIntersectionPoint = function processIntersectionPoint(point, feature1, feature2) {
      var pointCoords = point.geometry.coordinates;
      var seg1Coords = feature1.geometry.coordinates;
      var seg2Coords = feature2.geometry.coordinates;
      var addFeature1Point = false;
      var addFeature2Point = false;
      var closestPointAdded = false;
      if (!geoflo.Utilities.isPointEqual(pointCoords, seg1Coords[0]) && !geoflo.Utilities.isPointEqual(pointCoords, seg1Coords[1])) {
        var endpoint1 = turf.point(seg1Coords[0]);
        var endpoint2 = turf.point(seg1Coords[1]);
        var distanceEndpoint1 = turf.distance(point, endpoint1);
        var distanceEndpoint2 = turf.distance(point, endpoint2);
        var closestEndpoint = distanceEndpoint1 < distanceEndpoint2 ? endpoint1 : endpoint2;
        var pointOnLine = turf.pointOnLine(feature2, closestEndpoint);
        if (pointOnLine.properties.dist < geoflo.statics.constants.MIN_DISTANCE) {
          appendCutFeatures(segmentsWithCutPoints, feature2, [closestEndpoint]);
          closestPointAdded = true;
        } else {
          addFeature1Point = true;
        }
      }
      if (!geoflo.Utilities.isPointEqual(pointCoords, seg2Coords[0]) && !geoflo.Utilities.isPointEqual(pointCoords, seg2Coords[1])) {
        var _endpoint = turf.point(seg2Coords[0]);
        var _endpoint2 = turf.point(seg2Coords[1]);
        var _distanceEndpoint = turf.distance(point, _endpoint);
        var _distanceEndpoint2 = turf.distance(point, _endpoint2);
        var _closestEndpoint = _distanceEndpoint < _distanceEndpoint2 ? _endpoint : _endpoint2;
        var _pointOnLine = turf.pointOnLine(feature1, _closestEndpoint);
        if (_pointOnLine.properties.dist < geoflo.statics.constants.MIN_DISTANCE) {
          appendCutFeatures(segmentsWithCutPoints, feature1, [_closestEndpoint]);
          closestPointAdded = true;
        } else {
          addFeature2Point = true;
        }
      }
      if (!closestPointAdded) {
        if (addFeature1Point) {
          appendCutFeatures(segmentsWithCutPoints, feature1, [point]);
        }
        if (addFeature2Point) {
          appendCutFeatures(segmentsWithCutPoints, feature2, [point]);
        }
      }
    };
    var checkIfPointInCloseRange = function checkIfPointInCloseRange(feature, coords) {
      var pointOnline = turf.pointOnLine(feature, turf.point(coords));
      if (pointOnline.properties.dist < geoflo.statics.constants.MIN_DISTANCE) {
        if (!isPointAtVertex(feature.geometry.coordinates, coords)) {
          appendCutFeatures(segmentsWithCutPoints, feature, [pointOnline]);
          return true;
        }
      }
      return false;
    };
    var sameSegments = knownSegments === newSegments;
    for (var knownIndex = 0; knownIndex < knownSegments.length; knownIndex++) {
      var segmentFeature1 = knownSegments[knownIndex];
      var feature1Type = segmentFeature1.geometry.type;
      for (var newIndex = sameSegments ? knownIndex + 1 : 0; newIndex < newSegments.length; newIndex++) {
        var segmentFeature2 = newSegments[newIndex];
        var feature2Type = segmentFeature2.geometry.type;
        var id = segmentFeature2.id || segmentFeature2.properties.id;
        if (feature1Type === "LineString" && feature2Type === "LineString") {
          if (isOverlapping(segmentFeature1, segmentFeature2)) {
            var intersectionPoints = turf.lineIntersect(segmentFeature1, segmentFeature2).features;
            if (intersectionPoints.length > 0) {
              if (intersectionPoints.length > 1) console.error(intersectionPoints.length + " intersection points received");
              var point = intersectionPoints[0];
              processIntersectionPoint(point, segmentFeature1, segmentFeature2);
            } else {
              var seg1Coords = segmentFeature1.geometry.coordinates;
              var seg2Coords = segmentFeature2.geometry.coordinates;
              checkIfPointInCloseRange(segmentFeature1, seg2Coords[0]);
              checkIfPointInCloseRange(segmentFeature1, seg2Coords[1]);
              checkIfPointInCloseRange(segmentFeature2, seg1Coords[0]);
              checkIfPointInCloseRange(segmentFeature2, seg1Coords[1]);
            }
            if (getFeatureById(id)) {
              console.log('Existing Line: ', segmentFeature2);
              var pos = allSegments.indexOf(getFeatureById(id));
              allSegments.splice(pos, 1);
            }
          }
        } else if (feature1Type === "Point" || feature2Type === "Point") {
          if (feature2Type === "Point" && feature2Type === "Point") {
            console.log("Point & Point");
          } else {
            console.log("Point & LineString");
            var _point = feature1Type === "Point" ? segmentFeature1 : segmentFeature2;
            var line = feature1Type === "LineString" ? segmentFeature1 : segmentFeature2;
            id = _point.id || _point.properties.id;
            if (checkIfPointInCloseRange(line, _point.geometry.coordinates)) {
              segmentsWithCutPoints[id] = [];
            }
          }
          if (getFeatureById(id)) {
            console.log('Existing Point: ', segmentFeature2);
            var pos = allSegments.indexOf(getFeatureById(id));
            allSegments.splice(pos, 1);
          }
        }
      }
    }
    return segmentsWithCutPoints;
  }
  function cutSegments(newSegments, segmentsWithCutPoints) {
    var result = [];
    newSegments.forEach(function (segment) {
      var id = segment.id || segment.properties.id;
      if (segment.geometry.type === "LineString") {
        var cutPoints = segmentsWithCutPoints[id];
        if (cutPoints !== undefined) {
          var fc = turf.lineSplit(segment, turf.multiPoint(cutPoints));
          turf.featureEach(fc, function (feature) {
            var length = turf.lineDistance(feature);
            if (length > geoflo.statics.constants.MIN_SEGMENT_LENGTH) {
              geoflo.Utilities.setProperties(feature, {
                length: length
              });
              addFeatureToIndex(feature);
              result.push(feature);
            } else {
              console.error("0 length feature (", length, ") after line split: ", JSON.stringify(feature));
            }
          });
        } else {
          var length = turf.lineDistance(segment);
          if (length > geoflo.statics.constants.MIN_SEGMENT_LENGTH) {
            geoflo.Utilities.setProperties(segment, {
              length: length
            });
            result.push(segment);
          } else {
            console.error("0 length feature (", length, ") existing segment: ", JSON.stringify(segment));
          }
        }
      } else {
        var _cutPoints = segmentsWithCutPoints[id];
        if (_cutPoints === undefined) {
          result.push(segment);
        }
      }
    });
    return result;
  }
  function splitAndCheckForIntersections(newFeatures) {
    var newFeaturesSegments = splitIntoTwoPointSegmentsAndAddIds(newFeatures);
    if (linesOnly) return newFeaturesSegments;
    var newFeaturesWithCutPoints = checkForIntersections(newFeaturesSegments, newFeaturesSegments);
    return cutSegments(newFeaturesSegments, newFeaturesWithCutPoints);
  }
  function getFeatureById(id) {
    return allSegments.find(function (f) {
      return f.id === id || f.properties.id === id;
    });
  }
  function getFeaturesByParentId(id) {
    return allSegments.filter(function (f) {
      return f.parent === id || f.properties.parent === id;
    });
  }
  function removeFeature(id) {
    var features = getFeaturesByParentId(id);
    if (features && features.length) {
      features.forEach(function (feature) {
        var pos = allSegments.indexOf(feature);
        allSegments.splice(pos, 1);
      });
      geoflo.updateMeshData();
    }
    return allSegments;
  }
  function isPointAtVertex(geometryCoords, pointCoords) {
    var firstPoint = geometryCoords[0];
    var lastPoint = geometryCoords[geometryCoords.length - 1];
    return geoflo.Utilities.isPointEqual(firstPoint, pointCoords) || geoflo.Utilities.isPointEqual(lastPoint, pointCoords);
  }
  function createLineWithLength(coords) {
    var line = turf.lineString(coords);
    var length = turf.lineDistance(line);
    geoflo.Utilities.setProperties(line, {
      length: length
    });
    return line;
  }
  function isOverlapping(feature1, feature2) {
    var coords1 = feature1.geometry.coordinates;
    var coords2 = feature2.geometry.coordinates;
    if (coords1.length === 2 && coords2.length === 2) {
      var bbox1 = createBbox(coords1);
      var bbox2 = createBbox(coords2);
      if (bbox1.east < bbox2.west || bbox1.west > bbox2.east) {
        return false;
      } else if (bbox1.north < bbox2.south || bbox1.south > bbox2.north) {
        return false;
      }
      return true;
    } else {
      throw new Error("wrong number of coordinates, expected 2");
    }
  }
  function createBbox(coords) {
    var bbox1 = {};
    if (coords[0][0] < coords[1][0]) {
      bbox1.west = coords[0][0];
      bbox1.east = coords[1][0];
    } else {
      bbox1.west = coords[1][0];
      bbox1.east = coords[0][0];
    }
    if (coords[0][1] < coords[1][1]) {
      bbox1.south = coords[0][1];
      bbox1.north = coords[1][1];
    } else {
      bbox1.south = coords[1][1];
      bbox1.north = coords[0][1];
    }
    return bbox1;
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Mesh);

/***/ }),

/***/ "./src/Options.js":
/*!************************!*\
  !*** ./src/Options.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Options
 * @description Options for the Geoflo map.
 * @property {string} theme - The theme of the map. Default is 'dark'.
 * @property {boolean} showLineUnits - Show line units. Default is false.
 * @property {boolean} showFeatureText - Show feature text. Default is true.
 * @property {object} controls - Controls for the map.
 * @property {boolean} controls.options - Show options control. Default is true.
 * @property {boolean} controls.modes - Show modes control. Default is true.
 * @property {boolean} controls.utils - Show utilities control. Default is true.
 * @property {boolean} controls.types - Show types control. Default is true.
 * @property {boolean} controls.actions - Show actions control. Default is true.
 * @property {object} map - Map options.
 * @property {string} map.container - Map container. Default is 'map'.
 * @property {array} map.center - Map center. Default is [-95.52816680236892, 39.56431143986035].
 * @property {number} map.zoom - Map zoom. Default is 3.5.
 * @property {number} map.maxPitch - Maximum pitch of the map. Default is 50.
 * @property {string} map.projection - Map projection. Default is 'mercator'.
 * @property {string} map.style - Map style. Default is 'Standard'.
 * @property {number} map.opacity - Map opacity. Default is 1.
 * @property {array} map.styles - Mapbox styles with title and uri.
 * @property {boolean} map.hash - Enable map hash navigation. Default is true.
 * @property {array} map.extent - Map bounding extent.
 * @property {object} keys - Keyboard shortcuts.
 * @property {string} keys.import - Import key. Default is 'u'.
 * @property {string} keys.export - Export key. Default is 'd'.
 * @property {string} keys.delete - Delete key. Default is 'Delete'.
 * @property {string} keys.cancel - Cancel key. Default is 'Escape'.
 * @property {string} keys.select - Select key. Default is 'Escape'.
 * @property {string} keys.edit - Edit key. Default is 'Enter'.
 * @property {string} keys.refresh - Refresh key. Default is 'r'.
 * @property {string} keys.snapping - Snapping key. Default is '!'.
 * @property {string} keys.pinning - Pinning key. Default is '@'.
 * @property {string} keys.routing - Routing key. Default is '#'.
 * @property {string} keys.exploring - Exploring key. Default is '$'.
 * @property {string} keys.painting - Painting key. Default is '%'.
 * @property {string} keys.polyline - Polyline key. Default is '1'.
 * @property {string} keys.polygon - Polygon key. Default is '2'.
 * @property {string} keys.rectangle - Rectangle key. Default is '3'.
 * @property {string} keys.circle - Circle key. Default is '4'.
 * @property {string} keys.text - Text key. Default is '5'.
 * @property {object} units - Measurement units for different geometries.
 * @property {string} units.Polyline - Polyline unit. Default is 'feet'.
 * @property {string} units.Polygon - Polygon unit. Default is 'acres'.
 * @property {string} units.Rectangle - Rectangle unit. Default is 'acres'.
 * @property {string} units.Icon - Icon unit. Default is 'feature'.
 * @property {string} units.Circle - Circle unit. Default is 'feature'.
 * @property {string} units.Marker - Marker unit. Default is 'feature'.
 * @property {object} colors - Color scheme settings.
 * @property {string} colors.error - Error color. Default is '#ff7676'.
 * @property {string} colors.primaryColor - Primary color. Default is '#d7ef7e'.
 * @property {string} colors.primaryBackground - Primary background color. Default is '#5a5a5a'.
 * @property {string} colors.primaryText - Primary text color. Default is '#c5c5c5'.
 * @property {string} colors.primaryBorder - Primary border color. Default is '#6fafdb'.
 * @property {string} colors.secondaryColor - Secondary color. Default is '#6fafdb'.
 * @property {string} colors.secondaryBackground - Secondary background color. Default is '#333333'.
 * @property {string} colors.secondaryText - Secondary text color. Default is '#333333'.
 * @property {object} select - Selection options.
 * @property {boolean} select.popup - Enable selection popups. Default is false.
 * @property {boolean} select.multiple - Allow multiple selection. Default is false.
 * @property {object} snapping - Snapping settings.
 * @property {boolean} snapping.enable - Enable snapping to features. Default is false.
 * @property {boolean} snapping.pixels - Pixel-based snapping. Default is false.
 * @property {number} snapping.distance - Snapping distance in kilometers.
 * @property {number} snapping.tolerance - Snapping tolerance in kilometers.
 * @property {object} routing - Routing settings.
 * @property {boolean} routing.enable - Enable routing functionality. Default is false.
 * @property {number} routing.precision - Routing coordinate precision.
 * @property {object} pinning - Pinning settings.
 * @property {boolean} pinning.enable - Enable feature pinning. Default is false.
 * @property {number} pinning.buffer - Pinning buffer distance in kilometers.
 * @property {number} pinning.idle - Idle time before updating pinned features.
 * @property {object} exploring - Exploring settings.
 * @property {boolean} exploring.enable - Enable feature exploration. Default is false.
 * @property {number} exploring.minZoom - Minimum zoom level for exploration. Default is 9.
 * @property {number} exploring.buffer - Exploration buffer distance in kilometers.
 * @property {number} exploring.tolerance - Exploration coordinate simplification tolerance.
 * @property {object} painting - Painting settings.
 * @property {boolean} painting.enable - Enable painting mode. Default is false.
 * @property {number} painting.tolerance - Painting coordinate simplification tolerance.
 * @property {object} gamepad - Gamepad configuration settings.
 * @property {boolean} gamepad.enable - Enable gamepad support. Default is true.
 * @property {boolean} gamepad.debug - Enable gamepad debugging. Default is false.
 * @property {boolean} gamepad.crosshairs - Show crosshairs on the map. Default is true.
 * @property {object} gamepad.joystick - Joystick settings.
 * @property {number} gamepad.joystick.min - Minimum joystick threshold. Default is 0.2.
 * @property {number} gamepad.joystick.max - Maximum joystick threshold. Default is 0.7.
 * @property {object} gamepad.pan - Pan settings.
 * @property {number} gamepad.pan.speed - Pan speed. Default is 0.001.
 * @property {object} gamepad.zoom - Zoom settings.
 * @property {number} gamepad.zoom.speed - Zoom speed. Default is 0.008.
 */

var Options = {
  theme: 'dark',
  showLineUnits: false,
  showFeatureText: true,
  controls: {
    options: true,
    modes: true,
    utils: true,
    types: true,
    actions: true
  },
  map: {
    container: 'map',
    center: [-95.52816680236892, 39.56431143986035],
    zoom: 3.5,
    opacity: 1,
    maxPitch: 70,
    projection: 'mercator',
    style: 'Dark',
    hash: true,
    extent: [[[-127.3638459, 49.6212752], [-73.7295136, 49.6212752], [-73.7295136, 24.7473201], [-127.3638459, 24.7473201], [-127.3638459, 49.6212752]]]
  },
  styles: [{
    title: "Dark",
    uri: "mapbox://styles/mapbox/dark-v11"
  }, {
    title: "Light",
    uri: "mapbox://styles/mapbox/light-v11"
  }, {
    title: "Outdoors",
    uri: "mapbox://styles/mapbox/outdoors-v12"
  }, {
    title: "Streets",
    uri: "mapbox://styles/mapbox/navigation-night-v1"
  }, {
    title: "Standard",
    uri: "mapbox://styles/mapbox/standard"
  }, {
    title: "Satellite",
    uri: "mapbox://styles/mapbox/standard-satellite"
  }],
  keys: {
    "import": 'u',
    "export": 'd',
    "delete": 'Delete',
    cancel: 'Escape',
    select: 'Escape',
    edit: 'Enter',
    refresh: 'r',
    snapping: '!',
    pinning: '@',
    routing: '#',
    exploring: '$',
    painting: '%',
    polyline: '1',
    polygon: '2',
    rectangle: '3',
    circle: '4',
    text: '5'
  },
  commands: [{
    key: '.',
    modifier: false,
    /**
     * @function
     * @name command
     * @memberof module:geoflo.Options.commands
     * @description Executes a command based on the current mode and geoflo context.
     *
     * @param {Object} event - The event object containing details about the command execution.
     * @param {Object} geoflo - The geoflo context containing map and mode information.
     * @param {string} command - The command identifier to be executed.
     * @returns {void} This function does not return a value.
     */
    command: function command(event, geoflo, _command) {
      var options = {
        lngLat: geoflo.map.getCenter()
      };
      if (geoflo.currentMode.id === 'draw') {
        geoflo.currentMode.handleUp(options);
        geoflo.currentMode.handleClick(options);
      } else {
        geoflo.currentMode.handleClick(options);
      }
    }
  }],
  units: {
    Polyline: 'feet',
    Polygon: 'acres',
    Rectangle: 'acres',
    Icon: 'feature',
    Circle: 'feature',
    Marker: 'feature'
  },
  colors: {
    error: '#ff7676',
    primaryColor: "#d7ef7e",
    primaryBackground: "#5a5a5a",
    primaryText: "#c5c5c5",
    primaryBorder: "#6fafdb",
    secondaryColor: "#6fafdb",
    secondaryBackground: "#333333",
    secondaryText: "#333333",
    secondaryBorder: "#404040",
    primarySelect: "#333333",
    primaryEdit: "#d7ef7e",
    primaryHot: "#d7ef7e",
    primaryCold: "#6fafdb",
    primarySnap: "#d7ef7e",
    primaryBase: "#c5c5c5",
    primaryDebug: "#ff7676",
    primaryVertex: "#d7ef7e",
    secondarySelect: "#c5c5c5",
    secondaryEdit: "#c5c5c5",
    secondaryHot: "#242424",
    secondaryCold: "#c5c5c5",
    secondarySnap: "#6fafdb",
    secondaryBase: "#5a5a5a",
    secondaryDebug: "#d7ef7e",
    secondaryVertex: "#333333"
  },
  select: {
    popup: false,
    multiple: false
  },
  snapping: {
    enable: false,
    // Enables snapping to features
    pixels: false,
    // still working on this
    distance: 200 * 1.609344,
    // 200 miles to kilometers. Calculated by zoom level: (distance * Math.pow(2, Math.max(1, 19 - map.getZoom()))) / 100000
    tolerance: 0.002 // kilometers. Distance from the last click to hide/show mouse line
  },
  routing: {
    enable: false,
    // find shortest path
    precision: 0.0000015 // rounding coords to create topology. Higher the number will close gaps in lines and allow to find path
  },
  pinning: {
    enable: false,
    // Enables pinning (glueing) features together at vertices/points. When editing/dragging a point, all pinned points will move together.
    buffer: 50 / 5280 * 1.609344,
    // 50 feet to miles to kilometer. Pin features within a 50 foot radius. False for exact point location.
    idle: 20 // milliseconds of how long to idle after updating pinned features before checking for nearby features to snap to (helps with editing performance)
  },
  exploring: {
    enable: false,
    minZoom: 9,
    buffer: 5000 / 5280 * 1.609344,
    // 300 feet to miles to kilometer. Download roadways within a 300 foot radius.
    tolerance: 0.00001 // How much tolerance to simplify coordinates. Can be a function with map argument.
  },
  moving: {
    enable: false,
    // Enables moving feature
    distance: 3 / 5280 * 1.609344 // 3 feet to miles to kilometer. The distance in which to move the feature
  },
  painting: {
    enable: false,
    // Enables painting drawing for linestrings and polygons
    tolerance: 0.000005 // How much tolerance to simplify coordinates. Can be a function with map argument.
  },
  gamepad: {
    enable: true,
    debug: false,
    crosshairs: true,
    joystick: {
      min: 0.2,
      max: 0.7
    },
    camera: {
      free: true
    },
    pan: {
      speed: 0.001,
      min: 0.001,
      max: 0.05
    },
    bearing: {
      speed: 0.8
    },
    pitch: {
      speed: 1.5,
      max: 70
    },
    zoom: {
      speed: 0.008
    },
    rumble: {
      startDelay: 0,
      duration: 200,
      weakMagnitude: 1.0,
      strongMagnitude: 1.0
    },
    mapping: {
      /**
       * @function
       * @name Select
       * @memberof module:geoflo.Options.gamepad.mapping
       * @description Handles different types of events: press, hold, and release. 
       * On release, it triggers the click action for the 'clear' button.
       *
       * @param {Object} event - The event object containing details about the event.
       * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
       * @param {Object} event.geoflo - The context object that contains methods related to the event.
       * @returns {void} This function does not return a value.
       * 
       * @author Solutegrate
       * @copyright 2025
       */
      'Select': function Select(event) {
        if (event.type === 'press') {} else if (event.type === 'hold') {} else if (event.type === 'release') {
          event.geoflo.getButtons('clear').button.click();
        }
      },
      /**
       * @function
       * @name Start
       * @memberof module:geoflo.Options.gamepad.mapping
       * @description Handles different types of events such as press, hold, and release for gamepad interactions.
       *
       * @param {Object} event - The event object containing details about the input event.
       * @param {string} event.type - The type of the event (press, hold, release).
       * @param {Object} event.gamepad - The gamepad object associated with the event.
       * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joysticks.
       * @param {Object} event.mode - The current mode of the application.
       * @param {string} event.mode.id - The identifier for the current mode.
       * @param {Object} event.geoflo - The context object used to interact with the application.
       * @returns {void} This function does not return a value.
       * 
       * @author Solutegrate
       * @copyright 2025
       */
      'Start': function Start(event) {
        if (event.type === 'press') {} else if (event.type === 'hold') {} else if (event.type === 'release') {
          if (event.gamepad.hasJoysticks) {
            var button = event.mode.id === 'select' ? 'edit' : 'select';
            event.geoflo.getButtons(button).button.click();
          }
        }
      },
      /**
       * @function
       * @name Power
       * @memberof module:geoflo.Options.gamepad.mapping
       * @description Handles different types of power events such as press, hold, and release.
       *
       * @param {Object} event - The event object that contains information about the power event.
       * @param {string} event.type - The type of the event, which can be 'press', 'hold', or 'release'.
       * @param {Object} event.geoflo - The context object that provides access to UI elements.
       * @returns {void} This function does not return a value.
       * 
       * @author Solutegrate
       * @copyright 2025
       */
      'Power': function Power(event) {
        if (event.type === 'press') {} else if (event.type === 'hold') {} else if (event.type === 'release') {
          event.geoflo.getButtons('save').button.click();
        }
      },
      /**
       * @function
       * @name Menu
       * @memberof module:geoflo.Options.gamepad.mapping
       * @description Handles different types of menu events such as press, hold, and release.
       *
       * @param {Object} event - The event object that contains information about the event.
       * @param {string} event.type - The type of the event, which can be 'press', 'hold', or 'release'.
       * @returns {void} This function does not return a value.
       * 
       * @author Solutegrate
       * @copyright 2025
       */
      'Menu': function Menu(event) {
        if (event.type === 'press') {} else if (event.type === 'hold') {} else if (event.type === 'release') {}
      },
      /**
       * @function
       * @name Misc
       * @memberof module:geoflo.Options.gamepad.mapping
       * @description Handles different types of events related to gamepad interactions, including press, hold, and release actions.
       *
       * @param {Object} event - The event object containing details about the gamepad interaction.
       * @param {string} event.type - The type of the event, which can be 'press', 'hold', or 'release'.
       * @param {Object} event.gamepad - The gamepad object associated with the event.
       * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joystick controls.
       * @param {Object} event.geoflo - The context object providing access to the map and buttons.
       * @param {Object} event.geoflo.map - The map object that contains methods for getting the center and zoom level.
       * @returns {void} This function does not return a value.
       * 
       * @author Solutegrate
       * @copyright 2025
       */
      'Misc': function Misc(event) {
        if (event.type === 'press') {} else if (event.type === 'hold') {} else if (event.type === 'release') {
          if (event.gamepad.hasJoysticks) {
            event.geoflo.getButtons('zoom').button.click();
            var ready = setInterval(function () {
              if (!ctx.mapMoving) {
                clearInterval(ready);
                event.gamepad.map.center = event.geoflo.map.getCenter();
                event.gamepad.map.zoom = event.geoflo.map.getZoom();
              }
            }, 1);
          }
        }
      },
      /**
       * @function
       * @name A
       * @memberof module:geoflo.Options.gamepad.mapping
       * @description Handles different types of events such as press, hold, and release for gamepad interactions.
       *
       * @param {Object} event - The event object containing details about the gamepad interaction.
       * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
       * @param {Object} event.gamepad - The gamepad object associated with the event.
       * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joysticks.
       * @param {Object} event.gamepad.pressed - An object representing the pressed buttons on the gamepad.
       * @param {Object} event.geoflo - The context object for the event.
       * @returns {Function|undefined} Returns the result of the JoyLeftClick function if certain conditions are met; otherwise, it performs a button click action or
       * returns undefined.
       * 
       * @author Solutegrate
       * @copyright 2025
       */
      'A': function A(event) {
        if (event.type === 'press') {} else if (event.type === 'hold') {} else if (event.type === 'release') {
          if (!event.gamepad.hasJoysticks) {
            if (!event.gamepad.pressed['BumpLeft'] && !event.gamepad.pressed['BumpRight']) {
              return this['JoyLeftClick'](event);
            }
          } else {
            event.geoflo.getButtons('routing').button.click();
          }
        }
      },
      /**
       * @function
       * @name B
       * @memberof module:geoflo.Options.gamepad.mapping
       * @description Handles different types of events related to a gamepad button press, hold, and release actions.
       *
       * @param {Object} event - The event object containing details about the button action.
       * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
       * @param {Object} event.gamepad - The gamepad object associated with the event.
       * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joysticks.
       * @param {Object} event.gamepad.pressed - An object representing the pressed buttons on the gamepad.
       * @param {Object} event.geoflo - The context object for the event.
       * @returns {Function|undefined} Returns the result of the JoyRightClick function if certain conditions are met, otherwise returns undefined.
       * 
       * @author Solutegrate
       * @copyright 2025
       */
      'B': function B(event) {
        if (event.type === 'press') {} else if (event.type === 'hold') {} else if (event.type === 'release') {
          if (!event.gamepad.hasJoysticks) {
            if (!event.gamepad.pressed['BumpLeft'] && !event.gamepad.pressed['BumpRight']) {
              return this['JoyRightClick'](event);
            }
          } else {
            event.geoflo.getButtons('painting').button.click();
          }
        }
      },
      /**
       * @function
       * @name Y
       * @memberof module:geoflo.Options.gamepad.mapping
       * @description Handles gamepad events for pressing, holding, and releasing buttons.
       *
       * @param {Object} event - The event object containing information about the gamepad action.
       * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
       * @param {Object} event.gamepad - The gamepad object that contains the state of the gamepad.
       * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joysticks.
       * @param {Object} event.gamepad.pressed - An object representing the pressed buttons on the gamepad.
       * @param {function} event.gamepad.setSpeed - A function to set the speed of the gamepad.
       * @param {Object} event.geoflo - The context object used to interact with the gamepad.
       * 
       * @author Solutegrate
       * @copyright 2025
       */
      'Y': function Y(event) {
        if (event.type === 'press') {
          if (!event.gamepad.hasJoysticks) {
            if (event.gamepad.pressed['BumpLeft'] || event.gamepad.pressed['BumpRight']) event.gamepad.setSpeed(event.value, false);
          }
        } else if (event.type === 'hold') {} else if (event.type === 'release') {
          if (event.gamepad.hasJoysticks) {
            event.geoflo.getButtons('snapping').button.click();
          }
        }
      },
      /**
       * @function
       * @name X
       * @memberof module:geoflo.Options.gamepad.mapping
       * @description Handles gamepad events for press, hold, and release actions.
       *
       * @param {Object} event - The event object containing details about the gamepad action.
       * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
       * @param {Object} event.gamepad - The gamepad object that contains the state of the gamepad.
       * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joysticks.
       * @param {Object} event.gamepad.pressed - An object representing the buttons that are currently pressed.
       * @param {function} event.gamepad.setSpeed - A method to set the speed of the gamepad.
       * @param {Object} event.geoflo - The context object that provides access to the gamepad's buttons.
       * @returns {void} This function does not return a value.
       * 
       * @author Solutegrate
       * @copyright 2025
       */
      'X': function X(event) {
        if (event.type === 'press') {
          if (!event.gamepad.hasJoysticks) {
            if (event.gamepad.pressed['BumpLeft'] || event.gamepad.pressed['BumpRight']) event.gamepad.setSpeed(event.value, true);
          }
        } else if (event.type === 'hold') {} else if (event.type === 'release') {
          if (event.gamepad.hasJoysticks) {
            event.geoflo.getButtons('pinning').button.click();
          }
        }
      },
      /**
       * @function
       * @name JoyLeftMove
       * @memberof module:geoflo.Options.gamepad.mapping
       * @description Handles the joystick left movement events, including press, hold, and release actions.
       *
       * @param {Object} event - The event object containing details about the joystick action.
       * @param {string} event.type - The type of the event (press, hold, or release).
       * @param {Object} event.gamepad - The gamepad object associated with the event.
       * @param {boolean} event.value - The value indicating the direction or state of the joystick.
       * @returns {void} This function does not return a value.
       * 
       * @author Solutegrate
       * @copyright 2025
       */
      'JoyLeftMove': function JoyLeftMove(event) {
        if (event.type === 'press') {} else if (event.type === 'hold') {
          event.gamepad.setCenter(event.value, event.gamepad.options.camera.free); // Pan map
        } else if (event.type === 'release') {
          event.gamepad.setCenter(false, event.gamepad.options.camera.free); // Reset map center
        }
      },
      /**
       * @function
       * @name JoyRightMove
       * @memberof module:geoflo.Options.gamepad.mapping
       * @description Handles the movement of the gamepad based on the event type and name.
       *
       * @param {Object} event - The event object containing details about the input.
       * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
       * @param {string} event.name - The name of the input event (e.g., 'Up', 'Down', 'Left', 'Right').
       * @param {number} event.value - The value associated with the input event.
       * @param {Object} event.gamepad - The gamepad object that handles movement.
       * @param {function} event.gamepad.setPitch - Function to set the pitch of the map.
       * @param {function} event.gamepad.setBearing - Function to set the bearing of the map.
       * @returns {void} This function does not return a value.
       * 
       * @author Solutegrate
       * @copyright 2025
       */
      'JoyRightMove': function JoyRightMove(event) {
        if (event.type === 'press') {} else if (event.type === 'hold') {
          if (event.name.includes('Up') || event.name.includes('Down')) {
            event.gamepad.setPitch(event.value, event.name.includes('Up')); // Pitch map
          } else if (event.name.includes('Left') || event.name.includes('Right')) {
            event.gamepad.setBearing(event.value, event.name.includes('Left')); // Rotate map
          }
        } else if (event.type === 'release') {}
      },
      /**
       * @function
       * @name JoyLeftClick
       * @memberof module:geoflo.Options.gamepad.mapping
       * @description Handles the left click events for drawing actions, including press, hold, and release actions.
       *
       * @param {Object} event - The event object containing details about the click action.
       * @param {string} event.type - The type of the event, which can be 'press', 'hold', or 'release'.
       * @param {Object} event.mode - The mode object associated with the event.
       * @param {string} event.mode.id - The identifier for the mode, which determines the action taken on release.
       * @returns {void} This function does not return a value.
       * 
       * @author Solutegrate
       * @copyright 2025
       */
      'JoyLeftClick': function JoyLeftClick(event) {
        if (event.type === 'press') {} else if (event.type === 'hold') {} else if (event.type === 'release') {
          if (event.mode.id === 'draw') {
            event.mode.deleteVertex();
          }
        }
      },
      /**
       * @function
       * @name JoyRightClick
       * @memberof module:geoflo.Options.gamepad.mapping
       * @description Handles right-click events for drawing modes, processing different event types such as press, hold, and release.
       *
       * @param {Object} event - The event object containing details about the right-click action.
       * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
       * @param {Object} event.mode - The current mode of the application, which includes methods for handling events.
       * @param {Object} event.lngLat - The longitude and latitude of the click location.
       * @returns {boolean} Returns false if the event does not have a valid lngLat or if the event type is not handled.
       * 
       * @author Solutegrate
       * @copyright 2025
       */
      'JoyRightClick': function JoyRightClick(event) {
        if (event.type === 'press') {
          if (event.mode.id === 'draw') {
            if (!event.lngLat) return false;
            return event.mode.handleDown(event);
          }
        } else if (event.type === 'hold') {} else if (event.type === 'release') {
          if (!event.lngLat) return false;
          if (event.mode.id === 'draw') {
            event.mode.handleUp(event);
            event.mode.handleClick(event);
          } else {
            event.mode.handleClick(event);
          }
        }
      },
      /**
       * @function
       * @name BumpLeft
       * @memberof module:geoflo.Options.gamepad.mapping
       * @description Handles the bump left action based on the event type and gamepad state.
       *
       * @param {Object} event - The event object containing information about the action.
       * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
       * @param {Object} event.gamepad - The gamepad object associated with the event.
       * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joysticks.
       * @param {Object} event.gamepad.pressed - An object representing the buttons pressed on the gamepad.
       * @param {function} event.gamepad.setSpeed - A function to set the speed of the gamepad.
       * @param {number} event.value - The value to be used for setting the speed.
       * @returns {boolean|undefined} Returns false if the right bump is pressed without joysticks, otherwise returns the result of setSpeed.
       * 
       * @author Solutegrate
       * @copyright 2025
       */
      'BumpLeft': function BumpLeft(event) {
        if (event.type === 'press') {
          if (!event.gamepad.hasJoysticks) {
            if (event.gamepad.pressed['BumpRight']) return false;
          } else {
            return event.gamepad.setSpeed(event.value, true); // Pan speed down
          }
        } else if (event.type === 'hold') {
          if (!event.gamepad.hasJoysticks) {}
        } else if (event.type === 'release') {}
      },
      /**
       * @function
       * @name BumpRight
       * @memberof module:geoflo.Options.gamepad.mapping
       * @description Handles the bump right action based on the event type and gamepad state.
       *
       * @param {Object} event - The event object containing information about the action.
       * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
       * @param {Object} event.gamepad - The gamepad object associated with the event.
       * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joysticks.
       * @param {Object} event.gamepad.pressed - The current pressed buttons on the gamepad.
       * @param {function} event.gamepad.setSpeed - Function to set the speed of the gamepad.
       * @param {number} event.value - The value to set the speed to.
       * @returns {boolean} Returns false if the left bump is pressed and no joysticks are present, otherwise returns the result of setting the speed.
       * 
       * @author Solutegrate
       * @copyright 2025
       */
      'BumpRight': function BumpRight(event) {
        if (event.type === 'press') {
          if (!event.gamepad.hasJoysticks) {
            if (event.gamepad.pressed['BumpLeft']) return false;
          } else {
            return event.gamepad.setSpeed(event.value, false); // Pan speed down
          }
        } else if (event.type === 'hold') {} else if (event.type === 'release') {}
      },
      /**
       * @function
       * @name TrigLeft
       * @memberof module:geoflo.Options.gamepad.mapping
       * @description Handles different types of events related to gamepad input, specifically press, hold, and release actions.
       *
       * @param {Object} event - The event object containing information about the gamepad input.
       * @param {string} event.type - The type of event, which can be 'press', 'hold', or 'release'.
       * @param {number} event.value - The value associated with the event, used when the event type is 'hold'.
       * @param {Object} event.gamepad - The gamepad object that provides methods for interaction.
       * @returns {void} This function does not return a value.
       * 
       * @author Solutegrate
       * @copyright 2025
       */
      'TrigLeft': function TrigLeft(event) {
        if (event.type === 'press') {} else if (event.type === 'hold') {
          event.gamepad.setZoom(event.value, true);
        } else if (event.type === 'release') {}
      },
      /**
       * @function
       * @name TrigRight
       * @memberof module:geoflo.Options.gamepad.mapping
       * @description Handles different types of events related to gamepad interactions, including press, hold, and release actions.
       *
       * @param {Object} event - The event object containing details about the interaction.
       * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
       * @param {number} event.value - The value associated with the event, used when the event type is 'hold'.
       * @param {Object} event.gamepad - The gamepad object that provides methods for interaction.
       * @returns {void} This function does not return a value.
       * 
       * @author Solutegrate
       * @copyright 2025
       */
      'TrigRight': function TrigRight(event) {
        if (event.type === 'press') {} else if (event.type === 'hold') {
          event.gamepad.setZoom(event.value, false);
        } else if (event.type === 'release') {}
      },
      /**
       * @function
       * @name DpadUp
       * @memberof module:geoflo.Options.gamepad.mapping
       * @description Handles the D-pad up input events for gamepad controls, managing different actions based on the event type.
       *
       * @param {Object} event - The event object containing details about the input event.
       * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
       * @param {Object} event.gamepad - The gamepad object associated with the event.
       * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joysticks.
       * @param {Object} event.gamepad.pressed - An object representing the buttons currently pressed on the gamepad.
       * @param {function} event.gamepad.setPitch - Function to set the pitch based on the event value.
       * @param {function} event.gamepad.setCenter - Function to set the center based on the event value and camera options.
       * @param {Object} event.geoflo - The context object for accessing gamepad buttons.
       * @param {Object} event.geoflo.getButtons - Function to retrieve button states.
       * @param {Object} event.value - The value associated with the event.
       * @returns {void} This function does not return a value.
       * 
       * @author Solutegrate
       * @copyright 2025
       */
      'DpadUp': function DpadUp(event) {
        if (event.type === 'press') {} else if (event.type === 'hold') {
          if (!event.gamepad.hasJoysticks) {
            if (event.gamepad.pressed['BumpLeft'] && event.gamepad.pressed['BumpRight']) {
              event.gamepad.setPitch(event.value, true); // Pitch map
            } else {
              event.gamepad.setCenter(event.value, event.gamepad.options.camera.free); // Pan map
            }
          }
        } else if (event.type === 'release') {
          if (event.gamepad.hasJoysticks) {
            event.geoflo.getButtons('polygon').button.click();
          }
        }
      },
      /**
       * @function
       * @name DpadDown
       * @memberof module:geoflo.Options.gamepad.mapping
       * @description Handles the D-pad down input event for gamepad controls, managing different actions based on the event type.
       *
       * @param {Object} event - The event object containing information about the input event.
       * @param {string} event.type - The type of the event (e.g., 'press', 'hold', 'release').
       * @param {Object} event.gamepad - The gamepad object that contains the state of the gamepad.
       * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joystick controls.
       * @param {Object} event.gamepad.pressed - An object representing the buttons currently pressed on the gamepad.
       * @param {Function} event.gamepad.setPitch - Function to set the pitch based on the event value.
       * @param {Function} event.gamepad.setCenter - Function to set the center based on the event value and camera options.
       * @param {Object} event.geoflo - The context object for the gamepad.
       * @param {Object} event.geoflo.getButtons - Function to retrieve button states.
       * @param {Object} event.geoflo.getButtons('Circle') - The button object for the 'Circle' button.
       * @param {Function} event.geoflo.getButtons('Circle').button.click - Function to simulate a button click.
       * @returns {void} This function does not return a value.
       * 
       * @author Solutegrate
       * @copyright 2025
       */
      'DpadDown': function DpadDown(event) {
        if (event.type === 'press') {} else if (event.type === 'hold') {
          if (!event.gamepad.hasJoysticks) {
            if (event.gamepad.pressed['BumpLeft'] && event.gamepad.pressed['BumpRight']) {
              event.gamepad.setPitch(event.value, false); // Pitch map
            } else {
              event.gamepad.setCenter(event.value, event.gamepad.options.camera.free); // Pan map
            }
          }
        } else if (event.type === 'release') {
          if (event.gamepad.hasJoysticks) {
            event.geoflo.getButtons('circle').button.click();
          }
        }
      },
      /**
       * @function
       * @name DpadLeft
       * @memberof module:geoflo.Options.gamepad.mapping
       * @description Handles the D-pad left input events for a gamepad, processing press, hold, and release actions.
       *
       * @param {Object} event - The event object containing details about the input action.
       * @param {string} event.type - The type of the event (press, hold, or release).
       * @param {Object} event.gamepad - The gamepad object associated with the event.
       * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joysticks.
       * @param {Object} event.gamepad.pressed - An object representing the buttons currently pressed on the gamepad.
       * @param {Function} event.gamepad.setBearing - Function to set the bearing of the map.
       * @param {Function} event.gamepad.setCenter - Function to set the center of the map.
       * @param {Object} event.gamepad.options - Options related to the gamepad.
       * @param {Object} event.geoflo - The context object for the gamepad.
       * @returns {void} This function does not return a value.
       * 
       * @author Solutegrate
       * @copyright 2025
       */
      'DpadLeft': function DpadLeft(event) {
        if (event.type === 'press') {} else if (event.type === 'hold') {
          if (!event.gamepad.hasJoysticks) {
            if (event.gamepad.pressed['BumpLeft'] && event.gamepad.pressed['BumpRight']) {
              event.gamepad.setBearing(event.value, true); // Rotate map
            } else {
              event.gamepad.setCenter(event.value, event.gamepad.options.camera.free); // Pan map
            }
          }
        } else if (event.type === 'release') {
          if (event.gamepad.hasJoysticks) {
            event.geoflo.getButtons('polyline').button.click();
          }
        }
      },
      /**
       * @function
       * @name DpadRight
       * @memberof module:geoflo.Options.gamepad.mapping
       * @description Handles the D-pad right input events for gamepad controls, managing actions based on the type of event (press, hold, release).
       *
       * @param {Object} event - The event object containing details about the input event.
       * @param {string} event.type - The type of the event (press, hold, release).
       * @param {Object} event.gamepad - The gamepad object that contains the state of the gamepad.
       * @param {boolean} event.gamepad.hasJoysticks - Indicates if the gamepad has joystick controls.
       * @param {Object} event.gamepad.pressed - An object representing the buttons currently pressed on the gamepad.
       * @param {Function} event.gamepad.setBearing - Function to set the bearing of the map.
       * @param {Function} event.gamepad.setCenter - Function to set the center of the map.
       * @param {Object} event.gamepad.options - Options for the gamepad.
       * @param {Object} event.geoflo - The context object for the gamepad.
       * @returns {void} This function does not return a value.
       * 
       * @author Solutegrate
       * @copyright 2025
       */
      'DpadRight': function DpadRight(event) {
        if (event.type === 'press') {} else if (event.type === 'hold') {
          if (!event.gamepad.hasJoysticks) {
            if (event.gamepad.pressed['BumpLeft'] && event.gamepad.pressed['BumpRight']) {
              event.gamepad.setBearing(event.value, false); // Rotate map
            } else {
              event.gamepad.setCenter(event.value, event.gamepad.options.camera.free); // Pan map
            }
          }
        } else if (event.type === 'release') {
          if (event.gamepad.hasJoysticks) {
            event.geoflo.getButtons('rectangle').button.click();
          }
        }
      }
    }
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Options);

/***/ }),

/***/ "./src/Select.js":
/*!***********************!*\
  !*** ./src/Select.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @mixin
 * @memberof module:geoflo
 * @name Select
 * @description This module provides the select functionality for the Geoflo application. It allows users to select features on the map by clicking on them.
 * @returns {Object} Returns the Select object.
 */
var Select = function Select() {
  var geoflo = this.geoflo;
  var lastKnownSelectIds = [];
  var removedFeatures = [];
  var nearFeatures = [];
  var clickCoords;
  var multipleSelect;
  var selectedId;
  this.id = 'select';

  /**
  * @function
   * @memberof module:geoflo.Select
  * @name activate
  * @description This function activates the select feature functionality by enabling drag pan, setting buttons, and setting the active button to 'select'. It also triggers a 'select.activate' event with the provided options.
  * @param {Object} options - The options object for activation.
  * @param {string} [options.id] - The ID of the feature to select.
  * @param {Object} [options.feature] - The feature object to select.
  * @returns {boolean} Returns false if already activated.
  */
  this.activate = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (this.activated) return false;
    if (geoflo.currentMode.id !== this.id) return options.mode = this.id, geoflo.setMode(options);
    this.activated = true;
    geoflo.map.dragPan.enable();
    geoflo.setButtons();
    geoflo.setActiveButton('select');
    geoflo.fire('select.activate', {
      activated: true,
      options: options
    });
    if (this.gamepad) {}
    geoflo.map.getSource(geoflo.statics.constants.sources.SELECT).setData(turf.featureCollection([]));
    setTimeout(function (e) {
      e.selectFeature(options.id ? options.id : options.feature ? options.feature.id : false);
    }, 5, this);
  };

  /**
   * @function
      * @memberof module:geoflo.Select
   * @name deactivate
   * @description This function deactivates the current feature by setting the 'activated' flag to false and triggering necessary actions.
   * @returns {boolean} Returns false if the feature is not activated.
   */
  this.deactivate = function () {
    if (!this.activated) return false;
    this.activated = false;
    this.deselectCurrentFeature();
    geoflo.setButtons();
    geoflo.fire('select.deactivate', {
      activated: true
    });
  };

  /**
   * @function
      * @memberof module:geoflo.Select
   * @name canHandle
   * @description This function determines if the given mode name is equal to the SELECT mode.
   * @param {string} modeName - The mode name to be checked.
   * @returns {boolean} Returns true if the mode name is SELECT, false otherwise.
   */
  this.canHandle = function (modeName) {
    return geoflo.statics.constants.modes.SELECT === modeName;
  };

  /**
   * @function
      * @memberof module:geoflo.Select
   * @name selectFeature
   * @description Selects a feature by its ID, adds it to the selected features list, and optionally adds a popup.
   * @param {string} id - The ID of the feature to be selected.
   * @returns {Array} - An array of removed features if wantingToEdit is false, otherwise returns the removed feature.
   */
  this.selectFeature = function (id) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var popup = geoflo.options.select.popup;
    geoflo.map.getSource(geoflo.statics.constants.sources.SELECT).setData(turf.featureCollection([]));
    if (!id) return false;
    if (lastKnownSelectIds.indexOf(id) === -1) lastKnownSelectIds.push(id);
    //if (geoflo.hasSelection()) geoflo.forEachSelectedFeature((feature) => { });

    removedFeatures = geoflo.hideFeatures([id]);
    geoflo.addFeaturesToSelected(removedFeatures, options);
    popup ? this.addPopup(removedFeatures) : false;
    geoflo.fire('feature.select', {
      ids: geoflo.getSelectedFeatureIds(),
      features: geoflo.getSelectedFeatures()
    });
    if (!geoflo.wantingToEdit) return removedFeatures;
    if (removedFeatures.length == 1 && id === removedFeatures[0].id) editFeature(removedFeatures[0]);
    return removedFeatures;
  };

  /**
   * @function
      * @memberof module:geoflo.Select
   * @name deselectCurrentFeature
   * @description Deselects the current feature by removing its selection.
   */
  this.deselectCurrentFeature = function () {
    var ids = geoflo.getSelectedFeatureIds();
    var features = geoflo.getSelectedFeatures();
    geoflo.removeSelection();
    geoflo.fire('feature.deselect', {
      ids: ids,
      features: features
    });
  };

  /**
   * @function
      * @memberof module:geoflo.Select
   * @name addPopup
   * @description This function creates a popup element with the specified features and adds it to the map at the click coordinates.
   * @param {Object} features - The features to be displayed in the popup.
   * @param {string} features.title - The title of the popup.
   * @param {string} features.description - The description of the popup.
   * @param {number} features.latitude - The latitude coordinate for the popup location.
   * @param {number} features.longitude - The longitude coordinate for the popup location.
   */
  this.addPopup = function (features) {
    this.popupElement = buildPopup(features);
    this.popup = new mapboxgl.Popup({
      closeOnClick: false
    }).setLngLat(clickCoords).setDOMContent(this.popupElement).addTo(geoflo.map).setOffset(12);
    this.popup._container.style['margin-bottom'] = '10px';
  };

  /**
   * @function
      * @memberof module:geoflo.Select
   * @name removePopup
   * @description Removes the popup element from the DOM if it exists.
   * @return {boolean} Returns true if the popup element was successfully removed, otherwise false.
   */
  this.removePopup = function () {
    return this.popup && this.popup.remove ? this.popup.remove() : false;
  };

  /**
   * @function
      * @memberof module:geoflo.Select
   * @name handleMove
   * @description Handles the mouse move event.
   * @param {Event} event - The event object representing the mouse move event.
   */
  this.handleMove = function (event) {
    //geoflo.setMapClass('pointer');
  };

  /**
   * @function
      * @memberof module:geoflo.Select
   * @name handleClick
   * @description Handles the click event on the map and selects features based on the event.
   * @param {Object} event - The event object containing information about the click event.
   * @returns {boolean} Returns false if geoflo.noSelect is true, otherwise selects features based on the event.
   */
  this.handleClick = function (event) {
    var features = geoflo.getRenderedDrawnFeatures(event.lngLat);
    clickCoords = [event.lngLat.lng, event.lngLat.lat];
    multipleSelect = event.originalEvent && event.originalEvent.shiftKey && geoflo.options.select.multiple;
    if (features.length > 0) {
      if (!geoflo.Layers.getSelection(features, clickCoords)) return;

      // If a different feature stack is clicked, reset the cycling order
      var newFeatureSet = JSON.stringify(features);
      if (newFeatureSet !== JSON.stringify(nearFeatures)) {
        nearFeatures = features;
        selectedId = null; // Reset selection tracking
      }
      selectFeature.call(this, nearFeatures);
    } else if (!multipleSelect) {
      lastKnownSelectIds = [];
      nearFeatures = [];
      clickCoords = false;
      selectedId = false;
      this.deselectCurrentFeature();
    }
  };

  /**
   * @function
      * @memberof module:geoflo.Select
   * @name handleDrag
   * @description Handles the drag event triggered by a user interaction. It sets the map class to 'grabbing' to indicate dragging.
   * @param {Event} event - The event object representing the drag event.
   */
  this.handleDrag = function (event) {
    //geoflo.setMapClass('grabbing');
  };
  function buildPopup(features) {
    var element = document.createElement('div');
    element.classList.add('popup-table-holder');
    var table = buildTable(features);
    element.appendChild(table);
    if (nearFeatures.length > 1) {
      var button = document.createElement('div');
      button.classList.add('popup-table-button');
      button.innerHTML = "<button> Next </button>";
      button.addEventListener('click', selectFeature.bind(this));
      element.appendChild(button);
    }
    return element;

    /* const button = document.createElement('div');
    button.innerHTML = `<button class="btn btn-success btn-simple text-white" > Assign</button>`;
    element.appendChild(button);
    button.addEventListener('click', (e) => { console.log('Button clicked' + name); }); */
  }
  ;
  function buildTable(features) {
    var table = document.createElement('table');
    var properties = ['id', 'type'];
    table.style.width = '100%';
    table.style.height = '100%';
    table.setAttribute('border', '1');
    table.classList.add('popup-table');
    var tableBody = document.createElement('tbody');
    features.forEach(function (feature, index) {
      var type = feature.properties.type;
      properties.forEach(function (prop) {
        tableBody.appendChild(buildRow(prop, feature.properties[prop]));
      });
      tableBody.appendChild(buildRow('geometry', feature.geometry.type));
      if (feature.geometry.type === 'LineString') {
        geoflo.Features.addUnits(feature, 'feet');
        tableBody.appendChild(buildRow('unit', feature.geometry.unit));
        tableBody.appendChild(buildRow('units', feature.geometry.units));
      } else if (type === 'Text') {
        tableBody.appendChild(buildRow('content', feature.properties.text));
      } else if (feature.geometry.type === 'Polygon') {
        geoflo.Features.addUnits(feature, 'acres');
        tableBody.appendChild(buildRow('unit', feature.geometry.unit));
        tableBody.appendChild(buildRow('units', feature.geometry.units));
      }
    });
    table.appendChild(tableBody);
    return table;
  }
  ;
  function buildRow(header, data) {
    var tr = document.createElement('tr');
    tr.classList.add('popup-table-row');
    if (header) {
      var th = document.createElement('th');
      th.classList.add('popup-table-header');
      th.appendChild(document.createTextNode(header));
      tr.appendChild(th);
    }
    var td = document.createElement('td');
    td.classList.add('popup-table-data');
    td.classList.add(header);
    td.appendChild(document.createTextNode(data));
    tr.appendChild(td);
    return tr;
  }
  function selectFeature(features) {
    multipleSelect = geoflo.options.select.multiple;
    nearFeatures = features;
    if (!nearFeatures.length) return;

    // Find index of currently selected feature
    var currentIndex = nearFeatures.findIndex(function (feature) {
      return feature.id === selectedId;
    });
    var nextIndex = currentIndex;
    var loopCount = 0; // Prevents infinite loops

    // Find the next feature that is *not* already selected
    do {
      nextIndex = (nextIndex + 1) % nearFeatures.length;
      loopCount++;

      // If we've looped through all options, break (prevents infinite loops)
      if (loopCount > nearFeatures.length) {
        console.warn("Looped through all features, no new selection available.");
        return;
      }
    } while (nearFeatures[nextIndex].properties['_selected']); // Skip selected features

    selectedId = nearFeatures[nextIndex].id || nearFeatures[nextIndex].properties['id'];
    console.log("Selecting Feature:", selectedId);
    if (!multipleSelect) {
      geoflo.currentMode.deselectCurrentFeature();
    }
    geoflo.currentMode.selectFeature(selectedId);
  }
  function editFeature(feature) {
    geoflo.wantingToEdit = false;
    geoflo.setMode('edit', feature.properties.type, feature);
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Select);

/***/ }),

/***/ "./src/Snapping.js":
/*!*************************!*\
  !*** ./src/Snapping.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
/**
 * @mixin
 * @memberof module:geoflo
 * @name Snapping
 * @description This module provides the snapping functionality for the Geoflo application. It allows users to snap features to the map by creating a buffer around the feature and snapping to nearby features.
 * @param {Object} mode - The mode object containing the type of mode.
 * @returns {Object} Returns the Snapping object.
 */
var Snapping = function Snapping(mode) {
  var geoflo = this.geoflo;
  this.type = mode.type;

  /**
   * @function
      * @memberof module:geoflo.Snapping
   * @name activate
   * @description This function enables the object and sets the snapping option to true.
   */
  this.activate = function () {
    this.enabled = true;
    geoflo.options['snapping'].enable = true;
  };

  /**
   * @function
      * @memberof module:geoflo.Snapping
   * @name deactivate
   * @description This function sets the 'enabled' property to false, disables snapping, and updates the mesh data.
   * @returns {void}
   */
  this.deactivate = function () {
    this.enabled = false;
    geoflo.options['snapping'].enable = false;
    geoflo.updateMeshData([], true);
  };

  /**
   * @function
      * @memberof module:geoflo.Snapping
   * @name getClosest
   * @description Finds the closest point to the given coordinates within a specified radius or pixel distance.
   * @param {Array<number>} coords - The coordinates [longitude, latitude] to find the closest point to.
   * @param {Array<Object>} features - An array of features to search for the closest point within.
   * @returns {Object} An object containing the closest point and its coordinates.
   */
  this.getClosest = function (coords, features) {
    var calculatedRadius = geoflo.options.snapping.distance * Math.pow(2, Math.max(1, 19 - geoflo.map.getZoom()));
    var radiusInKm = calculatedRadius / 100000;
    var pixelDistance = geoflo.options.snapping.pixels ? geoflo.options.snapping.pixels * metersPerPixel(coords[1], geoflo.map.getZoom()) : false;
    features = features ? geoflo.getRenderedSnapFeatures({
      lng: coords[0],
      lat: coords[1]
    }, radiusInKm) : [geoflo.hotFeature];
    var closestPoint = findClosestPoint(features, coords, radiusInKm, pixelDistance);
    var coords = !closestPoint ? false : pixelDistance ? closestPoint.coords : closestPoint.type === 'vertex' && closestPoint.dist <= radiusInKm ? closestPoint.coords : false;
    return {
      point: closestPoint,
      coords: coords
    };
  };

  /**
   * @function
      * @memberof module:geoflo.Snapping
   * @name setClosest
   * @description This function calculates the closest feature to the given coordinates within a specified radius and snapping parameters. It determines if the closest feature is a point or a vertex and returns the snapped feature accordingly.
   * @param {Array<number>} coords - The coordinates [longitude, latitude] to find the closest feature to.
   * @param {boolean} isPoint - Indicates if the feature is a point.
   * @param {boolean} isVertex - Indicates if the feature is a vertex.
   * @returns {Object} The snapped feature based on the calculated closest point or line.
   */
  this.setClosest = function (coords, isPoint, isVertex) {
    if (!coords || isNaN(coords[0]) || isNaN(coords[1])) return false;
    var snapFeature = null;
    var calculatedRadius = geoflo.options.snapping.distance * Math.pow(2, Math.max(1, 19 - geoflo.map.getZoom()));
    var radiusInKm = calculatedRadius / 100000;
    var pixelDistance = geoflo.options.snapping.pixels ? geoflo.options.snapping.pixels * metersPerPixel(coords[1], geoflo.map.getZoom()) : false;
    var filter = false;
    if (geoflo.Pinning && geoflo.Pinning.pinnedFeatures.length) {
      filter = ['case', ['any'].concat(_toConsumableArray(geoflo.Pinning.pinnedFeatures.map(function (e) {
        return ["==", ["get", "id"], e.id || e.properties.id];
      }))), false, true];
    }
    var nearFeatures = geoflo.getRenderedFeatures({
      lng: coords[0],
      lat: coords[1]
    }, radiusInKm, filter);
    var closestPoint = nearFeatures && nearFeatures.length ? findClosestPoint(nearFeatures, coords, radiusInKm, pixelDistance) : false;
    var lastClickDistance, lastClickArray, lastClickEqual;
    geoflo.closestPoint = closestPoint;
    if (!nearFeatures && !isPoint || !closestPoint && !isPoint) return this.updateFeature(coords);
    if (!closestPoint || !closestPoint.coords) return snapFeature;
    if (isVertex || !geoflo.lastClick) {
      snapFeature = turf.point(closestPoint.coords);
    } else {
      lastClickArray = Array.isArray(geoflo.lastClick.coords) && Array.isArray(geoflo.lastClick.coords[0]);
      if (lastClickArray) geoflo.lastClick.coords = geoflo.lastClick.coords[0];
      lastClickDistance = turf.distance(turf.point(coords), turf.point(geoflo.lastClick.coords));
      lastClickEqual = geoflo.Utilities.isPointEqual(geoflo.lastClick.coords, closestPoint.coords);
      if (lastClickEqual && lastClickDistance > geoflo.options.snapping.tolerance) return this.updateFeature(coords);
      snapFeature = turf.lineString([geoflo.lastClick.coords, closestPoint.coords]);
    }
    geoflo.fire('snapping.add', {
      closest: closestPoint,
      snapped: snapFeature
    });
    return snapFeature;
  };

  /**
   * @function
      * @memberof module:geoflo.Snapping
   * @name setFeature
   * @description This function sets a feature on the map using the provided feature and coordinates. It handles different scenarios such as creating a point, line, or polygon feature based on the input parameters.
   * @param {Object} feature - The feature to be set on the map.
   * @param {Array} coords - The coordinates for the feature.
   * @returns {Object} The feature that was set on the map.
   */
  this.setFeature = function (feature, coords) {
    if (geoflo.touchClick) return null;
    feature = feature || geoflo.snapFeature;
    if (!feature && coords) return setFeature(turf.point(coords));
    if (!feature) return geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([])), null;
    var snapCoords = feature.geometry.coordinates;
    var lastClick = coords || geoflo.lastClick.coords;
    var firstClick = geoflo.firstClick.coords;
    var isPolygon = this.type === 'Polygon' || feature.properties.type === 'Polygon';
    var isPolyline = feature.geometry.type === "LineString";
    if (!isPolyline || snapCoords.length < 2) {
      feature = setFeature(isPolygon ? turf.lineString([firstClick, lastClick]) : turf.point(lastClick));
    } else if (geoflo.hotFeature) {
      var hotCoords = geoflo.hotFeature.geometry.coordinates;
      if (isPolygon) snapCoords.pop();
      hotCoords.splice.apply(hotCoords, [-1, 1].concat(geoflo.Utilities.consumableArray(snapCoords)));
    } else {
      geoflo.hotFeature = turf.lineString(snapCoords);
    }
    geoflo.Utilities.setProperty(geoflo.hotFeature, 'type', this.type);
    feature = setFeature(isPolygon ? turf.lineString([firstClick, lastClick]) : turf.point(lastClick));
    geoflo.snapFeature = feature;
    return geoflo.snapFeature;
  };

  /**
   * @function
      * @memberof module:geoflo.Snapping
   * @name setVertex
   * @description This function determines the vertex based on snapping and routing settings. It sets the closest feature when snapping is enabled and calculates the route if routing is enabled. It updates the map sources accordingly and triggers events related to vertex dragging and snapping.
   * @param {Object} geoflo - The context object containing various settings and data.
   * @returns {boolean} Returns false if snapping is disabled or no snapped vertex is available.
   */
  this.setVertex = function () {
    var snapToFeature = geoflo.Snapping.enabled;
    if (geoflo.bypassSnapping) snapToFeature = false;
    var calculateRoute = geoflo.Routing && geoflo.Routing.enabled;
    if (geoflo.bypassRouting) calculateRoute = false;
    if (!snapToFeature) return false;
    var coords = geoflo.snappedVertex;
    if (!coords || isNaN(coords[0]) || isNaN(coords[1])) return false;
    geoflo.snapFeature = this.setClosest(coords, true, true);
    if (calculateRoute) geoflo.snapFeature = geoflo.Routing.getClosest() || geoflo.snapFeature;
    if (!geoflo.snapFeature) return geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
    geoflo.Utilities.setProperty(geoflo.snapFeature, 'type', geoflo.currentMode.type);
    geoflo.map.getSource(geoflo.statics.constants.sources[calculateRoute ? 'ROUTE' : 'SNAP']).setData(turf.featureCollection([geoflo.snapFeature]));
    geoflo.hotFeature.geometry.coordinates[geoflo.dragIndex] = geoflo.snapFeature.geometry.coordinates;
    geoflo.map.getSource(geoflo.statics.constants.sources.HOT).setData(turf.featureCollection([geoflo.hotFeature]));
    geoflo.fire('vertex.dragsnap', {
      feature: geoflo.hotFeature,
      vertex: turf.point(coords)
    });
  };

  /**
   * @function
      * @memberof module:geoflo.Snapping
   * @name addFeature
   * @description This function adds a feature to the map by setting the data of the specified source with the provided feature. It also updates the properties of the feature if properties are provided.
   * @param {Object} feature - The feature to be added to the map.
   * @param {Object} [properties={}] - Additional properties to be assigned to the feature.
   * @param {boolean} [dontAdd] - Flag to prevent adding the feature if set to true.
   * @returns {boolean} Returns false if the feature is not provided or if dontAdd flag is set.
   */
  this.addFeature = function (feature) {
    var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var dontAdd = arguments.length > 2 ? arguments[2] : undefined;
    geoflo.map.getSource(geoflo.statics.constants.sources['SNAP']).setData(turf.featureCollection([]));
    geoflo.map.getSource(geoflo.statics.constants.sources['ROUTE']).setData(turf.featureCollection([]));
    if (!feature || dontAdd) return false;
    if (properties) feature.properties = geoflo.Utilities.assignDeep(geoflo.Utilities.cloneDeep(properties), feature.properties);
    geoflo.snapFeature = feature;
    geoflo.map.getSource(geoflo.statics.constants.sources[feature.properties.routing ? 'ROUTE' : 'SNAP']).setData(turf.featureCollection([geoflo.snapFeature]));
  };

  /**
   * @function
      * @memberof module:geoflo.Snapping
   * @name updateFeature
   * @description This function updates a feature based on the event coordinates provided. It determines the type of feature, calculates the necessary coordinates, creates a line feature with hint properties, and converts units if needed.
   * @param {Array} evtCoords - The event coordinates to update the feature.
   * @returns {Object} The updated feature based on the event coordinates.
   */
  this.updateFeature = function (evtCoords) {
    geoflo.closestPoint = null;
    if (!geoflo.lastClick) return null;
    if (!geoflo.firstClick || geoflo.mouseIsDown) return null;
    var type = geoflo.Features.getType(geoflo.hotFeature) || geoflo.currentMode.type;
    if (geoflo.hotFeature && geoflo.hotFeature.geometry.type === 'Point') return null;
    var coords = geoflo.hotFeature ? geoflo.Utilities.getLastIndexCoords(geoflo.hotFeature) : geoflo.lastClick.coords;
    var vertex = turf.point(evtCoords);
    var hintCoords = type && type === "Polygon" && geoflo.hotFeature ? [coords, evtCoords, geoflo.firstClick.coords] : [coords, evtCoords];
    var feature = turf.lineString(hintCoords);
    feature.properties.type = type;
    feature.properties.hint = true;
    var unit = 'feet';
    var units = geoflo.Features.convertUnits(geoflo.hotFeature, 0, unit);
    units += geoflo.Features.convertUnits(feature, 0, unit);
    vertex = updateVertex(vertex, {
      units: units,
      unit: unit
    });
    return feature;
  };
  if (geoflo.options['snapping'].enable) this.activate();
  function cheapRuler(lat, units) {
    function cheapruler(lat, units) {
      return new CheapRuler(lat, units);
    }
    cheapruler.fromTile = function (y, z, units) {
      var n = Math.PI * (1 - 2 * (y + 0.5) / Math.pow(2, z));
      var lat = Math.atan(0.5 * (Math.exp(n) - Math.exp(-n))) * 180 / Math.PI;
      return new CheapRuler(lat, units);
    };
    cheapruler.units = {
      kilometers: 1,
      miles: 1000 / 1609.344,
      nauticalmiles: 1000 / 1852,
      meters: 1000,
      metres: 1000,
      yards: 1000 / 0.9144,
      feet: 1000 / 0.3048,
      inches: 1000 / 0.0254
    };
    function CheapRuler(lat, units) {
      var factors = {
        kilometers: 1,
        miles: 1000 / 1609.344,
        nauticalmiles: 1000 / 1852,
        meters: 1000,
        metres: 1000,
        yards: 1000 / 0.9144,
        feet: 1000 / 0.3048,
        inches: 1000 / 0.0254
      };
      if (lat === undefined) throw new Error('No latitude given.');
      if (units && !factors[units]) throw new Error('Unknown unit ' + units + '. Use one of: ' + Object.keys(factors));
      var m = units ? factors[units] : 1;
      var cos = Math.cos(lat * Math.PI / 180);
      var cos2 = 2 * cos * cos - 1;
      var cos3 = 2 * cos * cos2 - cos;
      var cos4 = 2 * cos * cos3 - cos2;
      var cos5 = 2 * cos * cos4 - cos3;
      this.kx = m * (111.41513 * cos - 0.09455 * cos3 + 0.00012 * cos5);
      this.ky = m * (111.13209 - 0.56605 * cos2 + 0.0012 * cos4);
    }
    CheapRuler.prototype = {
      equals: function equals(a, b) {
        return a[0] === b[0] && a[1] === b[1];
      },
      interpolate: function interpolate(a, b, t) {
        var dx = b[0] - a[0];
        var dy = b[1] - a[1];
        return [a[0] + dx * t, a[1] + dy * t];
      },
      distance: function distance(a, b) {
        var dx = (a[0] - b[0]) * this.kx;
        var dy = (a[1] - b[1]) * this.ky;
        return Math.sqrt(dx * dx + dy * dy);
      },
      bearing: function bearing(a, b) {
        var dx = (b[0] - a[0]) * this.kx;
        var dy = (b[1] - a[1]) * this.ky;
        if (!dx && !dy) return 0;
        var bearing = Math.atan2(-dy, dx) * 180 / Math.PI + 90;
        if (bearing > 180) bearing -= 360;
        return bearing;
      },
      destination: function destination(p, dist, bearing) {
        var a = (90 - bearing) * Math.PI / 180;
        return this.offset(p, Math.cos(a) * dist, Math.sin(a) * dist);
      },
      offset: function offset(p, dx, dy) {
        return [p[0] + dx / this.kx, p[1] + dy / this.ky];
      },
      lineDistance: function lineDistance(points) {
        var total = 0;
        for (var i = 0; i < points.length - 1; i++) {
          total += this.distance(points[i], points[i + 1]);
        }
        return total;
      },
      area: function area(polygon) {
        var sum = 0;
        for (var i = 0; i < polygon.length; i++) {
          var ring = polygon[i];
          for (var j = 0, len = ring.length, k = len - 1; j < len; k = j++) {
            sum += (ring[j][0] - ring[k][0]) * (ring[j][1] + ring[k][1]) * (i ? -1 : 1);
          }
        }
        return Math.abs(sum) / 2 * this.kx * this.ky;
      },
      along: function along(line, dist) {
        var sum = 0;
        if (dist <= 0) return line[0];
        for (var i = 0; i < line.length - 1; i++) {
          var p0 = line[i];
          var p1 = line[i + 1];
          var d = this.distance(p0, p1);
          sum += d;
          if (sum > dist) return this.interpolate(p0, p1, (dist - (sum - d)) / d);
        }
        return line[line.length - 1];
      },
      pointOnLine: function pointOnLine(line, p) {
        var minDist = Infinity;
        var minX, minY, minI, minT;
        for (var i = 0; i < line.length - 1; i++) {
          var x = line[i][0];
          var y = line[i][1];
          var dx = (line[i + 1][0] - x) * this.kx;
          var dy = (line[i + 1][1] - y) * this.ky;
          if (dx !== 0 || dy !== 0) {
            var t = ((p[0] - x) * this.kx * dx + (p[1] - y) * this.ky * dy) / (dx * dx + dy * dy);
            if (t > 1) {
              x = line[i + 1][0];
              y = line[i + 1][1];
            } else if (t > 0) {
              x += dx / this.kx * t;
              y += dy / this.ky * t;
            }
          }
          dx = (p[0] - x) * this.kx;
          dy = (p[1] - y) * this.ky;
          var sqDist = dx * dx + dy * dy;
          if (sqDist < minDist) {
            minDist = sqDist;
            minX = x;
            minY = y;
            minI = i;
            minT = t;
          }
        }
        return {
          point: [minX, minY],
          index: minI,
          t: minT
        };
      },
      lineSlice: function lineSlice(start, stop, line) {
        var p1 = this.pointOnLine(line, start);
        var p2 = this.pointOnLine(line, stop);
        if (p1.index > p2.index || p1.index === p2.index && p1.t > p2.t) {
          var tmp = p1;
          p1 = p2;
          p2 = tmp;
        }
        var slice = [p1.point];
        var l = p1.index + 1;
        var r = p2.index;
        if (!this.equals(line[l], slice[0]) && l <= r) slice.push(line[l]);
        for (var i = l + 1; i <= r; i++) {
          slice.push(line[i]);
        }
        if (!this.equals(line[r], p2.point)) slice.push(p2.point);
        return slice;
      },
      lineSliceAlong: function lineSliceAlong(start, stop, line) {
        var sum = 0;
        var slice = [];
        for (var i = 0; i < line.length - 1; i++) {
          var p0 = line[i];
          var p1 = line[i + 1];
          var d = this.distance(p0, p1);
          sum += d;
          if (sum > start && slice.length === 0) {
            slice.push(this.interpolate(p0, p1, (start - (sum - d)) / d));
          }
          if (sum >= stop) {
            slice.push(this.interpolate(p0, p1, (stop - (sum - d)) / d));
            return slice;
          }
          if (sum > start) slice.push(p1);
        }
        return slice;
      },
      bufferPoint: function bufferPoint(p, buffer) {
        var v = buffer / this.ky;
        var h = buffer / this.kx;
        return [p[0] - h, p[1] - v, p[0] + h, p[1] + v];
      },
      bufferBBox: function bufferBBox(bbox, buffer) {
        var v = buffer / this.ky;
        var h = buffer / this.kx;
        return [bbox[0] - h, bbox[1] - v, bbox[2] + h, bbox[3] + v];
      },
      insideBBox: function insideBBox(p, bbox) {
        return p[0] >= bbox[0] && p[0] <= bbox[2] && p[1] >= bbox[1] && p[1] <= bbox[3];
      }
    };
    return cheapruler(lat, units);
  }
  function findClosestPoint(uniqueFeatures, evtCoords, radiusInKm, pixelDistance) {
    var coords = calculatePointsOnLine(uniqueFeatures, evtCoords);
    var closestVertex = null;
    var closestLinepoint = null;
    var borders;
    var id = geoflo.id || 'id';
    coords.forEach(function (pointType) {
      var dist = pointType.dist;
      if (dist !== null) {
        if (pointType.type === "vertex") {
          if (closestVertex === null) {
            closestVertex = pointType;
          } else if (pixelDistance !== undefined) {
            if (dist * 1000 < pixelDistance) {
              if (closestVertex && closestVertex.lineEdge) {
                closestVertex = pointType;
              }
            }
          } else if (dist <= closestVertex.dist) {
            if (dist === closestVertex.dist) {
              if (closestVertex.lineEdge) {
                closestVertex = pointType;
              }
            } else {
              closestVertex = pointType;
            }
          }
        } else if (dist < radiusInKm) {
          if (closestLinepoint !== null && dist === closestLinepoint.dist && closestLinepoint[id] !== pointType[id]) {
            if (closestLinepoint.type === "linepoint") {
              if (pointType.distance1 <= closestLinepoint.distance1 && pointType.distance2 <= closestLinepoint.distance2 || pointType.distance2 <= closestLinepoint.distance1 && pointType.distance1 <= closestLinepoint.distance2) {
                console.log("switch closest points");
                closestLinepoint = pointType;
              }
            }
          }
          if (closestLinepoint === null || dist < closestLinepoint.dist) {
            closestLinepoint = pointType;
            if (pointType.border1 && pointType.border2) {
              borders = {
                border1: pointType.border1,
                border2: pointType.border2,
                distance1: pointType.distance1,
                distance2: pointType.distance2
              };
            } else {
              borders = null;
            }
          }
        }
      }
    });
    if (closestVertex !== null) {
      if (closestLinepoint !== null) {
        if (closestVertex.dist < radiusInKm) {
          return Object.assign({
            borders: null
          }, closestVertex);
        } else {
          return Object.assign({
            borders: borders
          }, closestLinepoint);
        }
      } else {
        return Object.assign({
          borders: null
        }, closestVertex);
      }
    } else if (closestLinepoint !== null) {
      return Object.assign({
        borders: borders
      }, closestLinepoint);
    } else {
      return null;
    }
  }
  function closestPoints(ruler, coordinates, evtCoords) {
    var result = [];
    var pointOnLine = ruler.pointOnLine(coordinates, evtCoords);
    var pointCoords = pointOnLine.point;
    var pointIndex = pointOnLine.index;
    var linePoint = {
      type: "linepoint",
      coords: pointCoords
    };
    var p1 = coordinates[pointIndex];
    var p2 = coordinates[pointIndex + 1];
    var distance1 = ruler.distance(p1, evtCoords);
    var distance2 = ruler.distance(p2, evtCoords);
    var lineEdge = false;
    var vertex = null;
    if (distance1 < distance2) {
      lineEdge = pointIndex === 0;
      vertex = p1;
    } else {
      lineEdge = pointIndex + 1 === coordinates.length - 1;
      vertex = p2;
    }
    linePoint.border1 = p1;
    linePoint.distance1 = distance1;
    linePoint.border2 = p2;
    linePoint.distance2 = distance2;
    result.push(linePoint);
    result.push({
      type: "vertex",
      coords: vertex,
      lineEdge: lineEdge
    });
    return result;
  }
  function calculatePointsOnLine(uniqueFeatures, evtCoords) {
    var coords = [];
    var knownIds = {};
    var ruler = cheapRuler(evtCoords[1]);
    uniqueFeatures.forEach(function (feature) {
      var id = feature.id || feature.properties.id;
      var closest = [];
      if (knownIds[id] === undefined) {
        knownIds[id] = true;
        var type = feature.geometry.type;
        if (type === "LineString") {
          if (feature.geometry.coordinates) {
            closest = closestPoints(ruler, feature.geometry.coordinates, evtCoords);
            closest.forEach(function (pointType) {
              pointType.id = id;
              pointType.dist = ruler.distance(pointType.coords, evtCoords);
              coords.push(pointType);
            });
          } else {
            console.log("no coordinates: ", feature);
          }
        } else if (type === "Point") {
          var pointType = {
            id: id,
            type: "vertex",
            coords: feature.geometry.coordinates,
            lineEdge: true
          };
          pointType.dist = ruler.distance(pointType.coords, evtCoords);
          coords.push(pointType);
        } else if (type === "Polygon") {
          if (turf.booleanWithin(turf.point(evtCoords), feature)) return;
          feature.geometry.coordinates.forEach(function (featureCoords, index) {
            closest = closestPoints(ruler, featureCoords, evtCoords);
            closest.forEach(function (pointType) {
              pointType.id = id;
              pointType.polygonCoordsArray = index;
              pointType.dist = ruler.distance(pointType.coords, evtCoords);
              coords.push(pointType);
            });
          });
        }
      }
    });
    return coords;
  }
  function addVertex(startPoint, endPoint, length, data) {
    var startData = data[startPoint];
    if (!startData) {
      startData = {};
      data[startPoint] = startData;
    }
    if (!startData[endPoint]) {
      startData[endPoint] = length;
    }
  }
  function addVertexPointTwoWay(startCoord, endCoords, length, data) {
    var startPoint = startCoord.join("#");
    var endPoint = endCoords.join("#");
    addVertex(startPoint, endPoint, length, data);
    addVertex(endPoint, startPoint, length, data);
  }
  function metersPerPixel(latitude, zoomLevel) {
    return geoflo.statics.constants.CIRCUM * Math.cos(latitude * (Math.PI / 180)) / Math.pow(2, zoomLevel + 8);
  }
  function setFeature(feature) {
    if (!feature) return geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([])), geoflo.snapFeature;
    geoflo.Utilities.setProperty(feature, 'type', geoflo.currentMode.type);
    geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([feature]));
    return feature;
  }
  function updateVertex(vertex) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var features = geoflo.map.getSource(geoflo.statics.constants.sources.HOTTEXT)._data.features;
    if (features.length && features[features.length - 1].properties.mouseLine) features.pop();
    vertex.properties.units = options.units;
    vertex.properties.unit = options.unit;
    vertex.properties.text = "".concat(options.units, " ").concat(options.unit);
    vertex.properties.transform = 'uppercase';
    vertex.properties.anchor = 'top-left';
    vertex.properties.mouseLine = true;
    features.push(vertex);
    geoflo.map.getSource(geoflo.statics.constants.sources.HOTTEXT).setData(turf.featureCollection(features));
    return vertex;
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Snapping);

/***/ }),

/***/ "./src/Statics.js":
/*!************************!*\
  !*** ./src/Statics.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var Dev = 'solutegrate';
var Id = 'geoflo';
var Statics = {
  developer: Dev,
  id: Id,
  logo: {
    full: "https://".concat(Id, ".s3.amazonaws.com/logos/logo_full_white.png"),
    icon: "https://".concat(Id, ".s3.amazonaws.com/logos/logo_icon_white.svg"),
    fullClass: Id + '-logo',
    iconClass: Id + '-icon'
  },
  controls: [
  // TOP //
  [{
    type: 'utils',
    enable: true,
    position: 'top-center',
    group: 'action',
    divider: true,
    show: true,
    buttons: {
      repeat: true,
      zoom: true,
      refresh: true,
      locate: true
    }
  }, {
    type: 'modes',
    enable: true,
    group: 'control',
    divider: true,
    show: true,
    buttons: {
      select: true,
      edit: true,
      save: true
    }
  }, {
    type: 'options',
    enable: true,
    group: 'action',
    divider: false,
    show: true,
    buttons: {
      "import": true,
      "export": true,
      clear: true,
      undo: true,
      redo: true,
      cancel: true
    }
  }],
  // BOTTOM //
  [{
    type: 'types',
    enable: true,
    position: 'top-center',
    group: 'control',
    divider: true,
    show: true,
    buttons: {
      polyline: true,
      polygon: true,
      rectangle: true,
      circle: true,
      text: true
    }
  }, {
    type: 'actions',
    enable: true,
    group: 'control',
    divider: false,
    show: true,
    buttons: {
      snapping: true,
      pinning: true,
      routing: true,
      exploring: true,
      painting: true
    }
  }]],
  constants: {
    classes: {
      PREDEFINED_CONTROL_BASE: "mapboxgl-ctrl",
      PREDEFINED_CONTROL_GROUP: "mapboxgl-ctrl-group",
      CONTROL_PREFIX: "mapboxgl-ctrl-",
      ACTION_BUTTON: Id + "-action-btn",
      CONTROL_BUTTON: "mapbox-gl-draw_ctrl-draw-btn",
      CONTROL_BUTTON_LINE: "mapbox-gl-draw_line",
      CONTROL_BUTTON_POLYGON: "mapbox-gl-draw_polygon",
      CONTROL_BUTTON_RECTANGLE: "mapbox-gl-draw_rectangle",
      CONTROL_BUTTON_POINT: "mapbox-gl-draw_point",
      CONTROL_BUTTON_TEXT: "mapbox-gl-draw_text",
      CONTROL_BUTTON_ICON: "mapbox-gl-draw_icon",
      CONTROL_BUTTON_CLEAR: Id + "-delete-data",
      CONTROL_BUTTON_DELETE_SNAP: Id + "-delete-snap-data",
      CONTROL_BUTTON_LOCATE: Id + "-locate",
      CONTROL_BUTTON_ZOOM_IN_FEATURES: Id + "-zoom-in-features",
      CONTROL_BUTTON_HIDE_SELECTED: Id + "-hide-selected",
      CONTROL_BUTTON_ADD_FEATURE_TO_GRID: Id + "-add-feature-to-grid",
      CONTROL_BUTTON_CREATE_POLYGON: Id + "-create-polygon",
      CONTROL_BUTTON_COMBINE_FEATURES: "mapbox-gl-draw_combine",
      CONTROL_BUTTON_UNCOMBINE_FEATURES: "mapbox-gl-draw_uncombine",
      CONTROL_BUTTON_GROUP_FEATURES: Id + "-group-features",
      CONTROL_BUTTON_UNGROUP_FEATURES: Id + "-ungroup-features",
      CONTROL_BUTTON_DOWNLOAD_WAYS: Id + "-download-ways",
      CONTROL_BUTTON_DOWNLOAD_BUILDINGS: Id + "-download-buildings",
      CONTROL_BUTTON_REFRESH: Id + "-refresh",
      CONTROL_BUTTON_EDIT: Id + "-edit",
      CONTROL_BUTTON_CUT: Id + "-cut",
      CONTROL_BUTTON_SELECT: Id + "-select",
      CONTROL_BUTTON_DOWNLOAD_DATA: Id + "-download-data",
      CONTROL_BUTTON_EXPORT: Id + "-export",
      CONTROL_BUTTON_SAVE_AS_GIST: Id + "-save-as-gist",
      CONTROL_BUTTON_SAVE_AS_GEOJSON: Id + "-save-as-geojson",
      CONTROL_BUTTON_SAVE_AS_KML: Id + "-save-as-kml",
      CONTROL_BUTTON_EXPAND_EDITOR: Id + "-expand-editor",
      CONTROL_BUTTON_IMPORT: Id + "-import",
      CONTROL_BUTTON_FINSIH: Id + "-finish",
      CONTROL_BUTTON_CANCEL: Id + "-cancel",
      CONTROL_BUTTON_UNDO: Id + "-undo",
      CONTROL_BUTTON_REDO: Id + "-redo",
      CONTROL_BUTTON_SNAPPING: Id + "-snapping",
      CONTROL_BUTTON_PINNING: Id + "-pinning",
      CONTROL_BUTTON_ROUTING: Id + "-routing",
      CONTROL_BUTTON_EXPLORING: Id + "-exploring",
      CONTROL_BUTTON_PAINTING: Id + "-painting",
      CONTROL_BUTTON_REPEAT: Id + "-repeat",
      CONTROL_GROUP: Id + "-ctrl-group",
      DROPDOWN_GROUP: Id + "-dropdown-group",
      DIVIDER: Id + "-divider",
      ACTION_GROUP: Id + "-action-group",
      ATTRIBUTION: "mapboxgl-ctrl-attrib",
      ACTIVE_BUTTON: "active",
      BOX_SELECT: "mapbox-gl-draw_boxselect"
    },
    sources: {
      SELECT: Id + "-select",
      SNAP: Id + "-snap",
      PIN: Id + "-pin",
      ROUTE: Id + "-route",
      HOT: Id + "-hot",
      COLD: Id + "-cold",
      MESH: Id + "-mesh",
      VERTEX: Id + "-vertex",
      HOTTEXT: Id + "-text",
      COLDTEXT: Id + "-coldtext",
      GAMEPAD: Id + "-gamepad"
    },
    layers: {
      MESH: Id + "-mesh"
    },
    cursors: {
      ADD: "add",
      MOVE: "move",
      DRAG: "drag",
      POINTER: "pointer",
      NONE: "none"
    },
    types: {
      POLYGON: "polygon",
      LINE: "line_string",
      POINT: "point"
    },
    geojsonTypes: {
      FEATURE: "Feature",
      POLYGON: "Polygon",
      LINE_STRING: "LineString",
      POINT: "Point",
      FEATURE_COLLECTION: "FeatureCollection",
      MULTI_PREFIX: "Multi",
      MULTI_POINT: "MultiPoint",
      MULTI_LINE_STRING: "MultiLineString",
      MULTI_POLYGON: "MultiPolygon"
    },
    modes: {
      DRAW: "draw",
      CUT: "cut",
      SELECT: "select",
      DELETE: "delete",
      EDIT: "edit"
    },
    events: {
      CREATE: "draw.create",
      DELETE: "draw.delete",
      UPDATE: "draw.update",
      SELECTION_CHANGE: "draw.selectionchange",
      MODE_CHANGE: "draw.modechange",
      ACTIONABLE: "draw.actionable",
      RENDER: "draw.render",
      COMBINE_FEATURES: "draw.combine",
      UNCOMBINE_FEATURES: "draw.uncombine"
    },
    updateActions: {
      MOVE: "move",
      CHANGE_COORDINATES: "change_coordinates"
    },
    meta: {
      FEATURE: "feature",
      MIDPOINT: "midpoint",
      VERTEX: "vertex"
    },
    activeStates: {
      ACTIVE: "true",
      INACTIVE: "false"
    },
    LAT_MIN: -90,
    LAT_RENDERED_MIN: -85,
    LAT_MAX: 90,
    LAT_RENDERED_MAX: 85,
    LNG_MIN: -270,
    LNG_MAX: 270,
    MIN_SEGMENT_LENGTH: 0.000001,
    MIN_DISTANCE: 0.00001,
    // 0.000001
    CIRCUM: 40075017
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Statics);

/***/ }),

/***/ "./src/Styles.js":
/*!***********************!*\
  !*** ./src/Styles.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
/**
 * @mixin
 * @memberof module:geoflo
 * @name Styles
 * @description This module provides the styling functionality for the Geoflo application. It allows users to change the map style by selecting from a list of predefined styles.
 * @param {Object} options - The options object containing the styles and selected style.
 * @returns {Object} Returns the Styles object.
 */
var Styles = function Styles() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var geoflo = this.geoflo;
  this.options = options;

  /**
  * @function
   * @memberof module:geoflo.Styles
   * @name init
   * @description Initializes the Styles object by extending the options object with the provided options, setting the styles, defaultStyle, and event listeners.
   * @param {Object} options - The options object containing the styles and selected style.
   * @returns {Object} Returns the Styles object.
   */
  this.init = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.options = Object.assign(this.options, options);
    this.selected = this.options.selected || "Dark";
    this.onDocumentClick = this.onDocumentClick.bind(this);
    this.events = this.options.eventListeners;
    return this;
  };

  /**
  * @function
   * @memberof module:geoflo.Styles
   * @name select
   * @description Selects the style with the provided name by setting the map style to the style's uri.
   * @param {String} name - The name of the style to select.
   * @returns {void}
   */
  this.select = function (name) {
    if (!this.mapStyleContainer || !this.mapStyleContainer.checkVisibility()) {
      var style = this.options.styles.find(function (style) {
        return style.title === name;
      });
      if (style) this.map.setStyle(style.uri), this.selected = name;
      if (this.events && this.events.onChange && this.events.onChange({
        style: style
      }, style)) return;
    }
    var elms = this.mapStyleContainer.getElementsByClassName(name);
    if (elms.length > 0) elms[0].click();
  };

  /**
  * @function
   * @memberof module:geoflo.Styles
   * @name hide
   * @description Hides the style control container.
   * @returns {void}
   */
  this.hide = function () {
    if (this.controlContainer) this.controlContainer.style.display = "none";
  };

  /**
   * @function
   * @memberof module:geoflo.Styles
   * @name show
   * @description Shows the style control container.
   * @returns {void}
   */
  this.show = function () {
    if (this.controlContainer) this.controlContainer.style.display = "block";
  };

  /**
  * @function
   * @memberof module:geoflo.Styles
   * @name getDefaultPosition
   * @description Returns the default position for the style control container.
   * @returns {String} The default position for the style control container.
   */
  this.getDefaultPosition = function () {
    var defaultPosition = "top-right";
    return defaultPosition;
  };

  /**
  * @function
   * @memberof module:geoflo.Styles
   * @name onAdd
   * @description Adds the style control container to the map.
   * @param {Object} map - The map object to add the style control container to.
   * @returns {Object} The style control container.
   * @throws {Error} Throws an error if the map object is not provided.
   */
  this.onAdd = function (map) {
    var _this = this;
    this.map = map;
    this.controlContainer = document.createElement("div");
    this.controlContainer.classList.add("mapboxgl-ctrl");
    this.controlContainer.classList.add("mapboxgl-ctrl-group");
    this.mapStyleContainer = document.createElement("div");
    this.styleButton = document.createElement("button");
    this.styleButton.type = "button";
    this.mapStyleContainer.classList.add("mapboxgl-style-list");
    var _iterator = _createForOfIteratorHelper(this.options.styles),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var style = _step.value;
        var styleElement = document.createElement("button");
        styleElement.type = "button";
        styleElement.classList.add(style.title.replace(/[^a-z0-9-]/gi, '_'));
        styleElement.dataset.uri = JSON.stringify(style.uri);
        styleElement.addEventListener("click", function (event) {
          var srcElement = event.target || event.srcElement;
          _this.closeModal();
          if (srcElement.classList.contains("active")) return;
          if (_this.events && _this.events.onOpen && _this.events.onOpen(event)) return;
          var style = JSON.parse(srcElement.dataset.uri);
          _this.map.setStyle(style);
          var elms = _this.mapStyleContainer.getElementsByClassName("active");
          while (elms[0]) elms[0].classList.remove("active");
          srcElement.classList.add("active");
          if (_this.events && _this.events.onChange && _this.events.onChange(event, style)) return;
        });
        if (style.title === this.selected) {
          styleElement.classList.add("active");
        }
        this.mapStyleContainer.appendChild(styleElement);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    this.styleButton.classList.add("mapboxgl-ctrl-icon");
    this.styleButton.classList.add("mapboxgl-style-switcher");
    this.styleButton.addEventListener("click", function (event) {
      if (_this.events && _this.events.onSelect && _this.events.onSelect(event)) return;
      _this.openModal();
    });
    document.addEventListener("click", this.onDocumentClick);
    this.controlContainer.appendChild(this.styleButton);
    this.controlContainer.appendChild(this.mapStyleContainer);
    this.closeModal();
    return this.controlContainer;
  };

  /**
  * @function
   * @memberof module:geoflo.Styles
   * @name onRemove
   * @description Removes the style control container from the map.
   * @returns {void}
   * @throws {Error} Throws an error if the control container, control container parent node, map, or style button is not provided.
   * @throws {Error} Throws an error if the style button event listener is not removed.
   * @throws {Error} Throws an error if the document event listener is not removed.
   */
  this.onRemove = function () {
    if (!this.controlContainer || !this.controlContainer.parentNode || !this.map || !this.styleButton) {
      return;
    }
    this.styleButton.removeEventListener("click", this.onDocumentClick);
    this.controlContainer.parentNode.removeChild(this.controlContainer);
    document.removeEventListener("click", this.onDocumentClick);
    this.map = undefined;
  };

  /**
  * @function
   * @memberof module:geoflo.Styles
   * @name closeModal
   * @description Closes the style control container.
   * @returns {void}
   */
  this.closeModal = function () {
    if (this.mapStyleContainer && this.styleButton) {
      this.mapStyleContainer.style.display = "none";
      this.styleButton.style.display = "block";
    }
  };

  /**
   * @function
   * @memberof module:geoflo.Styles
   * @name openModal
   * @description Opens the style control container.
   * @returns {void}
   */
  this.openModal = function () {
    if (this.mapStyleContainer && this.styleButton) {
      this.mapStyleContainer.style.display = "block";
      this.styleButton.style.display = "none";
    }
  };
  this.onDocumentClick = function (event) {
    if (this.controlContainer && !this.controlContainer.contains(event.target)) this.closeModal();
  };
  this.init();
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Styles);

/***/ }),

/***/ "./src/Utilities.js":
/*!**************************!*\
  !*** ./src/Utilities.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/**
 * @mixin
 * @memberof module:geoflo
 * @name Utilities
 * @description This module provides utility functions for the Geoflo application.
 * @returns {Object} Returns the Utilities object.
 */
var Utilities = function Utilities() {
  var geoflo = this.geoflo;

  /**
   * @function
      * @memberof module:geoflo.Utilities
   * @name getRandomColor
   * @description This function generates a random color by randomly selecting hexadecimal values for each digit of the color code.
   * @returns {string} A random color in hexadecimal format.
   */
  this.getRandomColor = function () {
    var letters = '0123456789ABCDEF';
    var color = '#';
    for (var i = 0; i < 6; i++) {
      color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
  };
  this.getFeatureId = function (feature) {
    return feature.parent || feature.properties.parent || feature.id || feature.properties.id;
  };

  /**
   * @function
      * @memberof module:geoflo.Utilities
   * @name setProperty
   * @description This function sets a property value for a given feature. If the feature does not have properties, it creates a new properties object. If the property name includes a dot (.), it creates nested objects to set the value.
   * @param {Object} feature - The feature object to set the property for.
   * @param {string} name - The name of the property to set.
   * @param {any} value - The value to set for the property.
   */
  this.setProperty = function (feature, name, value) {
    if (!feature) return false;
    var props = feature.properties;
    if (!props) {
      props = {};
      feature.properties = props;
    }
    if (name.includes('.')) {
      name = name.split('.');
      if (!props[name[0]]) props[name[0]] = {};
      props[name[0]][name[1]] = value;
    } else {
      props[name] = value;
    }
  };

  /**
   * @function
      * @memberof module:geoflo.Utilities
   * @name setProperties
   * @description Updates the properties of a given feature object with new properties.
   * @param {Object} feature - The feature object whose properties will be updated.
   * @param {Object} newProps - The new properties to be merged with the existing properties of the feature.
   */
  this.setProperties = function (feature, newProps) {
    feature.properties = Object.assign(feature.properties || {}, newProps);
  };

  /**
   * @function
      * @memberof module:geoflo.Utilities
   * @name isPointEqual
   * @description Checks if two points are equal based on their coordinates.
   * @param {Array} coords1 - The coordinates of the first point [x, y].
   * @param {Array} coords2 - The coordinates of the second point [x, y].
   * @returns {boolean} Returns true if the points have the same coordinates, false otherwise.
   */
  this.isPointEqual = function (coords1, coords2) {
    return coords1[0] === coords2[0] && coords1[1] === coords2[1];
  };

  /**
   * @function
      * @memberof module:geoflo.Utilities
   * @name isPoint
   * @description This function takes a feature object and determines if it represents a Point geometry.
   * @param {Object} f - The feature object to be checked.
   * @returns {boolean} Returns true if the feature is a Point geometry, false otherwise.
   */
  this.isPoint = function (f) {
    return !f ? false : f.geometry.type === 'Point';
  };

  /**
   * @function
      * @memberof module:geoflo.Utilities
   * @name isPolygon
   * @description This function determines if a feature represents a polygon by comparing its first and last coordinates.
   * @param {Object} feature - The feature object to be checked.
   * @returns {boolean} Returns true if the feature is a polygon, false otherwise.
   */
  this.isPolygon = function (feature) {
    var coords = feature.geometry.coordinates;
    var firstCoords = coords[0];
    var lastCoords = coords[coords.length - 1];
    return this.isPointEqual(firstCoords, lastCoords);
  };

  /**
   * @function
      * @memberof module:geoflo.Utilities
   * @name isLineString
   * @description This function takes a GeoJSON feature object and determines if it represents a LineString geometry.
   * @param {Object} f - The GeoJSON feature object to be checked.
   * @returns {boolean} Returns true if the feature is a LineString, false otherwise.
   */
  this.isLineString = function (f) {
    return !f ? false : f.geometry.type === 'LineString';
  };

  /**
   * @function
      * @memberof module:geoflo.Utilities
   * @name isValidLineString
   * @description Checks if the input feature is a valid LineString by verifying its geometry coordinates.
   * @param {Object} f - The input feature to be validated.
   * @returns {boolean} Returns true if the input feature is a valid LineString, false otherwise.
   */
  this.isValidLineString = function (f) {
    if (!this.isLineString(f)) return false;
    var coords = f.geometry.coordinates;
    if (coords.length < 2) return false;
    return true;
  };

  /**
   * @function
      * @memberof module:geoflo.Utilities
   * @name isLastIndex
   * @description This function determines if the provided index is the last index in the coordinates array of a feature.
   * @param {number} i - The index to check.
   * @param {object} f - The feature object containing the coordinates array.
   * @returns {boolean} Returns true if the index is the last index, false otherwise.
   */
  this.isLastIndex = function (i, f) {
    return !f ? false : this.isLineString(f) ? i == f.geometry.coordinates.length - 1 : this.isPolygon(f) ? i == f.geometry.coordinates[0].length - 1 : i == 0 ? true : false;
  };

  /**
   * @function
      * @memberof module:geoflo.Utilities
   * @name getLastIndexCoords
   * @description This function returns the last coordinates of a given geometry object.
   * @param {Object} f - The geometry object to extract the last coordinates from.
   * @returns {Array} The last coordinates of the geometry object.
   */
  this.getLastIndexCoords = function (f) {
    return this.isLineString(f) ? f.geometry.coordinates[f.geometry.coordinates.length - 1] : this.isPolygon(f) ? f.geometry.coordinates[0][f.geometry.coordinates.length - 1] : f.geometry.coordinates;
  };

  /**
   * @function
      * @memberof module:geoflo.Utilities
   * @name isEmptyLineString
   * @description This function determines if the provided feature is a LineString with only two identical points, making it an empty LineString.
   * @param {Object} feature - The feature object to be checked.
   * @returns {boolean} Returns true if the feature is an empty LineString, otherwise false.
   */
  this.isEmptyLineString = function (feature) {
    if (feature.geometry.type === "LineString") {
      var coords = feature.geometry.coordinates;
      if (coords.length === 2) {
        var firstCoords = coords[0];
        var lastCoords = coords[coords.length - 1];
        return this.isPointEqual(firstCoords, lastCoords);
      }
    }
    return false;
  };

  /**
   * @function
      * @memberof module:geoflo.Utilities
   * @name reducePrecision
   * @description This function reduces the precision of the coordinates to 7 decimal places.
   * @param {Array} coords - An array containing the coordinates to be processed.
   * @returns {Array} The coordinates with reduced precision to 7 decimal places.
   */
  this.reducePrecision = function (coords) {
    coords[0] = Number(Number(coords[0]).toFixed(7));
    coords[1] = Number(Number(coords[1]).toFixed(7));
    return coords;
  };

  /**
   * @function
      * @memberof module:geoflo.Utilities
   * @name stringToDOM
   * @description Converts a string to a DOM object using DOMParser.
   * @param {string} str - The input string to be converted to a DOM object.
   * @returns {Document} - The DOM object created from the input string.
   */
  this.stringToDOM = function (str) {
    var parser = new DOMParser();
    return parser.parseFromString(str, "text/xml");
  };

  /**
   * @function
      * @memberof module:geoflo.Utilities
   * @name combineSameTypeFeatures
   * @description This function takes an array of line features and combines them by connecting them based on their coordinates. It checks the endpoints of each line feature and connects them accordingly to form a continuous line.
   * @param {Array} features - An array of line features to be combined.
   * @returns {Array} - An array of coordinates representing the combined line features.
   */
  this.combineSameTypeFeatures = function (features) {
    var coords = [];
    features.forEach(function (lineString) {
      if (coords.length === 0) {
        coords.push.apply(coords, _toConsumableArray(lineString.geometry.coordinates));
      } else {
        var firstPoint = coords[0];
        var lastPoint = coords[coords.length - 1];
        var currentFirstPoint = lineString.geometry.coordinates[0];
        var currentLastPoint = lineString.geometry.coordinates[lineString.geometry.coordinates.length - 1];
        if (this.isPointEqual(lastPoint, currentFirstPoint)) {
          coords.push.apply(coords, _toConsumableArray(lineString.geometry.coordinates.slice(1, lineString.geometry.coordinates.length)));
        } else if (this.isPointEqual(lastPoint, currentLastPoint)) {
          coords.push.apply(coords, _toConsumableArray(lineString.geometry.coordinates.slice(0, lineString.geometry.coordinates.length - 1).reverse()));
        } else if (this.isPointEqual(firstPoint, currentLastPoint)) {
          coords.splice.apply(coords, [0, 0].concat(_toConsumableArray(lineString.geometry.coordinates.slice(0, lineString.geometry.coordinates.length - 1))));
        } else if (this.isPointEqual(firstPoint, currentFirstPoint)) {
          coords.splice.apply(coords, [0, 1].concat(_toConsumableArray(lineString.geometry.coordinates.reverse())));
        } else {
          var distanceToFirstPoint = turf.distance(lastPoint, currentFirstPoint);
          var distanceToLastPoint = turf.distance(lastPoint, currentLastPoint);
          if (distanceToFirstPoint < distanceToLastPoint) {
            coords.push.apply(coords, _toConsumableArray(lineString.geometry.coordinates));
          } else {
            coords.push.apply(coords, _toConsumableArray([].concat(_toConsumableArray(lineString.geometry.coordinates)).reverse()));
          }
        }
      }
    }, this);
    return coords;
  };

  /**
   * @function
      * @memberof module:geoflo.Utilities
   * @name degrees2meters
   * @description This function takes an array of latitude and longitude in degrees and converts it to meters using the Mercator projection formula.
   * @param {Array<number>} px - An array containing latitude and longitude in degrees [longitude, latitude].
   * @returns {Array<number>} An array containing the converted x and y coordinates in meters.
   */
  this.degrees2meters = function (px) {
    var x = px[0] * 20037508.34 / 180;
    var y = Math.log(Math.tan((90 + px[1]) * Math.PI / 360)) / (Math.PI / 180);
    y = y * 20037508.34 / 180;
    return [x, y];
  };

  /**
   * @function
      * @memberof module:geoflo.Utilities
   * @name meters2degrees
   * @description This function takes a pixel value and converts it to longitude and latitude in degrees.
   * @param {Array} px - The pixel value to be converted, in the format [x, y].
   * @returns {Array} An array containing the longitude and latitude in degrees, [lon, lat].
   */
  this.meters2degrees = function (px) {
    var lon = px[0] * 180 / 20037508.34;
    var lat = Math.atan(Math.exp(px[1] * Math.PI / 20037508.34)) * 360 / Math.PI - 90;
    return [lon, lat];
  };

  /**
   * @function
      * @memberof module:geoflo.Utilities
   * @name extend
   * @description Extends the properties of the first object with the properties of the subsequent objects.
   * @param {Object} target - The object to be extended.
   * @param {...Object} sources - The objects whose properties will be added to the target object.
   * @return {Object} The extended object.
   */
  this.extend = function () {
    for (var i = 1; i < arguments.length; i++) for (var key in arguments[i]) if (arguments[i].hasOwnProperty(key)) arguments[0][key] = arguments[i][key];
    return arguments[0];
  };

  /**
   * @function
      * @memberof module:geoflo.Utilities
   * @name clone
   * @description This function recursively clones the input object or array, preserving the structure and types of the elements.
   * @param {Object|Array|Date|RegExp|Function|Symbol} thing - The object or array to be cloned.
   * @param {Object} opts - Optional settings for cloning functions and symbols.
   * @returns {Object|Array|Date|RegExp|Function|Symbol} - A deep clone of the input object or array.
   */
  this.clone = function (thing, opts) {
    var newObject = {};
    if (thing instanceof Array) {
      return thing.map(function (i) {
        return this.clone(i, opts);
      }, this);
    } else if (thing instanceof Date) {
      return new Date(thing);
    } else if (thing instanceof RegExp) {
      return new RegExp(thing);
    } else if (thing instanceof Function) {
      return opts && opts.newFns ? new Function('return ' + thing.toString())() : thing;
    } else if (thing instanceof Object) {
      Object.keys(thing).forEach(function (key) {
        newObject[key] = this.clone(thing[key], opts);
      }, this);
      return newObject;
    } else if ([undefined, null].indexOf(thing) > -1) {
      return thing;
    } else {
      if (thing.constructor.name === 'Symbol') {
        return Symbol(thing.toString().replace(/^Symbol\(/, '').slice(0, -1));
      }
      return thing.__proto__.constructor(thing);
    }
  };

  /**
   * @function
      * @memberof module:geoflo.Utilities
   * @name cloneDeep
   * @description Recursively clones a value, including objects and arrays, preserving the original structure deeply.
   * @param {any} value - The value to be cloned.
   * @param {Function} instance - A function that can be used to clone custom instances.
   * @returns {any} - The deeply cloned value.
   */
  this.cloneDeep = function (value, instance) {
    var hasOwn = Object.prototype.hasOwnProperty;
    var toString = Object.prototype.toString;
    function _cloneDeep(val, instanceClone) {
      switch (kindOf(val)) {
        case 'object':
          return cloneObjectDeep(val, instanceClone);
        case 'array':
          return cloneArrayDeep(val, instanceClone);
        default:
          {
            return clone(val);
          }
      }
    }
    function cloneObjectDeep(obj, instanceClone) {
      if (isObject(obj)) {
        var res = {};
        forOwn(obj, function (obj, key) {
          this[key] = _cloneDeep(obj, instanceClone);
        }, res);
        return res;
      } else if (instanceClone) {
        return instanceClone(obj);
      } else {
        return obj;
      }
    }
    function cloneArrayDeep(arr, instanceClone) {
      var len = arr.length,
        res = [];
      var i = -1;
      while (++i < len) {
        res[i] = _cloneDeep(arr[i], instanceClone);
      }
      return res;
    }
    function isObject(val) {
      return val != null && _typeof(val) === 'object' && Array.isArray(val) === false;
    }
    function isObjectObject(o) {
      return isObject(o) === true && Object.prototype.toString.call(o) === '[object Object]';
    }
    function isPlainObject(o) {
      var ctor, prot;
      if (isObjectObject(o) === false) return false;

      // If has modified constructor
      ctor = o.constructor;
      if (typeof ctor !== 'function') return false;

      // If has modified prototype
      prot = ctor.prototype;
      if (isObjectObject(prot) === false) return false;

      // If constructor does not have an Object-specific method
      if (prot.hasOwnProperty('isPrototypeOf') === false) {
        return false;
      }

      // Most likely a plain Object
      return true;
    }
    function forIn(obj, fn, thisArg) {
      for (var key in obj) {
        if (fn.call(thisArg, obj[key], key, obj) === false) {
          break;
        }
      }
    }
    function forOwn(obj, fn, thisArg) {
      forIn(obj, function (val, key) {
        if (hasOwn.call(obj, key)) {
          return fn.call(thisArg, obj[key], key, obj);
        }
      });
    }
    function kindOf(val) {
      // primitivies
      if (typeof val === 'undefined') {
        return 'undefined';
      }
      if (val === null) {
        return 'null';
      }
      if (val === true || val === false || val instanceof Boolean) {
        return 'boolean';
      }
      if (typeof val === 'string' || val instanceof String) {
        return 'string';
      }
      if (typeof val === 'number' || val instanceof Number) {
        return 'number';
      }

      // functions
      if (typeof val === 'function' || val instanceof Function) {
        return 'function';
      }

      // array
      if (typeof Array.isArray !== 'undefined' && Array.isArray(val)) {
        return 'array';
      }

      // check for instances of RegExp and Date before calling `toString`
      if (val instanceof RegExp) {
        return 'regexp';
      }
      if (val instanceof Date) {
        return 'date';
      }

      // other objects
      var type = toString.call(val);
      if (type === '[object RegExp]') {
        return 'regexp';
      }
      if (type === '[object Date]') {
        return 'date';
      }
      if (type === '[object Arguments]') {
        return 'arguments';
      }
      if (type === '[object Error]') {
        return 'error';
      }

      // buffer
      if (isBuffer(val)) {
        return 'buffer';
      }

      // es6: Map, WeakMap, Set, WeakSet
      if (type === '[object Set]') {
        return 'set';
      }
      if (type === '[object WeakSet]') {
        return 'weakset';
      }
      if (type === '[object Map]') {
        return 'map';
      }
      if (type === '[object WeakMap]') {
        return 'weakmap';
      }
      if (type === '[object Symbol]') {
        return 'symbol';
      }

      // typed arrays
      if (type === '[object Int8Array]') {
        return 'int8array';
      }
      if (type === '[object Uint8Array]') {
        return 'uint8array';
      }
      if (type === '[object Uint8ClampedArray]') {
        return 'uint8clampedarray';
      }
      if (type === '[object Int16Array]') {
        return 'int16array';
      }
      if (type === '[object Uint16Array]') {
        return 'uint16array';
      }
      if (type === '[object Int32Array]') {
        return 'int32array';
      }
      if (type === '[object Uint32Array]') {
        return 'uint32array';
      }
      if (type === '[object Float32Array]') {
        return 'float32array';
      }
      if (type === '[object Float64Array]') {
        return 'float64array';
      }

      // must be a plain object
      return 'object';
    }
    function isBuffer(obj) {
      return obj != null && (_isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
    }
    function _isBuffer(obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
    }
    function isSlowBuffer(obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));
    }
    function isExtendable(val) {
      return typeof val !== 'undefined' && val !== null && (_typeof(val) === 'object' || typeof val === 'function');
    }
    function mixin(target, objects) {
      if (!isExtendable(target)) {
        throw new TypeError('mixin-object expects the first argument to be an object.');
      }
      var len = arguments.length,
        i = 0;
      while (++i < len) {
        var obj = arguments[i];
        if (isExtendable(obj)) {
          forIn(obj, copy, target);
        }
      }
      return target;
    }
    function clone(val) {
      var type = kindOf(val);
      if (clone.hasOwnProperty(type)) {
        return clone[type](val);
      }
      return val;
    }
    clone.array = function cloneArray(arr) {
      return arr.slice();
    };
    clone.date = function cloneDate(date) {
      return new Date(+date);
    };
    clone.object = function cloneObject(obj) {
      if (isExtendable(obj)) {
        return mixin({}, obj);
      } else {
        return obj;
      }
    };
    clone.regexp = function cloneRegExp(re) {
      var flags = '';
      flags += re.multiline ? 'm' : '';
      flags += re.global ? 'g' : '';
      flags += re.ignorecase ? 'i' : '';
      return new RegExp(re.source, flags);
    };
    return _cloneDeep(value, instance);
  };

  /**
   * @function
      * @memberof module:geoflo.Utilities
   * @name assignDeep
   * @description Recursively assigns properties of source object to target object deeply.
   * @param {Object} target - The target object to which properties will be assigned.
   * @param {Object} source - The source object whose properties will be assigned to the target.
   * @param {Object} options - Optional parameters for the assignment process.
   * @param {boolean} [options.isMutatingOk=false] - Flag to allow mutating the target object.
   * @param {boolean} [options.isStrictlySafe=false] - Flag to enforce strict safety checks during assignment.
   * @returns {Object} The target object with assigned properties from the source object.
   */
  this.assignDeep = function (target, source) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref$isMutatingOk = _ref.isMutatingOk,
      isMutatingOk = _ref$isMutatingOk === void 0 ? false : _ref$isMutatingOk,
      _ref$isStrictlySafe = _ref.isStrictlySafe,
      isStrictlySafe = _ref$isStrictlySafe === void 0 ? false : _ref$isStrictlySafe;
    target = isMutatingOk ? target : this.cloneDeep(target);
    for (var _i = 0, _Object$entries = Object.entries(source); _i < _Object$entries.length; _i++) {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
        key = _Object$entries$_i[0],
        val = _Object$entries$_i[1];
      if (val !== null && _typeof(val) === "object") {
        if (target[key] === undefined) target[key] = {};
        target[key] = this.assignDeep(target[key], val, {
          isMutatingOk: true
        });
      } else {
        target[key] = val;
      }
    }
    return target;
  };

  /**
   * @function
      * @memberof module:geoflo.Utilities
   * @name compareDeep
   * @description Recursively compares two objects deeply to check if they are equal.
   * @param {Object} x - The first object to compare.
   * @param {Object} y - The second object to compare.
   * @returns {boolean} Returns true if the objects are deeply equal, false otherwise.
   */
  this.compareDeep = function () {
    var i, l, leftChain, rightChain;
    function compare2Objects(x, y) {
      var p;

      // remember that NaN === NaN returns false
      // and isNaN(undefined) returns true
      if (isNaN(x) && isNaN(y) && typeof x === 'number' && typeof y === 'number') {
        return true;
      }

      // Compare primitives and functions.     
      // Check if both arguments link to the same object.
      // Especially useful on the step where we compare prototypes
      if (x === y) {
        return true;
      }

      // Works in case when functions are created in constructor.
      // Comparing dates is a common scenario. Another built-ins?
      // We can even handle functions passed across iframes
      if (typeof x === 'function' && typeof y === 'function' || x instanceof Date && y instanceof Date || x instanceof RegExp && y instanceof RegExp || x instanceof String && y instanceof String || x instanceof Number && y instanceof Number) {
        return x.toString() === y.toString();
      }

      // At last checking prototypes as good as we can
      if (!(x instanceof Object && y instanceof Object)) {
        return false;
      }
      if (x.isPrototypeOf(y) || y.isPrototypeOf(x)) {
        return false;
      }
      if (x.constructor !== y.constructor) {
        return false;
      }
      if (x.prototype !== y.prototype) {
        return false;
      }

      // Check for infinitive linking loops
      if (leftChain.indexOf(x) > -1 || rightChain.indexOf(y) > -1) {
        return false;
      }

      // Quick checking of one object being a subset of another.
      // todo: cache the structure of arguments[0] for performance
      for (p in y) {
        if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
          return false;
        } else if (_typeof(y[p]) !== _typeof(x[p])) {
          return false;
        }
      }
      for (p in x) {
        if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
          return false;
        } else if (_typeof(y[p]) !== _typeof(x[p])) {
          return false;
        }
        switch (_typeof(x[p])) {
          case 'object':
          case 'function':
            leftChain.push(x);
            rightChain.push(y);
            if (!compare2Objects(x[p], y[p])) {
              return false;
            }
            leftChain.pop();
            rightChain.pop();
            break;
          default:
            if (x[p] !== y[p]) {
              return false;
            }
            break;
        }
      }
      return true;
    }
    if (arguments.length < 1) return true;
    for (i = 1, l = arguments.length; i < l; i++) {
      leftChain = []; //Todo: this can be cached
      rightChain = [];
      if (!compare2Objects(arguments[0], arguments[i])) return false;
    }
    return true;
  };

  /**
   * @function
      * @memberof module:geoflo.Utilities
   * @name consumableArray
   * @description Creates a consumable copy of an array or array-like object.
   * @param {Array|Array-like} arr - The input array or array-like object to be copied.
   * @returns {Array} A consumable copy of the input array or array-like object.
   */
  this.consumableArray = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    } else {
      return Array.from(arr);
    }
  };
};
function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  } else {
    return Array.from(arr);
  }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Utilities);

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".geoflo.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "@solutegrate/geoflo:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 		
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		__webpack_require__.p = "/";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 		
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk_solutegrate_geoflo"] = self["webpackChunk_solutegrate_geoflo"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be isolated against other modules in the chunk.
(() => {
/*!******************!*\
  !*** ./index.js ***!
  \******************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ geoflo)
/* harmony export */ });
/* harmony import */ var _src_Statics_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/Statics.js */ "./src/Statics.js");
/* harmony import */ var _src_Options_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/Options.js */ "./src/Options.js");
/* harmony import */ var _src_Utilities_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/Utilities.js */ "./src/Utilities.js");
/* harmony import */ var _src_Styles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/Styles.js */ "./src/Styles.js");
/* harmony import */ var _src_Layers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src/Layers.js */ "./src/Layers.js");
/* harmony import */ var _src_Features_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./src/Features.js */ "./src/Features.js");
/* harmony import */ var _src_Mesh_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./src/Mesh.js */ "./src/Mesh.js");
/* harmony import */ var _src_Events_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./src/Events.js */ "./src/Events.js");
/* harmony import */ var _src_Select_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./src/Select.js */ "./src/Select.js");
/* harmony import */ var _src_Draw_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./src/Draw.js */ "./src/Draw.js");
/* harmony import */ var _src_Locate_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./src/Locate.js */ "./src/Locate.js");
/* harmony import */ var _src_Control_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./src/Control.js */ "./src/Control.js");
/* harmony import */ var _src_Snapping_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./src/Snapping.js */ "./src/Snapping.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }














/**
 * @module geoflo
 * @name geoflo
 * @description Represents the GeoFlo object that manages all modules.
 * @returns {Object} The GeoFlo object with various methods for managing the entire app.
 */
var GeoFlo = function GeoFlo() {
  var geoflo = this;
  this.statics = _src_Statics_js__WEBPACK_IMPORTED_MODULE_0__["default"];
  this.options = _src_Options_js__WEBPACK_IMPORTED_MODULE_1__["default"];
  this.dev = this.statics.developer;
  this.id = this.statics.id;
  this.modes = [];
  this.plugins = {};
  this.gamepads = {};
  this.enabled = false;
  this.mobile = isMobile();
  var selectedFeatures = [];
  var hiddenFeatures = [];
  this.initialize = function () {
    if (this.initialized) return this;
    window[this.id] = this;
    this.initialized = true;
    return this;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name init
   * @description Initializes the map component with the provided options and a callback function when ready.
      * @param {string} accessToken - The Mapbox Access Token to be used for the map component.
   * @param {Object} [options={}] - The options object for configuring GeoFlo. This object will be assigned to geoflo.Options
   * @param {Function} onReady - The callback function to be executed when the map is ready.
   * @returns {Promise<Object>} A promise that resolves to the map object after initialization.
   */
  this.init = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(accessToken) {
      var _this = this;
      var options,
        onReady,
        onReadyReturn,
        id,
        container,
        style,
        _args = arguments;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            onReady = _args.length > 2 ? _args[2] : undefined;
            if (!this.isLoaded) {
              _context.next = 4;
              break;
            }
            return _context.abrupt("return", this);
          case 4:
            _context.next = 6;
            return validateLicense.call(this, options.license);
          case 6:
            this.license = _context.sent;
            if (!(this.license && this.license.enabled)) {
              _context.next = 10;
              break;
            }
            _context.next = 10;
            return loadPremiumModules.call(this);
          case 10:
            accessToken = accessToken || this.license.accessToken;
            delete options.license;
            if (accessToken) {
              _context.next = 14;
              break;
            }
            return _context.abrupt("return", alert('No Mapbox Access Token Provided!'));
          case 14:
            this.Utilities = new _src_Utilities_js__WEBPACK_IMPORTED_MODULE_2__["default"]();
            id = options.container || this.options.map.container;
            if (id) {
              _context.next = 18;
              break;
            }
            throw new Error('Element id is required in the DOM for the map!');
          case 18:
            _context.next = 20;
            return loadStylesheet("https://api.mapbox.com/mapbox-gl-js/v3.4.0/mapbox-gl.css");
          case 20:
            _context.next = 22;
            return loadScript("https://api.mapbox.com/mapbox-gl-js/v3.4.0/mapbox-gl.js");
          case 22:
            _context.next = 24;
            return loadScript("https://unpkg.com/@turf/turf@7/turf.min.js");
          case 24:
            _context.next = 26;
            return loadScript("https://api.tiles.mapbox.com/mapbox.js/plugins/leaflet-omnivore/v0.3.1/leaflet-omnivore.min.js");
          case 26:
            _context.next = 28;
            return loadScript("https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js");
          case 28:
            _context.next = 30;
            return loadScript("https://api.mapbox.com/search-js/v1.0.0-beta.18/core.js");
          case 30:
            this.setOptions(options);
            _context.next = 33;
            return ready(id);
          case 33:
            container = _context.sent;
            style = this.options.styles.find(function (style) {
              return style.title === _this.options.map.style;
            }).uri;
            this.isReady = container ? true : false;
            if (this.isReady) {
              _context.next = 38;
              break;
            }
            throw new Error('Element id is required in the DOM for the map!');
          case 38:
            container.classList.add(this.statics.id);
            buildMapbox.call(this);
            turf.distanceToDegrees = function distanceToDegrees(distanceInKm) {
              return distanceInKm / 111.32;
            };
            this.mapbox = new mapboxgl.Map({
              accessToken: accessToken,
              container: container,
              style: style,
              center: this.options.map.center,
              zoom: this.options.map.zoom,
              hash: true,
              projection: 'mercator',
              extent: this.options.map.extent
            });
            this.viewport = document.createElement('div');
            this.viewportHeightOffset = 110;
            this.viewportWidthOffset = 20;
            this.viewportLeft = '10px';
            this.viewportBottom = '5%';
            this.noSelect = options.noSelect || false;
            this.mapbox.on('load', function (e) {
              onLoad(geoflo, e);
            });
            _context.next = 51;
            return loaded(this);
          case 51:
            _context.next = 53;
            return this.redraw();
          case 53:
            this.setViewport();
            this.setOpacity(this.options.map.opacity);
            this.fire('sdk.ready', {
              enabled: this.enabled,
              map: this.map,
              ready: this.isLoaded
            });
            if (!(onReady && typeof onReady === 'function')) {
              _context.next = 64;
              break;
            }
            if (!(onReady.constructor.name === 'AsyncFunction')) {
              _context.next = 63;
              break;
            }
            _context.next = 60;
            return onReady.call(this, this);
          case 60:
            onReadyReturn = _context.sent;
            _context.next = 64;
            break;
          case 63:
            onReadyReturn = onReady.call(this, this);
          case 64:
            if (onReadyReturn) {
              if (!onReadyReturn.disable) {
                this.enable();
              }
            } else {
              this.enable();
            }
            return _context.abrupt("return", this);
          case 66:
          case "end":
            return _context.stop();
        }
      }, _callee, this);
    }));
    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();

  /**
   * @function
      * @memberOf module:geoflo
   * @name enable
   * @description This function enables the map interaction mode based on the provided type and options. It sets the mode to 'select' or 'draw' depending on the type parameter, initializes options, controls, modes, and triggers events.
   * @param {string} type - The type of interaction mode to enable ('select' or 'draw').
   * @param {Object} options - Additional options for the interaction mode (default: {}).
   * @returns {Object} - The current instance of the map with the enabled interaction mode.
   */
  this.enable = function (type) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (this.enabled) return this;
    this.mode = !type || type === 'select' ? 'select' : 'draw';
    this.type = type;
    this.setOptions(options);
    if (this.options.controls) {
      this.controls = [];
      this.statics.controls.forEach(function (control) {
        this.controls.push(new _src_Control_js__WEBPACK_IMPORTED_MODULE_11__["default"](control));
      }, this);
    }
    this.Select = new _src_Select_js__WEBPACK_IMPORTED_MODULE_8__["default"](this);
    this.Draw = new _src_Draw_js__WEBPACK_IMPORTED_MODULE_9__["default"](this);
    this.modes = [this.Select, this.Draw];
    this.enabled = true;
    this.setMode({
      mode: this.mode,
      type: this.type
    });
    this.fire('map.enable', {
      enabled: this.enabled,
      mode: this.mode,
      type: this.type
    });
    return this;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name disable
   * @description This function disables the map by clearing modes, setting enabled to false, resetting mode to null, resetting options to default, firing a 'map.disable' event, enabling double click zoom, removing event listeners, layers, and controls.
   * @returns {Object} Returns the current instance of the map object.
   */
  this.disable = function () {
    if (!this.enabled) return this;
    this.modes = [];
    this.enabled = false;
    this.mode = null;
    this.options = _src_Options_js__WEBPACK_IMPORTED_MODULE_1__["default"];
    this.doubleClickZoom.enable(this.map);
    this.Layers.removeEventListeners();
    this.Events.removeEventListeners();
    this.Layers.removeLayers();
    this.removeControls();
    this.fire('map.disable', {
      enabled: this.enabled,
      mode: this.mode
    });
    return this;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name redraw
   * @description Redraws the map by refreshing layers, updating event listeners, and disabling double click zoom.
   * @returns {Promise<boolean>} Returns a promise that resolves to true if the map is successfully redrawn, false otherwise.
   */
  this.redraw = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          if (this.Events) {
            _context2.next = 2;
            break;
          }
          return _context2.abrupt("return", false);
        case 2:
          _context2.next = 4;
          return this.Layers.refresh();
        case 4:
          console.log(this.Layers.getSources());
          this.Events.removeEventListeners();
          this.Events.addEventListeners();
          this.Features.updateSource();
          this.doubleClickZoom.disable(this.map);
          this.setViewport();
          this.map.style.glyphManager.urls[""] = "mapbox://fonts/".concat(this.dev, "/{fontstack}/{range}.pbf");
          this.fire('map.redraw', {
            enabled: this.enabled,
            mode: this.mode
          });
          if (!this.onReady) {
            _context2.next = 16;
            break;
          }
          _context2.next = 15;
          return this.onReady(this);
        case 15:
          delete this.onReady;
        case 16:
        case "end":
          return _context2.stop();
      }
    }, _callee2, this);
  }));

  /**
   * @function
      * @memberOf module:geoflo
   * @name refresh
   * @description Refreshes the content by redrawing it asynchronously.
   * @returns {Promise<boolean>} Returns a Promise that resolves to a boolean value.
   */
  this.refresh = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          if (!this.noRefresh) {
            _context3.next = 2;
            break;
          }
          return _context3.abrupt("return", false);
        case 2:
          _context3.next = 4;
          return this.redraw();
        case 4:
          this.fire('map.refresh', {
            enabled: this.enabled,
            mode: this.mode
          });
        case 5:
        case "end":
          return _context3.stop();
      }
    }, _callee3, this);
  }));

  /**
   * @function
      * @memberOf module:geoflo
   * @name once
   * @description Registers a callback function to be executed only once for a specific GeoFlo event type.
   * @param {string} type - The type of event to listen for.
   * @param {function} callback - The callback function to be executed when the event occurs.
   * @returns {boolean} Returns true if the callback is successfully registered to be executed once, otherwise false.
   */
  this.once = function (type, callback) {
    return this.map && type ? this.map.once(this.id + ':' + type, callback) : false;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name on
   * @description Registers a callback function to be executed for a specific GeoFlo event type.
   * @param {string} type - The type of event to listen for.
   * @param {function} callback - The callback function to be executed when the event occurs.
   * @returns {boolean} Returns true if the event listener was successfully attached, false otherwise.
   */
  this.on = function (type, callback) {
    if (!callback.name) throw new Error('Function must have a name!');
    return this.map && type ? this.map.on(this.id + ':' + type, callback) : false;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name off
   * @description Removes an event listener from the map based on the provided GeoFlo event type and callback. Callback function must have a name.
   * @param {string} type - The type of event to remove the listener from.
   * @param {function} callback - The callback function to be removed as the event listener.
   * @returns {boolean} Returns true if the event listener was successfully removed, false otherwise.
   */
  this.off = function (type, callback) {
    if (!callback.name) throw new Error('Function must have a name!');
    return this.map && type ? this.map.off(this.id + ':' + type, callback) : false;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name fire
   * @description Fires an event with the specified GeoFlo type and detail. Detail is an Object type.
   * @param {string} type - The type of the event to fire.
   * @param {any} detail - Additional details to include with the event.
   * @returns {boolean} Returns true if the event was successfully fired, false otherwise.
   */
  this.fire = function (type, detail) {
    return this.map && type ? this.map.fire(this.id + ':' + type, {
      detail: detail
    }) : false;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name setOptions
   * @description Sets the options for the object by merging the provided options with the existing ones.
   * @param {Object} options - The options to be merged with the existing options.
   * @returns {Object} The updated options object after merging.
   */
  this.setOptions = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.options = this.Utilities.assignDeep(_src_Options_js__WEBPACK_IMPORTED_MODULE_1__["default"], this.options || {}, options);
    return this.options;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name setMode
   * @description This function allows the user to set the mode of the map editor with various options.
   * @param {Object} options - The options object for setting the mode.
   * @param {string} [options.mode='select'] - The mode to set (default: select).
   * @param {string} [options.type='LineString'] - The type of the mode (default: LineString).
   * @param {Object} [options.feature] - The feature to edit in the mode.
   * @returns {Object} The current mode after setting it based on the options.
   */
  this.setMode = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (!options.mode) options.mode = this.statics.constants.modes.SELECT;
    if (!options.type) options.type = 'Polyline';
    var classesToRemove = [];
    var selectedMode = null;
    var editMode = options.mode === this.statics.constants.modes.EDIT;
    if (this.currentMode && options.mode === this.mode && options.type === this.currentMode.type) return this.currentMode;
    if (editMode) {
      if (options.feature) {
        options.mode = this.statics.constants.modes.DRAW;
        options.type = options.type || options.feature.properties.type;
        this.editing = this.Utilities.cloneDeep(options.feature);
      } else {
        //this.wantingToEdit = true;
        if (this.currentMode) this.currentMode.deactivate(options);
        return this.setMode();
      }
    }
    if (this.currentMode && this.currentMode.activated) this.currentMode.deactivate(options);
    this.container.classList.forEach(function (className) {
      if (className.indexOf("mouse-") !== -1) {
        classesToRemove.push(className);
      }
    });
    if (classesToRemove.length > 0) {
      var _map$container$classL;
      (_map$container$classL = this.container.classList).remove.apply(_map$container$classL, classesToRemove);
    }
    this.setMapClass('pointer');
    this.modes.forEach(function (m) {
      if (m.canHandle && m.canHandle(options.mode)) {
        selectedMode = m;
      }
    });
    if (selectedMode) {
      this.fire('mode.change', {
        old: this.mode,
        "new": options.mode,
        mode: selectedMode,
        type: options.type
      });
      this.currentMode = selectedMode;
      this.mode = options.mode;
      selectedMode.activate(options);
    }
    this.Snapping = new _src_Snapping_js__WEBPACK_IMPORTED_MODULE_12__["default"](this.currentMode);
    if (this.license && this.license.enabled && this.premiumModules) {
      this.Pinning = new this.premiumModules.Pinning(this.currentMode);
      this.Routing = new this.premiumModules.Routing(this.currentMode);
      this.Exploring = new this.premiumModules.Exploring(this.currentMode);
      this.Painting = new this.premiumModules.Painting(this.currentMode);
    }
    this.Layers.moveLayers();
    return this.currentMode;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name setIcon
   * @description This function determines the appropriate icon to display based on the user's following status and navigation compass icon.
      * @deprecated
   * @param {Event} event - The event for which the icon is being set.
   * @returns {void}
   */
  this.setIcon = function (event) {
    var icon = this.navigation ? this.navigation._compassIcon : false;
    var following = this.Locate && this.Locate.following;

    // Need to work on this

    if (following) {} else if (icon) {}
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name setCenterMarker
   * @description This function sets a marker at the center of the map. It allows customization of the marker icon and behavior.
   * @param {Object} options - Options object for customizing the center marker.
   * @param {boolean} [options.remove] - If true, removes the center marker.
   * @param {boolean} [options.transform] - If true, applies transformation to the center marker.
   * @param {boolean} [options.gamepad] - If true, applies gamepad settings to the center marker.
   * @param {boolean} [options.dontAdd] - If true, does not add the center marker.
   * @param {boolean} [options.noRemove] - If true, prevents the center marker from being removed.
   * @return {Object|boolean} Returns the center marker object if successfully added or updated, or false if not applicable.
   */
  this.setCenterMarker = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (!this.mobile || this.noCenterMarker) return false;
    var following = this.Locate && this.Locate.following;
    var icon = options.icon || this.statics.logo.icon;
    var el;
    if (options.remove) {
      if (this.centerMarker && !this.centerMarker.noRemove) return this.centerMarker.remove(), delete this.centerMarker;
      return false;
    }
    if (this.centerMarker) {
      this.centerMarker.setLngLat(this.map.getCenter()).addTo(this.map);
      if (options.transform || options.gamepad) this.centerMarker.setPitchAlignment('map');
      return this.centerMarker;
    } else if (options.dontAdd) {
      return false;
    }
    if (!this.centerMarkerIcon) {
      el = document.createElement('div');
      el.className = this.id + '-center-marker';
      setIcon(el, icon);
    }
    this.centerMarkerIcon = el;
    this.centerMarker = new mapboxgl.Marker(this.centerMarkerIcon);
    this.centerMarker.setLngLat(this.map.getCenter()).addTo(this.map).setOffset([0, 0]);
    this.centerMarker.noRemove = options.noRemove;
    if (following) this.centerMarker.setOffset([0, -20]);
    function setIcon(marker, icon) {
      marker.style.backgroundImage = "url(\"".concat(icon, "\")");
    }
    return this.centerMarker;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name setButtons
   * @description This function resets the active buttons and activates the Select button.
   * @return {boolean} Returns true if the Select button is successfully set, false otherwise.
   */
  this.setButtons = function () {
    return this.getButtons('select') ? this.getButtons('select').add() : false;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name setActiveButton
   * @description Sets the active button with the specified id in the controls array.
   * @param {string} id - The id of the button to set as active.
   * @returns {boolean} Returns false if the controls array is empty or undefined.
   */
  this.setActiveButton = function (id) {
    if (!this.controls || !this.controls.length) return false;
    this.controls.forEach(function (control) {
      control.setActiveButton(id.toLowerCase());
    });
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name setTheme
   * @description Sets the theme colors for the control.
   * @param {Object} colors - An object containing the theme colors.
   * @returns {void}
   */
  this.setTheme = function () {
    var colors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.Control ? this.Control.setTheme(colors) : false;
  };

  /**
   * @function
   * @name setLayers
   * @memberof module:geoflo
   * @description Sets custom layers and optionally resets features based on the provided options.
   *
   * @param {Array} layers - An array of layers to be set.
   * @param {Object} options - An object containing options for setting layers.
   * @param {boolean} options.reset - Indicates whether to reset features before setting layers.
   * @returns {Promise} A promise that resolves when the custom layers have been set.
   * 
   * @author Solutegrate
   * @copyright 2025
   */
  this.setLayers = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
    var layers,
      options,
      _args4 = arguments;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          layers = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : [];
          options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
          if (options.reset) this.Features.removeLayers(layers, options);
          _context4.next = 5;
          return this.Layers.setCustomLayers(layers, options);
        case 5:
          return _context4.abrupt("return", _context4.sent);
        case 6:
        case "end":
          return _context4.stop();
      }
    }, _callee4, this);
  }));

  /**
   * @function
      * @memberOf module:geoflo
   * @name setSelectedFeatures
   * @description This function updates the selected features on the map with the provided array of features.
   * @param {Array} features - An array of features to set as selected.
   * @returns {boolean} Returns false if the features array is empty.
   */
  this.setSelectedFeatures = function () {
    var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    if (!features.length) {
      selectedFeatures = [];
    } else {
      var _selectedFeatures;
      (_selectedFeatures = selectedFeatures).splice.apply(_selectedFeatures, [0, selectedFeatures.length].concat(_toConsumableArray(features)));
    }
    this.map.getSource(this.statics.constants.sources.SELECT).setData(turf.featureCollection(this.getSelectedFeatures()));
    this.map.getSource(this.statics.constants.sources.VERTEX).setData(turf.featureCollection(this.getSelectedFeatures()));
    this.fire('select.load', {
      features: turf.featureCollection(this.getSelectedFeatures()),
      source: this.map.getSource(this.statics.constants.sources.SELECT)
    });
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name setMeshFeatures
   * @description Updates the mesh data with the provided features and returns the updated mesh. Adds a mesh index if it does not exist.
   * @param {Array} features - An array of features to update the mesh with.
   * @returns {Object} The updated mesh after setting the features.
   */
  this.setMeshFeatures = function () {
    var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    if (!features.length) return false;
    this.updateMeshData(features, true);
    return this.Mesh.getFeatures();
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name setMapClass
   * @description Sets a specific mouse class on the map container element based on the provided name. Removes any existing classes starting with "mouse-" before adding the new class.
   * @param {string} name - The name of the class to be added (without the "mouse-" prefix).
   * @returns {boolean} Returns false if the name is empty, otherwise adds the class and returns undefined.
   */
  this.setMapClass = function (name) {
    this.container.classList.forEach(function (className) {
      if (className.indexOf("mouse-") !== -1) this.container.classList.remove(className);
    }, this);
    if (!name) return false;
    this.container.classList.add("mouse-" + name);
  };

  /**
  * @function
   * @memberof module:geoflo.Map
  * @name setViewport
  * @description This function sets the style of the viewport based on the options provided. It resizes the map, calculates the height and width of the container, adjusts the height and width of the viewport, extends the viewport style, sets padding, and returns the updated viewport element.
  * @param {Object} options - The options object containing style properties for the viewport.
  * @param {string} [options.position='absolute'] - The position property for the viewport.
  * @param {string} [options.margin='auto'] - The margin property for the viewport.
  * @param {string} [options.top=''] - The top property for the viewport.
  * @param {string} [options.left=this.viewportLeft] - The left property for the viewport.
  * @param {string} [options.bottom=this.viewportBottom] - The bottom property for the viewport.
  * @returns {Element} The updated viewport element.
  */
  this.setViewport = function (options) {
    var style = options || {
      position: 'absolute',
      margin: 'auto',
      top: '',
      left: this.viewportLeft,
      bottom: this.viewportBottom
    };
    var height = this.container.getBoundingClientRect().height;
    var width = this.container.getBoundingClientRect().width;
    style.height = "".concat(Number.parseInt(height) - this.viewportHeightOffset, "px");
    style.width = "".concat(Number.parseInt(width) - this.viewportWidthOffset, "px");
    this.Utilities.extend(this.viewport.style, style);
    this.setPadding();
    this.map.resize();
    return this.viewport;
  };

  /**
   * @function
      * @memberof module:geoflo.Map
   * @name setPadding
   * @description Calculates the padding values for the container by comparing its position with the viewport.
   * @returns {Object} The padding object containing left, right, top, and bottom padding values.
   * @params {void}
   */
  this.setPadding = function () {
    var left = this.container.getBoundingClientRect().left - this.viewport.getBoundingClientRect().left;
    var right = this.container.getBoundingClientRect().right - this.viewport.getBoundingClientRect().right;
    var top = this.container.getBoundingClientRect().top - this.viewport.getBoundingClientRect().top;
    var bottom = this.container.getBoundingClientRect().bottom - this.viewport.getBoundingClientRect().bottom;
    var noPadding = this.container.getBoundingClientRect().width < 20;
    this.padding = {
      left: noPadding ? 0 : Math.abs(left),
      right: noPadding ? 0 : Math.abs(right),
      top: noPadding ? 0 : Math.abs(top),
      bottom: noPadding ? 0 : Math.abs(bottom)
    };
    this.map.setPadding(this.padding);
    return this.padding;
  };

  /**
  * @function
   * @memberof module:geoflo.Map
  * @name setStyle
  * @description Sets the style of the map and returns the updated style.
  * @param {Object} style - The style object to be applied to the map.
  * @returns {Object} The updated style object of the map.
  */
  this.setStyle = function (style, options) {
    if (!style) {
      return false;
    }
    ;
    this.map.setStyle(style, options);
    return this.map.getStyle();
  };

  /**
  * @description Sets the extent of the map based on the provided features or a given extent. If no features are provided, it uses the rendered drawn features. If extent is specified, it sets the map extent to the extent polygon. If center is not specified and isPoint is true, it centers the map at the centroid of the extent. If center is false, it fits the map to the bounding box of the features. If center is true, it centers the map at the centroid of the bounding box.
  * @function
   * @memberof module:geoflo.Map
  * @name setExtent
  * @param {Array} features - Array of features to set the extent based on.
  * @param {Array} extent - Extent polygon to set the map extent to.
  * @param {Object} options - Additional options for setting the extent (center, isPoint).
  * @returns {Object} - The map object after setting the extent.
  */
  this.setExtent = function (features, extent) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    this.settingExtent = true;
    var noFeatures = !features || !features.length;
    var center = options.center;
    !center && options.isPoint ? center = true : false;
    this.setViewport();
    if (extent) {
      this.preventDefault = true;
      features = !this.options.map.extent ? [] : [turf.polygon(this.options.map.extent)];
    } else if (noFeatures) {
      features = this.getDrawnFeatures();
    }
    var jumpTo = {
      bearing: options.bearing || this.options.map.bearing || this.map.getBearing(),
      center: this.options.map.center || this.map.getCenter(),
      zoom: options.zoom || this.options.map.zoom || this.map.getZoom(),
      pitch: options.pitch || this.options.map.pitch || this.map.getPitch()
    };
    if (!features) return this.map.jumpTo(jumpTo);
    if (!features.length) return;
    var bbox = turf.bbox(turf.featureCollection(features));
    if (center) {
      var polygon = turf.bboxPolygon(bbox);
      var centroid = turf.centroid(polygon);
      jumpTo.center = {
        lat: centroid.geometry.coordinates[1],
        lng: centroid.geometry.coordinates[0]
      };
      jumpTo.zoom = options.zoom || this.map.getZoom();
      jumpTo.pitch = options.pitch || this.map.getPitch();
      jumpTo.bearing = options.bearing || this.map.getBearing();
      this.map.jumpTo(jumpTo);
    } else if (bbox) {
      var settings = {
        padding: this.map.getPadding(),
        linear: true
      };
      if (options.bearing) settings.bearing = options.bearing;
      if (options.pitch) settings.pitch = options.pitch;
      if (options.maxZoom) settings.maxZoom = options.maxZoom;
      this.map.fitBounds(bbox, settings);
    }
    this.fire('features.zoom', {
      features: features,
      center: this.map.getCenter(),
      bbox: bbox
    });
    this.settingExtent = false;
    return this.map;
  };

  /**
   * @memberof module:geoflo
  * @function
  * @name setOpacity
  * @description This function takes a numeric value and sets the opacity of specified layers on the map to that value.
  *
  * @param {number} value - The opacity value to set for the layers.
  */
  this.setOpacity = function (value) {
    var _this2 = this;
    var opacity = this.opacity = Number(value || 1);
    var layers = this.map.getStyle().layers;
    layers.map(function (layer) {
      if (!layer.id.includes('geoflo') || layer.type === 'background') {
        if (layer.metadata && layer.metadata.custom) return;
        if (layer.type === 'symbol') {
          _this2.map.setPaintProperty(layer.id, "icon-opacity", opacity);
          _this2.map.setPaintProperty(layer.id, "text-opacity", opacity);
        } else {
          _this2.map.setPaintProperty(layer.id, "".concat(layer.type, "-opacity"), opacity);
        }
      }
    });
  };

  /**
   * @memberof module:geoflo
   * @function
   * @name setColors
   * @description This function sets the colors for the map based on the provided object. It merges the provided colors with the existing colors and updates the theme.
   * @param {Object} colors - The colors object to set for the map.
   * @returns {Object} The updated colors object after setting the colors.
   */
  this.setColors = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
    var colors,
      _args5 = arguments;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          colors = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};
          this.options.colors = Object.assign(this.options.colors, colors);
          this.setTheme(this.options.colors);
          _context5.next = 5;
          return this.Layers.refresh();
        case 5:
          this.Features.updateSource();
          return _context5.abrupt("return", this.getColors());
        case 7:
        case "end":
          return _context5.stop();
      }
    }, _callee5, this);
  }));

  /**
   * @function
      * @memberOf module:geoflo
   * @name hasControls
   * @description This function checks if the object has controls by verifying the existence and length of the controls array.
   * @returns {boolean} Returns true if the object has controls, false otherwise.
   */
  this.hasControls = function () {
    return this.controls && this.controls.length;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name hasSelection
   * @description This function determines whether there is a selection of features.
   * @returns {boolean} Returns true if there is a selection of features, otherwise false.
   */
  this.hasSelection = function () {
    return this.getSelectedFeatures().length > 0;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name hasSingleSelection
   * @description This function checks if there is only one selected feature.
   * @returns {boolean} Returns true if there is a single selection, false otherwise.
   */
  this.hasSingleSelection = function () {
    return this.getSelectedFeatures().length === 1;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name activateSnapping
   * @description This function activates snapping to nearby feature. Snapping options can be set using geoflo.options.snapping
      * Fires a custom event 'snapping.activate' with the enabled status and the snapping object.
   * @returns {Object} The activated Snapping object.
   */
  this.activateSnapping = function () {
    if (!this.Snapping) return false;
    var button = this.getButtons('snapping');
    if (!button) return;
    button.activate();
    this.Snapping.activate();
    this.fire('snapping.activate', {
      enabled: true,
      mesh: this.Mesh,
      snapping: this.Snapping
    });
    return this.Snapping;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name activatePinning
   * @description This function activates pinning to snapped features. Allows moving the snapped feature with the current feature.
      * Fires a custom event 'pinning.activate' with the enabled status and the pinning object.
   * @returns {Object} The activated pinning object.
   */
  this.activatePinning = function () {
    if (!this.Pinning) return false;
    var button = this.getButtons('pinning');
    if (!button) return;
    button.activate();
    this.activateSnapping();
    this.Pinning.activate();
    this.fire('pinning.activate', {
      enabled: true,
      pinning: this.Pinning
    });
    return this.Pinning;
  };

  /**
      * @function
      * @memberOf module:geoflo
   * @description This function activates routing along drawn lines. The router will find the shortest path from start to end.
      * Fires a custom event 'routing.activate' with the enabled status and the routing object.
   * @name activateRouting
   * @returns {Object} The activated Routing object.
   */
  this.activateRouting = function () {
    if (!this.Routing) return false;
    var button = this.getButtons('routing');
    if (!button) return;
    button.activate();
    this.activateSnapping();
    this.deactivatePainting();
    this.Routing.activate();
    this.fire('routing.activate', {
      enabled: true,
      routing: this.Routing
    });
    return this.Routing;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name activateExploring
   * @description This function activates exploring nearby streets using the OSRM Router.
      * Fires a custom event 'exploring.activate' with the enabled status and the exploring object.
   * @returns {Object} The activated exploring object.
   */
  this.activateExploring = function () {
    if (!this.Exploring) return false;
    var button = this.getButtons('exploring');
    if (!button) return;
    button.activate();
    this.deactivatePainting();
    this.Exploring.activate();
    this.fire('exploring.activate', {
      enabled: true,
      exploring: this.Exploring
    });
    return this.Exploring;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name activatePainting
   * @description This function activates painting by free-hand drawing features.
      * Fires a custom event 'painting.activate' with the enabled status and the painting object.
   * @returns {Object} The activated Painting object.
   */
  this.activatePainting = function () {
    if (!this.Painting) return false;
    var button = this.getButtons('painting');
    if (!button) return;
    button.activate();
    this.deactivateRouting();
    this.deactivateExploring();
    this.Painting.activate(this.drawMode);
    this.fire('painting.activate', {
      enabled: true,
      painting: this.Painting
    });
    return this.Painting;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name deactivateSnapping
   * @description This function deactivates the snapping feature by performing various actions. Deletes mesh data, deactivates the snapping buttons, deactivates the Snapping object, and fires a 'snapping.deactivate' event.
   * @returns {boolean} Returns false after deactivating the snapping feature.
   */
  this.deactivateSnapping = function () {
    if (!this.Snapping) return false;
    var button = this.getButtons('snapping');
    if (!button) return;
    button.deactivate();
    this.deleteMeshData();
    this.Snapping.deactivate();
    this.fire('snapping.deactivate', {
      enable: false
    });
    return false;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name deactivatePinning
   * @description This function deactivates the pinning feature by deactivating the pinning buttons, the Pinning object, and firing a 'pinning.deactivate' event.
   * @returns {boolean} Returns false after deactivating pinning.
   */
  this.deactivatePinning = function () {
    if (!this.Pinning) return false;
    var button = this.getButtons('pinning');
    if (!button) return;
    button.deactivate();
    this.Pinning.deactivate();
    this.fire('pinning.deactivate', {
      enable: false
    });
    return false;
  };

  /**
   * @description Deactivates the routing functionality by deactivating the routing buttons and the Routing module. Triggers a custom event 'routing.deactivate' with enable set to false.
   * @function
      * @memberOf module:geoflo
   * @name deactivateRouting
   * @returns {boolean} Returns false after deactivating the routing functionality.
   */
  this.deactivateRouting = function () {
    if (!this.Routing) return false;
    var button = this.getButtons('routing');
    if (!button) return;
    button.deactivate();
    this.Routing.deactivate();
    this.fire('routing.deactivate', {
      enable: false
    });
    return false;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name deactivateExploring
   * @description This function deactivates the exploring mode by deactivating buttons, deleting mesh data, deactivating the exploring mode, and firing an event. Fires a custom event 'exploring.deactivate' with the enable status set to false.
   * @returns {boolean} Returns false after deactivating the exploring mode.
   */
  this.deactivateExploring = function () {
    if (!this.Exploring) return false;
    var button = this.getButtons('exploring');
    if (!button) return;
    button.deactivate();
    this.deleteMeshData();
    this.Exploring.deactivate();
    this.fire('exploring.deactivate', {
      enable: false
    });
    return false;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name deactivatePainting
   * @description This function deactivates the painting mode by deactivating the buttons, the painting tool, and firing an event. Fires a custom event 'painting.deactivate' with the enable status set to false.
   * @returns {boolean} Returns false.
   */
  this.deactivatePainting = function () {
    if (!this.Painting) return false;
    var button = this.getButtons('painting');
    if (!button) return;
    if (this.mobile && !this.currentMode.finished && this.currentMode.id === 'draw' && this.currentMode.type && this.currentMode.type === 'Rectangle') return;
    button.deactivate();
    this.Painting.deactivate();
    this.fire('painting.deactivate', {
      enable: false
    });
    return false;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name getMap
   * @description Retrieves the map property from the Map object.
   * @returns {Object} The map property of the Map object.
   */
  this.getMap = function () {
    return this.map;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name getModes
   * @description Retrieves the modes based on the provided mode parameter. If a mode is specified, it returns the mode that can handle the input mode. If no mode is specified, it returns all available modes.
   * @param {string} mode - The mode to be checked against available modes.
   * @returns {Array|Object} - An array of all available modes if no mode is specified, or the mode object that can handle the input mode.
   */
  this.getModes = function (mode) {
    return mode ? this.modes.find(function (m) {
      if (m.canHandle && m.canHandle(mode)) {
        return m;
      }
    }) : this.modes;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name getMode
   * @description Retrieves the current mode of the object. Either 'GeoFlo.Select' or 'GeoFlo.Draw'.
   * @return {object} The current mode of the object.
   */
  this.getMode = function () {
    return this.currentMode;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name getColors
   * @description This function retrieves the colors from the options object.
   * @returns {Array} The colors array from the options object.
   */
  this.getColors = function () {
    return this.options.colors;
  };

  /**
   * @description Retrieves the buttons associated with a specific control or all buttons from the controls.
   * @function
      * @memberOf module:geoflo
   * @name getButtons
   * @param {string} id - The ID of the button to retrieve. If not provided, retrieves all buttons.
   * @returns {object|boolean} - Returns an object containing the buttons if found, or false if controls are not available.
   */
  this.getButtons = function (id) {
    if (!this.hasControls()) return false;
    var buttons;
    this.controls.forEach(function (c) {
      var options = c.getButtonOptions();
      if (id) {
        if (!buttons && options[id]) buttons = options[id];
      } else {
        if (!buttons) buttons = {};
        Object.entries(options).forEach(function (entry) {
          var key = entry[0];
          var val = entry[1];
          buttons[key] = val;
        });
      }
    });
    return buttons;
  };

  /**
   * @function
   * @name getHotFeature
   * @memberof module:geoflo
   * @description Retrieves the hot feature being drawn or edited.
   * @returns {Object} The hot feature object.
   */
  this.getHotFeature = function () {
    return this.hotFeature;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name getDrawnFeatures
   * @description Retrieves the drawn features from the Features object.
   * @returns {Array} An array of drawn features.
   */
  this.getDrawnFeatures = function () {
    return this.Features.getFeatures();
  };

  /**
   * @function
   * @name getSnapFeatures
   * @memberof module:geoflo
   * @description Retrieves the snap features from the mesh index.
   * @returns {Array} An array of snap features.
   */
  this.getSnapFeatures = function () {
    if (!this.Mesh) return [];
    return this.Mesh.getFeatures();
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name getRenderedFeatures
   * @description Retrieves rendered features within a specified radius around a given longitude and latitude, based on a filter.
   * @param {Array<number>} lngLat - An array containing the longitude and latitude coordinates.
   * @param {number} radiusInKm - The radius in kilometers within which to search for features.
   * @param {object} filter - An optional filter object to apply when retrieving features.
   * @returns {Array<object>} An array of rendered features that match the criteria.
   */
  this.getRenderedFeatures = function (lngLat, radiusInKm, filter) {
    var features = [this.getRenderedDrawnFeatures(lngLat, radiusInKm, filter), this.getRenderedSnapFeatures(lngLat, radiusInKm, filter)].flat();
    features = features.filter(function (f) {
      return !this.Features.isFeatureHidden(this.Utilities.getFeatureId(f));
    }, this);
    return features;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name getRenderedDrawnFeatures
   * @description This function queries the map for rendered drawn features based on the provided parameters.
   * @param {Object} lngLat - The longitude and latitude coordinates.
   * @param {number} radiusInKm - The radius in kilometers for the search.
   * @param {Object} filter - Optional filter object to apply to the query.
   * @returns {Array} An array of features within the specified radius around the given coordinates.
   */
  this.getRenderedDrawnFeatures = function (lngLat, radiusInKm, filter) {
    var bbox;
    var id = this.id;
    var options = {
      layers: []
    };
    this.Layers.getLayers().forEach(function (layer) {
      if (layer.id.includes(id) && !layer.id.includes('-cold')) return;
      if (this.map.getLayer(layer.id)) options.layers.push(layer.id);
    }, this);
    if (radiusInKm) {
      var radius = turf.distanceToDegrees(radiusInKm);
      bbox = [this.map.project([lngLat.lng - radius, lngLat.lat - radius]), this.map.project([lngLat.lng + radius, lngLat.lat + radius])];
    } else {
      var point = lngLat ? this.map.project([lngLat.lng, lngLat.lat]) : null;
      bbox = point ? [[point.x - 5, point.y - 5], [point.x + 5, point.y + 5]] : null;
    }
    filter ? options.filter = filter : false;
    var features = this.map.queryRenderedFeatures(bbox, options);
    var ids = features.map(function (feature) {
      return feature.parent || feature.properties.parent || feature.id || feature.properties.id;
    });
    return features && features.length ? this.Features.getFeaturesById(ids) : [];
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name getRenderedSnapFeatures
   * @description Retrieves rendered mesh index features within a specified radius around a given point on the map.
   * @param {Object} lngLat - The longitude and latitude coordinates of the center point.
   * @param {number} radiusInKm - The radius in kilometers within which to search for features.
   * @param {Object} filter - Optional filter to apply to the query.
   * @returns {Array} An array of features that fall within the specified radius around the given point.
   */
  this.getRenderedSnapFeatures = function (lngLat, radiusInKm, filter) {
    if (!this.Mesh) return [];
    var radius = turf.distanceToDegrees(radiusInKm);
    var bbox = [this.map.project([lngLat.lng - radius, lngLat.lat - radius]), this.map.project([lngLat.lng + radius, lngLat.lat + radius])];
    var options = {
      layers: []
    };
    this.Layers.getLayers().forEach(function (layer) {
      if (!layer.id.includes('-mesh-')) return;
      options.layers.push(layer.id);
    });
    filter ? options.filter = filter : false;
    var features = this.map.queryRenderedFeatures(bbox, options);
    return features && features.length ? this.Mesh.getFeaturesFromIndex(features) : [];
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name getFeatureById
   * @description Retrieves a feature by its ID from the Features object.
   * @param {string} id - The ID of the feature to retrieve.
   * @returns {object} Returns the feature object if found, otherwise an empty object.
   */
  this.getFeatureById = function (id) {
    if (!id) return false;
    return this.Features.getFeatureById(id);
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name getFeaturesByLayer
   * @description This function queries the map for features within a specified radius around a given location from a specific source layer.
   * @param {string} source - The source layer to query features from.
   * @param {LngLat} lngLat - The longitude and latitude coordinates of the center point for the query.
   * @param {number} radiusInKm - The radius in kilometers within which to search for features.
   * @param {Object} filter - Optional filter object to apply to the query.
   * @returns {Array} An array of features that match the query criteria.
   */
  this.getFeaturesByLayer = function (source, lngLat, radiusInKm, filter) {
    var layers = [];
    var bbox;
    this.Layers.getLayers().forEach(function (layer) {
      if (!layer.id.includes(source)) return;
      layers.push(layer.id);
    });
    var options = {
      layers: layers
    };
    if (radiusInKm) {
      var radius = turf.distanceToDegrees(radiusInKm);
      bbox = [this.map.project([lngLat.lng - radius, lngLat.lat - radius]), this.map.project([lngLat.lng + radius, lngLat.lat + radius])];
    } else {
      var point = lngLat ? this.map.project([lngLat.lng, lngLat.lat]) : null;
      bbox = point ? [[point.x - 5, point.y - 5], [point.x + 5, point.y + 5]] : null;
    }
    filter ? options.filter = filter : false;
    var features = this.map.queryRenderedFeatures(bbox, options);
    var ids = features.map(function (feature) {
      return feature.parent || feature.properties.parent || feature.id || feature.properties.id;
    });
    return features && features.length ? this.Features.getFeaturesById(ids) : [];
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name getSelectedFeatures
   * @description Retrieves the selected features stored in the selectedFeatures array.
   * @returns {Array} An array containing the selected features.
   */
  this.getSelectedFeatures = function () {
    return selectedFeatures;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name getSelectedFeatureIds
   * @description Retrieves the IDs of selected features.
   * @returns {Array} An array of feature IDs.
   */
  this.getSelectedFeatureIds = function () {
    return this.getSelectedFeatures().map(function (feature) {
      return feature.parent || feature.properties.parent || feature.id || feature.properties.id;
    });
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name getSelectedFeaturesBbox
   * @description Retrieves the bounding box of the selected features.
   * @returns {Array<number>} The bounding box coordinates [minX, minY, maxX, maxY].
   */
  this.getSelectedFeaturesBbox = function () {
    if (!this.hasSelection()) return null;
    return turf.bbox(turf.featureCollection(this.getSelectedFeatures()));
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name getSelectedPropertyNames
   * @description Retrieves the unique property names of selected features excluding the ID property.
   * @returns {Array} An array of unique property names.
   */
  this.getSelectedPropertyNames = function () {
    var id = this.id;
    var names = [];
    this.getSelectedFeatures().forEach(function (feature) {
      Object.keys(feature.properties).forEach(function (propertyName) {
        if (names.indexOf(propertyName) === -1 && propertyName !== id) {
          names.push(propertyName);
        }
      });
    });
    return names;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name getSelectedPropertyValues
   * @description Retrieves the properties of selected features excluding the property with the specified ID.
   * @returns {Object} An object containing the properties of selected features.
   */
  this.getSelectedPropertyValues = function () {
    var id = this.id;
    var props = {};
    this.getSelectedFeatures().forEach(function (feature) {
      Object.assign(props, feature.properties);
    });
    if (props[id] !== undefined) {
      delete props[id];
    }
    return props;
  };

  /**
   * @description This function returns the common geometry type of the selected features. If all selected features have the same geometry type, it returns that type. If the selected features have different geometry types, it returns "illegal".
   * @function
      * @memberOf module:geoflo
   * @name getCommonGeometryType
   * @returns {string|null} The common geometry type or null if different types are present.
   */
  this.getCommonGeometryType = function () {
    var allFeaturesType = null;
    this.getSelectedFeatures().forEach(function (feature) {
      if (allFeaturesType === null) {
        allFeaturesType = feature.geometry.type;
      } else if (feature.geometry.type !== allFeaturesType) {
        allFeaturesType = "illegal";
      }
    });
    if (allFeaturesType === "illegal") {
      return null;
    } else {
      return allFeaturesType;
    }
  };

  /**
   * @function
   * @name selectFeature
   * @memberOf module:geoflo
   * @description Selects a feature by its ID and returns the selection result.
   *
   * @param {string} id - The ID of the feature to be selected.
   * @returns {boolean|Object} Returns false if the feature is not found, otherwise returns the result of the selection.
   */
  this.selectFeature = function (id) {
    var feature = this.getFeatureById(id);
    if (!feature) return false;
    var selected = this.addFeaturesToSelected([feature]);
    return selected;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name editFeature
   * @description This function allows editing a feature by providing its ID or using the currently selected feature. It triggers a 'feature.edit' event and sets the mode to 'edit'.
   * @param {string} id - The ID of the feature to edit.
   * @param {Object} options - Additional options for editing the feature.
   * @param {Object} options.feature - The feature object to edit.
   * @returns {Object} The edited feature.
   */
  this.editFeature = function (id) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var feature = options.feature || this.getFeatureById(id);
    if (!feature) {
      if (!this.hasSingleSelection()) return false;
      feature = this.getSelectedFeatures()[0];
    }
    feature = this.Utilities.clone(feature);
    delete feature.properties._selected;
    options.mode = 'edit';
    options.id = feature.id;
    options.feature = feature;
    options.type = feature.properties.type;
    this.fire('feature.edit', {
      feature: feature,
      id: feature.id
    });
    this.removeSelection();
    this.setMode(options);
    return feature;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name cancelEdit
   * @description This function cancels the current edit mode if it is in 'draw' mode and deactivates the editing feature.
   * @param {boolean} standby - Indicates whether the cancel operation is standby.
   * @param {object} feature - The feature to be deactivated. If not provided, the editing feature will be used.
   * @returns {boolean} Returns false if the current mode is not 'draw', otherwise deactivates the editing feature.
   */
  this.cancelEdit = function (standby, feature) {
    if (this.currentMode.id !== 'draw') return false;
    feature = feature || this.editing;
    return this.currentMode.deactivate({
      cancel: true,
      standby: standby,
      feature: feature
    });
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name saveEdit
   * @description Saves the edited feature using the currentModes saveEdit method.
   * @return {any} The result of the saveEdit method of the current mode.
   */
  this.saveEdit = function () {
    return this.currentMode.saveEdit();
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name addFeatures
   * @description Adds features to the map and optionally zooms to them.
   * @param {Array} features - Array of features to be added to the map.
   * @param {boolean} preventZoom - Flag to indicate whether to zoom to the added features.
      * @returns {Array} Returns empty Array if no features are provided, otherwise returns the drawn features.
   */
  this.addFeatures = function (features, preventZoom) {
    if (!features) return [];
    if (features.features) features = features.features;
    if (!Array.isArray(features)) features = [features];
    if (!features.length) return [];
    this.Features.addFeatures(features);
    !preventZoom ? this.zoomToFeatures() : false;
    return this.getDrawnFeatures();
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name addFeaturesToSelected
   * @description This function adds the provided features to the selected features list, updates the map sources, sets buttons and updates the text.
   * @param {Array} features - The features to be added to the selected features list.
      * @param {Object} options - Additional options for adding features.
      * @param {boolean} options.zoom - Flag to indicate whether to zoom to the added features.
      * @param {boolean} options.center - Flag to indicate whether to center the map on the added features.
      * @param {Object} options.text - Options for adding text to the features.
      * @param {Array} [options.text.ids="selectedFeatures"] - The IDs of the features to add text to.
      * @param {string} [options.text.field="'text'"] - The field to use for the text.
      * @param {Object} [options.text.layout] - The layout options for the text.
      * @returns {Array} Returns empty Array if no features are provided.
      * @returns {Array} The selected features list after adding the provided features.
   */
  this.addFeaturesToSelected = function (features) {
    var _this$getSelectedFeat;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (!features || !features.length) return [];
    (_this$getSelectedFeat = this.getSelectedFeatures()).push.apply(_this$getSelectedFeat, _toConsumableArray(features));
    this.setViewport();
    this.setButtons();
    this.Layers.refresh({
      select: true
    });
    this.Features.setText(features);
    this.updateFeatures(features);
    if (options.zoom) this.zoomToFeatures(features, {
      center: options.center
    });
    if (options.text) {
      this.Layers.addTextLayer({
        select: true,
        ids: options.text.ids || this.getSelectedFeatureIds(),
        field: options.text.field || 'text',
        layout: options.text.layout || {
          'text-transform': 'uppercase',
          'text-size': 10,
          'text-offset': [0, 0.5]
        }
      });
    }
    return this.getSelectedFeatures();
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name addFeaturesToMesh
   * @description Adds features to the mesh index and updates its data.
   * @param {Array} features - An array of features to be added to the mesh.
   * @returns {Array} The array of features that were added to the mesh.
   */
  this.addFeaturesToMesh = function () {
    var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    if (!features.length) return false;
    this.updateMeshData(features);
    return features;
  };

  /**
   * @function
   * @memberOf module:geoflo
   * @name addControls
   * @description This function is responsible for adding controls.
   * @params {none} No parameters needed.
   * @returns {boolean} Returns false if no controls are available.
   */
  this.addControls = function () {
    if (!this.controls || !this.controls.length) return false;
    this.controls.forEach(function (control) {
      control.enable();
    });
  };

  /**
   * @description Removes the selection of features based on the provided feature ID. If no ID is provided, all selected features are deselected.
   * @function
      * @memberOf module:geoflo
   * @name removeSelection
   * @param {string} id - The ID of the feature to be deselected.
   * @returns {number} The number of features that were deselected.
   */
  this.removeSelection = function (id) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.removePopup();
    if (!this.hasSelection()) return this.Features.setText();
    var features = this.Utilities.clone(this.getSelectedFeatures());
    this.Features.addFeatures(features, true, id);
    this.getSelectedFeatures().splice(0, features.length);
    this.map.getSource(this.statics.constants.sources.SELECT).setData(turf.featureCollection([]));
    this.map.getSource(this.statics.constants.sources.VERTEX).setData(turf.featureCollection([]));
    this.Features.setText();
    //this.updateFeatures(features);
    this.setButtons();
    if (options.extent) this.setViewport(), this.setExtent();
    if (options.removeText) this.Layers.removeTextLayer();
    return features.length;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name removeControls
   * @description This function is responsible for removing controls.
   * @params {none} No parameters needed.
   */
  this.removeControls = function () {
    if (!this.controls || !this.controls.length) return false;
    this.controls.forEach(function (control) {
      control.disable();
    });
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name removeFeatures
   * @description Removes specified features from the map. If no layers are provided, all features are removed. If the layers parameter is not an array, the function returns false.
   * @param {Array} layers - An array of layers to remove features from.
   */
  this.removeFeatures = function () {
    var _this3 = this;
    var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    if (!ids.length) return false;
    ids.forEach(function (id) {
      _this3.removeFeature(id);
    }, this);
    this.fire('features.remove', {
      ids: ids
    });
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name removeFeature
   * @description Removes a feature from the Features collection and fires an event if edit mode is not enabled. Fires a custom event 'feature.delete' with the ID and feature object.
   * @param {string} id - The ID of the feature to be removed.
   * @returns {boolean} - Returns true if the feature was successfully removed, otherwise false.
   */
  this.removeFeature = function (id) {
    if (!id) return false;
    var removed = this.Features.removeFeature(id);
    this.fire('feature.remove', {
      id: id
    });
    return removed;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name removePopup
   * @description Removes the popup element from the DOM.
   * @return {boolean} Returns true if the popup was successfully removed, false otherwise.
   */
  this.removePopup = function () {
    return this.popup && this.popup.remove ? this.popup.remove() : this.currentMode.popup && this.currentMode.popup.remove ? this.currentMode.popup.remove() : false;
  };
  this.hideFeatures = function () {
    var _this4 = this;
    var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    if (!ids.length) return false;
    var features = this.Features.getFeaturesById(ids);
    ids.forEach(function (id) {
      _this4.Features.setFeatureState(id, {
        hidden: true
      });
    }, this);
    this.fire('features.hide', {
      ids: ids,
      features: features
    });
    return features;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name updateMeshData
   * @description This function updates the mesh data on the map by adding new features to the mesh index and updating the map source with the new data. If the mesh index is not available or the reset flag is set to true, the mesh index is reset before adding new features.
   * @param {Array} features - An array of features to be added to the mesh index.
   * @param {boolean} reset - A flag indicating whether to reset the mesh index before adding new features.
   * @returns {Object} The updated feature collection that was set on the map source.
   */
  this.updateMeshData = function () {
    var _this5 = this;
    var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var reset = arguments.length > 1 ? arguments[1] : undefined;
    return function (features) {
      if (!_this5.Mesh || reset) _this5.Mesh = new _src_Mesh_js__WEBPACK_IMPORTED_MODULE_6__["default"]([]);
      _this5.Mesh.addNewFeatures(features);
      var source = _this5.statics.constants.sources.MESH;
      var features = turf.featureCollection(_this5.Mesh.getFeatures());
      _this5.map.getSource(source).setData(features);
      _this5.fire('mesh.update', {
        features: features
      });
      return features;
    }(features);
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name updateSelectedProperties
   * @description This function updates the selected properties of features based on the new properties provided while keeping specified properties.
   * @param {Object} newProperties - The new properties to update the features with.
   * @param {Array} propertiesToKeep - An array of property names to keep while updating the features.
   */
  this.updateSelectedProperties = function (newProperties, propertiesToKeep) {
    this.getSelectedFeatures().forEach(function (feature) {
      var savedId = feature.parent || feature.properties.parent || feature.id || feature.properties.id;
      var baseProperties = {};
      propertiesToKeep.forEach(function (propertyName) {
        if (feature.properties[propertyName]) baseProperties[propertyName] = feature.properties[propertyName];
      });
      feature.properties = Object.assign(baseProperties, newProperties, {
        id: savedId
      });
    });
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name updateOrientation
   * @description Updates the orientation of the user based on the provided options.
   * @param {Object} options - An object containing the options for updating the orientation.
   * @returns {string} The location of the user after updating the orientation.
   */
  this.updateOrientation = function (options) {
    if (!this.Locate) return false;
    this.Locate.update(options);
    return this.Locate.locate;
  };

  /**
  * @function
   * @memberOf module:geoflo
   * @name updateFeatures
   * @description Updates the features of a layer based on the provided features.
   * @param {Array} features - An array of features to update the layer with.
   * @returns {Array} The updated features of the layer.
   */
  this.updateFeatures = function (features) {
    return this.Features.updateFeatures(features);
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name saveFeatures
   * @description This function prepares the features of a layer for export in different formats such as KMZ, GPX, and GeoJSON. It styles the features, creates necessary metadata, and generates the export files.
   * @param {Object} layer - The layer object containing the features to be exported.
   * @returns {void}
   */
  this.saveFeatures = function (layer) {
    var id = this.id;
    var fc, folderName;
    if (!layer) {
      if (this.hasSelection()) {
        folderName = 'Selected Features';
        fc = turf.featureCollection(this.getSelectedFeatures());
      } else {
        folderName = folderName = 'All Features';
        fc = turf.featureCollection(this.getDrawnFeatures());
      }
    } else {
      if (!layer.id || !layer.name) return window.alert('Layer ID and Name are required!');
      folderName = layer.name + '-' + layer.id;
      fc = turf.featureCollection(this.Features.getFeaturesByLayer(layer));
    }
    if (!fc.features.length) return window.alert('No Features to Export!');
    var features = geoflo.Utilities.cloneDeep(fc.features);
    features = features.map(function (f) {
      f.style = {};
      f.style['stroke'] = f.properties.style && f.properties.style.primaryColor ? f.properties.style.primaryColor : this.options.colors.primaryColor;
      f.style['stroke-width'] = 3;
      f.style['fill'] = f.properties.style && f.properties.style.secondaryColor ? f.properties.style.secondaryColor : this.options.colors.secondaryColor;
      f.style['fill-opacity'] = 1;
      f.properties.id = f.id;
      f.properties.unit = f.geometry.unit;
      f.properties.units = f.geometry.units;
      delete f.properties.style;
      delete f.geometry.unit;
      delete f.geometry.units;
      return f;
    }, this);
    fc = turf.featureCollection(features);
    var d = new Date();
    var name = id + "_export - " + (d.getMonth() + 1) + "." + d.getDate() + "." + d.getFullYear() + "_" + d.getHours() + d.getMinutes();
    var extensions = ['kmz', 'gpx', 'geojson'];
    var zip = new window.JSZip();
    var description = {
      Id: this.id,
      Version: this.version,
      Features: fc.features.length
    };
    extensions.forEach(function (t) {
      var folder = zip.folder(folderName + ' ' + t.toUpperCase());
      switch (t) {
        case 'kmz':
          var table = document.createElement('table');
          var tableBody = document.createElement('tbody');
          table.appendChild(tableBody);
          Object.entries(description).forEach(function (entry) {
            var h = entry[0];
            var d = entry[1];
            var row = document.createElement('tr');
            var header = document.createElement('th');
            var data = document.createElement('td');
            header.textContent = h + ': ';
            data.textContent = d;
            row.appendChild(header);
            row.appendChild(data);
            tableBody.appendChild(row);
          });
          var kml = omnivore.toKML(fc, {
            name: 'id',
            simplestyle: true,
            description: description.Id,
            documentName: folderName,
            documentDescription: table.innerHTML
          });
          var blob = new Blob([kml], {
            type: "application/vnd.google-earth.kml+xml"
          });
          folder.file(folderName.toLowerCase() + ".kml", blob);
          break;
        case 'gpx':
          features.forEach(function (f) {
            var title = f.id;
            var feature = turf.featureCollection([f]);
            var gpx = omnivore.toGPX(feature, {
              creator: description.Id,
              featureTitle: function featureTitle(p) {
                return p.id;
              }
            });
            folder.file(folderName.toLowerCase() + '_' + title + ".gpx", gpx);
          });
          break;
        case 'geojson':
          var geojson = fc;
          var blob = new Blob([JSON.stringify(geojson)], {
            type: "application/geojson"
          });
          folder.file(folderName.toLowerCase() + ".geojson", blob);
          break;
      }
    });
    zip.generateAsync({
      type: "blob"
    }).then(function (content) {
      var blob = new Blob([content], {
        type: "application/zip;charset=utf-8"
      });
      window.geoflo.fire('features.export', {
        features: features,
        blob: blob,
        date: d,
        name: name
      });
      var tempLink = document.createElement("a");
      tempLink.setAttribute('href', URL.createObjectURL(blob));
      tempLink.setAttribute('download', name + ".zip");
      tempLink.click();
      URL.revokeObjectURL(tempLink.href);
    });
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name loadFeatures
   * @description This function creates an input element of type file, allows multiple file selection, and triggers a file selection event. It then processes the selected files by calling the Utilities.processFiles function.
   * @params {Event} event - The event object triggered by file selection.
   * @returns {void}
   */
  this.loadFeatures = function () {
    var input = document.createElement('input');
    input.type = 'file';
    input.setAttribute('multiple', 'multiple');
    input.addEventListener('change', handleSelection, false);
    input.click();
    function handleSelection(event) {
      var files = [];
      for (var x = 0; x < event.target.files.length; x++) {
        files.push(event.target.files[x]);
      }
      var _loop = function _loop() {
        var file = files[_x2];
        var name = file.name;
        var ext = name.substring(name.lastIndexOf('.') + 1, name.length).toLowerCase();
        var reader = new FileReader();
        reader.onloadend = function () {
          if (reader.readyState === FileReader.DONE) {
            try {
              processFiles(reader.result, name, ext);
            } catch (e) {
              console.log(e);
              console.error("Invalid JSON data");
            }
          }
        };
        reader.readAsText(file);
      };
      for (var _x2 = 0; _x2 < files.length; _x2++) {
        _loop();
      }
    }
    function processFiles(file, name, ext) {
      var features = [];
      if (ext === 'geojson' || ext === 'json') {
        features = JSON.parse(file);
      } else if (omnivore[ext]) {
        omnivore[ext].parse(file, null, {
          addData: function addData(feats) {
            features = feats;
          }
        });
      } else {
        return alert("File type not supported: " + ext);
      }
      if (features.features) features = features.features;
      if (!Array.isArray(features)) features = [features];
      features.forEach(function (feature) {
        feature.properties["import"] = true;
        feature.source = feature.source || feature.properties.source || geoflo.statics.constants.sources.COLD;
      });
      geoflo.fire('features.import', {
        features: features,
        file: file,
        ext: ext,
        name: name
      });
      geoflo.addFeatures(features);
    }
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name moveMapAlongLine
   * @description This function animates the movement of the map along a specified line. The camera follows the route, ensuring synchronized movement.
   * @param {Array} line - The line representing the route on the map.
   * @returns {void}
   */
  this.moveMapAlongLine = function (line) {
    if (!line) return;
    var animationDuration = 80000;
    var cameraAltitude = 4000;
    // get the overall distance of each route so we can interpolate along them
    var routeDistance = turf.lineDistance(line);
    var cameraRouteDistance = turf.lineDistance(line);
    var start;
    console.log(line, routeDistance, cameraRouteDistance);
    function frame(time) {
      if (!start) start = time;
      // phase determines how far through the animation we are
      var phase = (time - start) / animationDuration;

      // phase is normalized between 0 and 1
      // when the animation is finished, reset start to loop the animation
      if (phase > 1) {
        // wait 1.5 seconds before looping
        setTimeout(function () {
          start = 0.0;
        }, 1500);
      }

      // use the phase to get a point that is the appropriate distance along the route
      // this approach syncs the camera and route positions ensuring they move
      // at roughly equal rates even if they don't contain the same number of points
      var alongRoute = turf.along(turf.lineString(line), routeDistance * phase).geometry.coordinates;
      var alongCamera = turf.along(turf.lineString(line), cameraRouteDistance * phase).geometry.coordinates;
      var camera = geoflo.map.getFreeCameraOptions();

      // set the position and altitude of the camera
      camera.position = mapboxgl.MercatorCoordinate.fromLngLat({
        lng: alongCamera[0],
        lat: alongCamera[1]
      }, cameraAltitude);

      // tell the camera to look at a point along the route
      camera.lookAtPoint({
        lng: alongRoute[0],
        lat: alongRoute[1]
      });
      geoflo.map.setFreeCameraOptions(camera);
      window.requestAnimationFrame(frame);
    }
    window.requestAnimationFrame(frame);
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name refreshMeshData
   * @description This function refreshes the mesh data by triggering a 'snapping.refresh' event with the current mesh features.
   * @params {void} - No parameters needed for this function.
   */
  this.refreshMeshData = function () {
    if (!this.Mesh) return;
    if (this.mapMoving) return;
    //this.deleteMeshData();
    //this.addFeaturesToMesh(this.getDrawnFeatures())
    this.fire('snapping.refresh', {
      features: this.Mesh.getFeatures()
    });
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name deleteMeshData
   * @description Deletes the mesh data by updating it with an empty array and triggering a 'snapping.delete' event with the features from the mesh index.
   * @params {Array} features - The features to update the mesh data with.
   * @params {Boolean} triggerEvent - A flag to indicate whether to trigger the 'snapping.delete' event.
   */
  this.deleteMeshData = function () {
    this.updateMeshData([], true);
    this.fire('snapping.delete', {
      features: this.Mesh.getFeatures()
    });
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name deleteUserData
   * @description This function allows the user to delete selected features or all features based on confirmation prompts. It updates the map data and resets various properties.
   * @params {void} - No parameters required.
   * @returns {void} - No return value.
   */
  this.deleteUserData = function () {
    var id;
    if (this.hasSingleSelection()) {
      if (window.confirm('Delete Selected Feature?')) {
        var feature = this.getSelectedFeatures()[0];
        id = feature.parent || feature.properties.parent || feature.id || feature.properties.id;
        this.removeSelection(id);
        this.Features.removeFeature(id);
        this.Mesh ? this.Mesh.removeFeature(id) : false;
        this.fire('feature.delete', {
          features: this.getDrawnFeatures(),
          id: id,
          feature: feature
        });
      } else {
        return;
      }
    } else {
      if (window.confirm('Delete All Features?')) {
        this.Features.deleteFeatures();
        this.fire('features.delete', {
          features: this.getDrawnFeatures()
        });
      } else {
        return;
      }
    }
    this.hotFeature = null;
    this.snapFeature = null;
    this.lastClick = null;
    this.firstClick = null;
    this.drawStarted = null;
    this.map.getSource(this.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
    this.map.getSource(this.statics.constants.sources.HOT).setData(turf.featureCollection([]));
    this.map.getSource(this.statics.constants.sources.HOTTEXT).setData(turf.featureCollection([]));
    if (this.editMode) {
      this.editMode = false;
      this.setMode();
    }
  };
  this.doubleClickZoom = {
    enable: function enable(map) {
      setTimeout(function () {
        if (!map || !map.doubleClickZoom) return;
        map.doubleClickZoom.enable();
      }, 0);
    },
    disable: function disable(map) {
      setTimeout(function () {
        if (!map || !map.doubleClickZoom) return;
        map.doubleClickZoom.disable();
      }, 0);
    }
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name hideSelectedFeatures
   * @description This function hides the selected features on the map by moving them to a hidden features array and updating the map sources.
   * @params {Array} hiddenFeatures - Array to store the hidden features.
   * @params {Array} selectedFeatures - Array of selected features on the map.
   * @returns {void}
   */
  this.hideSelectedFeatures = function () {
    if (hiddenFeatures.length > 0) {
      var _this$getSelectedFeat2;
      (_this$getSelectedFeat2 = this.getSelectedFeatures()).push.apply(_this$getSelectedFeat2, hiddenFeatures);
      hiddenFeatures.splice(0, hiddenFeatures.length);
    } else if (this.hasSelection()) {
      hiddenFeatures.push.apply(hiddenFeatures, _toConsumableArray(this.getSelectedFeatures().splice(0, this.getSelectedFeatures().length)));
    }
    this.map.getSource(this.statics.constants.sources.SELECT).setData(turf.featureCollection(this.getSelectedFeatures()));
    this.map.getSource(this.statics.constants.sources.VERTEX).setData(turf.featureCollection(this.getSelectedFeatures()));
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name combineSelectedFeatures
   * @description Combines selected features based on their geometry type.
   * @params {void}
   * @returns {void}
   */
  this.combineSelectedFeatures = function () {
    if (this.mode === this.statics.constants.modes.SELECT) {
      if (this.hasSelection()) {
        var allFeaturesType = this.getCommonGeometryType();
        if (allFeaturesType === "Polygon") {
          var polygons = [];
          this.forEachSelectedFeature(function (polygon) {
            polygons.push.apply(polygons, consumableArray(polygon.geometry.coordinates));
          });
          if (polygons.length > 0) {
            this.Features.addFeatures([turf.polygon(polygons, this.getSelectedPropertyValues())]);
            this.removeSelection();
          }
        } else if (allFeaturesType === "LineString") {
          var coords = geoflo.Utilities.combineSameTypeFeatures(this.getSelectedFeatures());
          if (coords.length > 0) {
            this.Features.addFeatures([turf.lineString(coords, this.getSelectedPropertyValues())]);
            this.removeSelection();
          }
        } else {
          console.error("Only objects of the same type can be combined, " + "i.e. lines with lines and polygons with polygons");
        }
      }
    } else {
      console.error("Combine can only be executed in selection mode");
    }
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name moveSelectedFeatures
   * @description This function checks if moving is enabled and if there are selected features of LineString type. If so, it offsets the selected LineString features by the specified distance in the provided direction.
   * @param {number} direction - The direction in which to move the selected features (1 for forward, -1 for backward).
   * @returns {boolean} Returns false if moving is not enabled or there are no selected LineString features.
   */
  this.moveSelectedFeatures = function (direction) {
    if (!this.options.moving || !this.options.moving.enable) {
      return false;
    }
    var distance = this.options.moving.distance;
    if (this.mode === this.statics.constants.modes.SELECT) {
      if (this.hasSelection()) {
        var allFeaturesType = this.getCommonGeometryType();
        if (allFeaturesType === "LineString") {
          var newSelectedFeatures = [];
          this.forEachSelectedFeature(function (feature) {
            newSelectedFeatures.push(turf.lineOffset(feature, distance * direction));
          });
          this.setSelectedFeatures(newSelectedFeatures);
        }
      }
    }
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name moveFeature
   * @description This function calculates the new coordinates of a feature based on the direction and distance provided. NOT WORKING YET.
   * @param {Object} feature - The feature object to be moved.
   * @param {number} direction - The direction in which the feature should be moved (1 for forward, -1 for backward).
   * @returns {Array} An array of new coordinates for the feature after moving.
   */
  this.moveFeature = function (feature, direction) {
    if (!this.options.moving || !this.options.moving.enable) return false;
    var distance = this.options.moving.distance;
    var result = [];
    var lastDestinationPoint = null;
    var coordinates = feature.geometry.coordinates;
    for (var index = 0; index < coordinates.length; index++) {
      var moveBearing = 0;
      var startPoint = null;
      var middlePoint = coordinates[index];
      if (index === 0) {
        var endPoint = coordinates[index + 1];
        var secondBearing = turf.bearing(middlePoint, endPoint);
        moveBearing = secondBearing - 90;
        if (moveBearing < -180) {
          moveBearing += 180;
        }
      } else if (index === coordinates.length - 1) {
        startPoint = coordinates[index - 1];
        var firstBearing = turf.bearing(middlePoint, startPoint);
        moveBearing = firstBearing - 90;
        if (moveBearing < -180) {
          moveBearing += 180;
        }
      } else {
        startPoint = coordinates[index - 1];
        var _endPoint = coordinates[index + 1];
        var _firstBearing = turf.bearing(middlePoint, startPoint);
        var _secondBearing = turf.bearing(middlePoint, _endPoint);
        var angle = 0;
        if (_firstBearing < 0 && _secondBearing < 0 || _firstBearing > 0 && _secondBearing > 0) {
          angle = Math.abs(Math.abs(_firstBearing) - Math.abs(_secondBearing));
          moveBearing = _firstBearing < 0 ? _firstBearing - angle / 2 : _firstBearing + angle / 2;
        } else {
          angle = Math.abs(Math.abs(_firstBearing) + Math.abs(_secondBearing));
          moveBearing = _firstBearing < 0 ? _firstBearing - angle / 2 : (angle / 2 - _firstBearing) * -1;
        }
      }
      var destinationPoint = turf.destination(middlePoint, direction * distance, moveBearing);
      if (lastDestinationPoint && startPoint) {
        var crossingLine = turf.lineString([lastDestinationPoint.geometry.coordinates, destinationPoint.geometry.coordinates]);
        var intersectFc = turf.lineIntersect(turf.lineString([startPoint, middlePoint]), crossingLine);
        if (intersectFc.features.length > 0) {
          destinationPoint = turf.destination(middlePoint, direction * -distance, moveBearing);
        }
      }
      result.push(destinationPoint.geometry.coordinates);
      lastDestinationPoint = destinationPoint;
    }
    return result;
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name forEachSelectedFeature
   * @description Iterates over each selected feature and applies a handler function to it.
   * @param {Function} handler - The function to be applied to each selected feature.
   * @returns {Array} The array of selected features after applying the handler function.
   */
  this.forEachSelectedFeature = function (handler) {
    this.getSelectedFeatures().forEach(handler);
    return this.getSelectedFeatures();
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name zoomToFeatures
   * @description This function zooms to the provided features on the map. If no features are provided, it zooms to the selected features, cold features, or the map extent if no other features are available.
   * @param {Array} features - The features to zoom to on the map.
   * @param {Object} options - Additional options for zooming (default: {}).
   * @returns {boolean} Returns false if no features are available to zoom to.
   */
  this.zoomToFeatures = function (features) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    features = features || (this.hasSelection() ? this.getSelectedFeatures() : this.getDrawnFeatures());
    this.setExtent(features, false, options);
  };

  /**
   * @function
      * @memberOf module:geoflo
   * @name createPolygon
   * @description Creates a polygon from selected LineString features and adds it to the map.
   * @params {Array} selectedFeatures - An array of selected features to be combined into a polygon.
   * @params {Object} selectedPropertyValues - Property values of the selected features.
   * @returns {void}
   */
  this.createPolygon = function () {
    if (!this.hasSelection() || this.mode !== this.statics.constants.modes.SELECT) return false;
    var allFeaturesType = this.getCommonGeometryType();
    if (allFeaturesType !== "LineString") return false;
    var coords = geoflo.Utilities.combineSameTypeFeatures(this.getSelectedFeatures());
    if (coords.length > 0) {
      if (!geoflo.Utilities.isPointEqual(coords[0], coords[coords.length - 1])) {
        coords.push(coords[0]);
      }
      this.addFeaturesToSelected([turf.polygon([coords], this.getSelectedPropertyValues())]);
      this.removeSelection();
    }
  };
  this.initialize();
};
var geoflo = new GeoFlo();
_src_Utilities_js__WEBPACK_IMPORTED_MODULE_2__["default"].prototype.geoflo = geoflo;
_src_Features_js__WEBPACK_IMPORTED_MODULE_5__["default"].prototype.geoflo = geoflo;
_src_Layers_js__WEBPACK_IMPORTED_MODULE_4__["default"].prototype.geoflo = geoflo;
_src_Control_js__WEBPACK_IMPORTED_MODULE_11__["default"].prototype.geoflo = geoflo;
_src_Locate_js__WEBPACK_IMPORTED_MODULE_10__["default"].prototype.geoflo = geoflo;
_src_Mesh_js__WEBPACK_IMPORTED_MODULE_6__["default"].prototype.geoflo = geoflo;
_src_Draw_js__WEBPACK_IMPORTED_MODULE_9__["default"].prototype.geoflo = geoflo;
_src_Select_js__WEBPACK_IMPORTED_MODULE_8__["default"].prototype.geoflo = geoflo;
_src_Styles_js__WEBPACK_IMPORTED_MODULE_3__["default"].prototype.geoflo = geoflo;
_src_Snapping_js__WEBPACK_IMPORTED_MODULE_12__["default"].prototype.geoflo = geoflo;

function loadScript(_x3) {
  return _loadScript.apply(this, arguments);
}
function _loadScript() {
  _loadScript = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(url) {
    var response, scriptText, script;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          _context6.prev = 0;
          _context6.next = 3;
          return fetch(url);
        case 3:
          response = _context6.sent;
          if (!response.ok) {
            _context6.next = 13;
            break;
          }
          _context6.next = 7;
          return response.text();
        case 7:
          scriptText = _context6.sent;
          script = document.createElement('script');
          script.textContent = scriptText;
          document.head.appendChild(script);
          _context6.next = 14;
          break;
        case 13:
          console.error("Failed to load script from ".concat(url, ". Status: ").concat(response.status));
        case 14:
          _context6.next = 19;
          break;
        case 16:
          _context6.prev = 16;
          _context6.t0 = _context6["catch"](0);
          console.error("Error loading script: ".concat(_context6.t0.message));
        case 19:
        case "end":
          return _context6.stop();
      }
    }, _callee6, null, [[0, 16]]);
  }));
  return _loadScript.apply(this, arguments);
}
function loadStylesheet(_x4) {
  return _loadStylesheet.apply(this, arguments);
}
function _loadStylesheet() {
  _loadStylesheet = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(url) {
    var response, scriptText, script;
    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          _context7.prev = 0;
          _context7.next = 3;
          return fetch(url);
        case 3:
          response = _context7.sent;
          if (!response.ok) {
            _context7.next = 13;
            break;
          }
          _context7.next = 7;
          return response.text();
        case 7:
          scriptText = _context7.sent;
          script = document.createElement('style');
          script.textContent = scriptText;
          document.head.prepend(script);
          _context7.next = 14;
          break;
        case 13:
          console.error("Failed to load script from ".concat(url, ". Status: ").concat(response.status));
        case 14:
          _context7.next = 19;
          break;
        case 16:
          _context7.prev = 16;
          _context7.t0 = _context7["catch"](0);
          console.error("Error loading stylesheet: ".concat(_context7.t0.message));
        case 19:
        case "end":
          return _context7.stop();
      }
    }, _callee7, null, [[0, 16]]);
  }));
  return _loadStylesheet.apply(this, arguments);
}
function isMobile() {
  var e = /(iphone|ipod|ipad|android|iemobile|blackberry|bada)/.test(window.navigator.userAgent.toLowerCase());
  return e || navigator.userAgent.includes("Mac") && "ontouchend" in document;
}
function ready(_x5) {
  return _ready.apply(this, arguments);
}
function _ready() {
  _ready = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9(id) {
    var count;
    return _regeneratorRuntime().wrap(function _callee9$(_context9) {
      while (1) switch (_context9.prev = _context9.next) {
        case 0:
          count = 0;
          return _context9.abrupt("return", new Promise(/*#__PURE__*/function () {
            var _ref6 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(resolve, reject) {
              var ready;
              return _regeneratorRuntime().wrap(function _callee8$(_context8) {
                while (1) switch (_context8.prev = _context8.next) {
                  case 0:
                    ready = setInterval(function () {
                      var element = document.getElementById(id);
                      if (count === 10000) {
                        clearInterval(ready);
                        return reject(false);
                      }
                      if (!element) return count++;
                      clearInterval(ready);
                      return resolve(element);
                    }, 1);
                  case 1:
                  case "end":
                    return _context8.stop();
                }
              }, _callee8);
            }));
            return function (_x8, _x9) {
              return _ref6.apply(this, arguments);
            };
          }()));
        case 2:
        case "end":
          return _context9.stop();
      }
    }, _callee9);
  }));
  return _ready.apply(this, arguments);
}
function loaded(_x6) {
  return _loaded.apply(this, arguments);
}
function _loaded() {
  _loaded = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee11(geoflo) {
    return _regeneratorRuntime().wrap(function _callee11$(_context11) {
      while (1) switch (_context11.prev = _context11.next) {
        case 0:
          return _context11.abrupt("return", new Promise(/*#__PURE__*/function () {
            var _ref7 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10(resolve, reject) {
              var ready;
              return _regeneratorRuntime().wrap(function _callee10$(_context10) {
                while (1) switch (_context10.prev = _context10.next) {
                  case 0:
                    ready = setInterval(function () {
                      if (!geoflo.isLoaded) return false;
                      clearInterval(ready);
                      return resolve(geoflo.isLoaded);
                    }, 1);
                  case 1:
                  case "end":
                    return _context10.stop();
                }
              }, _callee10);
            }));
            return function (_x10, _x11) {
              return _ref7.apply(this, arguments);
            };
          }()));
        case 1:
        case "end":
          return _context11.stop();
      }
    }, _callee11);
  }));
  return _loaded.apply(this, arguments);
}
function onLoad(geoflo, event) {
  if (!event.target || !event.target.getContainer) throw new Error('MapboxGL map object is required!');
  geoflo.map = event.target;
  geoflo.container = geoflo.map._container;
  geoflo.viewport ? geoflo.container.insertBefore(geoflo.viewport, geoflo.container.firstChild) : false;
  geoflo.map.off('style.load', onStyleLoad);
  geoflo.map.on('style.load', onStyleLoad);
  if (geoflo.options.map.maxPitch) geoflo.map.setMaxPitch(geoflo.options.map.maxPitch);
  if (geoflo.options.map.maxZoom) geoflo.map.setMaxZoom(geoflo.options.map.maxZoom);
  if (geoflo.options.map.minPitch) geoflo.map.setMinPitch(geoflo.options.map.minPitch);
  if (geoflo.options.map.minZoom) geoflo.map.setMinZoom(geoflo.options.map.minZoom);
  if (!geoflo.mobile) {
    geoflo.fullscreen = new mapboxgl.FullscreenControl({
      container: document.querySelector('body')
    });
    geoflo.fullscreen.hide = function () {
      geoflo._controlContainer.style.display = 'none';
    }.bind(geoflo.fullscreen);
    geoflo.fullscreen.show = function () {
      geoflo._controlContainer.style.display = 'block';
    }.bind(geoflo.fullscreen);
    geoflo.map.addControl(geoflo.fullscreen, 'top-right');
  }
  geoflo.styles = new _src_Styles_js__WEBPACK_IMPORTED_MODULE_3__["default"]({
    styles: geoflo.options.styles,
    selected: geoflo.options.map.style
  });
  geoflo.Layers = new _src_Layers_js__WEBPACK_IMPORTED_MODULE_4__["default"]();
  geoflo.Features = new _src_Features_js__WEBPACK_IMPORTED_MODULE_5__["default"]();
  geoflo.locate = new _src_Locate_js__WEBPACK_IMPORTED_MODULE_10__["default"]();
  geoflo.navigation = new mapboxgl.NavigationControl({
    visualizePitch: true,
    showZoom: true,
    showCompass: true
  });
  geoflo.navigation.hide = function () {
    geoflo._container.style.display = 'none';
  }.bind(geoflo.navigation);
  geoflo.navigation.show = function () {
    geoflo._container.style.display = 'block';
  }.bind(geoflo.navigation);
  geoflo.map.addControl(geoflo.navigation, 'top-right');
  geoflo.map.addControl(geoflo.styles);
  geoflo.Events = (0,_src_Events_js__WEBPACK_IMPORTED_MODULE_7__["default"])(geoflo);
  geoflo.Events.removeEventListeners();
  geoflo.Events.addEventListeners();
  geoflo.isLoaded = true;
  return geoflo;
}
function onStyleLoad(event) {
  setTimeout(function () {
    geoflo.redraw();
  }, 500);
}
function buildMapbox() {
  var DOM = {
    create: function create(tagName, className, container) {
      var el = window.document.createElement(tagName);
      if (className !== undefined) el.className = className;
      if (container) container.appendChild(el);
      return el;
    }
  };

  // Override to add a Top-Center
  mapboxgl.Map.prototype._setupContainer = function () {
    var container = this._container;
    container.classList.add('mapboxgl-map');
    var missingCSSCanary = this._missingCSSCanary = DOM.create('div', 'mapboxgl-canary', container);
    missingCSSCanary.style.visibility = 'hidden';
    this._detectMissingCSS();
    var canvasContainer = this._canvasContainer = DOM.create('div', 'mapboxgl-canvas-container', container);
    if (this._interactive) {
      canvasContainer.classList.add('mapboxgl-interactive');
    }
    this._canvas = DOM.create('canvas', 'mapboxgl-canvas', canvasContainer);
    // $FlowFixMe[method-unbinding]
    this._canvas.addEventListener('webglcontextlost', this._contextLost, false);
    // $FlowFixMe[method-unbinding]
    this._canvas.addEventListener('webglcontextrestored', this._contextRestored, false);
    this._canvas.setAttribute('tabindex', '0');
    this._canvas.setAttribute('aria-label', this._getUIString('Map.Title'));
    this._canvas.setAttribute('role', 'region');
    this._updateContainerDimensions();
    this._resizeCanvas(this._containerWidth, this._containerHeight);
    var controlContainer = this._controlContainer = DOM.create('div', 'mapboxgl-control-container', container);
    var positions = this._controlPositions = {};
    ['top-left', 'top-right', 'top-center', 'bottom-left', 'bottom-right'].forEach(function (positionName) {
      positions[positionName] = DOM.create('div', "mapboxgl-ctrl-".concat(positionName), controlContainer);
    });

    // $FlowFixMe[method-unbinding]
    this._container.addEventListener('scroll', this._onMapScroll, false);
  };
}
function loadPremiumModules() {
  return _loadPremiumModules.apply(this, arguments);
}
function _loadPremiumModules() {
  _loadPremiumModules = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
    var _yield$Promise$all, _yield$Promise$all2, Pinning, Routing, Exploring, Painting, Gaming;
    return _regeneratorRuntime().wrap(function _callee12$(_context12) {
      while (1) switch (_context12.prev = _context12.next) {
        case 0:
          if (!(!this.license || !this.license.name)) {
            _context12.next = 2;
            break;
          }
          return _context12.abrupt("return", false);
        case 2:
          _context12.next = 4;
          return Promise.all([__webpack_require__.e(/*! import() | pinning */ "pinning").then(__webpack_require__.bind(__webpack_require__, /*! ./src/Pinning.js */ "./src/Pinning.js")), __webpack_require__.e(/*! import() | routing */ "routing").then(__webpack_require__.bind(__webpack_require__, /*! ./src/Routing.js */ "./src/Routing.js")), __webpack_require__.e(/*! import() | exploring */ "exploring").then(__webpack_require__.bind(__webpack_require__, /*! ./src/Exploring.js */ "./src/Exploring.js")), __webpack_require__.e(/*! import() | painting */ "painting").then(__webpack_require__.bind(__webpack_require__, /*! ./src/Painting.js */ "./src/Painting.js")), __webpack_require__.e(/*! import() | gaming */ "gaming").then(__webpack_require__.bind(__webpack_require__, /*! ./src/Gaming.js */ "./src/Gaming.js"))]);
        case 4:
          _yield$Promise$all = _context12.sent;
          _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 5);
          Pinning = _yield$Promise$all2[0];
          Routing = _yield$Promise$all2[1];
          Exploring = _yield$Promise$all2[2];
          Painting = _yield$Promise$all2[3];
          Gaming = _yield$Promise$all2[4];
          geoflo.premiumModules = {
            Pinning: Pinning["default"],
            Routing: Routing["default"],
            Exploring: Exploring["default"],
            Painting: Painting["default"],
            Gaming: Gaming["default"]
          };
          geoflo.premiumModules.Pinning.prototype.geoflo = geoflo;
          geoflo.premiumModules.Routing.prototype.geoflo = geoflo;
          geoflo.premiumModules.Exploring.prototype.geoflo = geoflo;
          geoflo.premiumModules.Painting.prototype.geoflo = geoflo;
          geoflo.premiumModules.Gaming.prototype.geoflo = geoflo;
          console.log("✅ Premium modules loaded successfully.");
        case 18:
        case "end":
          return _context12.stop();
      }
    }, _callee12, this);
  }));
  return _loadPremiumModules.apply(this, arguments);
}
function validateLicense(_x7) {
  return _validateLicense.apply(this, arguments);
}
function _validateLicense() {
  _validateLicense = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee13(key) {
    var license;
    return _regeneratorRuntime().wrap(function _callee13$(_context13) {
      while (1) switch (_context13.prev = _context13.next) {
        case 0:
          license = {
            enabled: true,
            name: this.statics.id
          };
          return _context13.abrupt("return", license);
        case 2:
        case "end":
          return _context13.stop();
      }
    }, _callee13, this);
  }));
  return _validateLicense.apply(this, arguments);
}
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,