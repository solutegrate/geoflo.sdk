/*!
 * /*!
 *  * GeoFlo SDK
 *  * Version 1.1.7
 *  * Generated on: 2025-02-07T01:35:26.289Z
 *  * /
 */
"use strict";
(self["webpackChunk_solutegrate_geoflo"] = self["webpackChunk_solutegrate_geoflo"] || []).push([["exploring"],{

/***/ "./src/Exploring.js":
/*!**************************!*\
  !*** ./src/Exploring.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * @mixin
 * @memberof module:geoflo
 * @name Exploring
 * @description This mixin provides the exploring functionality for the GeoFlo application. It allows users to explore features on the map by creating a buffer around the feature and snapping to nearby features.
 * @param {Object} mode - The mode object containing the type of mode.
 * @returns {Object} The Exploring object.
 */
var Exploring = function Exploring(mode) {
  var geoflo = this.geoflo;
  this.type = mode.type;

  /**
      * Activates the exploring functionality by enabling the 'exploring' option.
      * @function
      * @name activate
      * @memberof module:geoflo.Exploring
      * @description Activates by setting the 'enabled' property to true and enabling the 'exploring' option.
      * @returns {void}
      */
  this.activate = function () {
    this.enabled = true;
    geoflo.options['exploring'].enable = true;
  };

  /**
   * @function
      * @memberof module:geoflo.Exploring
   * @name deactivate
   * @description This function sets the 'enabled' and 'currentMatch' properties to false, and disables the 'exploring' option in the context.
   */
  this.deactivate = function () {
    this.enabled = false;
    this.currentMatch = false;
    geoflo.options['exploring'].enable = false;
  };

  /**
   * @function
      * @memberof module:geoflo.Exploring
   * @name setFeatures
   * @description This function sets features on the map based on the provided coordinates and options. It calculates the buffer based on the map zoom level and retrieves features within the buffer area. If routing is enabled, it calculates the route between two points.
   * @param {Array<number>} coords - The coordinates to set features around.
   * @param {Object} [options={}] - Additional options for setting features.
   * @returns {boolean} Returns false if the function is not executed successfully.
   */
  this.setFeatures = function (coords) {
    var _this = this;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return function (coords) {
      if (geoflo.mapMoving || !_this.enabled || geoflo.currentMode.id !== 'draw') return false;
      if (!geoflo.Routing || !geoflo.Routing.enabled) {
        if (geoflo.hotFeature) geoflo.hotFeature.geometry.coordinates.pop();
        var fromPoint = geoflo.currentMode.firstClick || !geoflo.hotFeature ? geoflo.firstClick.coords : geoflo.hotFeature.geometry.coordinates[geoflo.hotFeature.geometry.coordinates.length - 1];
        var coords = [fromPoint, coords];
        if (geoflo.Utilities.isPointEqual(coords[0], coords[1])) return false;
        return _this.getRoute(coords, options);
      }
      if (geoflo.map.getZoom() < geoflo.options.exploring.minZoom) return alert("Zoom must be lower than ".concat(geoflo.options.exploring.minZoom));
      var buffer = options.buffer || geoflo.options.exploring.buffer * Math.pow(2, Math.max(1, 19 - geoflo.map.getZoom())) / 100;
      var polygon = turf.bboxPolygon([geoflo.map.getBounds().getWest(), geoflo.map.getBounds().getSouth(), geoflo.map.getBounds().getEast(), geoflo.map.getBounds().getNorth()]);
      if (coords) polygon = turf.polygon(turf.buffer(turf.point(coords), buffer).geometry.coordinates);
      geoflo.map.getSource(geoflo.statics.constants.sources['SNAP']).setData(turf.featureCollection([]));
      geoflo.map.getSource(geoflo.statics.constants.sources['ROUTE']).setData(turf.featureCollection([]));
      geoflo.map.getSource(geoflo.statics.constants.sources['VERTEX']).setData(turf.featureCollection([polygon]));
      _this.getFeatures(turf.bbox(polygon)).then(function (features) {
        setFeatures(features, options);
      });
    }(coords);
  };

  /**
   * @function
      * @memberof module:geoflo.Exploring
   * @name setFeature
   * @description This function creates a line feature using the given coordinates and updates the current match based on the options. It also triggers an event and updates the source data on the map.
   * @param {Array} coords - The coordinates to create the line feature. Default is an empty array.
   * @param {Object} options - Additional options for setting the feature, such as the starting point. Default is an empty object.
   * @returns {Object} The updated feature based on the provided coordinates and options.
   */
  this.setFeature = function () {
    var coords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (!geoflo.hotFeature) return false;
    if (!coords.length) return geoflo.hotFeature;
    var feature = turf.lineString(coords);
    feature.geometry.coordinates[0] = options.start || feature.geometry.coordinates[0];
    if (this.currentMatch) feature = turf.lineString(geoflo.Utilities.combineSameTypeFeatures([this.currentMatch, feature]));
    this.currentMatch = feature;
    geoflo.map.getSource(geoflo.statics.constants.sources.SNAP).setData(turf.featureCollection([]));
    geoflo.fire('exploring.match', {
      route: this.currentMatch
    });
    return mode.updateHotSource(this.currentMatch);
  };

  /**
   * @function
      * @memberof module:geoflo.Exploring
   * @name getFeatures
   * @description Retrieves features based on the provided bounds using Overpass API.
   * @param {Array} bounds - An array containing the bounding box coordinates [minLon, minLat, maxLon, maxLat].
   * @returns {Promise<Array>} An array of GeoJSON features within the specified bounds.
   */
  this.getFeatures = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(bounds) {
      var tag, query, data, response, geojson;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (!(!bounds || !bounds.length || bounds.length != 4)) {
              _context.next = 2;
              break;
            }
            return _context.abrupt("return", false);
          case 2:
            tag = "way[\"highway\"](".concat(bounds[1], " , ").concat(bounds[0], " , ").concat(bounds[3], " , ").concat(bounds[2], ");");
            if (geoflo.map.getZoom() < 12) {
              tag = "way[\"highway\"=\"motorway\"](".concat(bounds[1], " , ").concat(bounds[0], " , ").concat(bounds[3], " , ").concat(bounds[2], ");");
              /* way["highway"="primary"](${bounds[1]} , ${bounds[0]} , ${bounds[3]} , ${bounds[2]});
              way["highway"="secondary"](${bounds[1]} , ${bounds[0]} , ${bounds[3]} , ${bounds[2]});` */
            }
            geoflo.overpassDownloading = true;
            query = '[out:json][timeout:25];(' + tag + ');out body;>;out skel qt;';
            _context.next = 8;
            return fetch("//overpass-api.de/api/interpreter?data=" + query, {
              method: 'GET'
            });
          case 8:
            data = _context.sent;
            _context.next = 11;
            return data.json();
          case 11:
            response = _context.sent;
            geojson = convertFromOverpassToGeojson(response);
            return _context.abrupt("return", geojson && geojson.features ? geojson.features : []);
          case 14:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();

  /**
   * @function
      * @memberof module:geoflo.Exploring
   * @name getMatch
   * @description This function takes an array of coordinates and optional options to fetch a matched route from the OSRM API.
   * @param {Array} coords - An array of coordinates to match the route against.
   * @param {Object} options - Optional parameters for customization.
   * @param {Object} options.feature - Optional feature to match against.
   * @param {Number|Function} options.radius - Optional radius for matching or a function to calculate it.
   * @param {String} options.profile - Optional profile for routing (default: 'driving').
   * @param {Boolean} options.set - Optional flag to set the feature if matching is successful.
   * @returns {Promise<Array|Boolean>} The matched route response object or false if no coordinates are provided or matching fails.
   */
  this.getMatch = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    var coords,
      options,
      tolerance,
      feature,
      coordinates,
      radiuses,
      query,
      match,
      response,
      _args2 = arguments;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          coords = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : [];
          options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
          if (coords.length) {
            _context2.next = 4;
            break;
          }
          return _context2.abrupt("return", false);
        case 4:
          tolerance = geoflo.options.exploring.tolerance;
          feature = options.feature || turf.cleanCoords(turf.lineString(coords));
          feature = turf.simplify(feature, {
            mutate: true,
            tolerance: typeof tolerance === 'function' ? tolerance(geoflo.map) : tolerance,
            highQuality: true
          });
          coordinates = feature.geometry.coordinates;
          if (!(coordinates.length < 2)) {
            _context2.next = 10;
            break;
          }
          return _context2.abrupt("return", false);
        case 10:
          geoflo.overpassDownloading = true;
          options.radius = options.radius || 50;
          options.profile = options.profile || 'driving';
          coords = coordinates.join(';');
          radiuses = coordinates.map(function () {
            return options.radius;
          }).join(';');
          query = 'https://router.project-osrm.org/match/v1/' + options.profile + '/' + coords + '?overview=simplified' + '&radiuses=' + radiuses + '&generate_hints=false' + '&skip_waypoints=true' + '&gaps=ignore' + '&annotations=nodes' + '&tidy=true' + '&geometries=geojson';
          _context2.next = 18;
          return fetch(query, {
            method: 'GET'
          });
        case 18:
          match = _context2.sent;
          _context2.next = 21;
          return match.json();
        case 21:
          response = _context2.sent;
          geoflo.overpassDownloading = false;
          if (response.code !== 'Ok') alert("".concat(response.code, " - ").concat(response.message, "."));
          return _context2.abrupt("return", !options.set ? response : !response.matchings || !response.matchings.length ? feature : this.setFeature(response.matchings[0].geometry.coordinates, options));
        case 25:
        case "end":
          return _context2.stop();
      }
    }, _callee2, this);
  }));

  /**
   * @function
      * @memberof module:geoflo.Exploring
   * @name getRoute
   * @description Retrieves a route based on the provided coordinates using the OSRM routing service.
   * @param {Array} coords - Array of coordinates representing the route.
   * @param {Object} options - Additional options for the route calculation.
   * @param {Object} options.feature - Feature object to use for the route calculation.
   * @param {String} options.profile - Profile type for the route calculation (default: 'driving').
   * @param {Boolean} options.set - Flag to indicate whether to set the route as a feature.
   * @returns {Promise<Array|Boolean>} The route response object or false if no coordinates are provided or the route calculation fails.
   */
  this.getRoute = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
    var coords,
      options,
      feature,
      coordinates,
      query,
      match,
      response,
      _args3 = arguments;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          coords = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : [];
          options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};
          feature = options.feature ? options.feature : !coords.length ? false : turf.cleanCoords(turf.lineString(coords));
          if (feature) {
            _context3.next = 5;
            break;
          }
          return _context3.abrupt("return", false);
        case 5:
          coordinates = feature.geometry.coordinates;
          if (!(coordinates.length < 2)) {
            _context3.next = 8;
            break;
          }
          return _context3.abrupt("return", false);
        case 8:
          geoflo.overpassDownloading = true;
          options.profile = options.profile || 'driving';
          coords = coordinates.join(';');
          query = 'https://router.project-osrm.org/route/v1/' + options.profile + '/' + coords + '?overview=simplified' + '&continue_straight=true' + '&annotations=nodes' + '&geometries=geojson';
          _context3.next = 14;
          return fetch(query, {
            method: 'GET'
          });
        case 14:
          match = _context3.sent;
          _context3.next = 17;
          return match.json();
        case 17:
          response = _context3.sent;
          geoflo.overpassDownloading = false;
          if (response.code !== 'Ok') alert("".concat(response.code, " - ").concat(response.message, "."));
          return _context3.abrupt("return", !options.set ? response : !response.routes || !response.routes.length ? feature : this.setFeature(response.routes[0].geometry.coordinates, options));
        case 21:
        case "end":
          return _context3.stop();
      }
    }, _callee3, this);
  }));
  if (geoflo.options['exploring'].enable) this.activate();
  function convertFromOverpassToGeojson(op) {
    var elementsById = {};
    op.elements.forEach(function (element) {
      var key = "".concat(element.type, "-").concat(element.id);
      elementsById[key] = element;
    });
    var wayToPoints = function wayToPoints(way) {
      var line = [];
      way.nodes.forEach(function (nodeId) {
        var key = "node-".concat(nodeId);
        var nodeElement = elementsById[key];
        if (nodeElement) {
          line.push([nodeElement.lon, nodeElement.lat]);
        } else {
          console.error("Node ", key, " missing");
        }
      });
      return line;
    };
    var lineStrings = [];
    op.elements.forEach(function (element) {
      if (element.type === "way") {
        var line = wayToPoints(element);
        if (line.length > 1) {
          lineStrings.push(turf.lineString(line, element.tags));
        }
      } else if (element.type === "relation") {
        element.members.forEach(function (member) {
          var memberType = member.type;
          if (memberType === "way") {
            var key = "way-".concat(member.ref);
            var way = elementsById[key];
            var _line = wayToPoints(way);
            if (_line.length > 1) {
              lineStrings.push(turf.lineString(_line, element.tags));
            }
          }
        });
      }
    });
    return geoflo.turf.featureCollection(lineStrings);
  }
  function setFeatures() {
    var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    geoflo.overpassDownloading = false;
    if (geoflo.mapMoving || !geoflo.Exploring.enabled || geoflo.currentMode.id !== 'draw') return geoflo.updateMeshData([], true);
    geoflo.map.getSource(geoflo.statics.constants.sources.VERTEX).setData(turf.featureCollection([]));
    if (geoflo.Snapping) geoflo.Snapping.addFeature(geoflo.snapFeature);
    geoflo.setMeshFeatures(features);
    geoflo.currentMode.updateHotSource();
    geoflo.fire('overpass.add', {
      features: features
    });
    if (!geoflo.currentMode.firstClick) return features;
    var points = turf.explode(turf.featureCollection(features));
    var closestPoint = turf.nearestPoint(turf.point(geoflo.currentMode.firstClick.coords), points);
    geoflo.lastClick = {
      coords: closestPoint.geometry.coordinates
    };
    return features;
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Exploring);

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,